
Seeed-LoRa-E5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001b628  08000138  08000138  00001138  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ee8  0801b760  0801b760  0001c760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .USER_embedded_Keys 000000c0  0801c648  0801c648  0001d648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0801c708  0801c708  0001e158  2**0
                  CONTENTS
  5 .ARM          00000008  0801c708  0801c708  0001d708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0801c710  0801c710  0001e158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0801c710  0801c710  0001d710  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0801c714  0801c714  0001d714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000158  20000000  0801c718  0001e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00002000  20000158  0801c870  0001e158  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002158  0801c870  0001e158  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  0001e158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003e0cc  00000000  00000000  0001e182  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00009fb6  00000000  00000000  0005c24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000031b8  00000000  00000000  00066208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000025ca  00000000  00000000  000693c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000279ac  00000000  00000000  0006b98a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003d7b7  00000000  00000000  00093336  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9ca2  00000000  00000000  000d0aed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0019a78f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000cc1c  00000000  00000000  0019a7d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000072  00000000  00000000  001a73f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	@ (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	@ (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000158 	.word	0x20000158
 8000154:	00000000 	.word	0x00000000
 8000158:	0801b748 	.word	0x0801b748

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	@ (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	@ (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	@ (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	2000015c 	.word	0x2000015c
 8000174:	0801b748 	.word	0x0801b748

08000178 <strlen>:
 8000178:	4603      	mov	r3, r0
 800017a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800017e:	2a00      	cmp	r2, #0
 8000180:	d1fb      	bne.n	800017a <strlen+0x2>
 8000182:	1a18      	subs	r0, r3, r0
 8000184:	3801      	subs	r0, #1
 8000186:	4770      	bx	lr

08000188 <__aeabi_drsub>:
 8000188:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800018c:	e002      	b.n	8000194 <__adddf3>
 800018e:	bf00      	nop

08000190 <__aeabi_dsub>:
 8000190:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000194 <__adddf3>:
 8000194:	b530      	push	{r4, r5, lr}
 8000196:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800019e:	ea94 0f05 	teq	r4, r5
 80001a2:	bf08      	it	eq
 80001a4:	ea90 0f02 	teqeq	r0, r2
 80001a8:	bf1f      	itttt	ne
 80001aa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ae:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001b6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001ba:	f000 80e2 	beq.w	8000382 <__adddf3+0x1ee>
 80001be:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001c6:	bfb8      	it	lt
 80001c8:	426d      	neglt	r5, r5
 80001ca:	dd0c      	ble.n	80001e6 <__adddf3+0x52>
 80001cc:	442c      	add	r4, r5
 80001ce:	ea80 0202 	eor.w	r2, r0, r2
 80001d2:	ea81 0303 	eor.w	r3, r1, r3
 80001d6:	ea82 0000 	eor.w	r0, r2, r0
 80001da:	ea83 0101 	eor.w	r1, r3, r1
 80001de:	ea80 0202 	eor.w	r2, r0, r2
 80001e2:	ea81 0303 	eor.w	r3, r1, r3
 80001e6:	2d36      	cmp	r5, #54	@ 0x36
 80001e8:	bf88      	it	hi
 80001ea:	bd30      	pophi	{r4, r5, pc}
 80001ec:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001f0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f4:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001f8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x70>
 80001fe:	4240      	negs	r0, r0
 8000200:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000204:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000208:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800020c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000210:	d002      	beq.n	8000218 <__adddf3+0x84>
 8000212:	4252      	negs	r2, r2
 8000214:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000218:	ea94 0f05 	teq	r4, r5
 800021c:	f000 80a7 	beq.w	800036e <__adddf3+0x1da>
 8000220:	f1a4 0401 	sub.w	r4, r4, #1
 8000224:	f1d5 0e20 	rsbs	lr, r5, #32
 8000228:	db0d      	blt.n	8000246 <__adddf3+0xb2>
 800022a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800022e:	fa22 f205 	lsr.w	r2, r2, r5
 8000232:	1880      	adds	r0, r0, r2
 8000234:	f141 0100 	adc.w	r1, r1, #0
 8000238:	fa03 f20e 	lsl.w	r2, r3, lr
 800023c:	1880      	adds	r0, r0, r2
 800023e:	fa43 f305 	asr.w	r3, r3, r5
 8000242:	4159      	adcs	r1, r3
 8000244:	e00e      	b.n	8000264 <__adddf3+0xd0>
 8000246:	f1a5 0520 	sub.w	r5, r5, #32
 800024a:	f10e 0e20 	add.w	lr, lr, #32
 800024e:	2a01      	cmp	r2, #1
 8000250:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000254:	bf28      	it	cs
 8000256:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025a:	fa43 f305 	asr.w	r3, r3, r5
 800025e:	18c0      	adds	r0, r0, r3
 8000260:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000264:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000268:	d507      	bpl.n	800027a <__adddf3+0xe6>
 800026a:	f04f 0e00 	mov.w	lr, #0
 800026e:	f1dc 0c00 	rsbs	ip, ip, #0
 8000272:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000276:	eb6e 0101 	sbc.w	r1, lr, r1
 800027a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800027e:	d31b      	bcc.n	80002b8 <__adddf3+0x124>
 8000280:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000284:	d30c      	bcc.n	80002a0 <__adddf3+0x10c>
 8000286:	0849      	lsrs	r1, r1, #1
 8000288:	ea5f 0030 	movs.w	r0, r0, rrx
 800028c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000290:	f104 0401 	add.w	r4, r4, #1
 8000294:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000298:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800029c:	f080 809a 	bcs.w	80003d4 <__adddf3+0x240>
 80002a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002a4:	bf08      	it	eq
 80002a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002aa:	f150 0000 	adcs.w	r0, r0, #0
 80002ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b2:	ea41 0105 	orr.w	r1, r1, r5
 80002b6:	bd30      	pop	{r4, r5, pc}
 80002b8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002bc:	4140      	adcs	r0, r0
 80002be:	eb41 0101 	adc.w	r1, r1, r1
 80002c2:	3c01      	subs	r4, #1
 80002c4:	bf28      	it	cs
 80002c6:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002ca:	d2e9      	bcs.n	80002a0 <__adddf3+0x10c>
 80002cc:	f091 0f00 	teq	r1, #0
 80002d0:	bf04      	itt	eq
 80002d2:	4601      	moveq	r1, r0
 80002d4:	2000      	moveq	r0, #0
 80002d6:	fab1 f381 	clz	r3, r1
 80002da:	bf08      	it	eq
 80002dc:	3320      	addeq	r3, #32
 80002de:	f1a3 030b 	sub.w	r3, r3, #11
 80002e2:	f1b3 0220 	subs.w	r2, r3, #32
 80002e6:	da0c      	bge.n	8000302 <__adddf3+0x16e>
 80002e8:	320c      	adds	r2, #12
 80002ea:	dd08      	ble.n	80002fe <__adddf3+0x16a>
 80002ec:	f102 0c14 	add.w	ip, r2, #20
 80002f0:	f1c2 020c 	rsb	r2, r2, #12
 80002f4:	fa01 f00c 	lsl.w	r0, r1, ip
 80002f8:	fa21 f102 	lsr.w	r1, r1, r2
 80002fc:	e00c      	b.n	8000318 <__adddf3+0x184>
 80002fe:	f102 0214 	add.w	r2, r2, #20
 8000302:	bfd8      	it	le
 8000304:	f1c2 0c20 	rsble	ip, r2, #32
 8000308:	fa01 f102 	lsl.w	r1, r1, r2
 800030c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000310:	bfdc      	itt	le
 8000312:	ea41 010c 	orrle.w	r1, r1, ip
 8000316:	4090      	lslle	r0, r2
 8000318:	1ae4      	subs	r4, r4, r3
 800031a:	bfa2      	ittt	ge
 800031c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000320:	4329      	orrge	r1, r5
 8000322:	bd30      	popge	{r4, r5, pc}
 8000324:	ea6f 0404 	mvn.w	r4, r4
 8000328:	3c1f      	subs	r4, #31
 800032a:	da1c      	bge.n	8000366 <__adddf3+0x1d2>
 800032c:	340c      	adds	r4, #12
 800032e:	dc0e      	bgt.n	800034e <__adddf3+0x1ba>
 8000330:	f104 0414 	add.w	r4, r4, #20
 8000334:	f1c4 0220 	rsb	r2, r4, #32
 8000338:	fa20 f004 	lsr.w	r0, r0, r4
 800033c:	fa01 f302 	lsl.w	r3, r1, r2
 8000340:	ea40 0003 	orr.w	r0, r0, r3
 8000344:	fa21 f304 	lsr.w	r3, r1, r4
 8000348:	ea45 0103 	orr.w	r1, r5, r3
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	f1c4 040c 	rsb	r4, r4, #12
 8000352:	f1c4 0220 	rsb	r2, r4, #32
 8000356:	fa20 f002 	lsr.w	r0, r0, r2
 800035a:	fa01 f304 	lsl.w	r3, r1, r4
 800035e:	ea40 0003 	orr.w	r0, r0, r3
 8000362:	4629      	mov	r1, r5
 8000364:	bd30      	pop	{r4, r5, pc}
 8000366:	fa21 f004 	lsr.w	r0, r1, r4
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	f094 0f00 	teq	r4, #0
 8000372:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000376:	bf06      	itte	eq
 8000378:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800037c:	3401      	addeq	r4, #1
 800037e:	3d01      	subne	r5, #1
 8000380:	e74e      	b.n	8000220 <__adddf3+0x8c>
 8000382:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000386:	bf18      	it	ne
 8000388:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800038c:	d029      	beq.n	80003e2 <__adddf3+0x24e>
 800038e:	ea94 0f05 	teq	r4, r5
 8000392:	bf08      	it	eq
 8000394:	ea90 0f02 	teqeq	r0, r2
 8000398:	d005      	beq.n	80003a6 <__adddf3+0x212>
 800039a:	ea54 0c00 	orrs.w	ip, r4, r0
 800039e:	bf04      	itt	eq
 80003a0:	4619      	moveq	r1, r3
 80003a2:	4610      	moveq	r0, r2
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea91 0f03 	teq	r1, r3
 80003aa:	bf1e      	ittt	ne
 80003ac:	2100      	movne	r1, #0
 80003ae:	2000      	movne	r0, #0
 80003b0:	bd30      	popne	{r4, r5, pc}
 80003b2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003b6:	d105      	bne.n	80003c4 <__adddf3+0x230>
 80003b8:	0040      	lsls	r0, r0, #1
 80003ba:	4149      	adcs	r1, r1
 80003bc:	bf28      	it	cs
 80003be:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003c2:	bd30      	pop	{r4, r5, pc}
 80003c4:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003c8:	bf3c      	itt	cc
 80003ca:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ce:	bd30      	popcc	{r4, r5, pc}
 80003d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d4:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003dc:	f04f 0000 	mov.w	r0, #0
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003e6:	bf1a      	itte	ne
 80003e8:	4619      	movne	r1, r3
 80003ea:	4610      	movne	r0, r2
 80003ec:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f0:	bf1c      	itt	ne
 80003f2:	460b      	movne	r3, r1
 80003f4:	4602      	movne	r2, r0
 80003f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fa:	bf06      	itte	eq
 80003fc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000400:	ea91 0f03 	teqeq	r1, r3
 8000404:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	bf00      	nop

0800040c <__aeabi_ui2d>:
 800040c:	f090 0f00 	teq	r0, #0
 8000410:	bf04      	itt	eq
 8000412:	2100      	moveq	r1, #0
 8000414:	4770      	bxeq	lr
 8000416:	b530      	push	{r4, r5, lr}
 8000418:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800041c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000420:	f04f 0500 	mov.w	r5, #0
 8000424:	f04f 0100 	mov.w	r1, #0
 8000428:	e750      	b.n	80002cc <__adddf3+0x138>
 800042a:	bf00      	nop

0800042c <__aeabi_i2d>:
 800042c:	f090 0f00 	teq	r0, #0
 8000430:	bf04      	itt	eq
 8000432:	2100      	moveq	r1, #0
 8000434:	4770      	bxeq	lr
 8000436:	b530      	push	{r4, r5, lr}
 8000438:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800043c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000440:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000444:	bf48      	it	mi
 8000446:	4240      	negmi	r0, r0
 8000448:	f04f 0100 	mov.w	r1, #0
 800044c:	e73e      	b.n	80002cc <__adddf3+0x138>
 800044e:	bf00      	nop

08000450 <__aeabi_f2d>:
 8000450:	0042      	lsls	r2, r0, #1
 8000452:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000456:	ea4f 0131 	mov.w	r1, r1, rrx
 800045a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800045e:	bf1f      	itttt	ne
 8000460:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000464:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000468:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 800046c:	4770      	bxne	lr
 800046e:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000472:	bf08      	it	eq
 8000474:	4770      	bxeq	lr
 8000476:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800047a:	bf04      	itt	eq
 800047c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000480:	4770      	bxeq	lr
 8000482:	b530      	push	{r4, r5, lr}
 8000484:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000490:	e71c      	b.n	80002cc <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_ul2d>:
 8000494:	ea50 0201 	orrs.w	r2, r0, r1
 8000498:	bf08      	it	eq
 800049a:	4770      	bxeq	lr
 800049c:	b530      	push	{r4, r5, lr}
 800049e:	f04f 0500 	mov.w	r5, #0
 80004a2:	e00a      	b.n	80004ba <__aeabi_l2d+0x16>

080004a4 <__aeabi_l2d>:
 80004a4:	ea50 0201 	orrs.w	r2, r0, r1
 80004a8:	bf08      	it	eq
 80004aa:	4770      	bxeq	lr
 80004ac:	b530      	push	{r4, r5, lr}
 80004ae:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004b2:	d502      	bpl.n	80004ba <__aeabi_l2d+0x16>
 80004b4:	4240      	negs	r0, r0
 80004b6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004ba:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004be:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004c6:	f43f aed8 	beq.w	800027a <__adddf3+0xe6>
 80004ca:	f04f 0203 	mov.w	r2, #3
 80004ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d2:	bf18      	it	ne
 80004d4:	3203      	addne	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e2:	f1c2 0320 	rsb	r3, r2, #32
 80004e6:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ea:	fa20 f002 	lsr.w	r0, r0, r2
 80004ee:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f2:	ea40 000e 	orr.w	r0, r0, lr
 80004f6:	fa21 f102 	lsr.w	r1, r1, r2
 80004fa:	4414      	add	r4, r2
 80004fc:	e6bd      	b.n	800027a <__adddf3+0xe6>
 80004fe:	bf00      	nop

08000500 <__gedf2>:
 8000500:	f04f 3cff 	mov.w	ip, #4294967295
 8000504:	e006      	b.n	8000514 <__cmpdf2+0x4>
 8000506:	bf00      	nop

08000508 <__ledf2>:
 8000508:	f04f 0c01 	mov.w	ip, #1
 800050c:	e002      	b.n	8000514 <__cmpdf2+0x4>
 800050e:	bf00      	nop

08000510 <__cmpdf2>:
 8000510:	f04f 0c01 	mov.w	ip, #1
 8000514:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000518:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800051c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000520:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000524:	bf18      	it	ne
 8000526:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800052a:	d01b      	beq.n	8000564 <__cmpdf2+0x54>
 800052c:	b001      	add	sp, #4
 800052e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000532:	bf0c      	ite	eq
 8000534:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000538:	ea91 0f03 	teqne	r1, r3
 800053c:	bf02      	ittt	eq
 800053e:	ea90 0f02 	teqeq	r0, r2
 8000542:	2000      	moveq	r0, #0
 8000544:	4770      	bxeq	lr
 8000546:	f110 0f00 	cmn.w	r0, #0
 800054a:	ea91 0f03 	teq	r1, r3
 800054e:	bf58      	it	pl
 8000550:	4299      	cmppl	r1, r3
 8000552:	bf08      	it	eq
 8000554:	4290      	cmpeq	r0, r2
 8000556:	bf2c      	ite	cs
 8000558:	17d8      	asrcs	r0, r3, #31
 800055a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800055e:	f040 0001 	orr.w	r0, r0, #1
 8000562:	4770      	bx	lr
 8000564:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000568:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800056c:	d102      	bne.n	8000574 <__cmpdf2+0x64>
 800056e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000572:	d107      	bne.n	8000584 <__cmpdf2+0x74>
 8000574:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000578:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800057c:	d1d6      	bne.n	800052c <__cmpdf2+0x1c>
 800057e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000582:	d0d3      	beq.n	800052c <__cmpdf2+0x1c>
 8000584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <__aeabi_cdrcmple>:
 800058c:	4684      	mov	ip, r0
 800058e:	4610      	mov	r0, r2
 8000590:	4662      	mov	r2, ip
 8000592:	468c      	mov	ip, r1
 8000594:	4619      	mov	r1, r3
 8000596:	4663      	mov	r3, ip
 8000598:	e000      	b.n	800059c <__aeabi_cdcmpeq>
 800059a:	bf00      	nop

0800059c <__aeabi_cdcmpeq>:
 800059c:	b501      	push	{r0, lr}
 800059e:	f7ff ffb7 	bl	8000510 <__cmpdf2>
 80005a2:	2800      	cmp	r0, #0
 80005a4:	bf48      	it	mi
 80005a6:	f110 0f00 	cmnmi.w	r0, #0
 80005aa:	bd01      	pop	{r0, pc}

080005ac <__aeabi_dcmpeq>:
 80005ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005b0:	f7ff fff4 	bl	800059c <__aeabi_cdcmpeq>
 80005b4:	bf0c      	ite	eq
 80005b6:	2001      	moveq	r0, #1
 80005b8:	2000      	movne	r0, #0
 80005ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80005be:	bf00      	nop

080005c0 <__aeabi_dcmplt>:
 80005c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005c4:	f7ff ffea 	bl	800059c <__aeabi_cdcmpeq>
 80005c8:	bf34      	ite	cc
 80005ca:	2001      	movcc	r0, #1
 80005cc:	2000      	movcs	r0, #0
 80005ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80005d2:	bf00      	nop

080005d4 <__aeabi_dcmple>:
 80005d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005d8:	f7ff ffe0 	bl	800059c <__aeabi_cdcmpeq>
 80005dc:	bf94      	ite	ls
 80005de:	2001      	movls	r0, #1
 80005e0:	2000      	movhi	r0, #0
 80005e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80005e6:	bf00      	nop

080005e8 <__aeabi_dcmpge>:
 80005e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005ec:	f7ff ffce 	bl	800058c <__aeabi_cdrcmple>
 80005f0:	bf94      	ite	ls
 80005f2:	2001      	movls	r0, #1
 80005f4:	2000      	movhi	r0, #0
 80005f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80005fa:	bf00      	nop

080005fc <__aeabi_dcmpgt>:
 80005fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000600:	f7ff ffc4 	bl	800058c <__aeabi_cdrcmple>
 8000604:	bf34      	ite	cc
 8000606:	2001      	movcc	r0, #1
 8000608:	2000      	movcs	r0, #0
 800060a:	f85d fb08 	ldr.w	pc, [sp], #8
 800060e:	bf00      	nop

08000610 <__aeabi_d2iz>:
 8000610:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000614:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000618:	d215      	bcs.n	8000646 <__aeabi_d2iz+0x36>
 800061a:	d511      	bpl.n	8000640 <__aeabi_d2iz+0x30>
 800061c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000620:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000624:	d912      	bls.n	800064c <__aeabi_d2iz+0x3c>
 8000626:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800062a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800062e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000632:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000636:	fa23 f002 	lsr.w	r0, r3, r2
 800063a:	bf18      	it	ne
 800063c:	4240      	negne	r0, r0
 800063e:	4770      	bx	lr
 8000640:	f04f 0000 	mov.w	r0, #0
 8000644:	4770      	bx	lr
 8000646:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800064a:	d105      	bne.n	8000658 <__aeabi_d2iz+0x48>
 800064c:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000650:	bf08      	it	eq
 8000652:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000656:	4770      	bx	lr
 8000658:	f04f 0000 	mov.w	r0, #0
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop

08000660 <__aeabi_frsub>:
 8000660:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000664:	e002      	b.n	800066c <__addsf3>
 8000666:	bf00      	nop

08000668 <__aeabi_fsub>:
 8000668:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800066c <__addsf3>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	bf1f      	itttt	ne
 8000670:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000674:	ea92 0f03 	teqne	r2, r3
 8000678:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800067c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000680:	d06a      	beq.n	8000758 <__addsf3+0xec>
 8000682:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000686:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800068a:	bfc1      	itttt	gt
 800068c:	18d2      	addgt	r2, r2, r3
 800068e:	4041      	eorgt	r1, r0
 8000690:	4048      	eorgt	r0, r1
 8000692:	4041      	eorgt	r1, r0
 8000694:	bfb8      	it	lt
 8000696:	425b      	neglt	r3, r3
 8000698:	2b19      	cmp	r3, #25
 800069a:	bf88      	it	hi
 800069c:	4770      	bxhi	lr
 800069e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80006a2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006a6:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80006aa:	bf18      	it	ne
 80006ac:	4240      	negne	r0, r0
 80006ae:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80006b2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80006b6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80006ba:	bf18      	it	ne
 80006bc:	4249      	negne	r1, r1
 80006be:	ea92 0f03 	teq	r2, r3
 80006c2:	d03f      	beq.n	8000744 <__addsf3+0xd8>
 80006c4:	f1a2 0201 	sub.w	r2, r2, #1
 80006c8:	fa41 fc03 	asr.w	ip, r1, r3
 80006cc:	eb10 000c 	adds.w	r0, r0, ip
 80006d0:	f1c3 0320 	rsb	r3, r3, #32
 80006d4:	fa01 f103 	lsl.w	r1, r1, r3
 80006d8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	d502      	bpl.n	80006e4 <__addsf3+0x78>
 80006de:	4249      	negs	r1, r1
 80006e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80006e4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80006e8:	d313      	bcc.n	8000712 <__addsf3+0xa6>
 80006ea:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80006ee:	d306      	bcc.n	80006fe <__addsf3+0x92>
 80006f0:	0840      	lsrs	r0, r0, #1
 80006f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006f6:	f102 0201 	add.w	r2, r2, #1
 80006fa:	2afe      	cmp	r2, #254	@ 0xfe
 80006fc:	d251      	bcs.n	80007a2 <__addsf3+0x136>
 80006fe:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000702:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000706:	bf08      	it	eq
 8000708:	f020 0001 	biceq.w	r0, r0, #1
 800070c:	ea40 0003 	orr.w	r0, r0, r3
 8000710:	4770      	bx	lr
 8000712:	0049      	lsls	r1, r1, #1
 8000714:	eb40 0000 	adc.w	r0, r0, r0
 8000718:	3a01      	subs	r2, #1
 800071a:	bf28      	it	cs
 800071c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000720:	d2ed      	bcs.n	80006fe <__addsf3+0x92>
 8000722:	fab0 fc80 	clz	ip, r0
 8000726:	f1ac 0c08 	sub.w	ip, ip, #8
 800072a:	ebb2 020c 	subs.w	r2, r2, ip
 800072e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000732:	bfaa      	itet	ge
 8000734:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000738:	4252      	neglt	r2, r2
 800073a:	4318      	orrge	r0, r3
 800073c:	bfbc      	itt	lt
 800073e:	40d0      	lsrlt	r0, r2
 8000740:	4318      	orrlt	r0, r3
 8000742:	4770      	bx	lr
 8000744:	f092 0f00 	teq	r2, #0
 8000748:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800074c:	bf06      	itte	eq
 800074e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000752:	3201      	addeq	r2, #1
 8000754:	3b01      	subne	r3, #1
 8000756:	e7b5      	b.n	80006c4 <__addsf3+0x58>
 8000758:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800075c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000760:	bf18      	it	ne
 8000762:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000766:	d021      	beq.n	80007ac <__addsf3+0x140>
 8000768:	ea92 0f03 	teq	r2, r3
 800076c:	d004      	beq.n	8000778 <__addsf3+0x10c>
 800076e:	f092 0f00 	teq	r2, #0
 8000772:	bf08      	it	eq
 8000774:	4608      	moveq	r0, r1
 8000776:	4770      	bx	lr
 8000778:	ea90 0f01 	teq	r0, r1
 800077c:	bf1c      	itt	ne
 800077e:	2000      	movne	r0, #0
 8000780:	4770      	bxne	lr
 8000782:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000786:	d104      	bne.n	8000792 <__addsf3+0x126>
 8000788:	0040      	lsls	r0, r0, #1
 800078a:	bf28      	it	cs
 800078c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000790:	4770      	bx	lr
 8000792:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000796:	bf3c      	itt	cc
 8000798:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800079c:	4770      	bxcc	lr
 800079e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80007a2:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80007a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80007aa:	4770      	bx	lr
 80007ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80007b0:	bf16      	itet	ne
 80007b2:	4608      	movne	r0, r1
 80007b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80007b8:	4601      	movne	r1, r0
 80007ba:	0242      	lsls	r2, r0, #9
 80007bc:	bf06      	itte	eq
 80007be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80007c2:	ea90 0f01 	teqeq	r0, r1
 80007c6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80007ca:	4770      	bx	lr

080007cc <__aeabi_ui2f>:
 80007cc:	f04f 0300 	mov.w	r3, #0
 80007d0:	e004      	b.n	80007dc <__aeabi_i2f+0x8>
 80007d2:	bf00      	nop

080007d4 <__aeabi_i2f>:
 80007d4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	ea5f 0c00 	movs.w	ip, r0
 80007e0:	bf08      	it	eq
 80007e2:	4770      	bxeq	lr
 80007e4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80007e8:	4601      	mov	r1, r0
 80007ea:	f04f 0000 	mov.w	r0, #0
 80007ee:	e01c      	b.n	800082a <__aeabi_l2f+0x2a>

080007f0 <__aeabi_ul2f>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	e00a      	b.n	8000814 <__aeabi_l2f+0x14>
 80007fe:	bf00      	nop

08000800 <__aeabi_l2f>:
 8000800:	ea50 0201 	orrs.w	r2, r0, r1
 8000804:	bf08      	it	eq
 8000806:	4770      	bxeq	lr
 8000808:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 800080c:	d502      	bpl.n	8000814 <__aeabi_l2f+0x14>
 800080e:	4240      	negs	r0, r0
 8000810:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000814:	ea5f 0c01 	movs.w	ip, r1
 8000818:	bf02      	ittt	eq
 800081a:	4684      	moveq	ip, r0
 800081c:	4601      	moveq	r1, r0
 800081e:	2000      	moveq	r0, #0
 8000820:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000824:	bf08      	it	eq
 8000826:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800082a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800082e:	fabc f28c 	clz	r2, ip
 8000832:	3a08      	subs	r2, #8
 8000834:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000838:	db10      	blt.n	800085c <__aeabi_l2f+0x5c>
 800083a:	fa01 fc02 	lsl.w	ip, r1, r2
 800083e:	4463      	add	r3, ip
 8000840:	fa00 fc02 	lsl.w	ip, r0, r2
 8000844:	f1c2 0220 	rsb	r2, r2, #32
 8000848:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800084c:	fa20 f202 	lsr.w	r2, r0, r2
 8000850:	eb43 0002 	adc.w	r0, r3, r2
 8000854:	bf08      	it	eq
 8000856:	f020 0001 	biceq.w	r0, r0, #1
 800085a:	4770      	bx	lr
 800085c:	f102 0220 	add.w	r2, r2, #32
 8000860:	fa01 fc02 	lsl.w	ip, r1, r2
 8000864:	f1c2 0220 	rsb	r2, r2, #32
 8000868:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800086c:	fa21 f202 	lsr.w	r2, r1, r2
 8000870:	eb43 0002 	adc.w	r0, r3, r2
 8000874:	bf08      	it	eq
 8000876:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800087a:	4770      	bx	lr

0800087c <__aeabi_fmul>:
 800087c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000880:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000884:	bf1e      	ittt	ne
 8000886:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800088a:	ea92 0f0c 	teqne	r2, ip
 800088e:	ea93 0f0c 	teqne	r3, ip
 8000892:	d06f      	beq.n	8000974 <__aeabi_fmul+0xf8>
 8000894:	441a      	add	r2, r3
 8000896:	ea80 0c01 	eor.w	ip, r0, r1
 800089a:	0240      	lsls	r0, r0, #9
 800089c:	bf18      	it	ne
 800089e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80008a2:	d01e      	beq.n	80008e2 <__aeabi_fmul+0x66>
 80008a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80008a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80008ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80008b0:	fba0 3101 	umull	r3, r1, r0, r1
 80008b4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80008b8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80008bc:	bf3e      	ittt	cc
 80008be:	0049      	lslcc	r1, r1, #1
 80008c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80008c4:	005b      	lslcc	r3, r3, #1
 80008c6:	ea40 0001 	orr.w	r0, r0, r1
 80008ca:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80008ce:	2afd      	cmp	r2, #253	@ 0xfd
 80008d0:	d81d      	bhi.n	800090e <__aeabi_fmul+0x92>
 80008d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80008d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80008da:	bf08      	it	eq
 80008dc:	f020 0001 	biceq.w	r0, r0, #1
 80008e0:	4770      	bx	lr
 80008e2:	f090 0f00 	teq	r0, #0
 80008e6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80008ea:	bf08      	it	eq
 80008ec:	0249      	lsleq	r1, r1, #9
 80008ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80008f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80008f6:	3a7f      	subs	r2, #127	@ 0x7f
 80008f8:	bfc2      	ittt	gt
 80008fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80008fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000902:	4770      	bxgt	lr
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000908:	f04f 0300 	mov.w	r3, #0
 800090c:	3a01      	subs	r2, #1
 800090e:	dc5d      	bgt.n	80009cc <__aeabi_fmul+0x150>
 8000910:	f112 0f19 	cmn.w	r2, #25
 8000914:	bfdc      	itt	le
 8000916:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800091a:	4770      	bxle	lr
 800091c:	f1c2 0200 	rsb	r2, r2, #0
 8000920:	0041      	lsls	r1, r0, #1
 8000922:	fa21 f102 	lsr.w	r1, r1, r2
 8000926:	f1c2 0220 	rsb	r2, r2, #32
 800092a:	fa00 fc02 	lsl.w	ip, r0, r2
 800092e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000932:	f140 0000 	adc.w	r0, r0, #0
 8000936:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800093a:	bf08      	it	eq
 800093c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000940:	4770      	bx	lr
 8000942:	f092 0f00 	teq	r2, #0
 8000946:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800094a:	bf02      	ittt	eq
 800094c:	0040      	lsleq	r0, r0, #1
 800094e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000952:	3a01      	subeq	r2, #1
 8000954:	d0f9      	beq.n	800094a <__aeabi_fmul+0xce>
 8000956:	ea40 000c 	orr.w	r0, r0, ip
 800095a:	f093 0f00 	teq	r3, #0
 800095e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000962:	bf02      	ittt	eq
 8000964:	0049      	lsleq	r1, r1, #1
 8000966:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800096a:	3b01      	subeq	r3, #1
 800096c:	d0f9      	beq.n	8000962 <__aeabi_fmul+0xe6>
 800096e:	ea41 010c 	orr.w	r1, r1, ip
 8000972:	e78f      	b.n	8000894 <__aeabi_fmul+0x18>
 8000974:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000978:	ea92 0f0c 	teq	r2, ip
 800097c:	bf18      	it	ne
 800097e:	ea93 0f0c 	teqne	r3, ip
 8000982:	d00a      	beq.n	800099a <__aeabi_fmul+0x11e>
 8000984:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000988:	bf18      	it	ne
 800098a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800098e:	d1d8      	bne.n	8000942 <__aeabi_fmul+0xc6>
 8000990:	ea80 0001 	eor.w	r0, r0, r1
 8000994:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000998:	4770      	bx	lr
 800099a:	f090 0f00 	teq	r0, #0
 800099e:	bf17      	itett	ne
 80009a0:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80009a4:	4608      	moveq	r0, r1
 80009a6:	f091 0f00 	teqne	r1, #0
 80009aa:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80009ae:	d014      	beq.n	80009da <__aeabi_fmul+0x15e>
 80009b0:	ea92 0f0c 	teq	r2, ip
 80009b4:	d101      	bne.n	80009ba <__aeabi_fmul+0x13e>
 80009b6:	0242      	lsls	r2, r0, #9
 80009b8:	d10f      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009ba:	ea93 0f0c 	teq	r3, ip
 80009be:	d103      	bne.n	80009c8 <__aeabi_fmul+0x14c>
 80009c0:	024b      	lsls	r3, r1, #9
 80009c2:	bf18      	it	ne
 80009c4:	4608      	movne	r0, r1
 80009c6:	d108      	bne.n	80009da <__aeabi_fmul+0x15e>
 80009c8:	ea80 0001 	eor.w	r0, r0, r1
 80009cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80009d0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d8:	4770      	bx	lr
 80009da:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80009de:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_fdiv>:
 80009e4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80009e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80009ec:	bf1e      	ittt	ne
 80009ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80009f2:	ea92 0f0c 	teqne	r2, ip
 80009f6:	ea93 0f0c 	teqne	r3, ip
 80009fa:	d069      	beq.n	8000ad0 <__aeabi_fdiv+0xec>
 80009fc:	eba2 0203 	sub.w	r2, r2, r3
 8000a00:	ea80 0c01 	eor.w	ip, r0, r1
 8000a04:	0249      	lsls	r1, r1, #9
 8000a06:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a0a:	d037      	beq.n	8000a7c <__aeabi_fdiv+0x98>
 8000a0c:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000a10:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000a14:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000a18:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	bf38      	it	cc
 8000a20:	005b      	lslcc	r3, r3, #1
 8000a22:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000a26:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000a2a:	428b      	cmp	r3, r1
 8000a2c:	bf24      	itt	cs
 8000a2e:	1a5b      	subcs	r3, r3, r1
 8000a30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000a34:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000a38:	bf24      	itt	cs
 8000a3a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000a3e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000a42:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000a46:	bf24      	itt	cs
 8000a48:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000a4c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000a50:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000a54:	bf24      	itt	cs
 8000a56:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000a5a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000a5e:	011b      	lsls	r3, r3, #4
 8000a60:	bf18      	it	ne
 8000a62:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000a66:	d1e0      	bne.n	8000a2a <__aeabi_fdiv+0x46>
 8000a68:	2afd      	cmp	r2, #253	@ 0xfd
 8000a6a:	f63f af50 	bhi.w	800090e <__aeabi_fmul+0x92>
 8000a6e:	428b      	cmp	r3, r1
 8000a70:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000a80:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a84:	327f      	adds	r2, #127	@ 0x7f
 8000a86:	bfc2      	ittt	gt
 8000a88:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000a8c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a90:	4770      	bxgt	lr
 8000a92:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a96:	f04f 0300 	mov.w	r3, #0
 8000a9a:	3a01      	subs	r2, #1
 8000a9c:	e737      	b.n	800090e <__aeabi_fmul+0x92>
 8000a9e:	f092 0f00 	teq	r2, #0
 8000aa2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000aa6:	bf02      	ittt	eq
 8000aa8:	0040      	lsleq	r0, r0, #1
 8000aaa:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000aae:	3a01      	subeq	r2, #1
 8000ab0:	d0f9      	beq.n	8000aa6 <__aeabi_fdiv+0xc2>
 8000ab2:	ea40 000c 	orr.w	r0, r0, ip
 8000ab6:	f093 0f00 	teq	r3, #0
 8000aba:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000abe:	bf02      	ittt	eq
 8000ac0:	0049      	lsleq	r1, r1, #1
 8000ac2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000ac6:	3b01      	subeq	r3, #1
 8000ac8:	d0f9      	beq.n	8000abe <__aeabi_fdiv+0xda>
 8000aca:	ea41 010c 	orr.w	r1, r1, ip
 8000ace:	e795      	b.n	80009fc <__aeabi_fdiv+0x18>
 8000ad0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ad4:	ea92 0f0c 	teq	r2, ip
 8000ad8:	d108      	bne.n	8000aec <__aeabi_fdiv+0x108>
 8000ada:	0242      	lsls	r2, r0, #9
 8000adc:	f47f af7d 	bne.w	80009da <__aeabi_fmul+0x15e>
 8000ae0:	ea93 0f0c 	teq	r3, ip
 8000ae4:	f47f af70 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000ae8:	4608      	mov	r0, r1
 8000aea:	e776      	b.n	80009da <__aeabi_fmul+0x15e>
 8000aec:	ea93 0f0c 	teq	r3, ip
 8000af0:	d104      	bne.n	8000afc <__aeabi_fdiv+0x118>
 8000af2:	024b      	lsls	r3, r1, #9
 8000af4:	f43f af4c 	beq.w	8000990 <__aeabi_fmul+0x114>
 8000af8:	4608      	mov	r0, r1
 8000afa:	e76e      	b.n	80009da <__aeabi_fmul+0x15e>
 8000afc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000b00:	bf18      	it	ne
 8000b02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000b06:	d1ca      	bne.n	8000a9e <__aeabi_fdiv+0xba>
 8000b08:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000b0c:	f47f af5c 	bne.w	80009c8 <__aeabi_fmul+0x14c>
 8000b10:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000b14:	f47f af3c 	bne.w	8000990 <__aeabi_fmul+0x114>
 8000b18:	e75f      	b.n	80009da <__aeabi_fmul+0x15e>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_f2iz>:
 8000b1c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b20:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b24:	d30f      	bcc.n	8000b46 <__aeabi_f2iz+0x2a>
 8000b26:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b2a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b2e:	d90d      	bls.n	8000b4c <__aeabi_f2iz+0x30>
 8000b30:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b34:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b38:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b3c:	fa23 f002 	lsr.w	r0, r3, r2
 8000b40:	bf18      	it	ne
 8000b42:	4240      	negne	r0, r0
 8000b44:	4770      	bx	lr
 8000b46:	f04f 0000 	mov.w	r0, #0
 8000b4a:	4770      	bx	lr
 8000b4c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b50:	d101      	bne.n	8000b56 <__aeabi_f2iz+0x3a>
 8000b52:	0242      	lsls	r2, r0, #9
 8000b54:	d105      	bne.n	8000b62 <__aeabi_f2iz+0x46>
 8000b56:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000b5a:	bf08      	it	eq
 8000b5c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0000 	mov.w	r0, #0
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_f2uiz>:
 8000b68:	0042      	lsls	r2, r0, #1
 8000b6a:	d20e      	bcs.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b6c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000b70:	d30b      	bcc.n	8000b8a <__aeabi_f2uiz+0x22>
 8000b72:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000b76:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000b7a:	d409      	bmi.n	8000b90 <__aeabi_f2uiz+0x28>
 8000b7c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000b80:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b84:	fa23 f002 	lsr.w	r0, r3, r2
 8000b88:	4770      	bx	lr
 8000b8a:	f04f 0000 	mov.w	r0, #0
 8000b8e:	4770      	bx	lr
 8000b90:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000b94:	d101      	bne.n	8000b9a <__aeabi_f2uiz+0x32>
 8000b96:	0242      	lsls	r2, r0, #9
 8000b98:	d102      	bne.n	8000ba0 <__aeabi_f2uiz+0x38>
 8000b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b96a 	b.w	8000e94 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	460c      	mov	r4, r1
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d14e      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be4:	4694      	mov	ip, r2
 8000be6:	458c      	cmp	ip, r1
 8000be8:	4686      	mov	lr, r0
 8000bea:	fab2 f282 	clz	r2, r2
 8000bee:	d962      	bls.n	8000cb6 <__udivmoddi4+0xde>
 8000bf0:	b14a      	cbz	r2, 8000c06 <__udivmoddi4+0x2e>
 8000bf2:	f1c2 0320 	rsb	r3, r2, #32
 8000bf6:	4091      	lsls	r1, r2
 8000bf8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bfc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c00:	4319      	orrs	r1, r3
 8000c02:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c06:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c0a:	fa1f f68c 	uxth.w	r6, ip
 8000c0e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c12:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c16:	fb07 1114 	mls	r1, r7, r4, r1
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb04 f106 	mul.w	r1, r4, r6
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c2e:	f080 8112 	bcs.w	8000e56 <__udivmoddi4+0x27e>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 810f 	bls.w	8000e56 <__udivmoddi4+0x27e>
 8000c38:	3c02      	subs	r4, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a59      	subs	r1, r3, r1
 8000c3e:	fa1f f38e 	uxth.w	r3, lr
 8000c42:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c46:	fb07 1110 	mls	r1, r7, r0, r1
 8000c4a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c4e:	fb00 f606 	mul.w	r6, r0, r6
 8000c52:	429e      	cmp	r6, r3
 8000c54:	d90a      	bls.n	8000c6c <__udivmoddi4+0x94>
 8000c56:	eb1c 0303 	adds.w	r3, ip, r3
 8000c5a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c5e:	f080 80fc 	bcs.w	8000e5a <__udivmoddi4+0x282>
 8000c62:	429e      	cmp	r6, r3
 8000c64:	f240 80f9 	bls.w	8000e5a <__udivmoddi4+0x282>
 8000c68:	4463      	add	r3, ip
 8000c6a:	3802      	subs	r0, #2
 8000c6c:	1b9b      	subs	r3, r3, r6
 8000c6e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c72:	2100      	movs	r1, #0
 8000c74:	b11d      	cbz	r5, 8000c7e <__udivmoddi4+0xa6>
 8000c76:	40d3      	lsrs	r3, r2
 8000c78:	2200      	movs	r2, #0
 8000c7a:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d905      	bls.n	8000c92 <__udivmoddi4+0xba>
 8000c86:	b10d      	cbz	r5, 8000c8c <__udivmoddi4+0xb4>
 8000c88:	e9c5 0100 	strd	r0, r1, [r5]
 8000c8c:	2100      	movs	r1, #0
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e7f5      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000c92:	fab3 f183 	clz	r1, r3
 8000c96:	2900      	cmp	r1, #0
 8000c98:	d146      	bne.n	8000d28 <__udivmoddi4+0x150>
 8000c9a:	42a3      	cmp	r3, r4
 8000c9c:	d302      	bcc.n	8000ca4 <__udivmoddi4+0xcc>
 8000c9e:	4290      	cmp	r0, r2
 8000ca0:	f0c0 80f0 	bcc.w	8000e84 <__udivmoddi4+0x2ac>
 8000ca4:	1a86      	subs	r6, r0, r2
 8000ca6:	eb64 0303 	sbc.w	r3, r4, r3
 8000caa:	2001      	movs	r0, #1
 8000cac:	2d00      	cmp	r5, #0
 8000cae:	d0e6      	beq.n	8000c7e <__udivmoddi4+0xa6>
 8000cb0:	e9c5 6300 	strd	r6, r3, [r5]
 8000cb4:	e7e3      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000cb6:	2a00      	cmp	r2, #0
 8000cb8:	f040 8090 	bne.w	8000ddc <__udivmoddi4+0x204>
 8000cbc:	eba1 040c 	sub.w	r4, r1, ip
 8000cc0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cc4:	fa1f f78c 	uxth.w	r7, ip
 8000cc8:	2101      	movs	r1, #1
 8000cca:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cce:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cd2:	fb08 4416 	mls	r4, r8, r6, r4
 8000cd6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000cda:	fb07 f006 	mul.w	r0, r7, r6
 8000cde:	4298      	cmp	r0, r3
 8000ce0:	d908      	bls.n	8000cf4 <__udivmoddi4+0x11c>
 8000ce2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ce6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x11a>
 8000cec:	4298      	cmp	r0, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2b4>
 8000cf2:	4626      	mov	r6, r4
 8000cf4:	1a1c      	subs	r4, r3, r0
 8000cf6:	fa1f f38e 	uxth.w	r3, lr
 8000cfa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000cfe:	fb08 4410 	mls	r4, r8, r0, r4
 8000d02:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d06:	fb00 f707 	mul.w	r7, r0, r7
 8000d0a:	429f      	cmp	r7, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x148>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x146>
 8000d18:	429f      	cmp	r7, r3
 8000d1a:	f200 80b0 	bhi.w	8000e7e <__udivmoddi4+0x2a6>
 8000d1e:	4620      	mov	r0, r4
 8000d20:	1bdb      	subs	r3, r3, r7
 8000d22:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d26:	e7a5      	b.n	8000c74 <__udivmoddi4+0x9c>
 8000d28:	f1c1 0620 	rsb	r6, r1, #32
 8000d2c:	408b      	lsls	r3, r1
 8000d2e:	fa22 f706 	lsr.w	r7, r2, r6
 8000d32:	431f      	orrs	r7, r3
 8000d34:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d38:	fa04 f301 	lsl.w	r3, r4, r1
 8000d3c:	ea43 030c 	orr.w	r3, r3, ip
 8000d40:	40f4      	lsrs	r4, r6
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	0c38      	lsrs	r0, r7, #16
 8000d48:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d4c:	fbb4 fef0 	udiv	lr, r4, r0
 8000d50:	fa1f fc87 	uxth.w	ip, r7
 8000d54:	fb00 441e 	mls	r4, r0, lr, r4
 8000d58:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d5c:	fb0e f90c 	mul.w	r9, lr, ip
 8000d60:	45a1      	cmp	r9, r4
 8000d62:	fa02 f201 	lsl.w	r2, r2, r1
 8000d66:	d90a      	bls.n	8000d7e <__udivmoddi4+0x1a6>
 8000d68:	193c      	adds	r4, r7, r4
 8000d6a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d6e:	f080 8084 	bcs.w	8000e7a <__udivmoddi4+0x2a2>
 8000d72:	45a1      	cmp	r9, r4
 8000d74:	f240 8081 	bls.w	8000e7a <__udivmoddi4+0x2a2>
 8000d78:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d7c:	443c      	add	r4, r7
 8000d7e:	eba4 0409 	sub.w	r4, r4, r9
 8000d82:	fa1f f983 	uxth.w	r9, r3
 8000d86:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d8a:	fb00 4413 	mls	r4, r0, r3, r4
 8000d8e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d92:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d96:	45a4      	cmp	ip, r4
 8000d98:	d907      	bls.n	8000daa <__udivmoddi4+0x1d2>
 8000d9a:	193c      	adds	r4, r7, r4
 8000d9c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000da0:	d267      	bcs.n	8000e72 <__udivmoddi4+0x29a>
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d965      	bls.n	8000e72 <__udivmoddi4+0x29a>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	443c      	add	r4, r7
 8000daa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dae:	fba0 9302 	umull	r9, r3, r0, r2
 8000db2:	eba4 040c 	sub.w	r4, r4, ip
 8000db6:	429c      	cmp	r4, r3
 8000db8:	46ce      	mov	lr, r9
 8000dba:	469c      	mov	ip, r3
 8000dbc:	d351      	bcc.n	8000e62 <__udivmoddi4+0x28a>
 8000dbe:	d04e      	beq.n	8000e5e <__udivmoddi4+0x286>
 8000dc0:	b155      	cbz	r5, 8000dd8 <__udivmoddi4+0x200>
 8000dc2:	ebb8 030e 	subs.w	r3, r8, lr
 8000dc6:	eb64 040c 	sbc.w	r4, r4, ip
 8000dca:	fa04 f606 	lsl.w	r6, r4, r6
 8000dce:	40cb      	lsrs	r3, r1
 8000dd0:	431e      	orrs	r6, r3
 8000dd2:	40cc      	lsrs	r4, r1
 8000dd4:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	e750      	b.n	8000c7e <__udivmoddi4+0xa6>
 8000ddc:	f1c2 0320 	rsb	r3, r2, #32
 8000de0:	fa20 f103 	lsr.w	r1, r0, r3
 8000de4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de8:	fa24 f303 	lsr.w	r3, r4, r3
 8000dec:	4094      	lsls	r4, r2
 8000dee:	430c      	orrs	r4, r1
 8000df0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000df4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df8:	fa1f f78c 	uxth.w	r7, ip
 8000dfc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e00:	fb08 3110 	mls	r1, r8, r0, r3
 8000e04:	0c23      	lsrs	r3, r4, #16
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb00 f107 	mul.w	r1, r0, r7
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d908      	bls.n	8000e24 <__udivmoddi4+0x24c>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e1a:	d22c      	bcs.n	8000e76 <__udivmoddi4+0x29e>
 8000e1c:	4299      	cmp	r1, r3
 8000e1e:	d92a      	bls.n	8000e76 <__udivmoddi4+0x29e>
 8000e20:	3802      	subs	r0, #2
 8000e22:	4463      	add	r3, ip
 8000e24:	1a5b      	subs	r3, r3, r1
 8000e26:	b2a4      	uxth	r4, r4
 8000e28:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e2c:	fb08 3311 	mls	r3, r8, r1, r3
 8000e30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e34:	fb01 f307 	mul.w	r3, r1, r7
 8000e38:	42a3      	cmp	r3, r4
 8000e3a:	d908      	bls.n	8000e4e <__udivmoddi4+0x276>
 8000e3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000e40:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e44:	d213      	bcs.n	8000e6e <__udivmoddi4+0x296>
 8000e46:	42a3      	cmp	r3, r4
 8000e48:	d911      	bls.n	8000e6e <__udivmoddi4+0x296>
 8000e4a:	3902      	subs	r1, #2
 8000e4c:	4464      	add	r4, ip
 8000e4e:	1ae4      	subs	r4, r4, r3
 8000e50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e54:	e739      	b.n	8000cca <__udivmoddi4+0xf2>
 8000e56:	4604      	mov	r4, r0
 8000e58:	e6f0      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e5a:	4608      	mov	r0, r1
 8000e5c:	e706      	b.n	8000c6c <__udivmoddi4+0x94>
 8000e5e:	45c8      	cmp	r8, r9
 8000e60:	d2ae      	bcs.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e62:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e66:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e6a:	3801      	subs	r0, #1
 8000e6c:	e7a8      	b.n	8000dc0 <__udivmoddi4+0x1e8>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	e7ed      	b.n	8000e4e <__udivmoddi4+0x276>
 8000e72:	4603      	mov	r3, r0
 8000e74:	e799      	b.n	8000daa <__udivmoddi4+0x1d2>
 8000e76:	4630      	mov	r0, r6
 8000e78:	e7d4      	b.n	8000e24 <__udivmoddi4+0x24c>
 8000e7a:	46d6      	mov	lr, sl
 8000e7c:	e77f      	b.n	8000d7e <__udivmoddi4+0x1a6>
 8000e7e:	4463      	add	r3, ip
 8000e80:	3802      	subs	r0, #2
 8000e82:	e74d      	b.n	8000d20 <__udivmoddi4+0x148>
 8000e84:	4606      	mov	r6, r0
 8000e86:	4623      	mov	r3, r4
 8000e88:	4608      	mov	r0, r1
 8000e8a:	e70f      	b.n	8000cac <__udivmoddi4+0xd4>
 8000e8c:	3e02      	subs	r6, #2
 8000e8e:	4463      	add	r3, ip
 8000e90:	e730      	b.n	8000cf4 <__udivmoddi4+0x11c>
 8000e92:	bf00      	nop

08000e94 <__aeabi_idiv0>:
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop

08000e98 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000ea0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ea4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ea6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4313      	orrs	r3, r2
 8000eae:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000eb0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000eb4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
}
 8000ebe:	bf00      	nop
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	bc80      	pop	{r7}
 8000ec6:	4770      	bx	lr

08000ec8 <LL_APB2_GRP1_DisableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8000ed0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8000ed4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8000ede:	4013      	ands	r3, r2
 8000ee0:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bc80      	pop	{r7}
 8000eea:	4770      	bx	lr

08000eec <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000ef2:	4a24      	ldr	r2, [pc, #144]	@ (8000f84 <MX_ADC_Init+0x98>)
 8000ef4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000ef8:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8000efc:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f04:	4b1e      	ldr	r3, [pc, #120]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f12:	2204      	movs	r2, #4
 8000f14:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	769a      	strb	r2, [r3, #26]
  hadc.Init.NbrOfConversion = 1;
 8000f28:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f2a:	2201      	movs	r2, #1
 8000f2c:	61da      	str	r2, [r3, #28]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000f2e:	4b14      	ldr	r3, [pc, #80]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	f883 2020 	strb.w	r2, [r3, #32]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f3c:	4b10      	ldr	r3, [pc, #64]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000f42:	4b0f      	ldr	r3, [pc, #60]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f4a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f50:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_160CYCLES_5;
 8000f52:	4b0b      	ldr	r3, [pc, #44]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f54:	2207      	movs	r2, #7
 8000f56:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_160CYCLES_5;
 8000f58:	4b09      	ldr	r3, [pc, #36]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f5a:	2207      	movs	r2, #7
 8000f5c:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.OversamplingMode = DISABLE;
 8000f5e:	4b08      	ldr	r3, [pc, #32]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  hadc.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	64da      	str	r2, [r3, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f6c:	4804      	ldr	r0, [pc, #16]	@ (8000f80 <MX_ADC_Init+0x94>)
 8000f6e:	f001 fee3 	bl	8002d38 <HAL_ADC_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_ADC_Init+0x90>
  {
    Error_Handler();
 8000f78:	f000 fb80 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f7c:	bf00      	nop
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000174 	.word	0x20000174
 8000f84:	40012400 	.word	0x40012400

08000f88 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a05      	ldr	r2, [pc, #20]	@ (8000fac <HAL_ADC_MspInit+0x24>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d103      	bne.n	8000fa2 <HAL_ADC_MspInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspInit 0 */

  /* USER CODE END ADC_MspInit 0 */
    /* ADC clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000f9a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f9e:	f7ff ff7b 	bl	8000e98 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN ADC_MspInit 1 */

  /* USER CODE END ADC_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	40012400 	.word	0x40012400

08000fb0 <HAL_ADC_MspDeInit>:

void HAL_ADC_MspDeInit(ADC_HandleTypeDef* adcHandle)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]

  if(adcHandle->Instance==ADC)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a05      	ldr	r2, [pc, #20]	@ (8000fd4 <HAL_ADC_MspDeInit+0x24>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d103      	bne.n	8000fca <HAL_ADC_MspDeInit+0x1a>
  {
  /* USER CODE BEGIN ADC_MspDeInit 0 */

  /* USER CODE END ADC_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_ADC_CLK_DISABLE();
 8000fc2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fc6:	f7ff ff7f 	bl	8000ec8 <LL_APB2_GRP1_DisableClock>
  /* USER CODE BEGIN ADC_MspDeInit 1 */

  /* USER CODE END ADC_MspDeInit 1 */
  }
}
 8000fca:	bf00      	nop
 8000fcc:	3708      	adds	r7, #8
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	40012400 	.word	0x40012400

08000fd8 <SYS_InitMeasurement>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void SYS_InitMeasurement(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_InitMeasurement_1 */

  /* USER CODE END SYS_InitMeasurement_1 */
  hadc.Instance = ADC;
 8000fdc:	4b03      	ldr	r3, [pc, #12]	@ (8000fec <SYS_InitMeasurement+0x14>)
 8000fde:	4a04      	ldr	r2, [pc, #16]	@ (8000ff0 <SYS_InitMeasurement+0x18>)
 8000fe0:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN SYS_InitMeasurement_2 */

  /* USER CODE END SYS_InitMeasurement_2 */
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	20000174 	.word	0x20000174
 8000ff0:	40012400 	.word	0x40012400

08000ff4 <SYS_GetBatteryLevel>:

  /* USER CODE END SYS_GetTemperatureLevel_2 */
}

uint16_t SYS_GetBatteryLevel(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SYS_GetBatteryLevel_1 */

  /* USER CODE END SYS_GetBatteryLevel_1 */
  uint16_t batteryLevelmV = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	80fb      	strh	r3, [r7, #6]
  uint32_t measuredLevel = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	603b      	str	r3, [r7, #0]

  measuredLevel = ADC_ReadChannels(ADC_CHANNEL_VREFINT);
 8001002:	4813      	ldr	r0, [pc, #76]	@ (8001050 <SYS_GetBatteryLevel+0x5c>)
 8001004:	f000 f82a 	bl	800105c <ADC_ReadChannels>
 8001008:	6038      	str	r0, [r7, #0]

  if (measuredLevel == 0)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d102      	bne.n	8001016 <SYS_GetBatteryLevel+0x22>
  {
    batteryLevelmV = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	80fb      	strh	r3, [r7, #6]
 8001014:	e016      	b.n	8001044 <SYS_GetBatteryLevel+0x50>
  }
  else
  {
    if ((uint32_t)*VREFINT_CAL_ADDR != (uint32_t)0xFFFFU)
 8001016:	4b0f      	ldr	r3, [pc, #60]	@ (8001054 <SYS_GetBatteryLevel+0x60>)
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800101e:	4293      	cmp	r3, r2
 8001020:	d00b      	beq.n	800103a <SYS_GetBatteryLevel+0x46>
    {
      /* Device with Reference voltage calibrated in production:
         use device optimized parameters */
      batteryLevelmV = __LL_ADC_CALC_VREFANALOG_VOLTAGE(measuredLevel,
 8001022:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <SYS_GetBatteryLevel+0x60>)
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	f640 43e4 	movw	r3, #3300	@ 0xce4
 800102c:	fb03 f202 	mul.w	r2, r3, r2
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	fbb2 f3f3 	udiv	r3, r2, r3
 8001036:	80fb      	strh	r3, [r7, #6]
 8001038:	e004      	b.n	8001044 <SYS_GetBatteryLevel+0x50>
    }
    else
    {
      /* Device with Reference voltage not calibrated in production:
         use generic parameters */
      batteryLevelmV = (VREFINT_CAL_VREF * 1510) / measuredLevel;
 800103a:	4a07      	ldr	r2, [pc, #28]	@ (8001058 <SYS_GetBatteryLevel+0x64>)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001042:	80fb      	strh	r3, [r7, #6]
    }
  }

  return batteryLevelmV;
 8001044:	88fb      	ldrh	r3, [r7, #6]
  /* USER CODE BEGIN SYS_GetBatteryLevel_2 */

  /* USER CODE END SYS_GetBatteryLevel_2 */
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	b4002000 	.word	0xb4002000
 8001054:	1fff75aa 	.word	0x1fff75aa
 8001058:	004c08d8 	.word	0x004c08d8

0800105c <ADC_ReadChannels>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static uint32_t ADC_ReadChannels(uint32_t channel)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ADC_ReadChannels_1 */

  /* USER CODE END ADC_ReadChannels_1 */
  uint32_t ADCxConvertedValues = 0;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001068:	f107 0308 	add.w	r3, r7, #8
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	605a      	str	r2, [r3, #4]
 8001072:	609a      	str	r2, [r3, #8]

  MX_ADC_Init();
 8001074:	f7ff ff3a 	bl	8000eec <MX_ADC_Init>

  /* Start Calibration */
  if (HAL_ADCEx_Calibration_Start(&hadc) != HAL_OK)
 8001078:	481a      	ldr	r0, [pc, #104]	@ (80010e4 <ADC_ReadChannels+0x88>)
 800107a:	f002 fc8c 	bl	8003996 <HAL_ADCEx_Calibration_Start>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <ADC_ReadChannels+0x2c>
  {
    Error_Handler();
 8001084:	f000 fafa 	bl	800167c <Error_Handler>
  }

  /* Configure Regular Channel */
  sConfig.Channel = channel;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8001090:	2300      	movs	r3, #0
 8001092:	613b      	str	r3, [r7, #16]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4619      	mov	r1, r3
 800109a:	4812      	ldr	r0, [pc, #72]	@ (80010e4 <ADC_ReadChannels+0x88>)
 800109c:	f002 f998 	bl	80033d0 <HAL_ADC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <ADC_ReadChannels+0x4e>
  {
    Error_Handler();
 80010a6:	f000 fae9 	bl	800167c <Error_Handler>
  }

  if (HAL_ADC_Start(&hadc) != HAL_OK)
 80010aa:	480e      	ldr	r0, [pc, #56]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010ac:	f002 f874 	bl	8003198 <HAL_ADC_Start>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <ADC_ReadChannels+0x5e>
  {
    /* Start Error */
    Error_Handler();
 80010b6:	f000 fae1 	bl	800167c <Error_Handler>
  }
  /** Wait for end of conversion */
  HAL_ADC_PollForConversion(&hadc, HAL_MAX_DELAY);
 80010ba:	f04f 31ff 	mov.w	r1, #4294967295
 80010be:	4809      	ldr	r0, [pc, #36]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010c0:	f002 f8e2 	bl	8003288 <HAL_ADC_PollForConversion>

  /** Wait for end of conversion */
  HAL_ADC_Stop(&hadc);   /* it calls also ADC_Disable() */
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010c6:	f002 f8ad 	bl	8003224 <HAL_ADC_Stop>

  ADCxConvertedValues = HAL_ADC_GetValue(&hadc);
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010cc:	f002 f973 	bl	80033b6 <HAL_ADC_GetValue>
 80010d0:	6178      	str	r0, [r7, #20]

  HAL_ADC_DeInit(&hadc);
 80010d2:	4804      	ldr	r0, [pc, #16]	@ (80010e4 <ADC_ReadChannels+0x88>)
 80010d4:	f001 ffe4 	bl	80030a0 <HAL_ADC_DeInit>

  return ADCxConvertedValues;
 80010d8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN ADC_ReadChannels_2 */

  /* USER CODE END ADC_ReadChannels_2 */
}
 80010da:	4618      	mov	r0, r3
 80010dc:	3718      	adds	r7, #24
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	20000174 	.word	0x20000174

080010e8 <LL_AHB1_GRP1_EnableClock>:
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80010f0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80010f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80010f6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001100:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001104:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	bc80      	pop	{r7}
 8001116:	4770      	bx	lr

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800111c:	2004      	movs	r0, #4
 800111e:	f7ff ffe3 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001122:	2001      	movs	r0, #1
 8001124:	f7ff ffe0 	bl	80010e8 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 2, 0);
 8001128:	2200      	movs	r2, #0
 800112a:	2102      	movs	r1, #2
 800112c:	200b      	movs	r0, #11
 800112e:	f002 fdd8 	bl	8003ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001132:	200b      	movs	r0, #11
 8001134:	f002 fdef 	bl	8003d16 <HAL_NVIC_EnableIRQ>

}
 8001138:	bf00      	nop
 800113a:	bd80      	pop	{r7, pc}

0800113c <LL_FLASH_IsActiveFlag_OperationSuspended>:
  * @rmtoll FLASH_SR      PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @rmtoll FLASH_C2SR    PESD         LL_FLASH_IsActiveFlag_OperationSuspended
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_FLASH_IsActiveFlag_OperationSuspended(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
#if defined(CORE_CM0PLUS)
  return ((READ_BIT(FLASH->C2SR, FLASH_C2SR_PESD) == (FLASH_C2SR_PESD)) ? 1UL : 0UL);
#else
  return ((READ_BIT(FLASH->SR, FLASH_SR_PESD) == (FLASH_SR_PESD)) ? 1UL : 0UL);
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <LL_FLASH_IsActiveFlag_OperationSuspended+0x20>)
 8001142:	691b      	ldr	r3, [r3, #16]
 8001144:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001148:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800114c:	d101      	bne.n	8001152 <LL_FLASH_IsActiveFlag_OperationSuspended+0x16>
 800114e:	2301      	movs	r3, #1
 8001150:	e000      	b.n	8001154 <LL_FLASH_IsActiveFlag_OperationSuspended+0x18>
 8001152:	2300      	movs	r3, #0
#endif
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	bc80      	pop	{r7}
 800115a:	4770      	bx	lr
 800115c:	58004000 	.word	0x58004000

08001160 <FLASH_IF_Write>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t FLASH_IF_Write(uint32_t address, uint8_t *data, uint32_t size, uint8_t *dataTempPage)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08c      	sub	sp, #48	@ 0x30
 8001164:	af00      	add	r7, sp, #0
 8001166:	60f8      	str	r0, [r7, #12]
 8001168:	60b9      	str	r1, [r7, #8]
 800116a:	607a      	str	r2, [r7, #4]
 800116c:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN FLASH_IF_Write_1 */

  /* USER CODE END FLASH_IF_Write_1 */
  int32_t status = FLASH_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t page_start_index = PAGE(address);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	f103 4278 	add.w	r2, r3, #4160749568	@ 0xf8000000
 8001178:	4b56      	ldr	r3, [pc, #344]	@ (80012d4 <FLASH_IF_Write+0x174>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	0299      	lsls	r1, r3, #10
 800117e:	4b56      	ldr	r3, [pc, #344]	@ (80012d8 <FLASH_IF_Write+0x178>)
 8001180:	400b      	ands	r3, r1
 8001182:	fbb2 f1f3 	udiv	r1, r2, r3
 8001186:	fb01 f303 	mul.w	r3, r1, r3
 800118a:	1ad3      	subs	r3, r2, r3
 800118c:	0adb      	lsrs	r3, r3, #11
 800118e:	61bb      	str	r3, [r7, #24]
  uint32_t page_end_index = PAGE(address + size - 1);
 8001190:	68fa      	ldr	r2, [r7, #12]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	f103 4378 	add.w	r3, r3, #4160749568	@ 0xf8000000
 800119a:	3b01      	subs	r3, #1
 800119c:	4a4d      	ldr	r2, [pc, #308]	@ (80012d4 <FLASH_IF_Write+0x174>)
 800119e:	6812      	ldr	r2, [r2, #0]
 80011a0:	0291      	lsls	r1, r2, #10
 80011a2:	4a4d      	ldr	r2, [pc, #308]	@ (80012d8 <FLASH_IF_Write+0x178>)
 80011a4:	400a      	ands	r2, r1
 80011a6:	fbb3 f1f2 	udiv	r1, r3, r2
 80011aa:	fb01 f202 	mul.w	r2, r1, r2
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	0adb      	lsrs	r3, r3, #11
 80011b2:	617b      	str	r3, [r7, #20]
  uint32_t curr_size = size;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t curr_dest_addr = address;
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t curr_src_addr = (uint32_t)data;
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	623b      	str	r3, [r7, #32]

  if ((data == NULL) || ((size % sizeof(uint64_t)) != 0) || ((address % sizeof(uint64_t)) != 0))
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <FLASH_IF_Write+0x7a>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	f003 0307 	and.w	r3, r3, #7
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d104      	bne.n	80011da <FLASH_IF_Write+0x7a>
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d002      	beq.n	80011e0 <FLASH_IF_Write+0x80>
  {
    return FLASH_PARAM_ERROR;
 80011da:	f06f 0304 	mvn.w	r3, #4
 80011de:	e074      	b.n	80012ca <FLASH_IF_Write+0x16a>
  }

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80011e0:	4b3e      	ldr	r3, [pc, #248]	@ (80012dc <FLASH_IF_Write+0x17c>)
 80011e2:	695b      	ldr	r3, [r3, #20]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	da02      	bge.n	80011ee <FLASH_IF_Write+0x8e>
  {
    return FLASH_LOCK_ERROR;
 80011e8:	f06f 0303 	mvn.w	r3, #3
 80011ec:	e06d      	b.n	80012ca <FLASH_IF_Write+0x16a>
  }

  if (page_start_index != page_end_index)
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	697b      	ldr	r3, [r7, #20]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d005      	beq.n	8001202 <FLASH_IF_Write+0xa2>
  {
    curr_size = FLASH_PAGE_SIZE - (address % FLASH_PAGE_SIZE);
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80011fc:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001200:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	61fb      	str	r3, [r7, #28]
 8001206:	e05b      	b.n	80012c0 <FLASH_IF_Write+0x160>
  {
    if (FLASH_IF_IsEmpty((uint8_t *)curr_dest_addr, curr_size) != FLASH_EMPTY)
 8001208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800120a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800120c:	4618      	mov	r0, r3
 800120e:	f000 f8f8 	bl	8001402 <FLASH_IF_IsEmpty>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d037      	beq.n	8001288 <FLASH_IF_Write+0x128>
    {
      if (dataTempPage == NULL)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d102      	bne.n	8001224 <FLASH_IF_Write+0xc4>
      {
        return FLASH_PARAM_ERROR;
 800121e:	f06f 0304 	mvn.w	r3, #4
 8001222:	e052      	b.n	80012ca <FLASH_IF_Write+0x16a>
      }
      /* backup initial Flash page data in RAM area */
      UTIL_MEM_cpy_8(dataTempPage, (uint8_t *)(idx * FLASH_PAGE_SIZE + FLASH_BASE), FLASH_PAGE_SIZE);
 8001224:	69fb      	ldr	r3, [r7, #28]
 8001226:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800122a:	02db      	lsls	r3, r3, #11
 800122c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001230:	4619      	mov	r1, r3
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f018 ff18 	bl	801a068 <UTIL_MEM_cpy_8>
      /* copy fragment into RAM area */
      UTIL_MEM_cpy_8(&dataTempPage[((uint32_t)curr_dest_addr) % FLASH_PAGE_SIZE], (uint8_t *)curr_src_addr, curr_size);
 8001238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800123a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	4413      	add	r3, r2
 8001242:	6a39      	ldr	r1, [r7, #32]
 8001244:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001246:	b292      	uxth	r2, r2
 8001248:	4618      	mov	r0, r3
 800124a:	f018 ff0d 	bl	801a068 <UTIL_MEM_cpy_8>

      /*  erase the Flash sector, to avoid writing twice in RAM */
      if (FLASH_IF_EraseByPages(idx, 1, 0) != FLASH_OK)
 800124e:	2200      	movs	r2, #0
 8001250:	2101      	movs	r1, #1
 8001252:	69f8      	ldr	r0, [r7, #28]
 8001254:	f000 f865 	bl	8001322 <FLASH_IF_EraseByPages>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d003      	beq.n	8001266 <FLASH_IF_Write+0x106>
      {
        status = FLASH_ERASE_ERROR;
 800125e:	f06f 0301 	mvn.w	r3, #1
 8001262:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 8001264:	e030      	b.n	80012c8 <FLASH_IF_Write+0x168>
      }
      else
      {
        /* copy the whole flash sector including fragment from RAM to Flash*/
        if (FLASH_IF_Write_Buffer(idx * FLASH_PAGE_SIZE + FLASH_BASE, dataTempPage, FLASH_PAGE_SIZE) != FLASH_OK)
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 800126c:	02db      	lsls	r3, r3, #11
 800126e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f000 f88a 	bl	800138e <FLASH_IF_Write_Buffer>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d010      	beq.n	80012a2 <FLASH_IF_Write+0x142>
        {
          status = FLASH_WRITE_ERROR;
 8001280:	f06f 0302 	mvn.w	r3, #2
 8001284:	62fb      	str	r3, [r7, #44]	@ 0x2c
          break; /* exit for loop */
 8001286:	e01f      	b.n	80012c8 <FLASH_IF_Write+0x168>
        }
      }
    }
    else
    {
      if (FLASH_IF_Write_Buffer(curr_dest_addr, (uint8_t *)curr_src_addr, curr_size) != FLASH_OK)
 8001288:	6a3b      	ldr	r3, [r7, #32]
 800128a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800128c:	4619      	mov	r1, r3
 800128e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001290:	f000 f87d 	bl	800138e <FLASH_IF_Write_Buffer>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d003      	beq.n	80012a2 <FLASH_IF_Write+0x142>
      {
        status = FLASH_WRITE_ERROR;
 800129a:	f06f 0302 	mvn.w	r3, #2
 800129e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break; /* exit for loop */
 80012a0:	e012      	b.n	80012c8 <FLASH_IF_Write+0x168>
      }
    }

    /* 2nd part of memory overlapped on 2nd flash sector */
    curr_dest_addr += curr_size;
 80012a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012a6:	4413      	add	r3, r2
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
    curr_src_addr += curr_size;
 80012aa:	6a3a      	ldr	r2, [r7, #32]
 80012ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012ae:	4413      	add	r3, r2
 80012b0:	623b      	str	r3, [r7, #32]
    curr_size = size - curr_size;
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (uint32_t idx = page_start_index; idx <= page_end_index; idx++)
 80012ba:	69fb      	ldr	r3, [r7, #28]
 80012bc:	3301      	adds	r3, #1
 80012be:	61fb      	str	r3, [r7, #28]
 80012c0:	69fa      	ldr	r2, [r7, #28]
 80012c2:	697b      	ldr	r3, [r7, #20]
 80012c4:	429a      	cmp	r2, r3
 80012c6:	d99f      	bls.n	8001208 <FLASH_IF_Write+0xa8>
  }

  return status;
 80012c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN FLASH_IF_Write_2 */

  /* USER CODE END FLASH_IF_Write_2 */
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3730      	adds	r7, #48	@ 0x30
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	1fff75e0 	.word	0x1fff75e0
 80012d8:	03fffc00 	.word	0x03fffc00
 80012dc:	58004000 	.word	0x58004000

080012e0 <FLASH_IF_Write64>:

int32_t FLASH_IF_Write64(uint32_t address, uint64_t data)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b084      	sub	sp, #16
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	e9c7 2300 	strd	r2, r3, [r7]
  /* USER CODE BEGIN FLASH_IF_Write64_1 */

  /* USER CODE END FLASH_IF_Write64_1 */
  while (*(uint64_t *)address != data)
 80012ec:	e00b      	b.n	8001306 <FLASH_IF_Write64+0x26>
  {
    while (LL_FLASH_IsActiveFlag_OperationSuspended());
 80012ee:	bf00      	nop
 80012f0:	f7ff ff24 	bl	800113c <LL_FLASH_IsActiveFlag_OperationSuspended>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1fa      	bne.n	80012f0 <FLASH_IF_Write64+0x10>
    HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address, data);
 80012fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012fe:	68f9      	ldr	r1, [r7, #12]
 8001300:	2001      	movs	r0, #1
 8001302:	f003 f90f 	bl	8004524 <HAL_FLASH_Program>
  while (*(uint64_t *)address != data)
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800130c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001310:	4299      	cmp	r1, r3
 8001312:	bf08      	it	eq
 8001314:	4290      	cmpeq	r0, r2
 8001316:	d1ea      	bne.n	80012ee <FLASH_IF_Write64+0xe>
  }

  return FLASH_OK;
 8001318:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_Write64_2 */

  /* USER CODE END FLASH_IF_Write64_2 */
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <FLASH_IF_EraseByPages>:

int32_t FLASH_IF_EraseByPages(uint32_t page, uint16_t n, int32_t interrupt)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b08a      	sub	sp, #40	@ 0x28
 8001326:	af00      	add	r7, sp, #0
 8001328:	60f8      	str	r0, [r7, #12]
 800132a:	460b      	mov	r3, r1
 800132c:	607a      	str	r2, [r7, #4]
 800132e:	817b      	strh	r3, [r7, #10]
  /* USER CODE END FLASH_IF_EraseByPages_1 */
  HAL_StatusTypeDef hal_status;
  FLASH_EraseInitTypeDef erase_str;
  uint32_t page_error;

  erase_str.TypeErase = FLASH_TYPEERASE_PAGES;
 8001330:	2302      	movs	r3, #2
 8001332:	61bb      	str	r3, [r7, #24]
  erase_str.Page = page;
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	61fb      	str	r3, [r7, #28]
  erase_str.NbPages = n;
 8001338:	897b      	ldrh	r3, [r7, #10]
 800133a:	623b      	str	r3, [r7, #32]

  /* Erase the Page */
  if (interrupt)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d008      	beq.n	8001354 <FLASH_IF_EraseByPages+0x32>
  {
    hal_status = HAL_FLASHEx_Erase_IT(&erase_str);
 8001342:	f107 0318 	add.w	r3, r7, #24
 8001346:	4618      	mov	r0, r3
 8001348:	f003 fa8a 	bl	8004860 <HAL_FLASHEx_Erase_IT>
 800134c:	4603      	mov	r3, r0
 800134e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001352:	e00a      	b.n	800136a <FLASH_IF_EraseByPages+0x48>
  }
  else
  {
    hal_status = HAL_FLASHEx_Erase(&erase_str, &page_error);
 8001354:	f107 0214 	add.w	r2, r7, #20
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	4611      	mov	r1, r2
 800135e:	4618      	mov	r0, r3
 8001360:	f003 fa26 	bl	80047b0 <HAL_FLASHEx_Erase>
 8001364:	4603      	mov	r3, r0
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return ((hal_status == HAL_OK) ? FLASH_OK : ((hal_status == HAL_BUSY) ? FLASH_BUSY : FLASH_ERASE_ERROR));
 800136a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800136e:	2b00      	cmp	r3, #0
 8001370:	d008      	beq.n	8001384 <FLASH_IF_EraseByPages+0x62>
 8001372:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001376:	2b02      	cmp	r3, #2
 8001378:	d101      	bne.n	800137e <FLASH_IF_EraseByPages+0x5c>
 800137a:	2301      	movs	r3, #1
 800137c:	e003      	b.n	8001386 <FLASH_IF_EraseByPages+0x64>
 800137e:	f06f 0301 	mvn.w	r3, #1
 8001382:	e000      	b.n	8001386 <FLASH_IF_EraseByPages+0x64>
 8001384:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_EraseByPages_2 */

  /* USER CODE END FLASH_IF_EraseByPages_2 */
}
 8001386:	4618      	mov	r0, r3
 8001388:	3728      	adds	r7, #40	@ 0x28
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <FLASH_IF_Write_Buffer>:

/* USER CODE END EF */

/* Private Functions Definition -----------------------------------------------*/
static int32_t FLASH_IF_Write_Buffer(uint32_t pDestination, uint8_t *pSource, uint32_t uLength)
{
 800138e:	b580      	push	{r7, lr}
 8001390:	b08a      	sub	sp, #40	@ 0x28
 8001392:	af00      	add	r7, sp, #0
 8001394:	60f8      	str	r0, [r7, #12]
 8001396:	60b9      	str	r1, [r7, #8]
 8001398:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_1 */

  /* USER CODE END FLASH_IF_Write_Buffer_1 */
  uint8_t *pSrc = pSource;
 800139a:	68bb      	ldr	r3, [r7, #8]
 800139c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint64_t src_value;
  int32_t status = FLASH_OK;
 800139e:	2300      	movs	r3, #0
 80013a0:	623b      	str	r3, [r7, #32]

  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013a2:	2300      	movs	r3, #0
 80013a4:	61fb      	str	r3, [r7, #28]
 80013a6:	e020      	b.n	80013ea <FLASH_IF_Write_Buffer+0x5c>
  {
    UTIL_MEM_cpy_8(&src_value, pSrc, sizeof(uint64_t));
 80013a8:	f107 0310 	add.w	r3, r7, #16
 80013ac:	2208      	movs	r2, #8
 80013ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80013b0:	4618      	mov	r0, r3
 80013b2:	f018 fe59 	bl	801a068 <UTIL_MEM_cpy_8>

    /* Avoid writing 0xFFFFFFFFFFFFFFFFLL on erased Flash */
    if (src_value != UINT64_MAX)
 80013b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013be:	bf08      	it	eq
 80013c0:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 80013c4:	d005      	beq.n	80013d2 <FLASH_IF_Write_Buffer+0x44>
    {
      status = FLASH_IF_Write64(pDestination, src_value);
 80013c6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80013ca:	68f8      	ldr	r0, [r7, #12]
 80013cc:	f7ff ff88 	bl	80012e0 <FLASH_IF_Write64>
 80013d0:	6238      	str	r0, [r7, #32]
    }

    pDestination += sizeof(uint64_t);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	3308      	adds	r3, #8
 80013d6:	60fb      	str	r3, [r7, #12]
    pSrc += sizeof(uint64_t);
 80013d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013da:	3308      	adds	r3, #8
 80013dc:	627b      	str	r3, [r7, #36]	@ 0x24

    if (status != FLASH_OK)
 80013de:	6a3b      	ldr	r3, [r7, #32]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d108      	bne.n	80013f6 <FLASH_IF_Write_Buffer+0x68>
  for (uint32_t i = 0; i < (uLength / sizeof(uint64_t)); i++)
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	3301      	adds	r3, #1
 80013e8:	61fb      	str	r3, [r7, #28]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	08db      	lsrs	r3, r3, #3
 80013ee:	69fa      	ldr	r2, [r7, #28]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d3d9      	bcc.n	80013a8 <FLASH_IF_Write_Buffer+0x1a>
 80013f4:	e000      	b.n	80013f8 <FLASH_IF_Write_Buffer+0x6a>
    {
      /* exit the for loop*/
      break;
 80013f6:	bf00      	nop
    }
  }

  return status;
 80013f8:	6a3b      	ldr	r3, [r7, #32]
  /* USER CODE BEGIN FLASH_IF_Write_Buffer_2 */

  /* USER CODE END FLASH_IF_Write_Buffer_2 */
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <FLASH_IF_IsEmpty>:

static int32_t FLASH_IF_IsEmpty(uint8_t *addr, uint32_t size)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
  /* USER CODE END FLASH_IF_IsEmpty_1 */
  uint64_t *addr64;
  uint32_t i;

  /* start memory NOT 64bits aligned */
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 800140c:	e00a      	b.n	8001424 <FLASH_IF_IsEmpty+0x22>
  {
    if (*addr++ != UINT8_MAX)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2bff      	cmp	r3, #255	@ 0xff
 8001418:	d001      	beq.n	800141e <FLASH_IF_IsEmpty+0x1c>
    {
      return FLASH_NOT_EMPTY;
 800141a:	2301      	movs	r3, #1
 800141c:	e039      	b.n	8001492 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	3b01      	subs	r3, #1
 8001422:	603b      	str	r3, [r7, #0]
  while ((((uint32_t)addr) % sizeof(uint64_t)) != 0)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f003 0307 	and.w	r3, r3, #7
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ef      	bne.n	800140e <FLASH_IF_IsEmpty+0xc>
  }

  /* addr64 is 64 bits aligned */
  addr64 = (uint64_t *)addr;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001432:	2300      	movs	r3, #0
 8001434:	60bb      	str	r3, [r7, #8]
 8001436:	e010      	b.n	800145a <FLASH_IF_IsEmpty+0x58>
  {
    if (*addr64++ != UINT64_MAX)
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f103 0208 	add.w	r2, r3, #8
 800143e:	60fa      	str	r2, [r7, #12]
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001448:	bf08      	it	eq
 800144a:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 800144e:	d001      	beq.n	8001454 <FLASH_IF_IsEmpty+0x52>
    {
      return FLASH_NOT_EMPTY;
 8001450:	2301      	movs	r3, #1
 8001452:	e01e      	b.n	8001492 <FLASH_IF_IsEmpty+0x90>
  for (i = 0; i < (size / sizeof(uint64_t)); i++)
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	3301      	adds	r3, #1
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	08db      	lsrs	r3, r3, #3
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	429a      	cmp	r2, r3
 8001462:	d3e9      	bcc.n	8001438 <FLASH_IF_IsEmpty+0x36>
    }
  }
  size -= sizeof(uint64_t) * i;
 8001464:	68bb      	ldr	r3, [r7, #8]
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	683a      	ldr	r2, [r7, #0]
 800146a:	1ad3      	subs	r3, r2, r3
 800146c:	603b      	str	r3, [r7, #0]

  /* end memory NOT 64 bits aligned */
  addr = (uint8_t *)addr64;
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	607b      	str	r3, [r7, #4]
  while (size != 0)
 8001472:	e00a      	b.n	800148a <FLASH_IF_IsEmpty+0x88>
  {
    if (*addr++ != UINT8_MAX)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1c5a      	adds	r2, r3, #1
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2bff      	cmp	r3, #255	@ 0xff
 800147e:	d001      	beq.n	8001484 <FLASH_IF_IsEmpty+0x82>
    {
      return FLASH_NOT_EMPTY;
 8001480:	2301      	movs	r3, #1
 8001482:	e006      	b.n	8001492 <FLASH_IF_IsEmpty+0x90>
    }
    size--;
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	603b      	str	r3, [r7, #0]
  while (size != 0)
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d1f1      	bne.n	8001474 <FLASH_IF_IsEmpty+0x72>
  }
  return FLASH_EMPTY;
 8001490:	2300      	movs	r3, #0
  /* USER CODE BEGIN FLASH_IF_IsEmpty_2 */

  /* USER CODE END FLASH_IF_IsEmpty_2 */
}
 8001492:	4618      	mov	r0, r3
 8001494:	3714      	adds	r7, #20
 8001496:	46bd      	mov	sp, r7
 8001498:	bc80      	pop	{r7}
 800149a:	4770      	bx	lr

0800149c <LL_AHB2_GRP1_EnableClock>:
{
 800149c:	b480      	push	{r7}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80014a4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014a8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014aa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	4313      	orrs	r3, r2
 80014b2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80014c0:	68fb      	ldr	r3, [r7, #12]
}
 80014c2:	bf00      	nop
 80014c4:	3714      	adds	r7, #20
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bc80      	pop	{r7}
 80014ca:	4770      	bx	lr

080014cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b086      	sub	sp, #24
 80014d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]
 80014da:	609a      	str	r2, [r3, #8]
 80014dc:	60da      	str	r2, [r3, #12]
 80014de:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014e0:	2004      	movs	r0, #4
 80014e2:	f7ff ffdb 	bl	800149c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e6:	2002      	movs	r0, #2
 80014e8:	f7ff ffd8 	bl	800149c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ec:	2001      	movs	r0, #1
 80014ee:	f7ff ffd5 	bl	800149c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DBG3_Pin|DBG4_Pin|DBG2_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 6183 	mov.w	r1, #1048	@ 0x418
 80014f8:	4821      	ldr	r0, [pc, #132]	@ (8001580 <MX_GPIO_Init+0xb4>)
 80014fa:	f003 fca3 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET);
 80014fe:	2201      	movs	r2, #1
 8001500:	2120      	movs	r1, #32
 8001502:	481f      	ldr	r0, [pc, #124]	@ (8001580 <MX_GPIO_Init+0xb4>)
 8001504:	f003 fc9e 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2131      	movs	r1, #49	@ 0x31
 800150c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001510:	f003 fc98 	bl	8004e44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DBG3_Pin|DBG4_Pin|LED2_Pin|DBG2_Pin;
 8001514:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001518:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151a:	2301      	movs	r3, #1
 800151c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001522:	2303      	movs	r3, #3
 8001524:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001526:	1d3b      	adds	r3, r7, #4
 8001528:	4619      	mov	r1, r3
 800152a:	4815      	ldr	r0, [pc, #84]	@ (8001580 <MX_GPIO_Init+0xb4>)
 800152c:	f003 fa5c 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = DBG1_Pin|RF_CTRL1_Pin|RF_CTRL2_Pin;
 8001530:	2331      	movs	r3, #49	@ 0x31
 8001532:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001534:	2301      	movs	r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153c:	2303      	movs	r3, #3
 800153e:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	4619      	mov	r1, r3
 8001544:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001548:	f003 fa4e 	bl	80049e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUT1_Pin;
 800154c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001550:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001552:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001556:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001558:	2301      	movs	r3, #1
 800155a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(BUT1_GPIO_Port, &GPIO_InitStruct);
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	4619      	mov	r1, r3
 8001560:	4807      	ldr	r0, [pc, #28]	@ (8001580 <MX_GPIO_Init+0xb4>)
 8001562:	f003 fa41 	bl	80049e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001566:	2200      	movs	r2, #0
 8001568:	2100      	movs	r1, #0
 800156a:	2029      	movs	r0, #41	@ 0x29
 800156c:	f002 fbb9 	bl	8003ce2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001570:	2029      	movs	r0, #41	@ 0x29
 8001572:	f002 fbd0 	bl	8003d16 <HAL_NVIC_EnableIRQ>

}
 8001576:	bf00      	nop
 8001578:	3718      	adds	r7, #24
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	48000400 	.word	0x48000400

08001584 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800158c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001594:	f023 0218 	bic.w	r2, r3, #24
 8001598:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4313      	orrs	r3, r2
 80015a0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 80015a4:	bf00      	nop
 80015a6:	370c      	adds	r7, #12
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bc80      	pop	{r7}
 80015ac:	4770      	bx	lr

080015ae <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015ae:	b580      	push	{r7, lr}
 80015b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015b2:	f001 f9d3 	bl	800295c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015b6:	f000 f807 	bl	80015c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ba:	f7ff ff87 	bl	80014cc <MX_GPIO_Init>
  MX_LoRaWAN_Init();
 80015be:	f008 f9d1 	bl	8009964 <MX_LoRaWAN_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_LoRaWAN_Process();
 80015c2:	f008 f9d7 	bl	8009974 <MX_LoRaWAN_Process>
 80015c6:	e7fc      	b.n	80015c2 <main+0x14>

080015c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b09a      	sub	sp, #104	@ 0x68
 80015cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ce:	f107 0320 	add.w	r3, r7, #32
 80015d2:	2248      	movs	r2, #72	@ 0x48
 80015d4:	2100      	movs	r1, #0
 80015d6:	4618      	mov	r0, r3
 80015d8:	f01a f808 	bl	801b5ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015dc:	f107 0308 	add.w	r3, r7, #8
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
 80015ec:	615a      	str	r2, [r3, #20]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015ee:	f003 fc59 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f7ff ffc6 	bl	8001584 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001678 <SystemClock_Config+0xb0>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001600:	4a1d      	ldr	r2, [pc, #116]	@ (8001678 <SystemClock_Config+0xb0>)
 8001602:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001606:	6013      	str	r3, [r2, #0]
 8001608:	4b1b      	ldr	r3, [pc, #108]	@ (8001678 <SystemClock_Config+0xb0>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001610:	607b      	str	r3, [r7, #4]
 8001612:	687b      	ldr	r3, [r7, #4]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001614:	2324      	movs	r3, #36	@ 0x24
 8001616:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001618:	2381      	movs	r3, #129	@ 0x81
 800161a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800161c:	2301      	movs	r3, #1
 800161e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001620:	2300      	movs	r3, #0
 8001622:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8001624:	23b0      	movs	r3, #176	@ 0xb0
 8001626:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001628:	2300      	movs	r3, #0
 800162a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800162c:	f107 0320 	add.w	r3, r7, #32
 8001630:	4618      	mov	r0, r3
 8001632:	f003 ff83 	bl	800553c <HAL_RCC_OscConfig>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800163c:	f000 f81e 	bl	800167c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8001640:	234f      	movs	r3, #79	@ 0x4f
 8001642:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8001644:	2300      	movs	r3, #0
 8001646:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001648:	2300      	movs	r3, #0
 800164a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001650:	2300      	movs	r3, #0
 8001652:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001658:	f107 0308 	add.w	r3, r7, #8
 800165c:	2102      	movs	r1, #2
 800165e:	4618      	mov	r0, r3
 8001660:	f004 fb08 	bl	8005c74 <HAL_RCC_ClockConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800166a:	f000 f807 	bl	800167c <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3768      	adds	r7, #104	@ 0x68
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	58000400 	.word	0x58000400

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	bf00      	nop
 8001686:	e7fd      	b.n	8001684 <Error_Handler+0x8>

08001688 <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001690:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001694:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001698:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800169c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr

080016a8 <LL_APB1_GRP1_EnableClock>:
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80016b0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016b4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4313      	orrs	r3, r2
 80016be:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80016c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016c4:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4013      	ands	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016cc:	68fb      	ldr	r3, [r7, #12]
}
 80016ce:	bf00      	nop
 80016d0:	3714      	adds	r7, #20
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b08c      	sub	sp, #48	@ 0x30
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_AlarmTypeDef sAlarm = {0};
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	222c      	movs	r2, #44	@ 0x2c
 80016e2:	2100      	movs	r1, #0
 80016e4:	4618      	mov	r0, r3
 80016e6:	f019 ff81 	bl	801b5ec <memset>

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80016ea:	4b22      	ldr	r3, [pc, #136]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016ec:	4a22      	ldr	r2, [pc, #136]	@ (8001778 <MX_RTC_Init+0xa0>)
 80016ee:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_PREDIV_A;
 80016f0:	4b20      	ldr	r3, [pc, #128]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016f2:	221f      	movs	r2, #31
 80016f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80016f6:	4b1f      	ldr	r3, [pc, #124]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80016fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001774 <MX_RTC_Init+0x9c>)
 80016fe:	2200      	movs	r2, #0
 8001700:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001704:	2200      	movs	r2, #0
 8001706:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001708:	4b1a      	ldr	r3, [pc, #104]	@ (8001774 <MX_RTC_Init+0x9c>)
 800170a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800170e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001712:	2200      	movs	r2, #0
 8001714:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_ONLY;
 8001716:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001718:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800171c:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800171e:	4815      	ldr	r0, [pc, #84]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001720:	f004 ff64 	bl	80065ec <HAL_RTC_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_RTC_Init+0x56>
  {
    Error_Handler();
 800172a:	f7ff ffa7 	bl	800167c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  if (HAL_RTCEx_SetSSRU_IT(&hrtc) != HAL_OK)
 800172e:	4811      	ldr	r0, [pc, #68]	@ (8001774 <MX_RTC_Init+0x9c>)
 8001730:	f005 fa52 	bl	8006bd8 <HAL_RTCEx_SetSSRU_IT>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800173a:	f7ff ff9f 	bl	800167c <Error_Handler>
  }

  /** Enable the Alarm A
  */
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 800173e:	2300      	movs	r3, #0
 8001740:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001742:	2300      	movs	r3, #0
 8001744:	60bb      	str	r3, [r7, #8]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001746:	2300      	movs	r3, #0
 8001748:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 800174a:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800174e:	61fb      	str	r3, [r7, #28]
  sAlarm.Alarm = RTC_ALARM_A;
 8001750:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001754:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, 0) != HAL_OK)
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	4619      	mov	r1, r3
 800175c:	4805      	ldr	r0, [pc, #20]	@ (8001774 <MX_RTC_Init+0x9c>)
 800175e:	f004 ffbf 	bl	80066e0 <HAL_RTC_SetAlarm_IT>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001768:	f7ff ff88 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800176c:	bf00      	nop
 800176e:	3730      	adds	r7, #48	@ 0x30
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	200001d8 	.word	0x200001d8
 8001778:	40002800 	.word	0x40002800

0800177c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b090      	sub	sp, #64	@ 0x40
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001784:	f107 0308 	add.w	r3, r7, #8
 8001788:	2238      	movs	r2, #56	@ 0x38
 800178a:	2100      	movs	r1, #0
 800178c:	4618      	mov	r0, r3
 800178e:	f019 ff2d 	bl	801b5ec <memset>
  if(rtcHandle->Instance==RTC)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4a16      	ldr	r2, [pc, #88]	@ (80017f0 <HAL_RTC_MspInit+0x74>)
 8001798:	4293      	cmp	r3, r2
 800179a:	d125      	bne.n	80017e8 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800179c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a0:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80017a2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f004 fe03 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 80017b8:	f7ff ff60 	bl	800167c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80017bc:	f7ff ff64 	bl	8001688 <LL_RCC_EnableRTC>
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 80017c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80017c4:	f7ff ff70 	bl	80016a8 <LL_APB1_GRP1_EnableClock>

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(TAMP_STAMP_LSECSS_SSRU_IRQn, 0, 0);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2100      	movs	r1, #0
 80017cc:	2002      	movs	r0, #2
 80017ce:	f002 fa88 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TAMP_STAMP_LSECSS_SSRU_IRQn);
 80017d2:	2002      	movs	r0, #2
 80017d4:	f002 fa9f 	bl	8003d16 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80017d8:	2200      	movs	r2, #0
 80017da:	2100      	movs	r1, #0
 80017dc:	202a      	movs	r0, #42	@ 0x2a
 80017de:	f002 fa80 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80017e2:	202a      	movs	r0, #42	@ 0x2a
 80017e4:	f002 fa97 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80017e8:	bf00      	nop
 80017ea:	3740      	adds	r7, #64	@ 0x40
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40002800 	.word	0x40002800

080017f4 <LL_PWR_ClearFlag_C1STOP_C1STB>:
  * @brief  Clear standby and stop flags for CPU1
  * @rmtoll EXTSCR       C1CSSF        LL_PWR_ClearFlag_C1STOP_C1STB
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ClearFlag_C1STOP_C1STB(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->EXTSCR, PWR_EXTSCR_C1CSSF);
 80017f8:	4b03      	ldr	r3, [pc, #12]	@ (8001808 <LL_PWR_ClearFlag_C1STOP_C1STB+0x14>)
 80017fa:	2201      	movs	r2, #1
 80017fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8001800:	bf00      	nop
 8001802:	46bd      	mov	sp, r7
 8001804:	bc80      	pop	{r7}
 8001806:	4770      	bx	lr
 8001808:	58000400 	.word	0x58000400

0800180c <PWR_EnterOffMode>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void PWR_EnterOffMode(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterOffMode_1 */

  /* USER CODE END EnterOffMode_1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr

08001818 <PWR_ExitOffMode>:

void PWR_ExitOffMode(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitOffMode_1 */

  /* USER CODE END ExitOffMode_1 */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bc80      	pop	{r7}
 8001822:	4770      	bx	lr

08001824 <PWR_EnterStopMode>:

void PWR_EnterStopMode(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterStopMode_1 */

  /* USER CODE END EnterStopMode_1 */
  HAL_SuspendTick();
 8001828:	f001 f8b8 	bl	800299c <HAL_SuspendTick>
  /* Clear Status Flag before entering STOP/STANDBY Mode */
  LL_PWR_ClearFlag_C1STOP_C1STB();
 800182c:	f7ff ffe2 	bl	80017f4 <LL_PWR_ClearFlag_C1STOP_C1STB>

  /* USER CODE BEGIN EnterStopMode_2 */

  /* USER CODE END EnterStopMode_2 */
  HAL_PWREx_EnterSTOP2Mode(PWR_STOPENTRY_WFI);
 8001830:	2001      	movs	r0, #1
 8001832:	f003 fbc9 	bl	8004fc8 <HAL_PWREx_EnterSTOP2Mode>
  /* USER CODE BEGIN EnterStopMode_3 */

  /* USER CODE END EnterStopMode_3 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}

0800183a <PWR_ExitStopMode>:

void PWR_ExitStopMode(void)
{
 800183a:	b580      	push	{r7, lr}
 800183c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitStopMode_1 */

  /* USER CODE END ExitStopMode_1 */
  /* Resume sysTick : work around for debugger problem in dual core */
  HAL_ResumeTick();
 800183e:	f001 f8bb 	bl	80029b8 <HAL_ResumeTick>
    ADC interface
    DAC interface USARTx, TIMx, i2Cx, SPIx
    SRAM ctrls, DMAx, DMAMux, AES, RNG, HSEM  */

  /* Resume not retained USARTx and DMA */
  vcom_Resume();
 8001842:	f000 ff3b 	bl	80026bc <vcom_Resume>
  /* USER CODE BEGIN ExitStopMode_2 */

  /* USER CODE END ExitStopMode_2 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}

0800184a <PWR_EnterSleepMode>:

void PWR_EnterSleepMode(void)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EnterSleepMode_1 */

  /* USER CODE END EnterSleepMode_1 */
  /* Suspend sysTick */
  HAL_SuspendTick();
 800184e:	f001 f8a5 	bl	800299c <HAL_SuspendTick>
  /* USER CODE BEGIN EnterSleepMode_2 */

  /* USER CODE END EnterSleepMode_2 */
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8001852:	2101      	movs	r1, #1
 8001854:	2000      	movs	r0, #0
 8001856:	f003 fb33 	bl	8004ec0 <HAL_PWR_EnterSLEEPMode>
  /* USER CODE BEGIN EnterSleepMode_3 */

  /* USER CODE END EnterSleepMode_3 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}

0800185e <PWR_ExitSleepMode>:

void PWR_ExitSleepMode(void)
{
 800185e:	b580      	push	{r7, lr}
 8001860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ExitSleepMode_1 */

  /* USER CODE END ExitSleepMode_1 */
  /* Resume sysTick */
  HAL_ResumeTick();
 8001862:	f001 f8a9 	bl	80029b8 <HAL_ResumeTick>

  /* USER CODE BEGIN ExitSleepMode_2 */

  /* USER CODE END ExitSleepMode_2 */
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr

08001876 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001876:	b480      	push	{r7}
 8001878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800187a:	bf00      	nop
 800187c:	e7fd      	b.n	800187a <NMI_Handler+0x4>

0800187e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187e:	b480      	push	{r7}
 8001880:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001882:	bf00      	nop
 8001884:	e7fd      	b.n	8001882 <HardFault_Handler+0x4>

08001886 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188a:	bf00      	nop
 800188c:	e7fd      	b.n	800188a <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <BusFault_Handler+0x4>

08001896 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800189a:	bf00      	nop
 800189c:	e7fd      	b.n	800189a <UsageFault_Handler+0x4>

0800189e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189e:	b480      	push	{r7}
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018a2:	bf00      	nop
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr

080018aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bc80      	pop	{r7}
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	bc80      	pop	{r7}
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bc80      	pop	{r7}
 80018cc:	4770      	bx	lr
	...

080018d0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler>:

/**
  * @brief This function handles RTC Tamper, RTC TimeStamp, LSECSS and RTC SSRU Interrupts.
  */
void TAMP_STAMP_LSECSS_SSRU_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 0 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 0 */
  HAL_RTCEx_SSRUIRQHandler(&hrtc);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <TAMP_STAMP_LSECSS_SSRU_IRQHandler+0x10>)
 80018d6:	f005 f9bb 	bl	8006c50 <HAL_RTCEx_SSRUIRQHandler>
  /* USER CODE BEGIN TAMP_STAMP_LSECSS_SSRU_IRQn 1 */

  /* USER CODE END TAMP_STAMP_LSECSS_SSRU_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	200001d8 	.word	0x200001d8

080018e4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 Channel 1 Interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <DMA1_Channel1_IRQHandler+0x10>)
 80018ea:	f002 fcab 	bl	8004244 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	200002b4 	.word	0x200002b4

080018f8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 Interrupt.
  */
void USART1_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <USART1_IRQHandler+0x10>)
 80018fe:	f005 ffff 	bl	8007900 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	20000224 	.word	0x20000224

0800190c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI Lines [15:10] Interrupt.
  */
void EXTI15_10_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BUT1_Pin);
 8001910:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001914:	f003 faae 	bl	8004e74 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001918:	bf00      	nop
 800191a:	bd80      	pop	{r7, pc}

0800191c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC Alarms (A and B) Interrupt.
  */
void RTC_Alarm_IRQHandler(void)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001920:	4802      	ldr	r0, [pc, #8]	@ (800192c <RTC_Alarm_IRQHandler+0x10>)
 8001922:	f005 f845 	bl	80069b0 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001926:	bf00      	nop
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	200001d8 	.word	0x200001d8

08001930 <SUBGHZ_Radio_IRQHandler>:

/**
  * @brief This function handles SUBGHZ Radio Interrupt.
  */
void SUBGHZ_Radio_IRQHandler(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 0 */

  /* USER CODE END SUBGHZ_Radio_IRQn 0 */
  HAL_SUBGHZ_IRQHandler(&hsubghz);
 8001934:	4802      	ldr	r0, [pc, #8]	@ (8001940 <SUBGHZ_Radio_IRQHandler+0x10>)
 8001936:	f005 fcf3 	bl	8007320 <HAL_SUBGHZ_IRQHandler>
  /* USER CODE BEGIN SUBGHZ_Radio_IRQn 1 */

  /* USER CODE END SUBGHZ_Radio_IRQn 1 */
}
 800193a:	bf00      	nop
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	20000210 	.word	0x20000210

08001944 <LL_APB3_GRP1_EnableClock>:
  * @param  Periphs This parameter can be a combination of the following values:
  *         @arg @ref LL_APB3_GRP1_PERIPH_SUBGHZSPI
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 8001944:	b480      	push	{r7}
 8001946:	b085      	sub	sp, #20
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 800194c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001950:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001952:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	664b      	str	r3, [r1, #100]	@ 0x64
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 800195c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001960:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4013      	ands	r3, r2
 8001966:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001968:	68fb      	ldr	r3, [r7, #12]
}
 800196a:	bf00      	nop
 800196c:	3714      	adds	r7, #20
 800196e:	46bd      	mov	sp, r7
 8001970:	bc80      	pop	{r7}
 8001972:	4770      	bx	lr

08001974 <MX_SUBGHZ_Init>:

SUBGHZ_HandleTypeDef hsubghz;

/* SUBGHZ init function */
void MX_SUBGHZ_Init(void)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE END SUBGHZ_Init 0 */

  /* USER CODE BEGIN SUBGHZ_Init 1 */

  /* USER CODE END SUBGHZ_Init 1 */
  hsubghz.Init.BaudratePrescaler = SUBGHZSPI_BAUDRATEPRESCALER_4;
 8001978:	4b06      	ldr	r3, [pc, #24]	@ (8001994 <MX_SUBGHZ_Init+0x20>)
 800197a:	2208      	movs	r2, #8
 800197c:	601a      	str	r2, [r3, #0]
  if (HAL_SUBGHZ_Init(&hsubghz) != HAL_OK)
 800197e:	4805      	ldr	r0, [pc, #20]	@ (8001994 <MX_SUBGHZ_Init+0x20>)
 8001980:	f005 fa52 	bl	8006e28 <HAL_SUBGHZ_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_SUBGHZ_Init+0x1a>
  {
    Error_Handler();
 800198a:	f7ff fe77 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SUBGHZ_Init 2 */

  /* USER CODE END SUBGHZ_Init 2 */

}
 800198e:	bf00      	nop
 8001990:	bd80      	pop	{r7, pc}
 8001992:	bf00      	nop
 8001994:	20000210 	.word	0x20000210

08001998 <HAL_SUBGHZ_MspInit>:

void HAL_SUBGHZ_MspInit(SUBGHZ_HandleTypeDef* subghzHandle)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]

  /* USER CODE BEGIN SUBGHZ_MspInit 0 */

  /* USER CODE END SUBGHZ_MspInit 0 */
    /* SUBGHZ clock enable */
    __HAL_RCC_SUBGHZSPI_CLK_ENABLE();
 80019a0:	2001      	movs	r0, #1
 80019a2:	f7ff ffcf 	bl	8001944 <LL_APB3_GRP1_EnableClock>

    /* SUBGHZ interrupt Init */
    HAL_NVIC_SetPriority(SUBGHZ_Radio_IRQn, 0, 0);
 80019a6:	2200      	movs	r2, #0
 80019a8:	2100      	movs	r1, #0
 80019aa:	2032      	movs	r0, #50	@ 0x32
 80019ac:	f002 f999 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SUBGHZ_Radio_IRQn);
 80019b0:	2032      	movs	r0, #50	@ 0x32
 80019b2:	f002 f9b0 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SUBGHZ_MspInit 1 */

  /* USER CODE END SUBGHZ_MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	3708      	adds	r7, #8
 80019ba:	46bd      	mov	sp, r7
 80019bc:	bd80      	pop	{r7, pc}

080019be <LL_RCC_SetClkAfterWakeFromStop>:
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_STOPWUCK, Clock);
 80019c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80019d0:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4313      	orrs	r3, r2
 80019d8:	608b      	str	r3, [r1, #8]
}
 80019da:	bf00      	nop
 80019dc:	370c      	adds	r7, #12
 80019de:	46bd      	mov	sp, r7
 80019e0:	bc80      	pop	{r7}
 80019e2:	4770      	bx	lr

080019e4 <LL_FLASH_GetUDN>:
/**
  * @brief  Return the Unique Device Number
  * @retval Values between Min_Data=0x00000000 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_FLASH_GetUDN(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID64_BASE)));
 80019e8:	4b02      	ldr	r3, [pc, #8]	@ (80019f4 <LL_FLASH_GetUDN+0x10>)
 80019ea:	681b      	ldr	r3, [r3, #0]
}
 80019ec:	4618      	mov	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	1fff7580 	.word	0x1fff7580

080019f8 <LL_FLASH_GetDeviceID>:
  * @brief  Return the Device ID
  *         For STM32WLxxxx devices, the device ID is 0x15
  * @retval Values between Min_Data=0x00 and Max_Data=0xFF (ex: Device ID is 0x15)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetDeviceID(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((READ_REG(*((uint32_t *)UID64_BASE + 1U))) & 0x000000FFU);
 80019fc:	4b03      	ldr	r3, [pc, #12]	@ (8001a0c <LL_FLASH_GetDeviceID+0x14>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	b2db      	uxtb	r3, r3
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	1fff7584 	.word	0x1fff7584

08001a10 <LL_FLASH_GetSTCompanyID>:
  * @brief  Return the ST Company ID
  * @note   For STM32WLxxxx devices, the ST Company ID is 0x0080E1
  * @retval Values between Min_Data=0x00 and Max_Data=0xFFFFFF (ex: ST Company ID is 0x0080E1)
  */
__STATIC_INLINE uint32_t LL_FLASH_GetSTCompanyID(void)
{
 8001a10:	b480      	push	{r7}
 8001a12:	af00      	add	r7, sp, #0
  return (((READ_REG(*((uint32_t *)UID64_BASE + 1U))) >> 8U) & 0x00FFFFFFU);
 8001a14:	4b03      	ldr	r3, [pc, #12]	@ (8001a24 <LL_FLASH_GetSTCompanyID+0x14>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	0a1b      	lsrs	r3, r3, #8
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	1fff7584 	.word	0x1fff7584

08001a28 <SystemApp_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
void SystemApp_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SystemApp_Init_1 */

  /* USER CODE END SystemApp_Init_1 */

  /* Ensure that MSI is wake-up system clock */
  __HAL_RCC_WAKEUPSTOP_CLK_CONFIG(RCC_STOP_WAKEUPCLOCK_MSI);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ffc6 	bl	80019be <LL_RCC_SetClkAfterWakeFromStop>

  /*Initialize timer and RTC*/
  UTIL_TIMER_Init();
 8001a32:	f019 f8a5 	bl	801ab80 <UTIL_TIMER_Init>
  SYS_TimerInitialisedFlag = 1;
 8001a36:	4b0e      	ldr	r3, [pc, #56]	@ (8001a70 <SystemApp_Init+0x48>)
 8001a38:	2201      	movs	r2, #1
 8001a3a:	701a      	strb	r2, [r3, #0]
  /* Initializes the SW probes pins and the monitor RF pins via Alternate Function */
  DBG_Init();
 8001a3c:	f000 f988 	bl	8001d50 <DBG_Init>

  /*Initialize the terminal */
  UTIL_ADV_TRACE_Init();
 8001a40:	f019 fb2e 	bl	801b0a0 <UTIL_ADV_TRACE_Init>
  UTIL_ADV_TRACE_RegisterTimeStampFunction(TimestampNow);
 8001a44:	480b      	ldr	r0, [pc, #44]	@ (8001a74 <SystemApp_Init+0x4c>)
 8001a46:	f019 fbd9 	bl	801b1fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>

  /* #warning "should be removed when proper obl is done" */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001a78 <SystemApp_Init+0x50>)
 8001a4c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a50:	611a      	str	r2, [r3, #16]

  /*Set verbose LEVEL*/
  UTIL_ADV_TRACE_SetVerboseLevel(VERBOSE_LEVEL);
 8001a52:	2002      	movs	r0, #2
 8001a54:	f019 fbe0 	bl	801b218 <UTIL_ADV_TRACE_SetVerboseLevel>

  /*Initialize the temperature and Battery measurement services */
  SYS_InitMeasurement();
 8001a58:	f7ff fabe 	bl	8000fd8 <SYS_InitMeasurement>

  /*Initialize the Sensors */
  EnvSensors_Init();
 8001a5c:	f000 f9fe 	bl	8001e5c <EnvSensors_Init>

  /*Init low power manager*/
  UTIL_LPM_Init();
 8001a60:	f018 fa5c 	bl	8019f1c <UTIL_LPM_Init>
  /* Disable Stand-by mode */
  UTIL_LPM_SetOffMode((1 << CFG_LPM_APPLI_Id), UTIL_LPM_DISABLE);
 8001a64:	2101      	movs	r1, #1
 8001a66:	2001      	movs	r0, #1
 8001a68:	f018 fa98 	bl	8019f9c <UTIL_LPM_SetOffMode>
#endif /* LOW_POWER_DISABLE */

  /* USER CODE BEGIN SystemApp_Init_2 */

  /* USER CODE END SystemApp_Init_2 */
}
 8001a6c:	bf00      	nop
 8001a6e:	bd80      	pop	{r7, pc}
 8001a70:	2000021c 	.word	0x2000021c
 8001a74:	08001c41 	.word	0x08001c41
 8001a78:	58004000 	.word	0x58004000

08001a7c <UTIL_SEQ_Idle>:

/**
  * @brief redefines __weak function in stm32_seq.c such to enter low power
  */
void UTIL_SEQ_Idle(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_SEQ_Idle_1 */

  /* USER CODE END UTIL_SEQ_Idle_1 */
  UTIL_LPM_EnterLowPower();
 8001a80:	f018 fabc 	bl	8019ffc <UTIL_LPM_EnterLowPower>
  /* USER CODE BEGIN UTIL_SEQ_Idle_2 */

  /* USER CODE END UTIL_SEQ_Idle_2 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <GetBatteryLevel>:

uint8_t GetBatteryLevel(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
  uint8_t batteryLevel = 0;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_0 */

  /* USER CODE END GetBatteryLevel_0 */

  batteryLevelmV = (uint16_t) SYS_GetBatteryLevel();
 8001a92:	f7ff faaf 	bl	8000ff4 <SYS_GetBatteryLevel>
 8001a96:	4603      	mov	r3, r0
 8001a98:	80bb      	strh	r3, [r7, #4]

  /* Convert battery level from mV to linear scale: 1 (very low) to 254 (fully charged) */
  if (batteryLevelmV > VDD_BAT)
 8001a9a:	88bb      	ldrh	r3, [r7, #4]
 8001a9c:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d902      	bls.n	8001aaa <GetBatteryLevel+0x22>
  {
    batteryLevel = LORAWAN_MAX_BAT;
 8001aa4:	23fe      	movs	r3, #254	@ 0xfe
 8001aa6:	71fb      	strb	r3, [r7, #7]
 8001aa8:	e014      	b.n	8001ad4 <GetBatteryLevel+0x4c>
  }
  else if (batteryLevelmV < VDD_MIN)
 8001aaa:	88bb      	ldrh	r3, [r7, #4]
 8001aac:	f5b3 6fe1 	cmp.w	r3, #1800	@ 0x708
 8001ab0:	d202      	bcs.n	8001ab8 <GetBatteryLevel+0x30>
  {
    batteryLevel = 0;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	e00d      	b.n	8001ad4 <GetBatteryLevel+0x4c>
  }
  else
  {
    batteryLevel = (((uint32_t)(batteryLevelmV - VDD_MIN) * LORAWAN_MAX_BAT) / (VDD_BAT - VDD_MIN));
 8001ab8:	88bb      	ldrh	r3, [r7, #4]
 8001aba:	f5a3 63e1 	sub.w	r3, r3, #1800	@ 0x708
 8001abe:	461a      	mov	r2, r3
 8001ac0:	4613      	mov	r3, r2
 8001ac2:	01db      	lsls	r3, r3, #7
 8001ac4:	1a9b      	subs	r3, r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <GetBatteryLevel+0x58>)
 8001acc:	fba3 2302 	umull	r2, r3, r3, r2
 8001ad0:	09db      	lsrs	r3, r3, #7
 8001ad2:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN GetBatteryLevel_2 */

  /* USER CODE END GetBatteryLevel_2 */

  return batteryLevel;  /* 1 (very low) to 254 (fully charged) */
 8001ad4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3708      	adds	r7, #8
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	1b4e81b5 	.word	0x1b4e81b5

08001ae4 <GetTemperatureLevel>:

int16_t GetTemperatureLevel(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af00      	add	r7, sp, #0
  int16_t temperatureLevel = 0;
 8001aea:	2300      	movs	r3, #0
 8001aec:	83fb      	strh	r3, [r7, #30]

  sensor_t sensor_data;

  EnvSensors_Read(&sensor_data);
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	4618      	mov	r0, r3
 8001af2:	f000 f989 	bl	8001e08 <EnvSensors_Read>
  temperatureLevel = (int16_t)(sensor_data.temperature);
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	4618      	mov	r0, r3
 8001afa:	f7ff f80f 	bl	8000b1c <__aeabi_f2iz>
 8001afe:	4603      	mov	r3, r0
 8001b00:	83fb      	strh	r3, [r7, #30]
  /* USER CODE BEGIN GetTemperatureLevel */

  /* USER CODE END GetTemperatureLevel */
  return temperatureLevel;
 8001b02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3720      	adds	r7, #32
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <GetUniqueId>:

void GetUniqueId(uint8_t *id)
{
 8001b0e:	b590      	push	{r4, r7, lr}
 8001b10:	b087      	sub	sp, #28
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN GetUniqueId_1 */

  /* USER CODE END GetUniqueId_1 */
  uint32_t val = 0;
 8001b16:	2300      	movs	r3, #0
 8001b18:	617b      	str	r3, [r7, #20]
  val = LL_FLASH_GetUDN();
 8001b1a:	f7ff ff63 	bl	80019e4 <LL_FLASH_GetUDN>
 8001b1e:	6178      	str	r0, [r7, #20]
  if (val == 0xFFFFFFFF)  /* Normally this should not happen */
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b26:	d138      	bne.n	8001b9a <GetUniqueId+0x8c>
  {
    uint32_t ID_1_3_val = HAL_GetUIDw0() + HAL_GetUIDw2();
 8001b28:	f000 ff54 	bl	80029d4 <HAL_GetUIDw0>
 8001b2c:	4604      	mov	r4, r0
 8001b2e:	f000 ff65 	bl	80029fc <HAL_GetUIDw2>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4423      	add	r3, r4
 8001b36:	613b      	str	r3, [r7, #16]
    uint32_t ID_2_val = HAL_GetUIDw1();
 8001b38:	f000 ff56 	bl	80029e8 <HAL_GetUIDw1>
 8001b3c:	60f8      	str	r0, [r7, #12]

    id[7] = (ID_1_3_val) >> 24;
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	0e1a      	lsrs	r2, r3, #24
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	3307      	adds	r3, #7
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	701a      	strb	r2, [r3, #0]
    id[6] = (ID_1_3_val) >> 16;
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	0c1a      	lsrs	r2, r3, #16
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	3306      	adds	r3, #6
 8001b52:	b2d2      	uxtb	r2, r2
 8001b54:	701a      	strb	r2, [r3, #0]
    id[5] = (ID_1_3_val) >> 8;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	0a1a      	lsrs	r2, r3, #8
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	3305      	adds	r3, #5
 8001b5e:	b2d2      	uxtb	r2, r2
 8001b60:	701a      	strb	r2, [r3, #0]
    id[4] = (ID_1_3_val);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3304      	adds	r3, #4
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]
    id[3] = (ID_2_val) >> 24;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	0e1a      	lsrs	r2, r3, #24
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	3303      	adds	r3, #3
 8001b74:	b2d2      	uxtb	r2, r2
 8001b76:	701a      	strb	r2, [r3, #0]
    id[2] = (ID_2_val) >> 16;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	0c1a      	lsrs	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	3302      	adds	r3, #2
 8001b80:	b2d2      	uxtb	r2, r2
 8001b82:	701a      	strb	r2, [r3, #0]
    id[1] = (ID_2_val) >> 8;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	0a1a      	lsrs	r2, r3, #8
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2d2      	uxtb	r2, r2
 8001b8e:	701a      	strb	r2, [r3, #0]
    id[0] = (ID_2_val);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	b2da      	uxtb	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN GetUniqueId_2 */

  /* USER CODE END GetUniqueId_2 */
}
 8001b98:	e031      	b.n	8001bfe <GetUniqueId+0xf0>
    id[7] = val & 0xFF;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	3307      	adds	r3, #7
 8001b9e:	697a      	ldr	r2, [r7, #20]
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	701a      	strb	r2, [r3, #0]
    id[6] = (val >> 8) & 0xFF;
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	0a1a      	lsrs	r2, r3, #8
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	3306      	adds	r3, #6
 8001bac:	b2d2      	uxtb	r2, r2
 8001bae:	701a      	strb	r2, [r3, #0]
    id[5] = (val >> 16) & 0xFF;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	0c1a      	lsrs	r2, r3, #16
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3305      	adds	r3, #5
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	701a      	strb	r2, [r3, #0]
    id[4] = (val >> 24) & 0xFF;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	0e1a      	lsrs	r2, r3, #24
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	b2d2      	uxtb	r2, r2
 8001bc6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetDeviceID();
 8001bc8:	f7ff ff16 	bl	80019f8 <LL_FLASH_GetDeviceID>
 8001bcc:	6178      	str	r0, [r7, #20]
    id[3] = val & 0xFF;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	3303      	adds	r3, #3
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	b2d2      	uxtb	r2, r2
 8001bd6:	701a      	strb	r2, [r3, #0]
    val = LL_FLASH_GetSTCompanyID();
 8001bd8:	f7ff ff1a 	bl	8001a10 <LL_FLASH_GetSTCompanyID>
 8001bdc:	6178      	str	r0, [r7, #20]
    id[2] = val & 0xFF;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3302      	adds	r3, #2
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	701a      	strb	r2, [r3, #0]
    id[1] = (val >> 8) & 0xFF;
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	0a1a      	lsrs	r2, r3, #8
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	3301      	adds	r3, #1
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]
    id[0] = (val >> 16) & 0xFF;
 8001bf4:	697b      	ldr	r3, [r7, #20]
 8001bf6:	0c1b      	lsrs	r3, r3, #16
 8001bf8:	b2da      	uxtb	r2, r3
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	701a      	strb	r2, [r3, #0]
}
 8001bfe:	bf00      	nop
 8001c00:	371c      	adds	r7, #28
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd90      	pop	{r4, r7, pc}

08001c06 <GetDevAddr>:

uint32_t GetDevAddr(void)
{
 8001c06:	b590      	push	{r4, r7, lr}
 8001c08:	b083      	sub	sp, #12
 8001c0a:	af00      	add	r7, sp, #0
  uint32_t val = 0;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN GetDevAddr_1 */

  /* USER CODE END GetDevAddr_1 */

  val = LL_FLASH_GetUDN();
 8001c10:	f7ff fee8 	bl	80019e4 <LL_FLASH_GetUDN>
 8001c14:	6078      	str	r0, [r7, #4]
  if (val == 0xFFFFFFFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c1c:	d10b      	bne.n	8001c36 <GetDevAddr+0x30>
  {
    val = ((HAL_GetUIDw0()) ^ (HAL_GetUIDw1()) ^ (HAL_GetUIDw2()));
 8001c1e:	f000 fed9 	bl	80029d4 <HAL_GetUIDw0>
 8001c22:	4604      	mov	r4, r0
 8001c24:	f000 fee0 	bl	80029e8 <HAL_GetUIDw1>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	405c      	eors	r4, r3
 8001c2c:	f000 fee6 	bl	80029fc <HAL_GetUIDw2>
 8001c30:	4603      	mov	r3, r0
 8001c32:	4063      	eors	r3, r4
 8001c34:	607b      	str	r3, [r7, #4]
  }

  /* USER CODE BEGIN GetDevAddr_2 */

  /* USER CODE END GetDevAddr_2 */
  return val;
 8001c36:	687b      	ldr	r3, [r7, #4]

}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd90      	pop	{r4, r7, pc}

08001c40 <TimestampNow>:
/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/

static void TimestampNow(uint8_t *buff, uint16_t *size)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b086      	sub	sp, #24
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN TimestampNow_1 */

  /* USER CODE END TimestampNow_1 */
  SysTime_t curtime = SysTimeGet();
 8001c4a:	f107 0308 	add.w	r3, r7, #8
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f018 fae4 	bl	801a21c <SysTimeGet>
  tiny_snprintf_like((char *)buff, MAX_TS_SIZE, "%ds%03d:", curtime.Seconds, curtime.SubSeconds);
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c5a:	9200      	str	r2, [sp, #0]
 8001c5c:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <TimestampNow+0x3c>)
 8001c5e:	2110      	movs	r1, #16
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f81d 	bl	8001ca0 <tiny_snprintf_like>
  *size = strlen((char *)buff);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f7fe fa86 	bl	8000178 <strlen>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN TimestampNow_2 */

  /* USER CODE END TimestampNow_2 */
}
 8001c74:	bf00      	nop
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	0801b760 	.word	0x0801b760

08001c80 <UTIL_ADV_TRACE_PreSendHook>:

/* Disable StopMode when traces need to be printed */
void UTIL_ADV_TRACE_PreSendHook(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_1 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_DISABLE);
 8001c84:	2101      	movs	r1, #1
 8001c86:	2002      	movs	r0, #2
 8001c88:	f018 f958 	bl	8019f3c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_ADV_TRACE_PreSendHook_2 */

  /* USER CODE END UTIL_ADV_TRACE_PreSendHook_2 */
}
 8001c8c:	bf00      	nop
 8001c8e:	bd80      	pop	{r7, pc}

08001c90 <UTIL_ADV_TRACE_PostSendHook>:
/* Re-enable StopMode when traces have been printed */
void UTIL_ADV_TRACE_PostSendHook(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_1 */

  /* USER CODE END UTIL_LPM_SetStopMode_1 */
  UTIL_LPM_SetStopMode((1 << CFG_LPM_UART_TX_Id), UTIL_LPM_ENABLE);
 8001c94:	2100      	movs	r1, #0
 8001c96:	2002      	movs	r0, #2
 8001c98:	f018 f950 	bl	8019f3c <UTIL_LPM_SetStopMode>
  /* USER CODE BEGIN UTIL_LPM_SetStopMode_2 */

  /* USER CODE END UTIL_LPM_SetStopMode_2 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <tiny_snprintf_like>:

static void tiny_snprintf_like(char *buf, uint32_t maxsize, const char *strFormat, ...)
{
 8001ca0:	b40c      	push	{r2, r3}
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN tiny_snprintf_like_1 */

  /* USER CODE END tiny_snprintf_like_1 */
  va_list vaArgs;
  va_start(vaArgs, strFormat);
 8001cac:	f107 031c 	add.w	r3, r7, #28
 8001cb0:	60fb      	str	r3, [r7, #12]
  UTIL_ADV_TRACE_VSNPRINTF(buf, maxsize, strFormat, vaArgs);
 8001cb2:	6839      	ldr	r1, [r7, #0]
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	69ba      	ldr	r2, [r7, #24]
 8001cb8:	6878      	ldr	r0, [r7, #4]
 8001cba:	f018 fc81 	bl	801a5c0 <tiny_vsnprintf_like>
  va_end(vaArgs);
  /* USER CODE BEGIN tiny_snprintf_like_2 */

  /* USER CODE END tiny_snprintf_like_2 */
}
 8001cbe:	bf00      	nop
 8001cc0:	3710      	adds	r7, #16
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001cc8:	b002      	add	sp, #8
 8001cca:	4770      	bx	lr

08001ccc <HAL_InitTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /*Don't enable SysTick if TIMER_IF is based on other counters (e.g. RTC) */
  /* USER CODE BEGIN HAL_InitTick_1 */

  /* USER CODE END HAL_InitTick_1 */
  return HAL_OK;
 8001cd4:	2300      	movs	r3, #0
  /* USER CODE BEGIN HAL_InitTick_2 */

  /* USER CODE END HAL_InitTick_2 */
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_GetTick>:

/**
  * @note This function overwrites the __weak one from HAL
  */
uint32_t HAL_GetTick(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_GetTick_1 */

  /* USER CODE END HAL_GetTick_1 */
  if (SYS_TimerInitialisedFlag == 0)
 8001cea:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <HAL_GetTick+0x24>)
 8001cec:	781b      	ldrb	r3, [r3, #0]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d002      	beq.n	8001cf8 <HAL_GetTick+0x18>

    /* USER CODE END HAL_GetTick_EarlyCall */
  }
  else
  {
    ret = TIMER_IF_GetTimerValue();
 8001cf2:	f000 f97f 	bl	8001ff4 <TIMER_IF_GetTimerValue>
 8001cf6:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN HAL_GetTick_2 */

  /* USER CODE END HAL_GetTick_2 */
  return ret;
 8001cf8:	687b      	ldr	r3, [r7, #4]
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	2000021c 	.word	0x2000021c

08001d08 <HAL_Delay>:

/**
  * @note This function overwrites the __weak one from HAL
  */
void HAL_Delay(__IO uint32_t Delay)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b082      	sub	sp, #8
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  /* TIMER_IF can be based on other counter the SysTick e.g. RTC */
  /* USER CODE BEGIN HAL_Delay_1 */

  /* USER CODE END HAL_Delay_1 */
  TIMER_IF_DelayMs(Delay);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f000 f9f5 	bl	8002102 <TIMER_IF_DelayMs>
  /* USER CODE BEGIN HAL_Delay_2 */

  /* USER CODE END HAL_Delay_2 */
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <LL_AHB2_GRP1_EnableClock>:
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d28:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d2c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d2e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001d3c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4013      	ands	r3, r2
 8001d42:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d44:	68fb      	ldr	r3, [r7, #12]
}
 8001d46:	bf00      	nop
 8001d48:	3714      	adds	r7, #20
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bc80      	pop	{r7}
 8001d4e:	4770      	bx	lr

08001d50 <DBG_Init>:

/**
  * @brief Initializes the SW probes pins and the monitor RF pins via Alternate Function
  */
void DBG_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b086      	sub	sp, #24
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END DBG_Init_1 */

  /* SW probes */
#if defined (DEBUGGER_ENABLED) && ( DEBUGGER_ENABLED == 0 )
  HAL_DBGMCU_DisableDBGSleepMode();
 8001d56:	f000 fe5b 	bl	8002a10 <HAL_DBGMCU_DisableDBGSleepMode>
  HAL_DBGMCU_DisableDBGStopMode();
 8001d5a:	f000 fe5f 	bl	8002a1c <HAL_DBGMCU_DisableDBGStopMode>
  HAL_DBGMCU_DisableDBGStandbyMode();
 8001d5e:	f000 fe63 	bl	8002a28 <HAL_DBGMCU_DisableDBGStandbyMode>
  HAL_DBGMCU_EnableDBGStandbyMode();
#elif !defined (DEBUGGER_ENABLED)
#error "DEBUGGER_ENABLED not defined or out of range <0,1>"
#endif /* DEBUGGER_OFF */

  GPIO_InitTypeDef  GPIO_InitStruct = {0};
 8001d62:	1d3b      	adds	r3, r7, #4
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]

  /* Configure the GPIO pin */
  GPIO_InitStruct.Mode   = GPIO_MODE_OUTPUT_PP;
 8001d70:	2301      	movs	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull   = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed  = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d78:	2303      	movs	r3, #3
 8001d7a:	613b      	str	r3, [r7, #16]

  /* Enable the GPIO Clock */
  PROBE_LINE1_CLK_ENABLE();
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	f7ff ffcf 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE2_CLK_ENABLE();
 8001d82:	2002      	movs	r0, #2
 8001d84:	f7ff ffcc 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE3_CLK_ENABLE();
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f7ff ffc9 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>
  PROBE_LINE4_CLK_ENABLE();
 8001d8e:	2002      	movs	r0, #2
 8001d90:	f7ff ffc6 	bl	8001d20 <LL_AHB2_GRP1_EnableClock>

  GPIO_InitStruct.Pin    = PROBE_LINE1_PIN;
 8001d94:	2301      	movs	r3, #1
 8001d96:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE1_PORT, &GPIO_InitStruct);
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001da0:	f002 fe22 	bl	80049e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE2_PIN;
 8001da4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001da8:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE2_PORT, &GPIO_InitStruct);
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4815      	ldr	r0, [pc, #84]	@ (8001e04 <DBG_Init+0xb4>)
 8001db0:	f002 fe1a 	bl	80049e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE3_PIN;
 8001db4:	2308      	movs	r3, #8
 8001db6:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE3_PORT, &GPIO_InitStruct);
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4619      	mov	r1, r3
 8001dbc:	4811      	ldr	r0, [pc, #68]	@ (8001e04 <DBG_Init+0xb4>)
 8001dbe:	f002 fe13 	bl	80049e8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin    = PROBE_LINE4_PIN;
 8001dc2:	2310      	movs	r3, #16
 8001dc4:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(PROBE_LINE4_PORT, &GPIO_InitStruct);
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480e      	ldr	r0, [pc, #56]	@ (8001e04 <DBG_Init+0xb4>)
 8001dcc:	f002 fe0c 	bl	80049e8 <HAL_GPIO_Init>

  /* Reset probe Pins */
  HAL_GPIO_WritePin(PROBE_LINE1_PORT, PROBE_LINE1_PIN, GPIO_PIN_RESET);
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	2101      	movs	r1, #1
 8001dd4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001dd8:	f003 f834 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE2_PORT, PROBE_LINE2_PIN, GPIO_PIN_RESET);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001de2:	4808      	ldr	r0, [pc, #32]	@ (8001e04 <DBG_Init+0xb4>)
 8001de4:	f003 f82e 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE3_PORT, PROBE_LINE3_PIN, GPIO_PIN_RESET);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2108      	movs	r1, #8
 8001dec:	4805      	ldr	r0, [pc, #20]	@ (8001e04 <DBG_Init+0xb4>)
 8001dee:	f003 f829 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PROBE_LINE4_PORT, PROBE_LINE4_PIN, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	2110      	movs	r1, #16
 8001df6:	4803      	ldr	r0, [pc, #12]	@ (8001e04 <DBG_Init+0xb4>)
 8001df8:	f003 f824 	bl	8004e44 <HAL_GPIO_WritePin>
#endif /* DEBUG_RF_BUSY_ENABLED */

  /* USER CODE BEGIN DBG_Init_3 */

  /* USER CODE END DBG_Init_3 */
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	48000400 	.word	0x48000400

08001e08 <EnvSensors_Read>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t EnvSensors_Read(sensor_t *sensor_data)
{
 8001e08:	b480      	push	{r7}
 8001e0a:	b087      	sub	sp, #28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EnvSensors_Read */
  float HUMIDITY_Value = HUMIDITY_DEFAULT_VAL;
 8001e10:	4b0d      	ldr	r3, [pc, #52]	@ (8001e48 <EnvSensors_Read+0x40>)
 8001e12:	617b      	str	r3, [r7, #20]
  float TEMPERATURE_Value = TEMPERATURE_DEFAULT_VAL;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	@ (8001e4c <EnvSensors_Read+0x44>)
 8001e16:	613b      	str	r3, [r7, #16]
  float PRESSURE_Value = PRESSURE_DEFAULT_VAL;
 8001e18:	4b0d      	ldr	r3, [pc, #52]	@ (8001e50 <EnvSensors_Read+0x48>)
 8001e1a:	60fb      	str	r3, [r7, #12]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */
#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif  /* SENSOR_ENABLED */

  sensor_data->humidity    = HUMIDITY_Value;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	609a      	str	r2, [r3, #8]
  sensor_data->temperature = TEMPERATURE_Value;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	693a      	ldr	r2, [r7, #16]
 8001e26:	605a      	str	r2, [r3, #4]
  sensor_data->pressure    = PRESSURE_Value;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68fa      	ldr	r2, [r7, #12]
 8001e2c:	601a      	str	r2, [r3, #0]

  sensor_data->latitude  = (int32_t)((STSOP_LATTITUDE  * MAX_GPS_POS) / 90);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a08      	ldr	r2, [pc, #32]	@ (8001e54 <EnvSensors_Read+0x4c>)
 8001e32:	60da      	str	r2, [r3, #12]
  sensor_data->longitude = (int32_t)((STSOP_LONGITUDE  * MAX_GPS_POS) / 180);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	4a08      	ldr	r2, [pc, #32]	@ (8001e58 <EnvSensors_Read+0x50>)
 8001e38:	611a      	str	r2, [r3, #16]

  return 0;
 8001e3a:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Read */
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	371c      	adds	r7, #28
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	42480000 	.word	0x42480000
 8001e4c:	41900000 	.word	0x41900000
 8001e50:	447a0000 	.word	0x447a0000
 8001e54:	003e090d 	.word	0x003e090d
 8001e58:	000503ab 	.word	0x000503ab

08001e5c <EnvSensors_Init>:

int32_t EnvSensors_Init(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
#if defined( USE_IKS01A2_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A2_ENV_SENSOR_LPS22HB_0 ) || \
    defined( USE_IKS01A3_ENV_SENSOR_HTS221_0 ) || defined( USE_IKS01A3_ENV_SENSOR_LPS22HH_0 ) || \
    defined( USE_BSP_DRIVER )
  int32_t ret = BSP_ERROR_NONE;
 8001e62:	2300      	movs	r3, #0
 8001e64:	607b      	str	r3, [r7, #4]
#endif /* USE_IKS01A3_ENV_SENSOR_LPS22HH_0 */

#elif !defined (SENSOR_ENABLED)
#error SENSOR_ENABLED not defined
#endif /* SENSOR_ENABLED  */
  return 0;
 8001e66:	2300      	movs	r3, #0
  /* USER CODE END EnvSensors_Init */
  return ret;
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	370c      	adds	r7, #12
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bc80      	pop	{r7}
 8001e70:	4770      	bx	lr

08001e72 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e72:	b480      	push	{r7}
 8001e74:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8001e76:	bf00      	nop
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <LL_RTC_TIME_GetSubSecond>:
  * @param  RTCx RTC Instance
  * @retval If binary mode is none, Value between Min_Data=0x0 and Max_Data=0x7FFF
  *         else Value between Min_Data=0x0 and Max_Data=0xFFFFFFFF
  */
__STATIC_INLINE uint32_t LL_RTC_TIME_GetSubSecond(RTC_TypeDef *RTCx)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RTCx->SSR, RTC_SSR_SS));
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	689b      	ldr	r3, [r3, #8]
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	370c      	adds	r7, #12
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bc80      	pop	{r7}
 8001e92:	4770      	bx	lr

08001e94 <TIMER_IF_Init>:

/* USER CODE END PFP */

/* Exported functions ---------------------------------------------------------*/
UTIL_TIMER_Status_t TIMER_IF_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_Init */

  /* USER CODE END TIMER_IF_Init */
  if (RTC_Initialized == false)
 8001e9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <TIMER_IF_Init+0x5c>)
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	f083 0301 	eor.w	r3, r3, #1
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <TIMER_IF_Init+0x50>
  {
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001eac:	4b11      	ldr	r3, [pc, #68]	@ (8001ef4 <TIMER_IF_Init+0x60>)
 8001eae:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb2:	631a      	str	r2, [r3, #48]	@ 0x30
    /*Init RTC*/
    MX_RTC_Init();
 8001eb4:	f7ff fc10 	bl	80016d8 <MX_RTC_Init>
    /*Stop Timer */
    TIMER_IF_StopTimer();
 8001eb8:	f000 f856 	bl	8001f68 <TIMER_IF_StopTimer>
    /** DeActivate the Alarm A enabled by STM32CubeMX during MX_RTC_Init() */
    HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001ebc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ec0:	480c      	ldr	r0, [pc, #48]	@ (8001ef4 <TIMER_IF_Init+0x60>)
 8001ec2:	f004 fd19 	bl	80068f8 <HAL_RTC_DeactivateAlarm>
    /*overload RTC feature enable*/
    hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef4 <TIMER_IF_Init+0x60>)
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ecc:	631a      	str	r2, [r3, #48]	@ 0x30

    /*Enable Direct Read of the calendar registers (not through Shadow) */
    HAL_RTCEx_EnableBypassShadow(&hrtc);
 8001ece:	4809      	ldr	r0, [pc, #36]	@ (8001ef4 <TIMER_IF_Init+0x60>)
 8001ed0:	f004 fe50 	bl	8006b74 <HAL_RTCEx_EnableBypassShadow>
    /*Initialize MSB ticks*/
    TIMER_IF_BkUp_Write_MSBticks(0);
 8001ed4:	2000      	movs	r0, #0
 8001ed6:	f000 f9d3 	bl	8002280 <TIMER_IF_BkUp_Write_MSBticks>

    TIMER_IF_SetTimerContext();
 8001eda:	f000 f85f 	bl	8001f9c <TIMER_IF_SetTimerContext>

    /* Register a task to associate to UTIL_TIMER_Irq() interrupt */
    UTIL_TIMER_IRQ_MAP_INIT();

    RTC_Initialized = true;
 8001ede:	4b04      	ldr	r3, [pc, #16]	@ (8001ef0 <TIMER_IF_Init+0x5c>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
  }

  /* USER CODE BEGIN TIMER_IF_Init_Last */

  /* USER CODE END TIMER_IF_Init_Last */
  return ret;
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000021d 	.word	0x2000021d
 8001ef4:	200001d8 	.word	0x200001d8

08001ef8 <TIMER_IF_StartTimer>:

UTIL_TIMER_Status_t TIMER_IF_StartTimer(uint32_t timeout)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08e      	sub	sp, #56	@ 0x38
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  /* USER CODE BEGIN TIMER_IF_StartTimer */

  /* USER CODE END TIMER_IF_StartTimer */
  RTC_AlarmTypeDef sAlarm = {0};
 8001f06:	f107 0308 	add.w	r3, r7, #8
 8001f0a:	222c      	movs	r2, #44	@ 0x2c
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f019 fb6c 	bl	801b5ec <memset>
  /*Stop timer if one is already started*/
  TIMER_IF_StopTimer();
 8001f14:	f000 f828 	bl	8001f68 <TIMER_IF_StopTimer>
  timeout += RtcTimerContext;
 8001f18:	4b11      	ldr	r3, [pc, #68]	@ (8001f60 <TIMER_IF_StartTimer+0x68>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	4413      	add	r3, r2
 8001f20:	607b      	str	r3, [r7, #4]

  TIMER_IF_DBG_PRINTF("Start timer: time=%d, alarm=%d\n\r",  GetTimerTicks(), timeout);
  /* starts timer*/
  sAlarm.BinaryAutoClr = RTC_ALARMSUBSECONDBIN_AUTOCLR_NO;
 8001f22:	2300      	movs	r3, #0
 8001f24:	627b      	str	r3, [r7, #36]	@ 0x24
  sAlarm.AlarmTime.SubSeconds = UINT32_MAX - timeout;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDBINMASK_NONE;
 8001f30:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8001f34:	623b      	str	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f3a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001f3c:	f107 0308 	add.w	r3, r7, #8
 8001f40:	2201      	movs	r2, #1
 8001f42:	4619      	mov	r1, r3
 8001f44:	4807      	ldr	r0, [pc, #28]	@ (8001f64 <TIMER_IF_StartTimer+0x6c>)
 8001f46:	f004 fbcb 	bl	80066e0 <HAL_RTC_SetAlarm_IT>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d001      	beq.n	8001f54 <TIMER_IF_StartTimer+0x5c>
  {
    Error_Handler();
 8001f50:	f7ff fb94 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIMER_IF_StartTimer_Last */

  /* USER CODE END TIMER_IF_StartTimer_Last */
  return ret;
 8001f54:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3738      	adds	r7, #56	@ 0x38
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	20000220 	.word	0x20000220
 8001f64:	200001d8 	.word	0x200001d8

08001f68 <TIMER_IF_StopTimer>:

UTIL_TIMER_Status_t TIMER_IF_StopTimer(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b082      	sub	sp, #8
 8001f6c:	af00      	add	r7, sp, #0
  UTIL_TIMER_Status_t ret = UTIL_TIMER_OK;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN TIMER_IF_StopTimer */

  /* USER CODE END TIMER_IF_StopTimer */
  /* Clear RTC Alarm Flag */
  __HAL_RTC_ALARM_CLEAR_FLAG(&hrtc, RTC_FLAG_ALRAF);
 8001f72:	4b08      	ldr	r3, [pc, #32]	@ (8001f94 <TIMER_IF_StopTimer+0x2c>)
 8001f74:	2201      	movs	r2, #1
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c
  /* Disable the Alarm A interrupt */
  HAL_RTC_DeactivateAlarm(&hrtc, RTC_ALARM_A);
 8001f78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f7c:	4806      	ldr	r0, [pc, #24]	@ (8001f98 <TIMER_IF_StopTimer+0x30>)
 8001f7e:	f004 fcbb 	bl	80068f8 <HAL_RTC_DeactivateAlarm>
  /*overload RTC feature enable*/
  hrtc.IsEnabled.RtcFeatures = UINT32_MAX;
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <TIMER_IF_StopTimer+0x30>)
 8001f84:	f04f 32ff 	mov.w	r2, #4294967295
 8001f88:	631a      	str	r2, [r3, #48]	@ 0x30
  /* USER CODE BEGIN TIMER_IF_StopTimer_Last */

  /* USER CODE END TIMER_IF_StopTimer_Last */
  return ret;
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3708      	adds	r7, #8
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40002800 	.word	0x40002800
 8001f98:	200001d8 	.word	0x200001d8

08001f9c <TIMER_IF_SetTimerContext>:

uint32_t TIMER_IF_SetTimerContext(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /*store time context*/
  RtcTimerContext = GetTimerTicks();
 8001fa0:	f000 f98e 	bl	80022c0 <GetTimerTicks>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4a03      	ldr	r2, [pc, #12]	@ (8001fb4 <TIMER_IF_SetTimerContext+0x18>)
 8001fa8:	6013      	str	r3, [r2, #0]

  /* USER CODE END TIMER_IF_SetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_SetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001faa:	4b02      	ldr	r3, [pc, #8]	@ (8001fb4 <TIMER_IF_SetTimerContext+0x18>)
 8001fac:	681b      	ldr	r3, [r3, #0]
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20000220 	.word	0x20000220

08001fb8 <TIMER_IF_GetTimerContext>:

uint32_t TIMER_IF_GetTimerContext(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0

  /* USER CODE END TIMER_IF_GetTimerContext */

  TIMER_IF_DBG_PRINTF("TIMER_IF_GetTimerContext=%d\n\r", RtcTimerContext);
  /*return time context*/
  return RtcTimerContext;
 8001fbc:	4b02      	ldr	r3, [pc, #8]	@ (8001fc8 <TIMER_IF_GetTimerContext+0x10>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
}
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bc80      	pop	{r7}
 8001fc6:	4770      	bx	lr
 8001fc8:	20000220 	.word	0x20000220

08001fcc <TIMER_IF_GetTimerElapsedTime>:

uint32_t TIMER_IF_GetTimerElapsedTime(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime */
  ret = ((uint32_t)(GetTimerTicks() - RtcTimerContext));
 8001fd6:	f000 f973 	bl	80022c0 <GetTimerTicks>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	4b04      	ldr	r3, [pc, #16]	@ (8001ff0 <TIMER_IF_GetTimerElapsedTime+0x24>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerElapsedTime_Last */

  /* USER CODE END TIMER_IF_GetTimerElapsedTime_Last */
  return ret;
 8001fe4:	687b      	ldr	r3, [r7, #4]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3708      	adds	r7, #8
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000220 	.word	0x20000220

08001ff4 <TIMER_IF_GetTimerValue>:

uint32_t TIMER_IF_GetTimerValue(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetTimerValue */

  /* USER CODE END TIMER_IF_GetTimerValue */
  if (RTC_Initialized == true)
 8001ffe:	4b06      	ldr	r3, [pc, #24]	@ (8002018 <TIMER_IF_GetTimerValue+0x24>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <TIMER_IF_GetTimerValue+0x18>
  {
    ret = GetTimerTicks();
 8002006:	f000 f95b 	bl	80022c0 <GetTimerTicks>
 800200a:	6078      	str	r0, [r7, #4]
  }
  /* USER CODE BEGIN TIMER_IF_GetTimerValue_Last */

  /* USER CODE END TIMER_IF_GetTimerValue_Last */
  return ret;
 800200c:	687b      	ldr	r3, [r7, #4]
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	2000021d 	.word	0x2000021d

0800201c <TIMER_IF_GetMinimumTimeout>:

uint32_t TIMER_IF_GetMinimumTimeout(void)
{
 800201c:	b480      	push	{r7}
 800201e:	b083      	sub	sp, #12
 8002020:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout */

  /* USER CODE END TIMER_IF_GetMinimumTimeout */
  ret = (MIN_ALARM_DELAY);
 8002026:	2303      	movs	r3, #3
 8002028:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_GetMinimumTimeout_Last */

  /* USER CODE END TIMER_IF_GetMinimumTimeout_Last */
  return ret;
 800202a:	687b      	ldr	r3, [r7, #4]
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <TIMER_IF_Convert_ms2Tick>:

uint32_t TIMER_IF_Convert_ms2Tick(uint32_t timeMilliSec)
{
 8002036:	b5b0      	push	{r4, r5, r7, lr}
 8002038:	b084      	sub	sp, #16
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800203e:	2100      	movs	r1, #0
 8002040:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick */

  /* USER CODE END TIMER_IF_Convert_ms2Tick */
  ret = ((uint32_t)((((uint64_t) timeMilliSec) << RTC_N_PREDIV_S) / 1000));
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	2000      	movs	r0, #0
 8002046:	460a      	mov	r2, r1
 8002048:	4603      	mov	r3, r0
 800204a:	0d95      	lsrs	r5, r2, #22
 800204c:	0294      	lsls	r4, r2, #10
 800204e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	4620      	mov	r0, r4
 8002058:	4629      	mov	r1, r5
 800205a:	f7fe fda5 	bl	8000ba8 <__aeabi_uldivmod>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4613      	mov	r3, r2
 8002064:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_ms2Tick_Last */

  /* USER CODE END TIMER_IF_Convert_ms2Tick_Last */
  return ret;
 8002066:	68fb      	ldr	r3, [r7, #12]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bdb0      	pop	{r4, r5, r7, pc}

08002070 <TIMER_IF_Convert_Tick2ms>:

uint32_t TIMER_IF_Convert_Tick2ms(uint32_t tick)
{
 8002070:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002074:	b085      	sub	sp, #20
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  uint32_t ret = 0;
 800207a:	2100      	movs	r1, #0
 800207c:	60f9      	str	r1, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms */

  /* USER CODE END TIMER_IF_Convert_Tick2ms */
  ret = ((uint32_t)((((uint64_t)(tick)) * 1000) >> RTC_N_PREDIV_S));
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	2000      	movs	r0, #0
 8002082:	460c      	mov	r4, r1
 8002084:	4605      	mov	r5, r0
 8002086:	4620      	mov	r0, r4
 8002088:	4629      	mov	r1, r5
 800208a:	f04f 0a00 	mov.w	sl, #0
 800208e:	f04f 0b00 	mov.w	fp, #0
 8002092:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 8002096:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800209a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800209e:	4650      	mov	r0, sl
 80020a0:	4659      	mov	r1, fp
 80020a2:	1b02      	subs	r2, r0, r4
 80020a4:	eb61 0305 	sbc.w	r3, r1, r5
 80020a8:	f04f 0000 	mov.w	r0, #0
 80020ac:	f04f 0100 	mov.w	r1, #0
 80020b0:	0099      	lsls	r1, r3, #2
 80020b2:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 80020b6:	0090      	lsls	r0, r2, #2
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	eb12 0804 	adds.w	r8, r2, r4
 80020c0:	eb43 0905 	adc.w	r9, r3, r5
 80020c4:	f04f 0200 	mov.w	r2, #0
 80020c8:	f04f 0300 	mov.w	r3, #0
 80020cc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80020d0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80020d4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80020d8:	4690      	mov	r8, r2
 80020da:	4699      	mov	r9, r3
 80020dc:	4640      	mov	r0, r8
 80020de:	4649      	mov	r1, r9
 80020e0:	f04f 0200 	mov.w	r2, #0
 80020e4:	f04f 0300 	mov.w	r3, #0
 80020e8:	0a82      	lsrs	r2, r0, #10
 80020ea:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80020ee:	0a8b      	lsrs	r3, r1, #10
 80020f0:	4613      	mov	r3, r2
 80020f2:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN TIMER_IF_Convert_Tick2ms_Last */

  /* USER CODE END TIMER_IF_Convert_Tick2ms_Last */
  return ret;
 80020f4:	68fb      	ldr	r3, [r7, #12]
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002100:	4770      	bx	lr

08002102 <TIMER_IF_DelayMs>:

void TIMER_IF_DelayMs(uint32_t delay)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_DelayMs */

  /* USER CODE END TIMER_IF_DelayMs */
  uint32_t delayTicks = TIMER_IF_Convert_ms2Tick(delay);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f7ff ff93 	bl	8002036 <TIMER_IF_Convert_ms2Tick>
 8002110:	60f8      	str	r0, [r7, #12]
  uint32_t timeout = GetTimerTicks();
 8002112:	f000 f8d5 	bl	80022c0 <GetTimerTicks>
 8002116:	60b8      	str	r0, [r7, #8]

  /* Wait delay ms */
  while (((GetTimerTicks() - timeout)) < delayTicks)
 8002118:	e000      	b.n	800211c <TIMER_IF_DelayMs+0x1a>
  {
    __NOP();
 800211a:	bf00      	nop
  while (((GetTimerTicks() - timeout)) < delayTicks)
 800211c:	f000 f8d0 	bl	80022c0 <GetTimerTicks>
 8002120:	4602      	mov	r2, r0
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	1ad3      	subs	r3, r2, r3
 8002126:	68fa      	ldr	r2, [r7, #12]
 8002128:	429a      	cmp	r2, r3
 800212a:	d8f6      	bhi.n	800211a <TIMER_IF_DelayMs+0x18>
  }
  /* USER CODE BEGIN TIMER_IF_DelayMs_Last */

  /* USER CODE END TIMER_IF_DelayMs_Last */
}
 800212c:	bf00      	nop
 800212e:	bf00      	nop
 8002130:	3710      	adds	r7, #16
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback */

  /* USER CODE END HAL_RTC_AlarmAEventCallback */
  UTIL_TIMER_IRQ_MAP_PROCESS();
 800213e:	f018 fe6d 	bl	801ae1c <UTIL_TIMER_IRQ_Handler>
  /* USER CODE BEGIN HAL_RTC_AlarmAEventCallback_Last */

  /* USER CODE END HAL_RTC_AlarmAEventCallback_Last */
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <HAL_RTCEx_SSRUEventCallback>:

void HAL_RTCEx_SSRUEventCallback(RTC_HandleTypeDef *hrtc)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]

  /* USER CODE END HAL_RTCEx_SSRUEventCallback */
  /*called every 48 days with 1024 ticks per seconds*/
  TIMER_IF_DBG_PRINTF(">>Handler SSRUnderflow at %d\n\r", GetTimerTicks());
  /*Increment MSBticks*/
  uint32_t MSB_ticks = TIMER_IF_BkUp_Read_MSBticks();
 8002152:	f000 f8a5 	bl	80022a0 <TIMER_IF_BkUp_Read_MSBticks>
 8002156:	60f8      	str	r0, [r7, #12]
  TIMER_IF_BkUp_Write_MSBticks(MSB_ticks + 1);
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	3301      	adds	r3, #1
 800215c:	4618      	mov	r0, r3
 800215e:	f000 f88f 	bl	8002280 <TIMER_IF_BkUp_Write_MSBticks>
  /* USER CODE BEGIN HAL_RTCEx_SSRUEventCallback_Last */

  /* USER CODE END HAL_RTCEx_SSRUEventCallback_Last */
}
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <TIMER_IF_GetTime>:

uint32_t TIMER_IF_GetTime(uint16_t *mSeconds)
{
 800216a:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800216e:	b08c      	sub	sp, #48	@ 0x30
 8002170:	af00      	add	r7, sp, #0
 8002172:	6178      	str	r0, [r7, #20]
  uint32_t seconds = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* USER CODE BEGIN TIMER_IF_GetTime */

  /* USER CODE END TIMER_IF_GetTime */
  uint64_t ticks;
  uint32_t timerValueLsb = GetTimerTicks();
 8002178:	f000 f8a2 	bl	80022c0 <GetTimerTicks>
 800217c:	62b8      	str	r0, [r7, #40]	@ 0x28
  uint32_t timerValueMSB = TIMER_IF_BkUp_Read_MSBticks();
 800217e:	f000 f88f 	bl	80022a0 <TIMER_IF_BkUp_Read_MSBticks>
 8002182:	6278      	str	r0, [r7, #36]	@ 0x24

  ticks = (((uint64_t) timerValueMSB) << 32) + timerValueLsb;
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	2200      	movs	r2, #0
 8002188:	60bb      	str	r3, [r7, #8]
 800218a:	60fa      	str	r2, [r7, #12]
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	000b      	movs	r3, r1
 8002198:	2200      	movs	r2, #0
 800219a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800219c:	2000      	movs	r0, #0
 800219e:	460c      	mov	r4, r1
 80021a0:	4605      	mov	r5, r0
 80021a2:	eb12 0804 	adds.w	r8, r2, r4
 80021a6:	eb43 0905 	adc.w	r9, r3, r5
 80021aa:	e9c7 8906 	strd	r8, r9, [r7, #24]

  seconds = (uint32_t)(ticks >> RTC_N_PREDIV_S);
 80021ae:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	0a82      	lsrs	r2, r0, #10
 80021bc:	ea42 5281 	orr.w	r2, r2, r1, lsl #22
 80021c0:	0a8b      	lsrs	r3, r1, #10
 80021c2:	4613      	mov	r3, r2
 80021c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  ticks = (uint32_t) ticks & RTC_PREDIV_S;
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	2200      	movs	r2, #0
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	607a      	str	r2, [r7, #4]
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80021d4:	f04f 0b00 	mov.w	fp, #0
 80021d8:	e9c7 ab06 	strd	sl, fp, [r7, #24]

  *mSeconds = TIMER_IF_Convert_Tick2ms(ticks);
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff46 	bl	8002070 <TIMER_IF_Convert_Tick2ms>
 80021e4:	4603      	mov	r3, r0
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	801a      	strh	r2, [r3, #0]

  /* USER CODE BEGIN TIMER_IF_GetTime_Last */

  /* USER CODE END TIMER_IF_GetTime_Last */
  return seconds;
 80021ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3730      	adds	r7, #48	@ 0x30
 80021f2:	46bd      	mov	sp, r7
 80021f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080021f8 <TIMER_IF_BkUp_Write_Seconds>:

void TIMER_IF_BkUp_Write_Seconds(uint32_t Seconds)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SECONDS, Seconds);
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	2100      	movs	r1, #0
 8002204:	4803      	ldr	r0, [pc, #12]	@ (8002214 <TIMER_IF_BkUp_Write_Seconds+0x1c>)
 8002206:	f004 fd47 	bl	8006c98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_Seconds_Last */
}
 800220a:	bf00      	nop
 800220c:	3708      	adds	r7, #8
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	200001d8 	.word	0x200001d8

08002218 <TIMER_IF_BkUp_Write_SubSeconds>:

void TIMER_IF_BkUp_Write_SubSeconds(uint32_t SubSeconds)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_SUBSECONDS, SubSeconds);
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	2101      	movs	r1, #1
 8002224:	4803      	ldr	r0, [pc, #12]	@ (8002234 <TIMER_IF_BkUp_Write_SubSeconds+0x1c>)
 8002226:	f004 fd37 	bl	8006c98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_SubSeconds_Last */
}
 800222a:	bf00      	nop
 800222c:	3708      	adds	r7, #8
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200001d8 	.word	0x200001d8

08002238 <TIMER_IF_BkUp_Read_Seconds>:

uint32_t TIMER_IF_BkUp_Read_Seconds(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SECONDS);
 8002242:	2100      	movs	r1, #0
 8002244:	4804      	ldr	r0, [pc, #16]	@ (8002258 <TIMER_IF_BkUp_Read_Seconds+0x20>)
 8002246:	f004 fd3f 	bl	8006cc8 <HAL_RTCEx_BKUPRead>
 800224a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_Seconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_Seconds_Last */
  return ret;
 800224c:	687b      	ldr	r3, [r7, #4]
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	200001d8 	.word	0x200001d8

0800225c <TIMER_IF_BkUp_Read_SubSeconds>:

uint32_t TIMER_IF_BkUp_Read_SubSeconds(void)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
  uint32_t ret = 0;
 8002262:	2300      	movs	r3, #0
 8002264:	607b      	str	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds */
  ret = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_SUBSECONDS);
 8002266:	2101      	movs	r1, #1
 8002268:	4804      	ldr	r0, [pc, #16]	@ (800227c <TIMER_IF_BkUp_Read_SubSeconds+0x20>)
 800226a:	f004 fd2d 	bl	8006cc8 <HAL_RTCEx_BKUPRead>
 800226e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_SubSeconds_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_SubSeconds_Last */
  return ret;
 8002270:	687b      	ldr	r3, [r7, #4]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200001d8 	.word	0x200001d8

08002280 <TIMER_IF_BkUp_Write_MSBticks>:

/* USER CODE END EF */

/* Private functions ---------------------------------------------------------*/
static void TIMER_IF_BkUp_Write_MSBticks(uint32_t MSBticks)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks */
  HAL_RTCEx_BKUPWrite(&hrtc, RTC_BKP_MSBTICKS, MSBticks);
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	2102      	movs	r1, #2
 800228c:	4803      	ldr	r0, [pc, #12]	@ (800229c <TIMER_IF_BkUp_Write_MSBticks+0x1c>)
 800228e:	f004 fd03 	bl	8006c98 <HAL_RTCEx_BKUPWrite>
  /* USER CODE BEGIN TIMER_IF_BkUp_Write_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Write_MSBticks_Last */
}
 8002292:	bf00      	nop
 8002294:	3708      	adds	r7, #8
 8002296:	46bd      	mov	sp, r7
 8002298:	bd80      	pop	{r7, pc}
 800229a:	bf00      	nop
 800229c:	200001d8 	.word	0x200001d8

080022a0 <TIMER_IF_BkUp_Read_MSBticks>:

static uint32_t TIMER_IF_BkUp_Read_MSBticks(void)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks */
  uint32_t MSBticks;
  MSBticks = HAL_RTCEx_BKUPRead(&hrtc, RTC_BKP_MSBTICKS);
 80022a6:	2102      	movs	r1, #2
 80022a8:	4804      	ldr	r0, [pc, #16]	@ (80022bc <TIMER_IF_BkUp_Read_MSBticks+0x1c>)
 80022aa:	f004 fd0d 	bl	8006cc8 <HAL_RTCEx_BKUPRead>
 80022ae:	6078      	str	r0, [r7, #4]
  return MSBticks;
 80022b0:	687b      	ldr	r3, [r7, #4]
  /* USER CODE BEGIN TIMER_IF_BkUp_Read_MSBticks_Last */

  /* USER CODE END TIMER_IF_BkUp_Read_MSBticks_Last */
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3708      	adds	r7, #8
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	200001d8 	.word	0x200001d8

080022c0 <GetTimerTicks>:

static inline uint32_t GetTimerTicks(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GetTimerTicks */

  /* USER CODE END GetTimerTicks */
  uint32_t ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022c6:	480b      	ldr	r0, [pc, #44]	@ (80022f4 <GetTimerTicks+0x34>)
 80022c8:	f7ff fdd9 	bl	8001e7e <LL_RTC_TIME_GetSubSecond>
 80022cc:	6078      	str	r0, [r7, #4]
  /* read twice to make sure value it valid*/
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022ce:	e003      	b.n	80022d8 <GetTimerTicks+0x18>
  {
    ssr = LL_RTC_TIME_GetSubSecond(RTC);
 80022d0:	4808      	ldr	r0, [pc, #32]	@ (80022f4 <GetTimerTicks+0x34>)
 80022d2:	f7ff fdd4 	bl	8001e7e <LL_RTC_TIME_GetSubSecond>
 80022d6:	6078      	str	r0, [r7, #4]
  while (ssr != LL_RTC_TIME_GetSubSecond(RTC))
 80022d8:	4806      	ldr	r0, [pc, #24]	@ (80022f4 <GetTimerTicks+0x34>)
 80022da:	f7ff fdd0 	bl	8001e7e <LL_RTC_TIME_GetSubSecond>
 80022de:	4602      	mov	r2, r0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d1f4      	bne.n	80022d0 <GetTimerTicks+0x10>
  }
  return UINT32_MAX - ssr;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	43db      	mvns	r3, r3
  /* USER CODE BEGIN GetTimerTicks_Last */

  /* USER CODE END GetTimerTicks_Last */
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3708      	adds	r7, #8
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40002800 	.word	0x40002800

080022f8 <LL_AHB2_GRP1_EnableClock>:
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002300:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002304:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002306:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4313      	orrs	r3, r2
 800230e:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002310:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002314:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4013      	ands	r3, r2
 800231a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800231c:	68fb      	ldr	r3, [r7, #12]
}
 800231e:	bf00      	nop
 8002320:	3714      	adds	r7, #20
 8002322:	46bd      	mov	sp, r7
 8002324:	bc80      	pop	{r7}
 8002326:	4770      	bx	lr

08002328 <LL_APB2_GRP1_EnableClock>:
{
 8002328:	b480      	push	{r7}
 800232a:	b085      	sub	sp, #20
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002330:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002334:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002336:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4313      	orrs	r3, r2
 800233e:	660b      	str	r3, [r1, #96]	@ 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8002340:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002344:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	4013      	ands	r3, r2
 800234a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800234c:	68fb      	ldr	r3, [r7, #12]
}
 800234e:	bf00      	nop
 8002350:	3714      	adds	r7, #20
 8002352:	46bd      	mov	sp, r7
 8002354:	bc80      	pop	{r7}
 8002356:	4770      	bx	lr

08002358 <LL_APB2_GRP1_DisableClock>:
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8002360:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002364:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	43db      	mvns	r3, r3
 800236a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800236e:	4013      	ands	r3, r2
 8002370:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	bc80      	pop	{r7}
 800237a:	4770      	bx	lr

0800237c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <MX_USART1_UART_Init+0x90>)
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <MX_USART1_UART_Init+0x94>)
 8002384:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <MX_USART1_UART_Init+0x90>)
 8002388:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800238c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800238e:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <MX_USART1_UART_Init+0x90>)
 8002390:	2200      	movs	r2, #0
 8002392:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002394:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <MX_USART1_UART_Init+0x90>)
 8002396:	2200      	movs	r2, #0
 8002398:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <MX_USART1_UART_Init+0x90>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023a2:	220c      	movs	r2, #12
 80023a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023ac:	4b17      	ldr	r3, [pc, #92]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023ae:	2200      	movs	r2, #0
 80023b0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023b2:	4b16      	ldr	r3, [pc, #88]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80023b8:	4b14      	ldr	r3, [pc, #80]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023be:	4b13      	ldr	r3, [pc, #76]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023c4:	4811      	ldr	r0, [pc, #68]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023c6:	f005 f962 	bl	800768e <HAL_UART_Init>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d001      	beq.n	80023d4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80023d0:	f7ff f954 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023d4:	2100      	movs	r1, #0
 80023d6:	480d      	ldr	r0, [pc, #52]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023d8:	f007 f9d9 	bl	800978e <HAL_UARTEx_SetTxFifoThreshold>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80023e2:	f7ff f94b 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80023e6:	2100      	movs	r1, #0
 80023e8:	4808      	ldr	r0, [pc, #32]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023ea:	f007 fa0e 	bl	800980a <HAL_UARTEx_SetRxFifoThreshold>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80023f4:	f7ff f942 	bl	800167c <Error_Handler>
  }
  if (HAL_UARTEx_EnableFifoMode(&huart1) != HAL_OK)
 80023f8:	4804      	ldr	r0, [pc, #16]	@ (800240c <MX_USART1_UART_Init+0x90>)
 80023fa:	f007 f98d 	bl	8009718 <HAL_UARTEx_EnableFifoMode>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002404:	f7ff f93a 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	20000224 	.word	0x20000224
 8002410:	40013800 	.word	0x40013800

08002414 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b096      	sub	sp, #88	@ 0x58
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800241c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002420:	2200      	movs	r2, #0
 8002422:	601a      	str	r2, [r3, #0]
 8002424:	605a      	str	r2, [r3, #4]
 8002426:	609a      	str	r2, [r3, #8]
 8002428:	60da      	str	r2, [r3, #12]
 800242a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800242c:	f107 030c 	add.w	r3, r7, #12
 8002430:	2238      	movs	r2, #56	@ 0x38
 8002432:	2100      	movs	r1, #0
 8002434:	4618      	mov	r0, r3
 8002436:	f019 f8d9 	bl	801b5ec <memset>
  if(uartHandle->Instance==USART1)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a2f      	ldr	r2, [pc, #188]	@ (80024fc <HAL_UART_MspInit+0xe8>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d156      	bne.n	80024f2 <HAL_UART_MspInit+0xde>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002444:	2301      	movs	r3, #1
 8002446:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002448:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 800244c:	613b      	str	r3, [r7, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800244e:	f107 030c 	add.w	r3, r7, #12
 8002452:	4618      	mov	r0, r3
 8002454:	f003 ffb0 	bl	80063b8 <HAL_RCCEx_PeriphCLKConfig>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800245e:	f7ff f90d 	bl	800167c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002462:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002466:	f7ff ff5f 	bl	8002328 <LL_APB2_GRP1_EnableClock>

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800246a:	2002      	movs	r0, #2
 800246c:	f7ff ff44 	bl	80022f8 <LL_AHB2_GRP1_EnableClock>
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = USARTx_RX_Pin|USARTx_TX_Pin;
 8002470:	23c0      	movs	r3, #192	@ 0xc0
 8002472:	647b      	str	r3, [r7, #68]	@ 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002474:	2302      	movs	r3, #2
 8002476:	64bb      	str	r3, [r7, #72]	@ 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800247c:	2303      	movs	r3, #3
 800247e:	653b      	str	r3, [r7, #80]	@ 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002480:	2307      	movs	r3, #7
 8002482:	657b      	str	r3, [r7, #84]	@ 0x54
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002484:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8002488:	4619      	mov	r1, r3
 800248a:	481d      	ldr	r0, [pc, #116]	@ (8002500 <HAL_UART_MspInit+0xec>)
 800248c:	f002 faac 	bl	80049e8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8002490:	4b1c      	ldr	r3, [pc, #112]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 8002492:	4a1d      	ldr	r2, [pc, #116]	@ (8002508 <HAL_UART_MspInit+0xf4>)
 8002494:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8002496:	4b1b      	ldr	r3, [pc, #108]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 8002498:	2212      	movs	r2, #18
 800249a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800249c:	4b19      	ldr	r3, [pc, #100]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 800249e:	2210      	movs	r2, #16
 80024a0:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024a4:	2200      	movs	r2, #0
 80024a6:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80024a8:	4b16      	ldr	r3, [pc, #88]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024aa:	2280      	movs	r2, #128	@ 0x80
 80024ac:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024b4:	4b13      	ldr	r3, [pc, #76]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80024ba:	4b12      	ldr	r3, [pc, #72]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024bc:	2200      	movs	r2, #0
 80024be:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80024c0:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024c2:	2200      	movs	r2, #0
 80024c4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80024c6:	480f      	ldr	r0, [pc, #60]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024c8:	f001 fc42 	bl	8003d50 <HAL_DMA_Init>
 80024cc:	4603      	mov	r3, r0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d001      	beq.n	80024d6 <HAL_UART_MspInit+0xc2>
    {
      Error_Handler();
 80024d2:	f7ff f8d3 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024da:	679a      	str	r2, [r3, #120]	@ 0x78
 80024dc:	4a09      	ldr	r2, [pc, #36]	@ (8002504 <HAL_UART_MspInit+0xf0>)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80024e2:	2200      	movs	r2, #0
 80024e4:	2102      	movs	r1, #2
 80024e6:	2024      	movs	r0, #36	@ 0x24
 80024e8:	f001 fbfb 	bl	8003ce2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024ec:	2024      	movs	r0, #36	@ 0x24
 80024ee:	f001 fc12 	bl	8003d16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80024f2:	bf00      	nop
 80024f4:	3758      	adds	r7, #88	@ 0x58
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	40013800 	.word	0x40013800
 8002500:	48000400 	.word	0x48000400
 8002504:	200002b4 	.word	0x200002b4
 8002508:	40020008 	.word	0x40020008

0800250c <HAL_UART_MspDeInit>:

void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  if(uartHandle->Instance==USART1)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a0b      	ldr	r2, [pc, #44]	@ (8002548 <HAL_UART_MspDeInit+0x3c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d10f      	bne.n	800253e <HAL_UART_MspDeInit+0x32>
  {
  /* USER CODE BEGIN USART1_MspDeInit 0 */

  /* USER CODE END USART1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART1_CLK_DISABLE();
 800251e:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8002522:	f7ff ff19 	bl	8002358 <LL_APB2_GRP1_DisableClock>

    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    HAL_GPIO_DeInit(GPIOB, USARTx_RX_Pin|USARTx_TX_Pin);
 8002526:	21c0      	movs	r1, #192	@ 0xc0
 8002528:	4808      	ldr	r0, [pc, #32]	@ (800254c <HAL_UART_MspDeInit+0x40>)
 800252a:	f002 fbbd 	bl	8004ca8 <HAL_GPIO_DeInit>

    /* USART1 DMA DeInit */
    HAL_DMA_DeInit(uartHandle->hdmatx);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002532:	4618      	mov	r0, r3
 8002534:	f001 fcb4 	bl	8003ea0 <HAL_DMA_DeInit>

    /* USART1 interrupt Deinit */
    HAL_NVIC_DisableIRQ(USART1_IRQn);
 8002538:	2024      	movs	r0, #36	@ 0x24
 800253a:	f001 fbfa 	bl	8003d32 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART1_MspDeInit 1 */

  /* USER CODE END USART1_MspDeInit 1 */
  }
}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}
 8002546:	bf00      	nop
 8002548:	40013800 	.word	0x40013800
 800254c:	48000400 	.word	0x48000400

08002550 <LL_APB2_GRP1_ForceReset>:
{
 8002550:	b480      	push	{r7}
 8002552:	b083      	sub	sp, #12
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2RSTR, Periphs);
 8002558:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800255c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800255e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4313      	orrs	r3, r2
 8002566:	640b      	str	r3, [r1, #64]	@ 0x40
}
 8002568:	bf00      	nop
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr

08002572 <LL_APB2_GRP1_ReleaseReset>:
{
 8002572:	b480      	push	{r7}
 8002574:	b083      	sub	sp, #12
 8002576:	af00      	add	r7, sp, #0
 8002578:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2RSTR, Periphs);
 800257a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800257e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	43db      	mvns	r3, r3
 8002584:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8002588:	4013      	ands	r3, r2
 800258a:	640b      	str	r3, [r1, #64]	@ 0x40
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr
	...

08002598 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002598:	b480      	push	{r7}
 800259a:	b083      	sub	sp, #12
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80025a0:	4b06      	ldr	r3, [pc, #24]	@ (80025bc <LL_EXTI_EnableIT_0_31+0x24>)
 80025a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 80025a6:	4905      	ldr	r1, [pc, #20]	@ (80025bc <LL_EXTI_EnableIT_0_31+0x24>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 80025b0:	bf00      	nop
 80025b2:	370c      	adds	r7, #12
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bc80      	pop	{r7}
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	58000800 	.word	0x58000800

080025c0 <vcom_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

UTIL_ADV_TRACE_Status_t vcom_Init(void (*cb)(void *))
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b082      	sub	sp, #8
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN vcom_Init_1 */

  /* USER CODE END vcom_Init_1 */
  TxCpltCallback = cb;
 80025c8:	4a07      	ldr	r2, [pc, #28]	@ (80025e8 <vcom_Init+0x28>)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6013      	str	r3, [r2, #0]
  MX_DMA_Init();
 80025ce:	f7fe fda3 	bl	8001118 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80025d2:	f7ff fed3 	bl	800237c <MX_USART1_UART_Init>
  LL_EXTI_EnableIT_0_31(LL_EXTI_LINE_26);
 80025d6:	f04f 6080 	mov.w	r0, #67108864	@ 0x4000000
 80025da:	f7ff ffdd 	bl	8002598 <LL_EXTI_EnableIT_0_31>
  return UTIL_ADV_TRACE_OK;
 80025de:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Init_2 */

  /* USER CODE END vcom_Init_2 */
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3708      	adds	r7, #8
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	20000318 	.word	0x20000318

080025ec <vcom_DeInit>:

UTIL_ADV_TRACE_Status_t vcom_DeInit(void)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_DeInit_1 */

  /* USER CODE END vcom_DeInit_1 */
  /* ##-1- Reset peripherals ################################################## */
  __HAL_RCC_USART1_FORCE_RESET();
 80025f0:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80025f4:	f7ff ffac 	bl	8002550 <LL_APB2_GRP1_ForceReset>
  __HAL_RCC_USART1_RELEASE_RESET();
 80025f8:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 80025fc:	f7ff ffb9 	bl	8002572 <LL_APB2_GRP1_ReleaseReset>

  /* ##-2- MspDeInit ################################################## */
  HAL_UART_MspDeInit(&huart1);
 8002600:	4804      	ldr	r0, [pc, #16]	@ (8002614 <vcom_DeInit+0x28>)
 8002602:	f7ff ff83 	bl	800250c <HAL_UART_MspDeInit>

  /* ##-3- Disable the NVIC for DMA ########################################### */
  /* USER CODE BEGIN 1 */
  HAL_NVIC_DisableIRQ(DMA1_Channel5_IRQn);
 8002606:	200f      	movs	r0, #15
 8002608:	f001 fb93 	bl	8003d32 <HAL_NVIC_DisableIRQ>

  return UTIL_ADV_TRACE_OK;
 800260c:	2300      	movs	r3, #0
  /* USER CODE END 1 */
  /* USER CODE BEGIN vcom_DeInit_2 */

  /* USER CODE END vcom_DeInit_2 */
}
 800260e:	4618      	mov	r0, r3
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	20000224 	.word	0x20000224

08002618 <vcom_Trace_DMA>:

  /* USER CODE END vcom_Trace_2 */
}

UTIL_ADV_TRACE_Status_t vcom_Trace_DMA(uint8_t *p_data, uint16_t size)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b082      	sub	sp, #8
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
  /* USER CODE BEGIN vcom_Trace_DMA_1 */

  /* USER CODE END vcom_Trace_DMA_1 */
  HAL_UART_Transmit_DMA(&huart1, p_data, size);
 8002624:	887b      	ldrh	r3, [r7, #2]
 8002626:	461a      	mov	r2, r3
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4804      	ldr	r0, [pc, #16]	@ (800263c <vcom_Trace_DMA+0x24>)
 800262c:	f005 f8d6 	bl	80077dc <HAL_UART_Transmit_DMA>
  return UTIL_ADV_TRACE_OK;
 8002630:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_Trace_DMA_2 */

  /* USER CODE END vcom_Trace_DMA_2 */
}
 8002632:	4618      	mov	r0, r3
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000224 	.word	0x20000224

08002640 <vcom_ReceiveInit>:

UTIL_ADV_TRACE_Status_t vcom_ReceiveInit(void (*RxCb)(uint8_t *rxChar, uint16_t size, uint8_t error))
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b084      	sub	sp, #16
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

  /* USER CODE END vcom_ReceiveInit_1 */
  UART_WakeUpTypeDef WakeUpSelection;

  /*record call back*/
  RxCpltCallback = RxCb;
 8002648:	4a19      	ldr	r2, [pc, #100]	@ (80026b0 <vcom_ReceiveInit+0x70>)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6013      	str	r3, [r2, #0]

  /*Set wakeUp event on start bit*/
  WakeUpSelection.WakeUpEvent = UART_WAKEUP_ON_STARTBIT;
 800264e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002652:	60bb      	str	r3, [r7, #8]

  HAL_UARTEx_StopModeWakeUpSourceConfig(&huart1, WakeUpSelection);
 8002654:	f107 0308 	add.w	r3, r7, #8
 8002658:	e893 0006 	ldmia.w	r3, {r1, r2}
 800265c:	4815      	ldr	r0, [pc, #84]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 800265e:	f006 ffce 	bl	80095fe <HAL_UARTEx_StopModeWakeUpSourceConfig>

  /* Make sure that no UART transfer is on-going */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_BUSY) == SET);
 8002662:	bf00      	nop
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800266e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002672:	d0f7      	beq.n	8002664 <vcom_ReceiveInit+0x24>

  /* Make sure that UART is ready to receive)   */
  while (__HAL_UART_GET_FLAG(&huart1, USART_ISR_REACK) == RESET);
 8002674:	bf00      	nop
 8002676:	4b0f      	ldr	r3, [pc, #60]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002680:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002684:	d1f7      	bne.n	8002676 <vcom_ReceiveInit+0x36>

  /* Enable USART interrupt */
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_WUF);
 8002686:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689a      	ldr	r2, [r3, #8]
 800268c:	4b09      	ldr	r3, [pc, #36]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8002694:	609a      	str	r2, [r3, #8]

  /*Enable wakeup from stop mode*/
  HAL_UARTEx_EnableStopMode(&huart1);
 8002696:	4807      	ldr	r0, [pc, #28]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 8002698:	f007 f80c 	bl	80096b4 <HAL_UARTEx_EnableStopMode>

  /*Start LPUART receive on IT*/
  HAL_UART_Receive_IT(&huart1, &charRx, 1);
 800269c:	2201      	movs	r2, #1
 800269e:	4906      	ldr	r1, [pc, #24]	@ (80026b8 <vcom_ReceiveInit+0x78>)
 80026a0:	4804      	ldr	r0, [pc, #16]	@ (80026b4 <vcom_ReceiveInit+0x74>)
 80026a2:	f005 f845 	bl	8007730 <HAL_UART_Receive_IT>

  return UTIL_ADV_TRACE_OK;
 80026a6:	2300      	movs	r3, #0
  /* USER CODE BEGIN vcom_ReceiveInit_2 */

  /* USER CODE END vcom_ReceiveInit_2 */
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	2000031c 	.word	0x2000031c
 80026b4:	20000224 	.word	0x20000224
 80026b8:	20000314 	.word	0x20000314

080026bc <vcom_Resume>:

void vcom_Resume(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN vcom_Resume_1 */

  /* USER CODE END vcom_Resume_1 */
  /*to re-enable lost UART settings*/
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80026c0:	4808      	ldr	r0, [pc, #32]	@ (80026e4 <vcom_Resume+0x28>)
 80026c2:	f004 ffe4 	bl	800768e <HAL_UART_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <vcom_Resume+0x14>
  {
    Error_Handler();
 80026cc:	f7fe ffd6 	bl	800167c <Error_Handler>
  }

  /*to re-enable lost DMA settings*/
  if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80026d0:	4805      	ldr	r0, [pc, #20]	@ (80026e8 <vcom_Resume+0x2c>)
 80026d2:	f001 fb3d 	bl	8003d50 <HAL_DMA_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <vcom_Resume+0x24>
  {
    Error_Handler();
 80026dc:	f7fe ffce 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN vcom_Resume_2 */

  /* USER CODE END vcom_Resume_2 */
}
 80026e0:	bf00      	nop
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	20000224 	.word	0x20000224
 80026e8:	200002b4 	.word	0x200002b4

080026ec <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_1 */

  /* USER CODE END HAL_UART_TxCpltCallback_1 */
  /* buffer transmission complete*/
  if (huart->Instance == USART1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a05      	ldr	r2, [pc, #20]	@ (8002710 <HAL_UART_TxCpltCallback+0x24>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d103      	bne.n	8002706 <HAL_UART_TxCpltCallback+0x1a>
  {
    TxCpltCallback(NULL);
 80026fe:	4b05      	ldr	r3, [pc, #20]	@ (8002714 <HAL_UART_TxCpltCallback+0x28>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2000      	movs	r0, #0
 8002704:	4798      	blx	r3
  }
  /* USER CODE BEGIN HAL_UART_TxCpltCallback_2 */

  /* USER CODE END HAL_UART_TxCpltCallback_2 */
}
 8002706:	bf00      	nop
 8002708:	3708      	adds	r7, #8
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40013800 	.word	0x40013800
 8002714:	20000318 	.word	0x20000318

08002718 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_1 */

  /* USER CODE END HAL_UART_RxCpltCallback_1 */
  if (huart->Instance == USART1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a0d      	ldr	r2, [pc, #52]	@ (800275c <HAL_UART_RxCpltCallback+0x44>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d113      	bne.n	8002752 <HAL_UART_RxCpltCallback+0x3a>
  {
    if ((NULL != RxCpltCallback) && (HAL_UART_ERROR_NONE == huart->ErrorCode))
 800272a:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <HAL_UART_RxCpltCallback+0x48>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00a      	beq.n	8002748 <HAL_UART_RxCpltCallback+0x30>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d105      	bne.n	8002748 <HAL_UART_RxCpltCallback+0x30>
    {
      RxCpltCallback(&charRx, 1, 0);
 800273c:	4b08      	ldr	r3, [pc, #32]	@ (8002760 <HAL_UART_RxCpltCallback+0x48>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	2101      	movs	r1, #1
 8002744:	4807      	ldr	r0, [pc, #28]	@ (8002764 <HAL_UART_RxCpltCallback+0x4c>)
 8002746:	4798      	blx	r3
    }
    HAL_UART_Receive_IT(huart, &charRx, 1);
 8002748:	2201      	movs	r2, #1
 800274a:	4906      	ldr	r1, [pc, #24]	@ (8002764 <HAL_UART_RxCpltCallback+0x4c>)
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f004 ffef 	bl	8007730 <HAL_UART_Receive_IT>
  }
  /* USER CODE BEGIN HAL_UART_RxCpltCallback_2 */

  /* USER CODE END HAL_UART_RxCpltCallback_2 */
}
 8002752:	bf00      	nop
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40013800 	.word	0x40013800
 8002760:	2000031c 	.word	0x2000031c
 8002764:	20000314 	.word	0x20000314

08002768 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002768:	480d      	ldr	r0, [pc, #52]	@ (80027a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800276a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800276c:	f7ff fb81 	bl	8001e72 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002770:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002772:	490d      	ldr	r1, [pc, #52]	@ (80027a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <LoopForever+0xe>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002788:	4c0a      	ldr	r4, [pc, #40]	@ (80027b4 <LoopForever+0x16>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002796:	f018 ff31 	bl	801b5fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800279a:	f7fe ff08 	bl	80015ae <main>

0800279e <LoopForever>:

LoopForever:
    b LoopForever
 800279e:	e7fe      	b.n	800279e <LoopForever>
  ldr   r0, =_estack
 80027a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a8:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 80027ac:	0801c718 	.word	0x0801c718
  ldr r2, =_sbss
 80027b0:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 80027b4:	20002158 	.word	0x20002158

080027b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <ADC_IRQHandler>

080027ba <BSP_RADIO_Init>:
/**
  * @brief  Init Radio Switch 
  * @retval BSP status
  */
int32_t BSP_RADIO_Init(void)
{
 80027ba:	b580      	push	{r7, lr}
 80027bc:	b086      	sub	sp, #24
 80027be:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure = {0};
 80027c0:	1d3b      	adds	r3, r7, #4
 80027c2:	2200      	movs	r2, #0
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	605a      	str	r2, [r3, #4]
 80027c8:	609a      	str	r2, [r3, #8]
 80027ca:	60da      	str	r2, [r3, #12]
 80027cc:	611a      	str	r2, [r3, #16]
  
  /* Configure the Radio Switch pin */
  gpio_init_structure.Pin   = RF_SW_CTRL1_PIN;
 80027ce:	2310      	movs	r3, #16
 80027d0:	607b      	str	r3, [r7, #4]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80027d2:	2301      	movs	r3, #1
 80027d4:	60bb      	str	r3, [r7, #8]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027da:	2303      	movs	r3, #3
 80027dc:	613b      	str	r3, [r7, #16]
  
  HAL_GPIO_Init(RF_SW_CTRL1_GPIO_PORT, &gpio_init_structure);
 80027de:	1d3b      	adds	r3, r7, #4
 80027e0:	4619      	mov	r1, r3
 80027e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027e6:	f002 f8ff 	bl	80049e8 <HAL_GPIO_Init>
  
  gpio_init_structure.Pin = RF_SW_CTRL2_PIN;
 80027ea:	2320      	movs	r3, #32
 80027ec:	607b      	str	r3, [r7, #4]
  HAL_GPIO_Init(RF_SW_CTRL2_GPIO_PORT, &gpio_init_structure);
 80027ee:	1d3b      	adds	r3, r7, #4
 80027f0:	4619      	mov	r1, r3
 80027f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027f6:	f002 f8f7 	bl	80049e8 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 80027fa:	2200      	movs	r2, #0
 80027fc:	2120      	movs	r1, #32
 80027fe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002802:	f002 fb1f 	bl	8004e44 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002806:	2200      	movs	r2, #0
 8002808:	2110      	movs	r1, #16
 800280a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800280e:	f002 fb19 	bl	8004e44 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 8002812:	2300      	movs	r3, #0
}
 8002814:	4618      	mov	r0, r3
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <BSP_RADIO_ConfigRFSwitch>:
  *           @arg RADIO_SWITCH_RFO_LP
  *           @arg RADIO_SWITCH_RFO_HP
  * @retval BSP status
  */
int32_t BSP_RADIO_ConfigRFSwitch(BSP_RADIO_Switch_TypeDef Config)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
  switch (Config)
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b03      	cmp	r3, #3
 800282a:	d83f      	bhi.n	80028ac <BSP_RADIO_ConfigRFSwitch+0x90>
 800282c:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <BSP_RADIO_ConfigRFSwitch+0x18>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002845 	.word	0x08002845
 8002838:	0800285f 	.word	0x0800285f
 800283c:	08002879 	.word	0x08002879
 8002840:	08002893 	.word	0x08002893
  {
    case RADIO_SWITCH_OFF:
    {
      /* Turn off switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET);
 8002844:	2200      	movs	r2, #0
 8002846:	2110      	movs	r1, #16
 8002848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800284c:	f002 fafa 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET);
 8002850:	2200      	movs	r2, #0
 8002852:	2120      	movs	r1, #32
 8002854:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002858:	f002 faf4 	bl	8004e44 <HAL_GPIO_WritePin>
      break;      
 800285c:	e027      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RX:
    {
      /*Turns On in Rx Mode the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 800285e:	2201      	movs	r2, #1
 8002860:	2110      	movs	r1, #16
 8002862:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002866:	f002 faed 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_RESET); 
 800286a:	2200      	movs	r2, #0
 800286c:	2120      	movs	r1, #32
 800286e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002872:	f002 fae7 	bl	8004e44 <HAL_GPIO_WritePin>
      break;
 8002876:	e01a      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_LP:
    {
      /*Turns On in Tx Low Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_SET); 
 8002878:	2201      	movs	r2, #1
 800287a:	2110      	movs	r1, #16
 800287c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002880:	f002 fae0 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 8002884:	2201      	movs	r2, #1
 8002886:	2120      	movs	r1, #32
 8002888:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800288c:	f002 fada 	bl	8004e44 <HAL_GPIO_WritePin>
      break;
 8002890:	e00d      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    case RADIO_SWITCH_RFO_HP:
    {
      /*Turns On in Tx High Power the RF Switch */
      HAL_GPIO_WritePin(RF_SW_CTRL1_GPIO_PORT, RF_SW_CTRL1_PIN, GPIO_PIN_RESET); 
 8002892:	2200      	movs	r2, #0
 8002894:	2110      	movs	r1, #16
 8002896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800289a:	f002 fad3 	bl	8004e44 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(RF_SW_CTRL2_GPIO_PORT, RF_SW_CTRL2_PIN, GPIO_PIN_SET); 
 800289e:	2201      	movs	r2, #1
 80028a0:	2120      	movs	r1, #32
 80028a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80028a6:	f002 facd 	bl	8004e44 <HAL_GPIO_WritePin>
      break;
 80028aa:	e000      	b.n	80028ae <BSP_RADIO_ConfigRFSwitch+0x92>
    }
    default:
      break;    
 80028ac:	bf00      	nop
  }  

  return BSP_ERROR_NONE;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <BSP_RADIO_GetTxConfig>:
  *  RADIO_CONF_RFO_LP_HP
  *  RADIO_CONF_RFO_LP
  *  RADIO_CONF_RFO_HP
  */
int32_t BSP_RADIO_GetTxConfig(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return RADIO_CONF_RFO_HP;
 80028bc:	2302      	movs	r3, #2
}
 80028be:	4618      	mov	r0, r3
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bc80      	pop	{r7}
 80028c4:	4770      	bx	lr

080028c6 <BSP_RADIO_IsTCXO>:
  * @retval
  *  RADIO_CONF_TCXO_NOT_SUPPORTED
  *  RADIO_CONF_TCXO_SUPPORTED
  */
int32_t BSP_RADIO_IsTCXO(void)
{
 80028c6:	b480      	push	{r7}
 80028c8:	af00      	add	r7, sp, #0
  return RADIO_CONF_TCXO_SUPPORTED;
 80028ca:	2301      	movs	r3, #1
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bc80      	pop	{r7}
 80028d2:	4770      	bx	lr

080028d4 <BSP_RADIO_IsDCDC>:
  * @retval
  *  RADIO_CONF_DCDC_NOT_SUPPORTED
  *  RADIO_CONF_DCDC_SUPPORTED  
  */
int32_t BSP_RADIO_IsDCDC(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	af00      	add	r7, sp, #0
  return RADIO_CONF_DCDC_SUPPORTED;
 80028d8:	2301      	movs	r3, #1
}
 80028da:	4618      	mov	r0, r3
 80028dc:	46bd      	mov	sp, r7
 80028de:	bc80      	pop	{r7}
 80028e0:	4770      	bx	lr

080028e2 <BSP_RADIO_GetRFOMaxPowerConfig>:
  * @retval
  *    RADIO_CONF_RFO_LP_MAX_15_dBm for LP mode
  *    RADIO_CONF_RFO_HP_MAX_22_dBm for HP mode
  */
int32_t BSP_RADIO_GetRFOMaxPowerConfig(BSP_RADIO_RFOMaxPowerConfig_TypeDef Config)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b085      	sub	sp, #20
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	4603      	mov	r3, r0
 80028ea:	71fb      	strb	r3, [r7, #7]
  int32_t ret;

  if(Config == RADIO_RFO_LP_MAXPOWER)
 80028ec:	79fb      	ldrb	r3, [r7, #7]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d102      	bne.n	80028f8 <BSP_RADIO_GetRFOMaxPowerConfig+0x16>
  {
    ret = RADIO_CONF_RFO_LP_MAX_15_dBm;
 80028f2:	230f      	movs	r3, #15
 80028f4:	60fb      	str	r3, [r7, #12]
 80028f6:	e001      	b.n	80028fc <BSP_RADIO_GetRFOMaxPowerConfig+0x1a>
  }
  else
  {
    ret = RADIO_CONF_RFO_HP_MAX_22_dBm;
 80028f8:	2316      	movs	r3, #22
 80028fa:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80028fc:	68fb      	ldr	r3, [r7, #12]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3714      	adds	r7, #20
 8002902:	46bd      	mov	sp, r7
 8002904:	bc80      	pop	{r7}
 8002906:	4770      	bx	lr

08002908 <LL_DBGMCU_DisableDBGSleepMode>:
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_SLEEP);
 800290c:	4b04      	ldr	r3, [pc, #16]	@ (8002920 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4a03      	ldr	r2, [pc, #12]	@ (8002920 <LL_DBGMCU_DisableDBGSleepMode+0x18>)
 8002912:	f023 0301 	bic.w	r3, r3, #1
 8002916:	6053      	str	r3, [r2, #4]
}
 8002918:	bf00      	nop
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr
 8002920:	e0042000 	.word	0xe0042000

08002924 <LL_DBGMCU_DisableDBGStopMode>:
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STOP);
 8002928:	4b04      	ldr	r3, [pc, #16]	@ (800293c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a03      	ldr	r2, [pc, #12]	@ (800293c <LL_DBGMCU_DisableDBGStopMode+0x18>)
 800292e:	f023 0302 	bic.w	r3, r3, #2
 8002932:	6053      	str	r3, [r2, #4]
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr
 800293c:	e0042000 	.word	0xe0042000

08002940 <LL_DBGMCU_DisableDBGStandbyMode>:
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  CLEAR_BIT(DBGMCU->CR, DBGMCU_CR_DBG_STANDBY);
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 8002946:	685b      	ldr	r3, [r3, #4]
 8002948:	4a03      	ldr	r2, [pc, #12]	@ (8002958 <LL_DBGMCU_DisableDBGStandbyMode+0x18>)
 800294a:	f023 0304 	bic.w	r3, r3, #4
 800294e:	6053      	str	r3, [r2, #4]
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	e0042000 	.word	0xe0042000

0800295c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002966:	2003      	movs	r0, #3
 8002968:	f001 f9b0 	bl	8003ccc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800296c:	f003 fb46 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8002970:	4603      	mov	r3, r0
 8002972:	4a09      	ldr	r2, [pc, #36]	@ (8002998 <HAL_Init+0x3c>)
 8002974:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002976:	200f      	movs	r0, #15
 8002978:	f7ff f9a8 	bl	8001ccc <HAL_InitTick>
 800297c:	4603      	mov	r3, r0
 800297e:	2b00      	cmp	r3, #0
 8002980:	d002      	beq.n	8002988 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	e001      	b.n	800298c <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002988:	f7fe ff6f 	bl	800186a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800298c:	79fb      	ldrb	r3, [r7, #7]
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000000 	.word	0x20000000

0800299c <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029a0:	4b04      	ldr	r3, [pc, #16]	@ (80029b4 <HAL_SuspendTick+0x18>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a03      	ldr	r2, [pc, #12]	@ (80029b4 <HAL_SuspendTick+0x18>)
 80029a6:	f023 0302 	bic.w	r3, r3, #2
 80029aa:	6013      	str	r3, [r2, #0]
}
 80029ac:	bf00      	nop
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bc80      	pop	{r7}
 80029b2:	4770      	bx	lr
 80029b4:	e000e010 	.word	0xe000e010

080029b8 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL, SysTick_CTRL_TICKINT_Msk);
 80029bc:	4b04      	ldr	r3, [pc, #16]	@ (80029d0 <HAL_ResumeTick+0x18>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a03      	ldr	r2, [pc, #12]	@ (80029d0 <HAL_ResumeTick+0x18>)
 80029c2:	f043 0302 	orr.w	r3, r3, #2
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	bf00      	nop
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bc80      	pop	{r7}
 80029ce:	4770      	bx	lr
 80029d0:	e000e010 	.word	0xe000e010

080029d4 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 80029d8:	4b02      	ldr	r3, [pc, #8]	@ (80029e4 <HAL_GetUIDw0+0x10>)
 80029da:	681b      	ldr	r3, [r3, #0]
}
 80029dc:	4618      	mov	r0, r3
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc80      	pop	{r7}
 80029e2:	4770      	bx	lr
 80029e4:	1fff7590 	.word	0x1fff7590

080029e8 <HAL_GetUIDw1>:
/**
  * @brief  Return the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80029ec:	4b02      	ldr	r3, [pc, #8]	@ (80029f8 <HAL_GetUIDw1+0x10>)
 80029ee:	681b      	ldr	r3, [r3, #0]
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bc80      	pop	{r7}
 80029f6:	4770      	bx	lr
 80029f8:	1fff7594 	.word	0x1fff7594

080029fc <HAL_GetUIDw2>:
/**
  * @brief  Return the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8002a00:	4b02      	ldr	r3, [pc, #8]	@ (8002a0c <HAL_GetUIDw2+0x10>)
 8002a02:	681b      	ldr	r3, [r3, #0]
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bc80      	pop	{r7}
 8002a0a:	4770      	bx	lr
 8002a0c:	1fff7598 	.word	0x1fff7598

08002a10 <HAL_DBGMCU_DisableDBGSleepMode>:
/**
  * @brief  Disable the CPU1 Debug Module during SLEEP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGSleepMode(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGSleepMode();
 8002a14:	f7ff ff78 	bl	8002908 <LL_DBGMCU_DisableDBGSleepMode>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_DBGMCU_DisableDBGStopMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STOP mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStopMode(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStopMode();
 8002a20:	f7ff ff80 	bl	8002924 <LL_DBGMCU_DisableDBGStopMode>
}
 8002a24:	bf00      	nop
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <HAL_DBGMCU_DisableDBGStandbyMode>:
/**
  * @brief  Disable the CPU1 Debug Module during STANDBY mode
  * @retval None
  */
void HAL_DBGMCU_DisableDBGStandbyMode(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  LL_DBGMCU_DisableDBGStandbyMode();
 8002a2c:	f7ff ff88 	bl	8002940 <LL_DBGMCU_DisableDBGStandbyMode>
}
 8002a30:	bf00      	nop
 8002a32:	bd80      	pop	{r7, pc}

08002a34 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	601a      	str	r2, [r3, #0]
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bc80      	pop	{r7}
 8002a56:	4770      	bx	lr

08002a58 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b083      	sub	sp, #12
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	370c      	adds	r7, #12
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a72:	b480      	push	{r7}
 8002a74:	b085      	sub	sp, #20
 8002a76:	af00      	add	r7, sp, #0
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	60b9      	str	r1, [r7, #8]
 8002a7c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	695a      	ldr	r2, [r3, #20]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2107      	movs	r1, #7
 8002a8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a8e:	43db      	mvns	r3, r3
 8002a90:	401a      	ands	r2, r3
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	6879      	ldr	r1, [r7, #4]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	431a      	orrs	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002aa4:	bf00      	nop
 8002aa6:	3714      	adds	r7, #20
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bc80      	pop	{r7}
 8002aac:	4770      	bx	lr

08002aae <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b083      	sub	sp, #12
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
 8002ab6:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	695a      	ldr	r2, [r3, #20]
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	f003 0304 	and.w	r3, r3, #4
 8002ac2:	2107      	movs	r1, #7
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	f003 0304 	and.w	r3, r3, #4
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc80      	pop	{r7}
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b083      	sub	sp, #12
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	68db      	ldr	r3, [r3, #12]
 8002aea:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bc80      	pop	{r7}
 8002b00:	4770      	bx	lr

08002b02 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002b02:	b480      	push	{r7}
 8002b04:	b085      	sub	sp, #20
 8002b06:	af00      	add	r7, sp, #0
 8002b08:	60f8      	str	r0, [r7, #12]
 8002b0a:	60b9      	str	r1, [r7, #8]
 8002b0c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	f003 031f 	and.w	r3, r3, #31
 8002b18:	210f      	movs	r1, #15
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	401a      	ands	r2, r3
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0e9b      	lsrs	r3, r3, #26
 8002b26:	f003 010f 	and.w	r1, r3, #15
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f003 031f 	and.w	r3, r3, #31
 8002b30:	fa01 f303 	lsl.w	r3, r1, r3
 8002b34:	431a      	orrs	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	629a      	str	r2, [r3, #40]	@ 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
 8002b4c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b58:	431a      	orrs	r2, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b5e:	bf00      	nop
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bc80      	pop	{r7}
 8002b66:	4770      	bx	lr

08002b68 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002b7c:	43db      	mvns	r3, r3
 8002b7e:	401a      	ands	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b085      	sub	sp, #20
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	60f8      	str	r0, [r7, #12]
 8002b96:	60b9      	str	r1, [r7, #8]
 8002b98:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	695a      	ldr	r2, [r3, #20]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	021b      	lsls	r3, r3, #8
 8002ba2:	43db      	mvns	r3, r3
 8002ba4:	401a      	ands	r2, r3
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	0219      	lsls	r1, r3, #8
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	400b      	ands	r3, r1
 8002bae:	f023 437c 	bic.w	r3, r3, #4227858432	@ 0xfc000000
 8002bb2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002bbc:	bf00      	nop
 8002bbe:	3714      	adds	r7, #20
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bc80      	pop	{r7}
 8002bc4:	4770      	bx	lr

08002bc6 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bc6:	b480      	push	{r7}
 8002bc8:	b083      	sub	sp, #12
 8002bca:	af00      	add	r7, sp, #0
 8002bcc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bd6:	f023 0317 	bic.w	r3, r3, #23
 8002bda:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bc80      	pop	{r7}
 8002bea:	4770      	bx	lr

08002bec <LL_ADC_DisableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_DisableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN | ADC_CR_BITS_PROPERTY_RS));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002bfc:	f023 0317 	bic.w	r3, r3, #23
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6093      	str	r3, [r2, #8]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bc80      	pop	{r7}
 8002c0c:	4770      	bx	lr

08002c0e <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c1e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c22:	d101      	bne.n	8002c28 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c24:	2301      	movs	r3, #1
 8002c26:	e000      	b.n	8002c2a <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	370c      	adds	r7, #12
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bc80      	pop	{r7}
 8002c32:	4770      	bx	lr

08002c34 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c44:	f023 0317 	bic.w	r3, r3, #23
 8002c48:	f043 0201 	orr.w	r2, r3, #1
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002c50:	bf00      	nop
 8002c52:	370c      	adds	r7, #12
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bc80      	pop	{r7}
 8002c58:	4770      	bx	lr

08002c5a <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002c5a:	b480      	push	{r7}
 8002c5c:	b083      	sub	sp, #12
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c6a:	f023 0317 	bic.w	r3, r3, #23
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002c76:	bf00      	nop
 8002c78:	370c      	adds	r7, #12
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f003 0301 	and.w	r3, r3, #1
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <LL_ADC_IsEnabled+0x18>
 8002c94:	2301      	movs	r3, #1
 8002c96:	e000      	b.n	8002c9a <LL_ADC_IsEnabled+0x1a>
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 0302 	and.w	r3, r3, #2
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d101      	bne.n	8002cbc <LL_ADC_IsDisableOngoing+0x18>
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e000      	b.n	8002cbe <LL_ADC_IsDisableOngoing+0x1a>
 8002cbc:	2300      	movs	r3, #0
}
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	370c      	adds	r7, #12
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bc80      	pop	{r7}
 8002cc6:	4770      	bx	lr

08002cc8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cd8:	f023 0317 	bic.w	r3, r3, #23
 8002cdc:	f043 0204 	orr.w	r2, r3, #4
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002ce4:	bf00      	nop
 8002ce6:	370c      	adds	r7, #12
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bc80      	pop	{r7}
 8002cec:	4770      	bx	lr

08002cee <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002cfe:	f023 0317 	bic.w	r3, r3, #23
 8002d02:	f043 0210 	orr.w	r2, r3, #16
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b083      	sub	sp, #12
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 0304 	and.w	r3, r3, #4
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d101      	bne.n	8002d2c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b088      	sub	sp, #32
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR1 = 0UL;
 8002d44:	2300      	movs	r3, #0
 8002d46:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e19e      	b.n	8003098 <HAL_ADC_Init+0x360>
    assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
    assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
  }
  assert_param(IS_ADC_TRIGGER_FREQ(hadc->Init.TriggerFrequencyMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	2b00      	cmp	r3, #0
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	f7fe f90d 	bl	8000f88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2200      	movs	r2, #0
 8002d72:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7ff ff44 	bl	8002c0e <LL_ADC_IsInternalRegulatorEnabled>
 8002d86:	4603      	mov	r3, r0
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d115      	bne.n	8002db8 <HAL_ADC_Init+0x80>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff ff18 	bl	8002bc6 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002d96:	4b99      	ldr	r3, [pc, #612]	@ (8002ffc <HAL_ADC_Init+0x2c4>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	4a98      	ldr	r2, [pc, #608]	@ (8003000 <HAL_ADC_Init+0x2c8>)
 8002d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	3301      	adds	r3, #1
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002daa:	e002      	b.n	8002db2 <HAL_ADC_Init+0x7a>
    {
      wait_loop_index--;
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d1f9      	bne.n	8002dac <HAL_ADC_Init+0x74>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	f7ff ff26 	bl	8002c0e <LL_ADC_IsInternalRegulatorEnabled>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10d      	bne.n	8002de4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	f043 0210 	orr.w	r2, r3, #16
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dd8:	f043 0201 	orr.w	r2, r3, #1
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f7ff ff93 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8002dee:	60f8      	str	r0, [r7, #12]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002df4:	f003 0310 	and.w	r3, r3, #16
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f040 8144 	bne.w	8003086 <HAL_ADC_Init+0x34e>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f040 8140 	bne.w	8003086 <HAL_ADC_Init+0x34e>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0a:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002e0e:	f043 0202 	orr.w	r2, r3, #2
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	659a      	str	r2, [r3, #88]	@ 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f7ff ff30 	bl	8002c80 <LL_ADC_IsEnabled>
 8002e20:	4603      	mov	r3, r0
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	f040 80a7 	bne.w	8002f76 <HAL_ADC_Init+0x23e>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	7e1b      	ldrb	r3, [r3, #24]
 8002e30:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e32:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	7e5b      	ldrb	r3, [r3, #25]
 8002e38:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002e3a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	7e9b      	ldrb	r3, [r3, #26]
 8002e40:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002e42:	4313      	orrs	r3, r2
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002e48:	2a00      	cmp	r2, #0
 8002e4a:	d002      	beq.n	8002e52 <HAL_ADC_Init+0x11a>
 8002e4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002e50:	e000      	b.n	8002e54 <HAL_ADC_Init+0x11c>
 8002e52:	2200      	movs	r2, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002e54:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002e5a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	691b      	ldr	r3, [r3, #16]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	da04      	bge.n	8002e6e <HAL_ADC_Init+0x136>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	691b      	ldr	r3, [r3, #16]
 8002e68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002e6c:	e001      	b.n	8002e72 <HAL_ADC_Init+0x13a>
 8002e6e:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                           |
 8002e72:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002e7a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002e7c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002e7e:	69ba      	ldr	r2, [r7, #24]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d114      	bne.n	8002eb8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	7e9b      	ldrb	r3, [r3, #26]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d104      	bne.n	8002ea0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e9c:	61bb      	str	r3, [r7, #24]
 8002e9e:	e00b      	b.n	8002eb8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ea4:	f043 0220 	orr.w	r2, r3, #32
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eb0:	f043 0201 	orr.w	r2, r3, #1
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d009      	beq.n	8002ed4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
                     hadc->Init.ExternalTrigConvEdge);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f423 33fe 	bic.w	r3, r3, #130048	@ 0x1fc00
 8002ede:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8002ee2:	687a      	ldr	r2, [r7, #4]
 8002ee4:	6812      	ldr	r2, [r2, #0]
 8002ee6:	69b9      	ldr	r1, [r7, #24]
 8002ee8:	430b      	orrs	r3, r1
 8002eea:	60d3      	str	r3, [r2, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                   hadc->Init.TriggerFrequencyMode
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	697a      	ldr	r2, [r7, #20]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d111      	bne.n	8002f2e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f003 4240 	and.w	r2, r3, #3221225472	@ 0xc0000000
                     hadc->Init.Oversampling.Ratio         |
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002f16:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002f1c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002f22:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f043 0301 	orr.w	r3, r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691a      	ldr	r2, [r3, #16]
 8002f34:	4b33      	ldr	r3, [pc, #204]	@ (8003004 <HAL_ADC_Init+0x2cc>)
 8002f36:	4013      	ands	r3, r2
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6812      	ldr	r2, [r2, #0]
 8002f3c:	6979      	ldr	r1, [r7, #20]
 8002f3e:	430b      	orrs	r3, r1
 8002f40:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8002f4a:	d014      	beq.n	8002f76 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f54:	d00f      	beq.n	8002f76 <HAL_ADC_Init+0x23e>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002f5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f5e:	d00a      	beq.n	8002f76 <HAL_ADC_Init+0x23e>
      {
        MODIFY_REG(ADC_COMMON->CCR,
 8002f60:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <HAL_ADC_Init+0x2d0>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 8002f70:	4925      	ldr	r1, [pc, #148]	@ (8003008 <HAL_ADC_Init+0x2d0>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6818      	ldr	r0, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f7e:	461a      	mov	r2, r3
 8002f80:	2100      	movs	r1, #0
 8002f82:	f7ff fd76 	bl	8002a72 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f8e:	461a      	mov	r2, r3
 8002f90:	491e      	ldr	r1, [pc, #120]	@ (800300c <HAL_ADC_Init+0x2d4>)
 8002f92:	f7ff fd6e 	bl	8002a72 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d108      	bne.n	8002fb0 <HAL_ADC_Init+0x278>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f062 020f 	orn	r2, r2, #15
 8002fac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fae:	e042      	b.n	8003036 <HAL_ADC_Init+0x2fe>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fb8:	d13d      	bne.n	8003036 <HAL_ADC_Init+0x2fe>
    {
      /* Count number of ranks available in HAL ADC handle variable */
      uint32_t ADCGroupRegularSequencerRanksCount;

      /* Parse all ranks from 1 to 8 */
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fba:	2300      	movs	r3, #0
 8002fbc:	613b      	str	r3, [r7, #16]
 8002fbe:	e00c      	b.n	8002fda <HAL_ADC_Init+0x2a2>
      {
        /* Check each sequencer rank until value of end of sequence */
        if (((hadc->ADCGroupRegularSequencerRanks >> (ADCGroupRegularSequencerRanksCount * 4UL)) & ADC_CHSELR_SQ1) ==
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fcc:	f003 030f 	and.w	r3, r3, #15
 8002fd0:	2b0f      	cmp	r3, #15
 8002fd2:	d006      	beq.n	8002fe2 <HAL_ADC_Init+0x2aa>
      for (ADCGroupRegularSequencerRanksCount = 0UL; ADCGroupRegularSequencerRanksCount < (8UL); ADCGroupRegularSequencerRanksCount++)
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2b07      	cmp	r3, #7
 8002fde:	d9ef      	bls.n	8002fc0 <HAL_ADC_Init+0x288>
 8002fe0:	e000      	b.n	8002fe4 <HAL_ADC_Init+0x2ac>
            ADC_CHSELR_SQ1)
        {
          break;
 8002fe2:	bf00      	nop
        }
      }

      if (ADCGroupRegularSequencerRanksCount == 1UL)
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d112      	bne.n	8003010 <HAL_ADC_Init+0x2d8>
      {
        /* Set ADC group regular sequencer:                                   */
        /* Set sequencer scan length by clearing ranks above rank 1           */
        /* and do not modify rank 1 value.                                    */
        SET_BIT(hadc->Instance->CHSELR,
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f062 020f 	orn	r2, r2, #15
 8002ff8:	629a      	str	r2, [r3, #40]	@ 0x28
 8002ffa:	e01c      	b.n	8003036 <HAL_ADC_Init+0x2fe>
 8002ffc:	20000000 	.word	0x20000000
 8003000:	053e2d63 	.word	0x053e2d63
 8003004:	1ffffc02 	.word	0x1ffffc02
 8003008:	40012708 	.word	0x40012708
 800300c:	03ffff04 	.word	0x03ffff04
        /*          therefore after the first call of "HAL_ADC_Init()",       */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	3b01      	subs	r3, #1
 800301c:	009b      	lsls	r3, r3, #2
 800301e:	f003 031c 	and.w	r3, r3, #28
 8003022:	f06f 020f 	mvn.w	r2, #15
 8003026:	fa02 f103 	lsl.w	r1, r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	430a      	orrs	r2, r1
 8003034:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2100      	movs	r1, #0
 800303c:	4618      	mov	r0, r3
 800303e:	f7ff fd36 	bl	8002aae <LL_ADC_GetSamplingTimeCommonChannels>
 8003042:	4602      	mov	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003048:	429a      	cmp	r2, r3
 800304a:	d10b      	bne.n	8003064 <HAL_ADC_Init+0x32c>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003056:	f023 0303 	bic.w	r3, r3, #3
 800305a:	f043 0201 	orr.w	r2, r3, #1
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	659a      	str	r2, [r3, #88]	@ 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003062:	e018      	b.n	8003096 <HAL_ADC_Init+0x35e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003068:	f023 0312 	bic.w	r3, r3, #18
 800306c:	f043 0210 	orr.w	r2, r3, #16
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003078:	f043 0201 	orr.w	r2, r3, #1
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	65da      	str	r2, [r3, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	77fb      	strb	r3, [r7, #31]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8003084:	e007      	b.n	8003096 <HAL_ADC_Init+0x35e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	f043 0210 	orr.w	r2, r3, #16
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	77fb      	strb	r3, [r7, #31]
  }

  return tmp_hal_status;
 8003096:	7ffb      	ldrb	r3, [r7, #31]
}
 8003098:	4618      	mov	r0, r3
 800309a:	3720      	adds	r7, #32
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}

080030a0 <HAL_ADC_DeInit>:
  *         common group is still running.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_DeInit(ADC_HandleTypeDef *hadc)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b084      	sub	sp, #16
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check ADC handle */
  if (hadc == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_DeInit+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e06a      	b.n	8003188 <HAL_ADC_DeInit+0xe8>

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 fabe 	bl	8003640 <ADC_ConversionStop>
 80030c4:	4603      	mov	r3, r0
 80030c6:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10f      	bne.n	80030ee <HAL_ADC_DeInit+0x4e>
  {
    /* Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fb82 	bl	80037d8 <ADC_Disable>
 80030d4:	4603      	mov	r3, r0
 80030d6:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d102      	bne.n	80030e4 <HAL_ADC_DeInit+0x44>
    {
      /* Change ADC state */
      hadc->State = HAL_ADC_STATE_READY;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2201      	movs	r2, #1
 80030e2:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Disable ADC internal voltage regulator */
    LL_ADC_DisableInternalRegulator(hadc->Instance);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fd7f 	bl	8002bec <LL_ADC_DisableInternalRegulator>
  /*       in HAL_ADC_MspDeInit() to reset the ADC peripheral using           */
  /*       system RCC hard reset.                                             */

  /* ========== Reset ADC registers ========== */
  /* Reset register IER */
  __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_AWD3  | ADC_IT_AWD2 |
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	687a      	ldr	r2, [r7, #4]
 80030f6:	6812      	ldr	r2, [r2, #0]
 80030f8:	f423 7367 	bic.w	r3, r3, #924	@ 0x39c
 80030fc:	f023 0303 	bic.w	r3, r3, #3
 8003100:	6053      	str	r3, [r2, #4]
                              ADC_IT_AWD1  | ADC_IT_OVR  |
                              ADC_IT_EOS   | ADC_IT_EOC  |
                              ADC_IT_EOSMP | ADC_IT_RDY));

  /* Reset register ISR */
  __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_AWD3  | ADC_FLAG_AWD2 |
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f240 329f 	movw	r2, #927	@ 0x39f
 800310a:	601a      	str	r2, [r3, #0]
  /* Reset register CR */
  /* Bits ADC_CR_ADCAL, ADC_CR_ADSTP, ADC_CR_ADSTART are in access mode     */
  /* "read-set": no direct reset applicable.                                */

  /* Reset register CFGR1 */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_AWD1CH   | ADC_CFGR1_AWD1EN  | ADC_CFGR1_AWD1SGL | ADC_CFGR1_DISCEN |
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68d9      	ldr	r1, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_ADC_DeInit+0xf0>)
 8003118:	400b      	ands	r3, r1
 800311a:	60d3      	str	r3, [r2, #12]
                             ADC_CFGR1_SCANDIR | ADC_CFGR1_DMACFG | ADC_CFGR1_DMAEN);

  /* Reset register CFGR2 */
  /* Note: Update of ADC clock mode is conditioned to ADC state disabled:   */
  /*       already done above.                                              */
  hadc->Instance->CFGR2 &= ~ADC_CFGR2_CKMODE;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	691a      	ldr	r2, [r3, #16]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 4240 	bic.w	r2, r2, #3221225472	@ 0xc0000000
 800312a:	611a      	str	r2, [r3, #16]

  /* Reset register SMPR */
  hadc->Instance->SMPR &= ~ADC_SMPR_SMP1;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	695a      	ldr	r2, [r3, #20]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f022 0207 	bic.w	r2, r2, #7
 800313a:	615a      	str	r2, [r3, #20]

  /* Reset register TR1 */
  hadc->Instance->TR1 &= ~(ADC_TR1_HT1 | ADC_TR1_LT1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	6a1a      	ldr	r2, [r3, #32]
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f002 22f0 	and.w	r2, r2, #4026593280	@ 0xf000f000
 800314a:	621a      	str	r2, [r3, #32]

  /* Reset register CHSELR */
  hadc->Instance->CHSELR &= ~(ADC_CHSELR_SQ_ALL);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2200      	movs	r2, #0
 8003158:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset register DR */
  /* bits in access mode read only, no direct reset applicable */

  /* Reset register CCR */
  ADC_COMMON->CCR &= ~(ADC_CCR_VBATEN | ADC_CCR_TSEN | ADC_CCR_VREFEN | ADC_CCR_PRESC);
 800315a:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <HAL_ADC_DeInit+0xf4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a0d      	ldr	r2, [pc, #52]	@ (8003194 <HAL_ADC_DeInit+0xf4>)
 8003160:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8003164:	6013      	str	r3, [r2, #0]

  /* DeInit the low level hardware */
  hadc->MspDeInitCallback(hadc);
#else
  /* DeInit the low level hardware */
  HAL_ADC_MspDeInit(hadc);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd ff22 	bl	8000fb0 <HAL_ADC_MspDeInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

  /* Reset HAL ADC handle variable */
  hadc->ADCGroupRegularSequencerRanks = 0x00000000UL;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Set ADC error code to none */
  ADC_CLEAR_ERRORCODE(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC state */
  hadc->State = HAL_ADC_STATE_RESET;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	659a      	str	r2, [r3, #88]	@ 0x58

  __HAL_UNLOCK(hadc);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	833e0200 	.word	0x833e0200
 8003194:	40012708 	.word	0x40012708

08003198 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fdb5 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d132      	bne.n	8003216 <HAL_ADC_Start+0x7e>
  {
    __HAL_LOCK(hadc);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d101      	bne.n	80031be <HAL_ADC_Start+0x26>
 80031ba:	2302      	movs	r3, #2
 80031bc:	e02e      	b.n	800321c <HAL_ADC_Start+0x84>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f000 fa80 	bl	80036cc <ADC_Enable>
 80031cc:	4603      	mov	r3, r0
 80031ce:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80031d0:	7bfb      	ldrb	r3, [r7, #15]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d11a      	bne.n	800320c <HAL_ADC_Start+0x74>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031da:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80031de:	f023 0301 	bic.w	r3, r3, #1
 80031e2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	221c      	movs	r2, #28
 80031f6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4618      	mov	r0, r3
 8003206:	f7ff fd5f 	bl	8002cc8 <LL_ADC_REG_StartConversion>
 800320a:	e006      	b.n	800321a <HAL_ADC_Start+0x82>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2200      	movs	r2, #0
 8003210:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8003214:	e001      	b.n	800321a <HAL_ADC_Start+0x82>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003216:	2302      	movs	r3, #2
 8003218:	73fb      	strb	r3, [r7, #15]
  }

  return tmp_hal_status;
 800321a:	7bfb      	ldrb	r3, [r7, #15]
}
 800321c:	4618      	mov	r0, r3
 800321e:	3710      	adds	r7, #16
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b084      	sub	sp, #16
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003232:	2b01      	cmp	r3, #1
 8003234:	d101      	bne.n	800323a <HAL_ADC_Stop+0x16>
 8003236:	2302      	movs	r3, #2
 8003238:	e022      	b.n	8003280 <HAL_ADC_Stop+0x5c>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8003242:	6878      	ldr	r0, [r7, #4]
 8003244:	f000 f9fc 	bl	8003640 <ADC_ConversionStop>
 8003248:	4603      	mov	r3, r0
 800324a:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800324c:	7bfb      	ldrb	r3, [r7, #15]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d111      	bne.n	8003276 <HAL_ADC_Stop+0x52>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f000 fac0 	bl	80037d8 <ADC_Disable>
 8003258:	4603      	mov	r3, r0
 800325a:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 800325c:	7bfb      	ldrb	r3, [r7, #15]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d109      	bne.n	8003276 <HAL_ADC_Stop+0x52>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003266:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	f043 0201 	orr.w	r2, r3, #1
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	659a      	str	r2, [r3, #88]	@ 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 800327e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003280:	4618      	mov	r0, r3
 8003282:	3710      	adds	r7, #16
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	695b      	ldr	r3, [r3, #20]
 8003296:	2b08      	cmp	r3, #8
 8003298:	d102      	bne.n	80032a0 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800329a:	2308      	movs	r3, #8
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	e010      	b.n	80032c2 <HAL_ADC_PollForConversion+0x3a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d007      	beq.n	80032be <HAL_ADC_PollForConversion+0x36>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032b2:	f043 0220 	orr.w	r2, r3, #32
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e077      	b.n	80033ae <HAL_ADC_PollForConversion+0x126>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80032be:	2304      	movs	r3, #4
 80032c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032c2:	f7fe fd0d 	bl	8001ce0 <HAL_GetTick>
 80032c6:	60b8      	str	r0, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032c8:	e021      	b.n	800330e <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032d0:	d01d      	beq.n	800330e <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032d2:	f7fe fd05 	bl	8001ce0 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d302      	bcc.n	80032e8 <HAL_ADC_PollForConversion+0x60>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d112      	bne.n	800330e <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10b      	bne.n	800330e <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032fa:	f043 0204 	orr.w	r2, r3, #4
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	659a      	str	r2, [r3, #88]	@ 0x58

          __HAL_UNLOCK(hadc);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e04f      	b.n	80033ae <HAL_ADC_PollForConversion+0x126>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681a      	ldr	r2, [r3, #0]
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	4013      	ands	r3, r2
 8003318:	2b00      	cmp	r3, #0
 800331a:	d0d6      	beq.n	80032ca <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003320:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4618      	mov	r0, r3
 800332e:	f7ff fbd6 	bl	8002ade <LL_ADC_REG_IsTriggerSourceSWStart>
 8003332:	4603      	mov	r3, r0
 8003334:	2b00      	cmp	r3, #0
 8003336:	d031      	beq.n	800339c <HAL_ADC_PollForConversion+0x114>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	7e9b      	ldrb	r3, [r3, #26]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d12d      	bne.n	800339c <HAL_ADC_PollForConversion+0x114>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0308 	and.w	r3, r3, #8
 800334a:	2b08      	cmp	r3, #8
 800334c:	d126      	bne.n	800339c <HAL_ADC_PollForConversion+0x114>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff fcde 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d112      	bne.n	8003384 <HAL_ADC_PollForConversion+0xfc>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685a      	ldr	r2, [r3, #4]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 020c 	bic.w	r2, r2, #12
 800336c:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003372:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003376:	f023 0301 	bic.w	r3, r3, #1
 800337a:	f043 0201 	orr.w	r2, r3, #1
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	659a      	str	r2, [r3, #88]	@ 0x58
 8003382:	e00b      	b.n	800339c <HAL_ADC_PollForConversion+0x114>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003388:	f043 0220 	orr.w	r2, r3, #32
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003394:	f043 0201 	orr.w	r2, r3, #1
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	7e1b      	ldrb	r3, [r3, #24]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d103      	bne.n	80033ac <HAL_ADC_PollForConversion+0x124>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	220c      	movs	r2, #12
 80033aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033b6:	b480      	push	{r7}
 80033b8:	b083      	sub	sp, #12
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bc80      	pop	{r7}
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b088      	sub	sp, #32
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80033de:	2300      	movs	r3, #0
 80033e0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(pConfig->Channel));
  assert_param(IS_ADC_SAMPLING_TIME_COMMON(pConfig->SamplingTime));

  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_ADC_ConfigChannel+0x28>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e110      	b.n	800361a <HAL_ADC_ConfigChannel+0x24a>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4618      	mov	r0, r3
 8003406:	f7ff fc85 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f040 80f7 	bne.w	8003600 <HAL_ADC_ConfigChannel+0x230>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b02      	cmp	r3, #2
 8003418:	f000 80b1 	beq.w	800357e <HAL_ADC_ConfigChannel+0x1ae>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003424:	d004      	beq.n	8003430 <HAL_ADC_ConfigChannel+0x60>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800342a:	4a7e      	ldr	r2, [pc, #504]	@ (8003624 <HAL_ADC_ConfigChannel+0x254>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d108      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x72>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4619      	mov	r1, r3
 800343a:	4610      	mov	r0, r2
 800343c:	f7ff fb82 	bl	8002b44 <LL_ADC_REG_SetSequencerChAdd>
 8003440:	e041      	b.n	80034c6 <HAL_ADC_ConfigChannel+0xf6>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	210f      	movs	r1, #15
 8003450:	fa01 f303 	lsl.w	r3, r1, r3
 8003454:	43db      	mvns	r3, r3
 8003456:	401a      	ands	r2, r3
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <HAL_ADC_ConfigChannel+0xa0>
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	0e9b      	lsrs	r3, r3, #26
 800346a:	f003 031f 	and.w	r3, r3, #31
 800346e:	e011      	b.n	8003494 <HAL_ADC_ConfigChannel+0xc4>
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d101      	bne.n	800348c <HAL_ADC_ConfigChannel+0xbc>
  {
    return 32U;
 8003488:	2320      	movs	r3, #32
 800348a:	e003      	b.n	8003494 <HAL_ADC_ConfigChannel+0xc4>
  }
  return __builtin_clz(value);
 800348c:	697b      	ldr	r3, [r7, #20]
 800348e:	fab3 f383 	clz	r3, r3
 8003492:	b2db      	uxtb	r3, r3
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	6849      	ldr	r1, [r1, #4]
 8003498:	f001 011f 	and.w	r1, r1, #31
 800349c:	408b      	lsls	r3, r1
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	089b      	lsrs	r3, r3, #2
 80034aa:	1c5a      	adds	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	429a      	cmp	r2, r3
 80034b2:	d808      	bhi.n	80034c6 <HAL_ADC_ConfigChannel+0xf6>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6818      	ldr	r0, [r3, #0]
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	461a      	mov	r2, r3
 80034c2:	f7ff fb1e 	bl	8002b02 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6818      	ldr	r0, [r3, #0]
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	6819      	ldr	r1, [r3, #0]
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	461a      	mov	r2, r3
 80034d4:	f7ff fb5b 	bl	8002b8e <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	f280 8097 	bge.w	8003610 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034e2:	4851      	ldr	r0, [pc, #324]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80034e4:	f7ff fab8 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 80034e8:	61b8      	str	r0, [r7, #24]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a4f      	ldr	r2, [pc, #316]	@ (800362c <HAL_ADC_ConfigChannel+0x25c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d120      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x166>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d11b      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x166>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003504:	4619      	mov	r1, r3
 8003506:	4848      	ldr	r0, [pc, #288]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 8003508:	f7ff fa94 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800350c:	4b48      	ldr	r3, [pc, #288]	@ (8003630 <HAL_ADC_ConfigChannel+0x260>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	099b      	lsrs	r3, r3, #6
 8003512:	4a48      	ldr	r2, [pc, #288]	@ (8003634 <HAL_ADC_ConfigChannel+0x264>)
 8003514:	fba2 2303 	umull	r2, r3, r2, r3
 8003518:	099b      	lsrs	r3, r3, #6
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	4613      	mov	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	4413      	add	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8003526:	e002      	b.n	800352e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	3b01      	subs	r3, #1
 800352c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f9      	bne.n	8003528 <HAL_ADC_ConfigChannel+0x158>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003534:	e06c      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a3f      	ldr	r2, [pc, #252]	@ (8003638 <HAL_ADC_ConfigChannel+0x268>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d10c      	bne.n	800355a <HAL_ADC_ConfigChannel+0x18a>
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003546:	2b00      	cmp	r3, #0
 8003548:	d107      	bne.n	800355a <HAL_ADC_ConfigChannel+0x18a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800354a:	69bb      	ldr	r3, [r7, #24]
 800354c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003550:	4619      	mov	r1, r3
 8003552:	4835      	ldr	r0, [pc, #212]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 8003554:	f7ff fa6e 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 8003558:	e05a      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a37      	ldr	r2, [pc, #220]	@ (800363c <HAL_ADC_ConfigChannel+0x26c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d155      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800356a:	2b00      	cmp	r3, #0
 800356c:	d150      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003574:	4619      	mov	r1, r3
 8003576:	482c      	ldr	r0, [pc, #176]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 8003578:	f7ff fa5c 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 800357c:	e048      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003586:	d004      	beq.n	8003592 <HAL_ADC_ConfigChannel+0x1c2>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800358c:	4a25      	ldr	r2, [pc, #148]	@ (8003624 <HAL_ADC_ConfigChannel+0x254>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d107      	bne.n	80035a2 <HAL_ADC_ConfigChannel+0x1d2>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681a      	ldr	r2, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4619      	mov	r1, r3
 800359c:	4610      	mov	r0, r2
 800359e:	f7ff fae3 	bl	8002b68 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	da32      	bge.n	8003610 <HAL_ADC_ConfigChannel+0x240>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80035aa:	481f      	ldr	r0, [pc, #124]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035ac:	f7ff fa54 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 80035b0:	61b8      	str	r0, [r7, #24]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a1d      	ldr	r2, [pc, #116]	@ (800362c <HAL_ADC_ConfigChannel+0x25c>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d107      	bne.n	80035cc <HAL_ADC_ConfigChannel+0x1fc>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035bc:	69bb      	ldr	r3, [r7, #24]
 80035be:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035c2:	4619      	mov	r1, r3
 80035c4:	4818      	ldr	r0, [pc, #96]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035c6:	f7ff fa35 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 80035ca:	e021      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a19      	ldr	r2, [pc, #100]	@ (8003638 <HAL_ADC_ConfigChannel+0x268>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d107      	bne.n	80035e6 <HAL_ADC_ConfigChannel+0x216>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80035dc:	4619      	mov	r1, r3
 80035de:	4812      	ldr	r0, [pc, #72]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035e0:	f7ff fa28 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 80035e4:	e014      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a14      	ldr	r2, [pc, #80]	@ (800363c <HAL_ADC_ConfigChannel+0x26c>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d10f      	bne.n	8003610 <HAL_ADC_ConfigChannel+0x240>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 80035f6:	4619      	mov	r1, r3
 80035f8:	480b      	ldr	r0, [pc, #44]	@ (8003628 <HAL_ADC_ConfigChannel+0x258>)
 80035fa:	f7ff fa1b 	bl	8002a34 <LL_ADC_SetCommonPathInternalCh>
 80035fe:	e007      	b.n	8003610 <HAL_ADC_ConfigChannel+0x240>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003604:	f043 0220 	orr.w	r2, r3, #32
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	77fb      	strb	r3, [r7, #31]
  }

  __HAL_UNLOCK(hadc);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003618:	7ffb      	ldrb	r3, [r7, #31]
}
 800361a:	4618      	mov	r0, r3
 800361c:	3720      	adds	r7, #32
 800361e:	46bd      	mov	sp, r7
 8003620:	bd80      	pop	{r7, pc}
 8003622:	bf00      	nop
 8003624:	80000004 	.word	0x80000004
 8003628:	40012708 	.word	0x40012708
 800362c:	b0001000 	.word	0xb0001000
 8003630:	20000000 	.word	0x20000000
 8003634:	053e2d63 	.word	0x053e2d63
 8003638:	b8004000 	.word	0xb8004000
 800363c:	b4002000 	.word	0xb4002000

08003640 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fb61 	bl	8002d14 <LL_ADC_REG_IsConversionOngoing>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d033      	beq.n	80036c0 <ADC_ConversionStop+0x80>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7ff fb21 	bl	8002ca4 <LL_ADC_IsDisableOngoing>
 8003662:	4603      	mov	r3, r0
 8003664:	2b00      	cmp	r3, #0
 8003666:	d104      	bne.n	8003672 <ADC_ConversionStop+0x32>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4618      	mov	r0, r3
 800366e:	f7ff fb3e 	bl	8002cee <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003672:	f7fe fb35 	bl	8001ce0 <HAL_GetTick>
 8003676:	60f8      	str	r0, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003678:	e01b      	b.n	80036b2 <ADC_ConversionStop+0x72>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800367a:	f7fe fb31 	bl	8001ce0 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d914      	bls.n	80036b2 <ADC_ConversionStop+0x72>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f003 0304 	and.w	r3, r3, #4
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00d      	beq.n	80036b2 <ADC_ConversionStop+0x72>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800369a:	f043 0210 	orr.w	r2, r3, #16
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036a6:	f043 0201 	orr.w	r2, r3, #1
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e007      	b.n	80036c2 <ADC_ConversionStop+0x82>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0304 	and.w	r3, r3, #4
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d1dc      	bne.n	800367a <ADC_ConversionStop+0x3a>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80036c0:	2300      	movs	r3, #0
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4618      	mov	r0, r3
 80036de:	f7ff facf 	bl	8002c80 <LL_ADC_IsEnabled>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d169      	bne.n	80037bc <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	4b36      	ldr	r3, [pc, #216]	@ (80037c8 <ADC_Enable+0xfc>)
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d00d      	beq.n	8003712 <ADC_Enable+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036fa:	f043 0210 	orr.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003706:	f043 0201 	orr.w	r2, r3, #1
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e055      	b.n	80037be <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7ff fa8c 	bl	8002c34 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800371c:	482b      	ldr	r0, [pc, #172]	@ (80037cc <ADC_Enable+0x100>)
 800371e:	f7ff f99b 	bl	8002a58 <LL_ADC_GetCommonPathInternalCh>
 8003722:	4603      	mov	r3, r0
 8003724:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003728:	2b00      	cmp	r3, #0
 800372a:	d00f      	beq.n	800374c <ADC_Enable+0x80>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800372c:	4b28      	ldr	r3, [pc, #160]	@ (80037d0 <ADC_Enable+0x104>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	099b      	lsrs	r3, r3, #6
 8003732:	4a28      	ldr	r2, [pc, #160]	@ (80037d4 <ADC_Enable+0x108>)
 8003734:	fba2 2303 	umull	r2, r3, r2, r3
 8003738:	099b      	lsrs	r3, r3, #6
 800373a:	3301      	adds	r3, #1
 800373c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800373e:	e002      	b.n	8003746 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	3b01      	subs	r3, #1
 8003744:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1f9      	bne.n	8003740 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	7e5b      	ldrb	r3, [r3, #25]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d033      	beq.n	80037bc <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8003754:	f7fe fac4 	bl	8001ce0 <HAL_GetTick>
 8003758:	60f8      	str	r0, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800375a:	e028      	b.n	80037ae <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4618      	mov	r0, r3
 8003762:	f7ff fa8d 	bl	8002c80 <LL_ADC_IsEnabled>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d104      	bne.n	8003776 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fa5f 	bl	8002c34 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003776:	f7fe fab3 	bl	8001ce0 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d914      	bls.n	80037ae <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d00d      	beq.n	80037ae <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003796:	f043 0210 	orr.w	r2, r3, #16
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a2:	f043 0201 	orr.w	r2, r3, #1
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	65da      	str	r2, [r3, #92]	@ 0x5c

            return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e007      	b.n	80037be <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f003 0301 	and.w	r3, r3, #1
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d1cf      	bne.n	800375c <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80037bc:	2300      	movs	r3, #0
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	80000017 	.word	0x80000017
 80037cc:	40012708 	.word	0x40012708
 80037d0:	20000000 	.word	0x20000000
 80037d4:	053e2d63 	.word	0x053e2d63

080037d8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b084      	sub	sp, #16
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff fa5d 	bl	8002ca4 <LL_ADC_IsDisableOngoing>
 80037ea:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4618      	mov	r0, r3
 80037f2:	f7ff fa45 	bl	8002c80 <LL_ADC_IsEnabled>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d047      	beq.n	800388c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d144      	bne.n	800388c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	f003 0305 	and.w	r3, r3, #5
 800380c:	2b01      	cmp	r3, #1
 800380e:	d10c      	bne.n	800382a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4618      	mov	r0, r3
 8003816:	f7ff fa20 	bl	8002c5a <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2203      	movs	r2, #3
 8003820:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003822:	f7fe fa5d 	bl	8001ce0 <HAL_GetTick>
 8003826:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003828:	e029      	b.n	800387e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800382e:	f043 0210 	orr.w	r2, r3, #16
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	659a      	str	r2, [r3, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383a:	f043 0201 	orr.w	r2, r3, #1
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	65da      	str	r2, [r3, #92]	@ 0x5c
      return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e023      	b.n	800388e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003846:	f7fe fa4b 	bl	8001ce0 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d914      	bls.n	800387e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00d      	beq.n	800387e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f043 0210 	orr.w	r2, r3, #16
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	f043 0201 	orr.w	r2, r3, #1
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e007      	b.n	800388e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d1dc      	bne.n	8003846 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}

08003896 <LL_ADC_SetCalibrationFactor>:
{
 8003896:	b480      	push	{r7}
 8003898:	b083      	sub	sp, #12
 800389a:	af00      	add	r7, sp, #0
 800389c:	6078      	str	r0, [r7, #4]
 800389e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CALFACT,
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038a6:	f023 027f 	bic.w	r2, r3, #127	@ 0x7f
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	431a      	orrs	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
}
 80038b4:	bf00      	nop
 80038b6:	370c      	adds	r7, #12
 80038b8:	46bd      	mov	sp, r7
 80038ba:	bc80      	pop	{r7}
 80038bc:	4770      	bx	lr

080038be <LL_ADC_GetCalibrationFactor>:
{
 80038be:	b480      	push	{r7}
 80038c0:	b083      	sub	sp, #12
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CALFACT, ADC_CALFACT_CALFACT));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80038cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	370c      	adds	r7, #12
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bc80      	pop	{r7}
 80038d8:	4770      	bx	lr

080038da <LL_ADC_Enable>:
{
 80038da:	b480      	push	{r7}
 80038dc:	b083      	sub	sp, #12
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80038ea:	f023 0317 	bic.w	r3, r3, #23
 80038ee:	f043 0201 	orr.w	r2, r3, #1
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bc80      	pop	{r7}
 80038fe:	4770      	bx	lr

08003900 <LL_ADC_Disable>:
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8003910:	f023 0317 	bic.w	r3, r3, #23
 8003914:	f043 0202 	orr.w	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	bc80      	pop	{r7}
 8003924:	4770      	bx	lr

08003926 <LL_ADC_IsEnabled>:
{
 8003926:	b480      	push	{r7}
 8003928:	b083      	sub	sp, #12
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b01      	cmp	r3, #1
 8003938:	d101      	bne.n	800393e <LL_ADC_IsEnabled+0x18>
 800393a:	2301      	movs	r3, #1
 800393c:	e000      	b.n	8003940 <LL_ADC_IsEnabled+0x1a>
 800393e:	2300      	movs	r3, #0
}
 8003940:	4618      	mov	r0, r3
 8003942:	370c      	adds	r7, #12
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <LL_ADC_StartCalibration>:
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800395a:	f023 0317 	bic.w	r3, r3, #23
 800395e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	609a      	str	r2, [r3, #8]
}
 8003966:	bf00      	nop
 8003968:	370c      	adds	r7, #12
 800396a:	46bd      	mov	sp, r7
 800396c:	bc80      	pop	{r7}
 800396e:	4770      	bx	lr

08003970 <LL_ADC_IsCalibrationOnGoing>:
{
 8003970:	b480      	push	{r7}
 8003972:	b083      	sub	sp, #12
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003980:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003984:	d101      	bne.n	800398a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <LL_ADC_IsCalibrationOnGoing+0x1c>
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	bc80      	pop	{r7}
 8003994:	4770      	bx	lr

08003996 <HAL_ADCEx_Calibration_Start>:
  *         HAL_ADC_GetValue() (value on 7 bits: from DR[6;0]).
  * @param  hadc       ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b088      	sub	sp, #32
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 800399e:	2300      	movs	r3, #0
 80039a0:	60bb      	str	r3, [r7, #8]
  uint32_t backup_setting_cfgr1;
  uint32_t calibration_index;
  uint32_t calibration_factor_accumulated = 0;
 80039a2:	2300      	movs	r3, #0
 80039a4:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d101      	bne.n	80039b4 <HAL_ADCEx_Calibration_Start+0x1e>
 80039b0:	2302      	movs	r3, #2
 80039b2:	e0b9      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x192>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff0b 	bl	80037d8 <ADC_Disable>
 80039c2:	4603      	mov	r3, r0
 80039c4:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff ffab 	bl	8003926 <LL_ADC_IsEnabled>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	f040 809d 	bne.w	8003b12 <HAL_ADCEx_Calibration_Start+0x17c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039dc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80039e0:	f043 0202 	orr.w	r2, r3, #2
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Note: Specificity of this STM32 series: Calibration factor is          */
    /*       available in data register and also transferred by DMA.          */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in array variable, DMA transfer must be disabled during          */
    /*       calibration.                                                     */
    backup_setting_cfgr1 = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	f248 0303 	movw	r3, #32771	@ 0x8003
 80039f2:	4013      	ands	r3, r2
 80039f4:	613b      	str	r3, [r7, #16]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG | ADC_CFGR1_AUTOFF);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68db      	ldr	r3, [r3, #12]
 80039fc:	687a      	ldr	r2, [r7, #4]
 80039fe:	6812      	ldr	r2, [r2, #0]
 8003a00:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003a04:	f023 0303 	bic.w	r3, r3, #3
 8003a08:	60d3      	str	r3, [r2, #12]

    /* ADC calibration procedure */
    /* Note: Perform an averaging of 8 calibrations for optimized accuracy */
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	61fb      	str	r3, [r7, #28]
 8003a0e:	e02e      	b.n	8003a6e <HAL_ADCEx_Calibration_Start+0xd8>
    {
      /* Start ADC calibration */
      LL_ADC_StartCalibration(hadc->Instance);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4618      	mov	r0, r3
 8003a16:	f7ff ff98 	bl	800394a <LL_ADC_StartCalibration>

      /* Wait for calibration completion */
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a1a:	e014      	b.n	8003a46 <HAL_ADCEx_Calibration_Start+0xb0>
      {
        wait_loop_index++;
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	3301      	adds	r3, #1
 8003a20:	60bb      	str	r3, [r7, #8]
        if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	f5b3 3f2e 	cmp.w	r3, #178176	@ 0x2b800
 8003a28:	d30d      	bcc.n	8003a46 <HAL_ADCEx_Calibration_Start+0xb0>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	f023 0312 	bic.w	r3, r3, #18
 8003a32:	f043 0210 	orr.w	r2, r3, #16
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	659a      	str	r2, [r3, #88]	@ 0x58
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          __HAL_UNLOCK(hadc);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

          return HAL_ERROR;
 8003a42:	2301      	movs	r3, #1
 8003a44:	e070      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x192>
      while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff ff90 	bl	8003970 <LL_ADC_IsCalibrationOnGoing>
 8003a50:	4603      	mov	r3, r0
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1e2      	bne.n	8003a1c <HAL_ADCEx_Calibration_Start+0x86>
        }
      }

      calibration_factor_accumulated += LL_ADC_GetCalibrationFactor(hadc->Instance);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f7ff ff2f 	bl	80038be <LL_ADC_GetCalibrationFactor>
 8003a60:	4602      	mov	r2, r0
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	4413      	add	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
    for (calibration_index = 0UL; calibration_index < 8UL; calibration_index++)
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	3301      	adds	r3, #1
 8003a6c:	61fb      	str	r3, [r7, #28]
 8003a6e:	69fb      	ldr	r3, [r7, #28]
 8003a70:	2b07      	cmp	r3, #7
 8003a72:	d9cd      	bls.n	8003a10 <HAL_ADCEx_Calibration_Start+0x7a>
    }
    /* Compute average */
    calibration_factor_accumulated /= calibration_index;
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a7c:	61bb      	str	r3, [r7, #24]
    /* Apply calibration factor */
    LL_ADC_Enable(hadc->Instance);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4618      	mov	r0, r3
 8003a84:	f7ff ff29 	bl	80038da <LL_ADC_Enable>
    LL_ADC_SetCalibrationFactor(hadc->Instance, calibration_factor_accumulated);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	69b9      	ldr	r1, [r7, #24]
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f7ff ff01 	bl	8003896 <LL_ADC_SetCalibrationFactor>
    LL_ADC_Disable(hadc->Instance);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7ff ff31 	bl	8003900 <LL_ADC_Disable>

    /* Wait for ADC effectively disabled before changing configuration */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003a9e:	f7fe f91f 	bl	8001ce0 <HAL_GetTick>
 8003aa2:	60f8      	str	r0, [r7, #12]

    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003aa4:	e01c      	b.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003aa6:	f7fe f91b 	bl	8001ce0 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d915      	bls.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x14a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f7ff ff34 	bl	8003926 <LL_ADC_IsEnabled>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d00d      	beq.n	8003ae0 <HAL_ADCEx_Calibration_Start+0x14a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ac8:	f043 0210 	orr.w	r2, r3, #16
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	f043 0201 	orr.w	r2, r3, #1
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e023      	b.n	8003b28 <HAL_ADCEx_Calibration_Start+0x192>
    while (LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f7ff ff1e 	bl	8003926 <LL_ADC_IsEnabled>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1da      	bne.n	8003aa6 <HAL_ADCEx_Calibration_Start+0x110>
        }
      }
    }

    /* Restore configuration after calibration */
    SET_BIT(hadc->Instance->CFGR1, backup_setting_cfgr1);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68d9      	ldr	r1, [r3, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	60da      	str	r2, [r3, #12]

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b04:	f023 0303 	bic.w	r3, r3, #3
 8003b08:	f043 0201 	orr.w	r2, r3, #1
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003b10:	e005      	b.n	8003b1e <HAL_ADCEx_Calibration_Start+0x188>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  __HAL_UNLOCK(hadc);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return tmp_hal_status;
 8003b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	3720      	adds	r7, #32
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	bd80      	pop	{r7, pc}

08003b30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b085      	sub	sp, #20
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f003 0307 	and.w	r3, r3, #7
 8003b3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b40:	4b0c      	ldr	r3, [pc, #48]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b42:	68db      	ldr	r3, [r3, #12]
 8003b44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b46:	68ba      	ldr	r2, [r7, #8]
 8003b48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b62:	4a04      	ldr	r2, [pc, #16]	@ (8003b74 <__NVIC_SetPriorityGrouping+0x44>)
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	60d3      	str	r3, [r2, #12]
}
 8003b68:	bf00      	nop
 8003b6a:	3714      	adds	r7, #20
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b7c:	4b04      	ldr	r3, [pc, #16]	@ (8003b90 <__NVIC_GetPriorityGrouping+0x18>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	0a1b      	lsrs	r3, r3, #8
 8003b82:	f003 0307 	and.w	r3, r3, #7
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bc80      	pop	{r7}
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	e000ed00 	.word	0xe000ed00

08003b94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b94:	b480      	push	{r7}
 8003b96:	b083      	sub	sp, #12
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	db0b      	blt.n	8003bbe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ba6:	79fb      	ldrb	r3, [r7, #7]
 8003ba8:	f003 021f 	and.w	r2, r3, #31
 8003bac:	4906      	ldr	r1, [pc, #24]	@ (8003bc8 <__NVIC_EnableIRQ+0x34>)
 8003bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	2001      	movs	r0, #1
 8003bb6:	fa00 f202 	lsl.w	r2, r0, r2
 8003bba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bbe:	bf00      	nop
 8003bc0:	370c      	adds	r7, #12
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bc80      	pop	{r7}
 8003bc6:	4770      	bx	lr
 8003bc8:	e000e100 	.word	0xe000e100

08003bcc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	db12      	blt.n	8003c04 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bde:	79fb      	ldrb	r3, [r7, #7]
 8003be0:	f003 021f 	and.w	r2, r3, #31
 8003be4:	490a      	ldr	r1, [pc, #40]	@ (8003c10 <__NVIC_DisableIRQ+0x44>)
 8003be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	2001      	movs	r0, #1
 8003bee:	fa00 f202 	lsl.w	r2, r0, r2
 8003bf2:	3320      	adds	r3, #32
 8003bf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8003bf8:	f3bf 8f4f 	dsb	sy
}
 8003bfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bfe:	f3bf 8f6f 	isb	sy
}
 8003c02:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	bc80      	pop	{r7}
 8003c0c:	4770      	bx	lr
 8003c0e:	bf00      	nop
 8003c10:	e000e100 	.word	0xe000e100

08003c14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	6039      	str	r1, [r7, #0]
 8003c1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	db0a      	blt.n	8003c3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	b2da      	uxtb	r2, r3
 8003c2c:	490c      	ldr	r1, [pc, #48]	@ (8003c60 <__NVIC_SetPriority+0x4c>)
 8003c2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c32:	0112      	lsls	r2, r2, #4
 8003c34:	b2d2      	uxtb	r2, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c3c:	e00a      	b.n	8003c54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	4908      	ldr	r1, [pc, #32]	@ (8003c64 <__NVIC_SetPriority+0x50>)
 8003c44:	79fb      	ldrb	r3, [r7, #7]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	3b04      	subs	r3, #4
 8003c4c:	0112      	lsls	r2, r2, #4
 8003c4e:	b2d2      	uxtb	r2, r2
 8003c50:	440b      	add	r3, r1
 8003c52:	761a      	strb	r2, [r3, #24]
}
 8003c54:	bf00      	nop
 8003c56:	370c      	adds	r7, #12
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	bc80      	pop	{r7}
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	e000e100 	.word	0xe000e100
 8003c64:	e000ed00 	.word	0xe000ed00

08003c68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b089      	sub	sp, #36	@ 0x24
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	60f8      	str	r0, [r7, #12]
 8003c70:	60b9      	str	r1, [r7, #8]
 8003c72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f003 0307 	and.w	r3, r3, #7
 8003c7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	f1c3 0307 	rsb	r3, r3, #7
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	bf28      	it	cs
 8003c86:	2304      	movcs	r3, #4
 8003c88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3304      	adds	r3, #4
 8003c8e:	2b06      	cmp	r3, #6
 8003c90:	d902      	bls.n	8003c98 <NVIC_EncodePriority+0x30>
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	3b03      	subs	r3, #3
 8003c96:	e000      	b.n	8003c9a <NVIC_EncodePriority+0x32>
 8003c98:	2300      	movs	r3, #0
 8003c9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c9c:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	43da      	mvns	r2, r3
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	401a      	ands	r2, r3
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003cb0:	f04f 31ff 	mov.w	r1, #4294967295
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cba:	43d9      	mvns	r1, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cc0:	4313      	orrs	r3, r2
         );
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3724      	adds	r7, #36	@ 0x24
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff ff2b 	bl	8003b30 <__NVIC_SetPriorityGrouping>
}
 8003cda:	bf00      	nop
 8003cdc:	3708      	adds	r7, #8
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bd80      	pop	{r7, pc}

08003ce2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ce2:	b580      	push	{r7, lr}
 8003ce4:	b086      	sub	sp, #24
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	4603      	mov	r3, r0
 8003cea:	60b9      	str	r1, [r7, #8]
 8003cec:	607a      	str	r2, [r7, #4]
 8003cee:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003cf0:	f7ff ff42 	bl	8003b78 <__NVIC_GetPriorityGrouping>
 8003cf4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	68b9      	ldr	r1, [r7, #8]
 8003cfa:	6978      	ldr	r0, [r7, #20]
 8003cfc:	f7ff ffb4 	bl	8003c68 <NVIC_EncodePriority>
 8003d00:	4602      	mov	r2, r0
 8003d02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d06:	4611      	mov	r1, r2
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff83 	bl	8003c14 <__NVIC_SetPriority>
}
 8003d0e:	bf00      	nop
 8003d10:	3718      	adds	r7, #24
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d24:	4618      	mov	r0, r3
 8003d26:	f7ff ff35 	bl	8003b94 <__NVIC_EnableIRQ>
}
 8003d2a:	bf00      	nop
 8003d2c:	3708      	adds	r7, #8
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}

08003d32 <HAL_NVIC_DisableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d32:	b580      	push	{r7, lr}
 8003d34:	b082      	sub	sp, #8
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	4603      	mov	r3, r0
 8003d3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7ff ff43 	bl	8003bcc <__NVIC_DisableIRQ>
}
 8003d46:	bf00      	nop
 8003d48:	3708      	adds	r7, #8
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	bd80      	pop	{r7, pc}
	...

08003d50 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b082      	sub	sp, #8
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d101      	bne.n	8003d62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e08e      	b.n	8003e80 <HAL_DMA_Init+0x130>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	461a      	mov	r2, r3
 8003d68:	4b47      	ldr	r3, [pc, #284]	@ (8003e88 <HAL_DMA_Init+0x138>)
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d80f      	bhi.n	8003d8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	461a      	mov	r2, r3
 8003d74:	4b45      	ldr	r3, [pc, #276]	@ (8003e8c <HAL_DMA_Init+0x13c>)
 8003d76:	4413      	add	r3, r2
 8003d78:	4a45      	ldr	r2, [pc, #276]	@ (8003e90 <HAL_DMA_Init+0x140>)
 8003d7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	009a      	lsls	r2, r3, #2
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4a42      	ldr	r2, [pc, #264]	@ (8003e94 <HAL_DMA_Init+0x144>)
 8003d8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003d8c:	e00e      	b.n	8003dac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	461a      	mov	r2, r3
 8003d94:	4b40      	ldr	r3, [pc, #256]	@ (8003e98 <HAL_DMA_Init+0x148>)
 8003d96:	4413      	add	r3, r2
 8003d98:	4a3d      	ldr	r2, [pc, #244]	@ (8003e90 <HAL_DMA_Init+0x140>)
 8003d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d9e:	091b      	lsrs	r3, r3, #4
 8003da0:	009a      	lsls	r2, r3, #2
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a3c      	ldr	r2, [pc, #240]	@ (8003e9c <HAL_DMA_Init+0x14c>)
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	687a      	ldr	r2, [r7, #4]
 8003dbc:	6812      	ldr	r2, [r2, #0]
 8003dbe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003dc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dc6:	6013      	str	r3, [r2, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	6819      	ldr	r1, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	68db      	ldr	r3, [r3, #12]
 8003dd6:	431a      	orrs	r2, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	699b      	ldr	r3, [r3, #24]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	69db      	ldr	r3, [r3, #28]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a1b      	ldr	r3, [r3, #32]
 8003df4:	431a      	orrs	r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fb24 	bl	800444c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e0c:	d102      	bne.n	8003e14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e1c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003e20:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003e2a:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <HAL_DMA_Init+0x106>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	2b04      	cmp	r3, #4
 8003e3a:	d80c      	bhi.n	8003e56 <HAL_DMA_Init+0x106>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fb4d 	bl	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e46:	2200      	movs	r2, #0
 8003e48:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003e52:	605a      	str	r2, [r3, #4]
 8003e54:	e008      	b.n	8003e68 <HAL_DMA_Init+0x118>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003e7e:	2300      	movs	r3, #0
}
 8003e80:	4618      	mov	r0, r3
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}
 8003e88:	40020407 	.word	0x40020407
 8003e8c:	bffdfff8 	.word	0xbffdfff8
 8003e90:	cccccccd 	.word	0xcccccccd
 8003e94:	40020000 	.word	0x40020000
 8003e98:	bffdfbf8 	.word	0xbffdfbf8
 8003e9c:	40020400 	.word	0x40020400

08003ea0 <HAL_DMA_DeInit>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b082      	sub	sp, #8
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d101      	bne.n	8003eb2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e07b      	b.n	8003faa <HAL_DMA_DeInit+0x10a>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f022 0201 	bic.w	r2, r2, #1
 8003ec0:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	4b3a      	ldr	r3, [pc, #232]	@ (8003fb4 <HAL_DMA_DeInit+0x114>)
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d80f      	bhi.n	8003eee <HAL_DMA_DeInit+0x4e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	461a      	mov	r2, r3
 8003ed4:	4b38      	ldr	r3, [pc, #224]	@ (8003fb8 <HAL_DMA_DeInit+0x118>)
 8003ed6:	4413      	add	r3, r2
 8003ed8:	4a38      	ldr	r2, [pc, #224]	@ (8003fbc <HAL_DMA_DeInit+0x11c>)
 8003eda:	fba2 2303 	umull	r2, r3, r2, r3
 8003ede:	091b      	lsrs	r3, r3, #4
 8003ee0:	009a      	lsls	r2, r3, #2
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a35      	ldr	r2, [pc, #212]	@ (8003fc0 <HAL_DMA_DeInit+0x120>)
 8003eea:	641a      	str	r2, [r3, #64]	@ 0x40
 8003eec:	e00e      	b.n	8003f0c <HAL_DMA_DeInit+0x6c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	4b33      	ldr	r3, [pc, #204]	@ (8003fc4 <HAL_DMA_DeInit+0x124>)
 8003ef6:	4413      	add	r3, r2
 8003ef8:	4a30      	ldr	r2, [pc, #192]	@ (8003fbc <HAL_DMA_DeInit+0x11c>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	091b      	lsrs	r3, r3, #4
 8003f00:	009a      	lsls	r2, r3, #2
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <HAL_DMA_DeInit+0x128>)
 8003f0a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Reset DMA Channel control register */
  hdma->Instance->CCR = 0U;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	2200      	movs	r2, #0
 8003f12:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f18:	f003 021c 	and.w	r2, r3, #28
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f20:	2101      	movs	r1, #1
 8003f22:	fa01 f202 	lsl.w	r2, r1, r2
 8003f26:	605a      	str	r2, [r3, #4]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */

  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 fa8f 	bl	800444c <DMA_CalcDMAMUXChannelBaseAndMask>

  /* Reset the DMAMUX channel that corresponds to the DMA channel */
  hdma->DMAmuxChannel->CCR = 0U;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003f32:	2200      	movs	r2, #0
 8003f34:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003f3e:	605a      	str	r2, [r3, #4]

  /* Reset Request generator parameters if any */
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d00f      	beq.n	8003f68 <HAL_DMA_DeInit+0xc8>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	2b04      	cmp	r3, #4
 8003f4e:	d80b      	bhi.n	8003f68 <HAL_DMA_DeInit+0xc8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f000 fac3 	bl	80044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003f66:	605a      	str	r2, [r3, #4]
  }

  hdma->DMAmuxRequestGen = 0U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2200      	movs	r2, #0
 8003f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hdma->DMAmuxRequestGenStatus = 0U;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	659a      	str	r2, [r3, #88]	@ 0x58
  hdma->DMAmuxRequestGenStatusMask = 0U;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8003fa8:	2300      	movs	r3, #0
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3708      	adds	r7, #8
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40020407 	.word	0x40020407
 8003fb8:	bffdfff8 	.word	0xbffdfff8
 8003fbc:	cccccccd 	.word	0xcccccccd
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	bffdfbf8 	.word	0xbffdfbf8
 8003fc8:	40020400 	.word	0x40020400

08003fcc <HAL_DMA_Start_IT>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b086      	sub	sp, #24
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_DMA_Start_IT+0x20>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e069      	b.n	80040c0 <HAL_DMA_Start_IT+0xf4>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (hdma->State == HAL_DMA_STATE_READY)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	d155      	bne.n	80040ac <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681a      	ldr	r2, [r3, #0]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f022 0201 	bic.w	r2, r2, #1
 800401c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	687a      	ldr	r2, [r7, #4]
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f9d3 	bl	80043d0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402e:	2b00      	cmp	r3, #0
 8004030:	d008      	beq.n	8004044 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 020e 	orr.w	r2, r2, #14
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e00f      	b.n	8004064 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 0204 	bic.w	r2, r2, #4
 8004052:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 020a 	orr.w	r2, r2, #10
 8004062:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800406e:	2b00      	cmp	r3, #0
 8004070:	d007      	beq.n	8004082 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800407c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004080:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004086:	2b00      	cmp	r3, #0
 8004088:	d007      	beq.n	800409a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004098:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f042 0201 	orr.w	r2, r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e008      	b.n	80040be <HAL_DMA_Start_IT+0xf2>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2280      	movs	r2, #128	@ 0x80
 80040b0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Return error status */
    status = HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80040be:	7dfb      	ldrb	r3, [r7, #23]
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	3718      	adds	r7, #24
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b083      	sub	sp, #12
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e04f      	b.n	800417a <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b02      	cmp	r3, #2
 80040e4:	d008      	beq.n	80040f8 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2204      	movs	r2, #4
 80040ea:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2200      	movs	r2, #0
 80040f0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80040f4:	2301      	movs	r3, #1
 80040f6:	e040      	b.n	800417a <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f022 020e 	bic.w	r2, r2, #14
 8004106:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004112:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004116:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f022 0201 	bic.w	r2, r2, #1
 8004126:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800412c:	f003 021c 	and.w	r2, r3, #28
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004134:	2101      	movs	r1, #1
 8004136:	fa01 f202 	lsl.w	r2, r1, r2
 800413a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004140:	687a      	ldr	r2, [r7, #4]
 8004142:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004144:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414a:	2b00      	cmp	r3, #0
 800414c:	d00c      	beq.n	8004168 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004158:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800415c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004166:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return HAL_OK;
 8004178:	2300      	movs	r3, #0
}
 800417a:	4618      	mov	r0, r3
 800417c:	370c      	adds	r7, #12
 800417e:	46bd      	mov	sp, r7
 8004180:	bc80      	pop	{r7}
 8004182:	4770      	bx	lr

08004184 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004184:	b580      	push	{r7, lr}
 8004186:	b084      	sub	sp, #16
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800418c:	2300      	movs	r3, #0
 800418e:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004196:	b2db      	uxtb	r3, r3
 8004198:	2b02      	cmp	r3, #2
 800419a:	d005      	beq.n	80041a8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2204      	movs	r2, #4
 80041a0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73fb      	strb	r3, [r7, #15]
 80041a6:	e047      	b.n	8004238 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 020e 	bic.w	r2, r2, #14
 80041b6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681a      	ldr	r2, [r3, #0]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0201 	bic.w	r2, r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80041d6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80041dc:	f003 021c 	and.w	r2, r3, #28
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ea:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80041f0:	687a      	ldr	r2, [r7, #4]
 80041f2:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80041f4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00c      	beq.n	8004218 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800420c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004216:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2201      	movs	r2, #1
 800421c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800422c:	2b00      	cmp	r3, #0
 800422e:	d003      	beq.n	8004238 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004234:	6878      	ldr	r0, [r7, #4]
 8004236:	4798      	blx	r3
    }
  }
  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b084      	sub	sp, #16
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004260:	f003 031c 	and.w	r3, r3, #28
 8004264:	2204      	movs	r2, #4
 8004266:	409a      	lsls	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d027      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7c>
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	f003 0304 	and.w	r3, r3, #4
 8004276:	2b00      	cmp	r3, #0
 8004278:	d022      	beq.n	80042c0 <HAL_DMA_IRQHandler+0x7c>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0320 	and.w	r3, r3, #32
 8004284:	2b00      	cmp	r3, #0
 8004286:	d107      	bne.n	8004298 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f022 0204 	bic.w	r2, r2, #4
 8004296:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800429c:	f003 021c 	and.w	r2, r3, #28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a4:	2104      	movs	r1, #4
 80042a6:	fa01 f202 	lsl.w	r2, r1, r2
 80042aa:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	f000 8081 	beq.w	80043b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ba:	6878      	ldr	r0, [r7, #4]
 80042bc:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80042be:	e07b      	b.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c4:	f003 031c 	and.w	r3, r3, #28
 80042c8:	2202      	movs	r2, #2
 80042ca:	409a      	lsls	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	4013      	ands	r3, r2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d03d      	beq.n	8004350 <HAL_DMA_IRQHandler+0x10c>
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d038      	beq.n	8004350 <HAL_DMA_IRQHandler+0x10c>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 0320 	and.w	r3, r3, #32
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d10b      	bne.n	8004304 <HAL_DMA_IRQHandler+0xc0>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f022 020a 	bic.w	r2, r2, #10
 80042fa:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2201      	movs	r2, #1
 8004300:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	461a      	mov	r2, r3
 800430a:	4b2e      	ldr	r3, [pc, #184]	@ (80043c4 <HAL_DMA_IRQHandler+0x180>)
 800430c:	429a      	cmp	r2, r3
 800430e:	d909      	bls.n	8004324 <HAL_DMA_IRQHandler+0xe0>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004314:	f003 031c 	and.w	r3, r3, #28
 8004318:	4a2b      	ldr	r2, [pc, #172]	@ (80043c8 <HAL_DMA_IRQHandler+0x184>)
 800431a:	2102      	movs	r1, #2
 800431c:	fa01 f303 	lsl.w	r3, r1, r3
 8004320:	6053      	str	r3, [r2, #4]
 8004322:	e008      	b.n	8004336 <HAL_DMA_IRQHandler+0xf2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004328:	f003 031c 	and.w	r3, r3, #28
 800432c:	4a27      	ldr	r2, [pc, #156]	@ (80043cc <HAL_DMA_IRQHandler+0x188>)
 800432e:	2102      	movs	r1, #2
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	6053      	str	r3, [r2, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

      if (hdma->XferCpltCallback != NULL)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004342:	2b00      	cmp	r3, #0
 8004344:	d038      	beq.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800434e:	e033      	b.n	80043b8 <HAL_DMA_IRQHandler+0x174>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004354:	f003 031c 	and.w	r3, r3, #28
 8004358:	2208      	movs	r2, #8
 800435a:	409a      	lsls	r2, r3
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	4013      	ands	r3, r2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d02a      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	f003 0308 	and.w	r3, r3, #8
 800436a:	2b00      	cmp	r3, #0
 800436c:	d025      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f022 020e 	bic.w	r2, r2, #14
 800437c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004382:	f003 021c 	and.w	r2, r3, #28
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	2101      	movs	r1, #1
 800438c:	fa01 f202 	lsl.w	r2, r1, r2
 8004390:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2201      	movs	r2, #1
 8004396:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d004      	beq.n	80043ba <HAL_DMA_IRQHandler+0x176>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80043b8:	bf00      	nop
 80043ba:	bf00      	nop
}
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40020080 	.word	0x40020080
 80043c8:	40020400 	.word	0x40020400
 80043cc:	40020000 	.word	0x40020000

080043d0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b085      	sub	sp, #20
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043e6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d004      	beq.n	80043fa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043f4:	68fa      	ldr	r2, [r7, #12]
 80043f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043f8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f003 021c 	and.w	r2, r3, #28
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004406:	2101      	movs	r1, #1
 8004408:	fa01 f202 	lsl.w	r2, r1, r2
 800440c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b10      	cmp	r3, #16
 800441c:	d108      	bne.n	8004430 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800442e:	e007      	b.n	8004440 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68ba      	ldr	r2, [r7, #8]
 8004436:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	687a      	ldr	r2, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	bc80      	pop	{r7}
 8004448:	4770      	bx	lr
	...

0800444c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	461a      	mov	r2, r3
 800445a:	4b1c      	ldr	r3, [pc, #112]	@ (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x80>)
 800445c:	429a      	cmp	r2, r3
 800445e:	d813      	bhi.n	8004488 <DMA_CalcDMAMUXChannelBaseAndMask+0x3c>
  {
    /* DMA1 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004464:	089b      	lsrs	r3, r3, #2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800446c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3b08      	subs	r3, #8
 800447c:	4a14      	ldr	r2, [pc, #80]	@ (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 800447e:	fba2 2303 	umull	r2, r3, r2, r3
 8004482:	091b      	lsrs	r3, r3, #4
 8004484:	60fb      	str	r3, [r7, #12]
 8004486:	e011      	b.n	80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x60>
  }
  else
  {
    /* DMA2 */
    /* Associate a DMA Channel to a DMAMUX channel */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	009a      	lsls	r2, r3, #2
 8004490:	4b10      	ldr	r3, [pc, #64]	@ (80044d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x88>)
 8004492:	4413      	add	r3, r2
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	6493      	str	r3, [r2, #72]	@ 0x48

    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	b2db      	uxtb	r3, r3
 800449e:	3b08      	subs	r3, #8
 80044a0:	4a0b      	ldr	r2, [pc, #44]	@ (80044d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x84>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	091b      	lsrs	r3, r3, #4
 80044a8:	3307      	adds	r3, #7
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x8c>)
 80044b0:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 031f 	and.w	r3, r3, #31
 80044b8:	2201      	movs	r2, #1
 80044ba:	409a      	lsls	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	651a      	str	r2, [r3, #80]	@ 0x50
}
 80044c0:	bf00      	nop
 80044c2:	3714      	adds	r7, #20
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bc80      	pop	{r7}
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	40020407 	.word	0x40020407
 80044d0:	cccccccd 	.word	0xcccccccd
 80044d4:	4002081c 	.word	0x4002081c
 80044d8:	40020880 	.word	0x40020880

080044dc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044dc:	b480      	push	{r7}
 80044de:	b085      	sub	sp, #20
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80044ec:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4b0a      	ldr	r3, [pc, #40]	@ (800451c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	461a      	mov	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	4a08      	ldr	r2, [pc, #32]	@ (8004520 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004500:	659a      	str	r2, [r3, #88]	@ 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	3b01      	subs	r3, #1
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2201      	movs	r2, #1
 800450c:	409a      	lsls	r2, r3
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004512:	bf00      	nop
 8004514:	3714      	adds	r7, #20
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr
 800451c:	1000823f 	.word	0x1000823f
 8004520:	40020940 	.word	0x40020940

08004524 <HAL_FLASH_Program>:
  *                are stored the data for the row fast program.
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b086      	sub	sp, #24
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	e9c7 2300 	strd	r2, r3, [r7]
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_ADDR_ALIGNED_64BITS(Address));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004532:	4b1c      	ldr	r3, [pc, #112]	@ (80045a4 <HAL_FLASH_Program+0x80>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	2b01      	cmp	r3, #1
 8004538:	d101      	bne.n	800453e <HAL_FLASH_Program+0x1a>
 800453a:	2302      	movs	r3, #2
 800453c:	e02d      	b.n	800459a <HAL_FLASH_Program+0x76>
 800453e:	4b19      	ldr	r3, [pc, #100]	@ (80045a4 <HAL_FLASH_Program+0x80>)
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004544:	4b17      	ldr	r3, [pc, #92]	@ (80045a4 <HAL_FLASH_Program+0x80>)
 8004546:	2200      	movs	r2, #0
 8004548:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800454a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800454e:	f000 f869 	bl	8004624 <FLASH_WaitForLastOperation>
 8004552:	4603      	mov	r3, r0
 8004554:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8004556:	7dfb      	ldrb	r3, [r7, #23]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d11a      	bne.n	8004592 <HAL_FLASH_Program+0x6e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d105      	bne.n	800456e <HAL_FLASH_Program+0x4a>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8004562:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004566:	68b8      	ldr	r0, [r7, #8]
 8004568:	f000 f8be 	bl	80046e8 <FLASH_Program_DoubleWord>
 800456c:	e004      	b.n	8004578 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 double-word (64-bit) row at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	4619      	mov	r1, r3
 8004572:	68b8      	ldr	r0, [r7, #8]
 8004574:	f000 f8de 	bl	8004734 <FLASH_Program_Fast>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004578:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800457c:	f000 f852 	bl	8004624 <FLASH_WaitForLastOperation>
 8004580:	4603      	mov	r3, r0
 8004582:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
#ifdef CORE_CM0PLUS
    CLEAR_BIT(FLASH->C2CR, TypeProgram);
#else
    CLEAR_BIT(FLASH->CR, TypeProgram);
 8004584:	4b08      	ldr	r3, [pc, #32]	@ (80045a8 <HAL_FLASH_Program+0x84>)
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	43db      	mvns	r3, r3
 800458c:	4906      	ldr	r1, [pc, #24]	@ (80045a8 <HAL_FLASH_Program+0x84>)
 800458e:	4013      	ands	r3, r2
 8004590:	614b      	str	r3, [r1, #20]
#endif
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004592:	4b04      	ldr	r3, [pc, #16]	@ (80045a4 <HAL_FLASH_Program+0x80>)
 8004594:	2200      	movs	r2, #0
 8004596:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000320 	.word	0x20000320
 80045a8:	58004000 	.word	0x58004000

080045ac <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045b2:	2300      	movs	r3, #0
 80045b4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045b6:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	da0b      	bge.n	80045d6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045be:	4b09      	ldr	r3, [pc, #36]	@ (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045c0:	4a09      	ldr	r2, [pc, #36]	@ (80045e8 <HAL_FLASH_Unlock+0x3c>)
 80045c2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045c6:	4a09      	ldr	r2, [pc, #36]	@ (80045ec <HAL_FLASH_Unlock+0x40>)
 80045c8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80045ca:	4b06      	ldr	r3, [pc, #24]	@ (80045e4 <HAL_FLASH_Unlock+0x38>)
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	da01      	bge.n	80045d6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80045d6:	79fb      	ldrb	r3, [r7, #7]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	bc80      	pop	{r7}
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	58004000 	.word	0x58004000
 80045e8:	45670123 	.word	0x45670123
 80045ec:	cdef89ab 	.word	0xcdef89ab

080045f0 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045f6:	2300      	movs	r3, #0
 80045f8:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  /* @Note  The lock and unlock procedure is done only using CR registers even from CPU2 */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80045fa:	4b09      	ldr	r3, [pc, #36]	@ (8004620 <HAL_FLASH_Lock+0x30>)
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	4a08      	ldr	r2, [pc, #32]	@ (8004620 <HAL_FLASH_Lock+0x30>)
 8004600:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004604:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) == 0U)
 8004606:	4b06      	ldr	r3, [pc, #24]	@ (8004620 <HAL_FLASH_Lock+0x30>)
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	2b00      	cmp	r3, #0
 800460c:	db01      	blt.n	8004612 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8004612:	79fb      	ldrb	r3, [r7, #7]
}
 8004614:	4618      	mov	r0, r3
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	bc80      	pop	{r7}
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	58004000 	.word	0x58004000

08004624 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout Maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800462c:	f7fd fb58 	bl	8001ce0 <HAL_GetTick>
 8004630:	60f8      	str	r0, [r7, #12]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004632:	e009      	b.n	8004648 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 8004634:	f7fd fb54 	bl	8001ce0 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	429a      	cmp	r2, r3
 8004642:	d801      	bhi.n	8004648 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8004644:	2303      	movs	r3, #3
 8004646:	e046      	b.n	80046d6 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8004648:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004650:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004654:	d0ee      	beq.n	8004634 <FLASH_WaitForLastOperation+0x10>
  /* check flash errors. Only ECC correction can be checked here as ECCD
      generates NMI */
#ifdef CORE_CM0PLUS
  error = FLASH->C2SR;
#else
  error = FLASH->SR;
 8004656:	4b22      	ldr	r3, [pc, #136]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	60bb      	str	r3, [r7, #8]
#endif

  /* Check FLASH End of Operation flag */
  if ((error & FLASH_FLAG_EOP) != 0U)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d002      	beq.n	800466c <FLASH_WaitForLastOperation+0x48>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004666:	4b1e      	ldr	r3, [pc, #120]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 8004668:	2201      	movs	r2, #1
 800466a:	611a      	str	r2, [r3, #16]
  }

  /* Now update error variable to only error value */
  error &= FLASH_FLAG_SR_ERRORS;
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8004672:	4013      	ands	r3, r2
 8004674:	60bb      	str	r3, [r7, #8]

  /* clear error flags */
  __HAL_FLASH_CLEAR_FLAG(error);
 8004676:	68bb      	ldr	r3, [r7, #8]
 8004678:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800467c:	d307      	bcc.n	800468e <FLASH_WaitForLastOperation+0x6a>
 800467e:	4b18      	ldr	r3, [pc, #96]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 8004680:	699a      	ldr	r2, [r3, #24]
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8004688:	4915      	ldr	r1, [pc, #84]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 800468a:	4313      	orrs	r3, r2
 800468c:	618b      	str	r3, [r1, #24]
 800468e:	68bb      	ldr	r3, [r7, #8]
 8004690:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d004      	beq.n	80046a2 <FLASH_WaitForLastOperation+0x7e>
 8004698:	4a11      	ldr	r2, [pc, #68]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 800469a:	68bb      	ldr	r3, [r7, #8]
 800469c:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80046a0:	6113      	str	r3, [r2, #16]

  if (error != 0U)
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d00e      	beq.n	80046c6 <FLASH_WaitForLastOperation+0xa2>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80046a8:	4a0e      	ldr	r2, [pc, #56]	@ (80046e4 <FLASH_WaitForLastOperation+0xc0>)
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	6053      	str	r3, [r2, #4]

    return HAL_ERROR;
 80046ae:	2301      	movs	r3, #1
 80046b0:	e011      	b.n	80046d6 <FLASH_WaitForLastOperation+0xb2>
  }

  /* Wait for control register to be written */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
  {
    if ((HAL_GetTick() - tickstart) >= Timeout)
 80046b2:	f7fd fb15 	bl	8001ce0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	687a      	ldr	r2, [r7, #4]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d801      	bhi.n	80046c6 <FLASH_WaitForLastOperation+0xa2>
    {
      return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e007      	b.n	80046d6 <FLASH_WaitForLastOperation+0xb2>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_CFGBSY))
 80046c6:	4b06      	ldr	r3, [pc, #24]	@ (80046e0 <FLASH_WaitForLastOperation+0xbc>)
 80046c8:	691b      	ldr	r3, [r3, #16]
 80046ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80046ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80046d2:	d0ee      	beq.n	80046b2 <FLASH_WaitForLastOperation+0x8e>
    }
  }

  return HAL_OK;
 80046d4:	2300      	movs	r3, #0
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	3710      	adds	r7, #16
 80046da:	46bd      	mov	sp, r7
 80046dc:	bd80      	pop	{r7, pc}
 80046de:	bf00      	nop
 80046e0:	58004000 	.word	0x58004000
 80046e4:	20000320 	.word	0x20000320

080046e8 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b085      	sub	sp, #20
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	60f8      	str	r0, [r7, #12]
 80046f0:	e9c7 2300 	strd	r2, r3, [r7]
#ifdef CORE_CM0PLUS
  /* Set PG bit */
  SET_BIT(FLASH->C2CR, FLASH_CR_PG);
#else
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80046f4:	4b0e      	ldr	r3, [pc, #56]	@ (8004730 <FLASH_Program_DoubleWord+0x48>)
 80046f6:	695b      	ldr	r3, [r3, #20]
 80046f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004730 <FLASH_Program_DoubleWord+0x48>)
 80046fa:	f043 0301 	orr.w	r3, r3, #1
 80046fe:	6153      	str	r3, [r2, #20]
#endif

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004706:	f3bf 8f6f 	isb	sy
}
 800470a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 800470c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004710:	f04f 0200 	mov.w	r2, #0
 8004714:	f04f 0300 	mov.w	r3, #0
 8004718:	000a      	movs	r2, r1
 800471a:	2300      	movs	r3, #0
 800471c:	68f9      	ldr	r1, [r7, #12]
 800471e:	3104      	adds	r1, #4
 8004720:	4613      	mov	r3, r2
 8004722:	600b      	str	r3, [r1, #0]
}
 8004724:	bf00      	nop
 8004726:	3714      	adds	r7, #20
 8004728:	46bd      	mov	sp, r7
 800472a:	bc80      	pop	{r7}
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	58004000 	.word	0x58004000

08004734 <FLASH_Program_Fast>:
#ifdef CORE_CM0PLUS
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#else
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
#endif
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	@ 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
 800473c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800473e:	2340      	movs	r3, #64	@ 0x40
 8004740:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *dest_addr = (__IO uint32_t *)Address;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	61bb      	str	r3, [r7, #24]
  __IO uint32_t *src_addr = (__IO uint32_t *)DataAddress;
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	617b      	str	r3, [r7, #20]

  /* Set FSTPG bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, FLASH_CR_FSTPG);
#else
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800474a:	4b18      	ldr	r3, [pc, #96]	@ (80047ac <FLASH_Program_Fast+0x78>)
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4a17      	ldr	r2, [pc, #92]	@ (80047ac <FLASH_Program_Fast+0x78>)
 8004750:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004754:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004756:	f3ef 8310 	mrs	r3, PRIMASK
 800475a:	60fb      	str	r3, [r7, #12]
  return(result);
 800475c:	68fb      	ldr	r3, [r7, #12]
#endif

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
 800475e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8004760:	b672      	cpsid	i
}
 8004762:	bf00      	nop
  __disable_irq();

  /* Program the double word of the row */
  do
  {
    *dest_addr = *src_addr;
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	3304      	adds	r3, #4
 8004770:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	3304      	adds	r3, #4
 8004776:	617b      	str	r3, [r7, #20]
    row_index--;
 8004778:	7ffb      	ldrb	r3, [r7, #31]
 800477a:	3b01      	subs	r3, #1
 800477c:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800477e:	7ffb      	ldrb	r3, [r7, #31]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1ef      	bne.n	8004764 <FLASH_Program_Fast+0x30>

  /* wait for BSY in order to be sure that flash operation is ended before
     allowing prefetch in flash. Timeout does not return status, as it will
     be anyway done later */
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != 0U)
 8004784:	bf00      	nop
 8004786:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <FLASH_Program_Fast+0x78>)
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800478e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004792:	d0f8      	beq.n	8004786 <FLASH_Program_Fast+0x52>
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f383 8810 	msr	PRIMASK, r3
}
 800479e:	bf00      	nop
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80047a0:	bf00      	nop
 80047a2:	3724      	adds	r7, #36	@ 0x24
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bc80      	pop	{r7}
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	58004000 	.word	0x58004000

080047b0 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80047ba:	4b28      	ldr	r3, [pc, #160]	@ (800485c <HAL_FLASHEx_Erase+0xac>)
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d101      	bne.n	80047c6 <HAL_FLASHEx_Erase+0x16>
 80047c2:	2302      	movs	r3, #2
 80047c4:	e046      	b.n	8004854 <HAL_FLASHEx_Erase+0xa4>
 80047c6:	4b25      	ldr	r3, [pc, #148]	@ (800485c <HAL_FLASHEx_Erase+0xac>)
 80047c8:	2201      	movs	r2, #1
 80047ca:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80047cc:	4b23      	ldr	r3, [pc, #140]	@ (800485c <HAL_FLASHEx_Erase+0xac>)
 80047ce:	2200      	movs	r2, #0
 80047d0:	605a      	str	r2, [r3, #4]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047d6:	f7ff ff25 	bl	8004624 <FLASH_WaitForLastOperation>
 80047da:	4603      	mov	r3, r0
 80047dc:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80047de:	7bfb      	ldrb	r3, [r7, #15]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d133      	bne.n	800484c <HAL_FLASHEx_Erase+0x9c>
  {
    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b04      	cmp	r3, #4
 80047ea:	d108      	bne.n	80047fe <HAL_FLASHEx_Erase+0x4e>
    {
      /* Mass erase to be done */
      FLASH_MassErase();
 80047ec:	f000 f880 	bl	80048f0 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80047f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80047f4:	f7ff ff16 	bl	8004624 <FLASH_WaitForLastOperation>
 80047f8:	4603      	mov	r3, r0
 80047fa:	73fb      	strb	r3, [r7, #15]
 80047fc:	e024      	b.n	8004848 <HAL_FLASHEx_Erase+0x98>
      /* If operation is completed or interrupted, no need to clear the Mass Erase Bit */
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	f04f 32ff 	mov.w	r2, #4294967295
 8004804:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	60bb      	str	r3, [r7, #8]
 800480c:	e012      	b.n	8004834 <HAL_FLASHEx_Erase+0x84>
      {
        /* Start erase page */
        FLASH_PageErase(index);
 800480e:	68b8      	ldr	r0, [r7, #8]
 8004810:	f000 f87e 	bl	8004910 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004814:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004818:	f7ff ff04 	bl	8004624 <FLASH_WaitForLastOperation>
 800481c:	4603      	mov	r3, r0
 800481e:	73fb      	strb	r3, [r7, #15]

        if (status != HAL_OK)
 8004820:	7bfb      	ldrb	r3, [r7, #15]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d003      	beq.n	800482e <HAL_FLASHEx_Erase+0x7e>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	601a      	str	r2, [r3, #0]
          break;
 800482c:	e00a      	b.n	8004844 <HAL_FLASHEx_Erase+0x94>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	3301      	adds	r3, #1
 8004832:	60bb      	str	r3, [r7, #8]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	4413      	add	r3, r2
 800483e:	68ba      	ldr	r2, [r7, #8]
 8004840:	429a      	cmp	r2, r3
 8004842:	d3e4      	bcc.n	800480e <HAL_FLASHEx_Erase+0x5e>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      FLASH_AcknowledgePageErase();
 8004844:	f000 f8c0 	bl	80049c8 <FLASH_AcknowledgePageErase>
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004848:	f000 f87a 	bl	8004940 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800484c:	4b03      	ldr	r3, [pc, #12]	@ (800485c <HAL_FLASHEx_Erase+0xac>)
 800484e:	2200      	movs	r2, #0
 8004850:	701a      	strb	r2, [r3, #0]

  return status;
 8004852:	7bfb      	ldrb	r3, [r7, #15]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3710      	adds	r7, #16
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}
 800485c:	20000320 	.word	0x20000320

08004860 <HAL_FLASHEx_Erase_IT>:
  * @param  pEraseInit Pointer to an @ref FLASH_EraseInitTypeDef structure that
  *         contains the configuration information for the erasing.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004868:	4b1f      	ldr	r3, [pc, #124]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b01      	cmp	r3, #1
 800486e:	d101      	bne.n	8004874 <HAL_FLASHEx_Erase_IT+0x14>
 8004870:	2302      	movs	r3, #2
 8004872:	e034      	b.n	80048de <HAL_FLASHEx_Erase_IT+0x7e>
 8004874:	4b1c      	ldr	r3, [pc, #112]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004876:	2201      	movs	r2, #1
 8004878:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800487a:	4b1b      	ldr	r3, [pc, #108]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800487c:	2200      	movs	r2, #0
 800487e:	605a      	str	r2, [r3, #4]

  /* save procedure for interrupt treatment */
  pFlash.ProcedureOnGoing = pEraseInit->TypeErase;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a18      	ldr	r2, [pc, #96]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 8004886:	6093      	str	r3, [r2, #8]

  /* Verify that next operation can be proceed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8004888:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800488c:	f7ff feca 	bl	8004624 <FLASH_WaitForLastOperation>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]

  if (status != HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_FLASHEx_Erase_IT+0x42>
  {
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 800489a:	4b13      	ldr	r3, [pc, #76]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 800489c:	2200      	movs	r2, #0
 800489e:	701a      	strb	r2, [r3, #0]
 80048a0:	e01c      	b.n	80048dc <HAL_FLASHEx_Erase_IT+0x7c>
  }
  else
  {
    /* Enable End of Operation and Error interrupts */
    __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80048a2:	4b12      	ldr	r3, [pc, #72]	@ (80048ec <HAL_FLASHEx_Erase_IT+0x8c>)
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	4a11      	ldr	r2, [pc, #68]	@ (80048ec <HAL_FLASHEx_Erase_IT+0x8c>)
 80048a8:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
 80048ac:	6153      	str	r3, [r2, #20]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b04      	cmp	r3, #4
 80048b4:	d105      	bne.n	80048c2 <HAL_FLASHEx_Erase_IT+0x62>
    {
      /* Set Page to 0 for Interrupt callback management */
      pFlash.Page = 0;
 80048b6:	4b0c      	ldr	r3, [pc, #48]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	611a      	str	r2, [r3, #16]

      /* Proceed to Mass Erase */
      FLASH_MassErase();
 80048bc:	f000 f818 	bl	80048f0 <FLASH_MassErase>
 80048c0:	e00c      	b.n	80048dc <HAL_FLASHEx_Erase_IT+0x7c>
    }
    else
    {
      /* Erase by page to be done */
      pFlash.NbPagesToErase = pEraseInit->NbPages;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	4a08      	ldr	r2, [pc, #32]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80048c8:	6153      	str	r3, [r2, #20]
      pFlash.Page = pEraseInit->Page;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	4a06      	ldr	r2, [pc, #24]	@ (80048e8 <HAL_FLASHEx_Erase_IT+0x88>)
 80048d0:	6113      	str	r3, [r2, #16]

      /*Erase 1st page and wait for IT */
      FLASH_PageErase(pEraseInit->Page);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 f81a 	bl	8004910 <FLASH_PageErase>
    }
  }

  /* return status */
  return status;
 80048dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20000320 	.word	0x20000320
 80048ec:	58004000 	.word	0x58004000

080048f0 <FLASH_MassErase>:
/**
  * @brief  Mass erase of FLASH memory.
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80048f0:	b480      	push	{r7}
 80048f2:	af00      	add	r7, sp, #0
  /* Set the Mass Erase Bit and start bit */
#ifdef CORE_CM0PLUS
  SET_BIT(FLASH->C2CR, (FLASH_CR_MER | FLASH_CR_STRT));
#else
  SET_BIT(FLASH->CR, (FLASH_CR_MER | FLASH_CR_STRT));
 80048f4:	4b05      	ldr	r3, [pc, #20]	@ (800490c <FLASH_MassErase+0x1c>)
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	4a04      	ldr	r2, [pc, #16]	@ (800490c <FLASH_MassErase+0x1c>)
 80048fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048fe:	f043 0304 	orr.w	r3, r3, #4
 8004902:	6153      	str	r3, [r2, #20]
#endif
}
 8004904:	bf00      	nop
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr
 800490c:	58004000 	.word	0x58004000

08004910 <FLASH_PageErase>:
  * @param  Page FLASH page to erase
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @retval None
  */
void FLASH_PageErase(uint32_t Page)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]

  /* Proceed to erase the page */
#ifdef CORE_CM0PLUS
  MODIFY_REG(FLASH->C2CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
#else
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page << FLASH_CR_PNB_Pos) | FLASH_CR_PER | FLASH_CR_STRT));
 8004918:	4b08      	ldr	r3, [pc, #32]	@ (800493c <FLASH_PageErase+0x2c>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f423 727e 	bic.w	r2, r3, #1016	@ 0x3f8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	00db      	lsls	r3, r3, #3
 8004924:	4313      	orrs	r3, r2
 8004926:	4a05      	ldr	r2, [pc, #20]	@ (800493c <FLASH_PageErase+0x2c>)
 8004928:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800492c:	f043 0302 	orr.w	r3, r3, #2
 8004930:	6153      	str	r3, [r2, #20]
#endif
}
 8004932:	bf00      	nop
 8004934:	370c      	adds	r7, #12
 8004936:	46bd      	mov	sp, r7
 8004938:	bc80      	pop	{r7}
 800493a:	4770      	bx	lr
 800493c:	58004000 	.word	0x58004000

08004940 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004940:	b480      	push	{r7}
 8004942:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) == 1U)
 8004944:	4b1f      	ldr	r3, [pc, #124]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800494c:	2b01      	cmp	r3, #1
 800494e:	d117      	bne.n	8004980 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004950:	4b1c      	ldr	r3, [pc, #112]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	4a1b      	ldr	r2, [pc, #108]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004956:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800495a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800495c:	4b19      	ldr	r3, [pc, #100]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	4a18      	ldr	r2, [pc, #96]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004962:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004966:	6013      	str	r3, [r2, #0]
 8004968:	4b16      	ldr	r3, [pc, #88]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800496e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004972:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004974:	4b13      	ldr	r3, [pc, #76]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a12      	ldr	r2, [pc, #72]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800497a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800497e:	6013      	str	r3, [r2, #0]
  }

#ifdef CORE_CM0PLUS
#else
  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) == 1U)
 8004980:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004988:	2b01      	cmp	r3, #1
 800498a:	d117      	bne.n	80049bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800498c:	4b0d      	ldr	r3, [pc, #52]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a0c      	ldr	r2, [pc, #48]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 8004992:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004996:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004998:	4b0a      	ldr	r3, [pc, #40]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 800499e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	4b07      	ldr	r3, [pc, #28]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4a06      	ldr	r2, [pc, #24]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 80049aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80049ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80049b0:	4b04      	ldr	r3, [pc, #16]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a03      	ldr	r2, [pc, #12]	@ (80049c4 <FLASH_FlushCaches+0x84>)
 80049b6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80049ba:	6013      	str	r3, [r2, #0]
  }
#endif
}
 80049bc:	bf00      	nop
 80049be:	46bd      	mov	sp, r7
 80049c0:	bc80      	pop	{r7}
 80049c2:	4770      	bx	lr
 80049c4:	58004000 	.word	0x58004000

080049c8 <FLASH_AcknowledgePageErase>:
/**
  * @brief  Acknlowldge the page erase operation.
  * @retval None
  */
static void FLASH_AcknowledgePageErase(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0
#ifdef CORE_CM0PLUS
  CLEAR_BIT(FLASH->C2CR, (FLASH_CR_PER | FLASH_CR_PNB));
#else
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80049cc:	4b05      	ldr	r3, [pc, #20]	@ (80049e4 <FLASH_AcknowledgePageErase+0x1c>)
 80049ce:	695b      	ldr	r3, [r3, #20]
 80049d0:	4a04      	ldr	r2, [pc, #16]	@ (80049e4 <FLASH_AcknowledgePageErase+0x1c>)
 80049d2:	f423 737e 	bic.w	r3, r3, #1016	@ 0x3f8
 80049d6:	f023 0302 	bic.w	r3, r3, #2
 80049da:	6153      	str	r3, [r2, #20]
#endif
}
 80049dc:	bf00      	nop
 80049de:	46bd      	mov	sp, r7
 80049e0:	bc80      	pop	{r7}
 80049e2:	4770      	bx	lr
 80049e4:	58004000 	.word	0x58004000

080049e8 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049e8:	b480      	push	{r7}
 80049ea:	b087      	sub	sp, #28
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80049f2:	2300      	movs	r3, #0
 80049f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80049f6:	e140      	b.n	8004c7a <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	2101      	movs	r1, #1
 80049fe:	697b      	ldr	r3, [r7, #20]
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	4013      	ands	r3, r2
 8004a06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	f000 8132 	beq.w	8004c74 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	685b      	ldr	r3, [r3, #4]
 8004a14:	f003 0303 	and.w	r3, r3, #3
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d005      	beq.n	8004a28 <HAL_GPIO_Init+0x40>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f003 0303 	and.w	r3, r3, #3
 8004a24:	2b02      	cmp	r3, #2
 8004a26:	d130      	bne.n	8004a8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	005b      	lsls	r3, r3, #1
 8004a32:	2203      	movs	r2, #3
 8004a34:	fa02 f303 	lsl.w	r3, r2, r3
 8004a38:	43db      	mvns	r3, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4013      	ands	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	68da      	ldr	r2, [r3, #12]
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	005b      	lsls	r3, r3, #1
 8004a48:	fa02 f303 	lsl.w	r3, r2, r3
 8004a4c:	693a      	ldr	r2, [r7, #16]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	693a      	ldr	r2, [r7, #16]
 8004a56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a5e:	2201      	movs	r2, #1
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	091b      	lsrs	r3, r3, #4
 8004a74:	f003 0201 	and.w	r2, r3, #1
 8004a78:	697b      	ldr	r3, [r7, #20]
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	693a      	ldr	r2, [r7, #16]
 8004a88:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	2b03      	cmp	r3, #3
 8004a94:	d017      	beq.n	8004ac6 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	68db      	ldr	r3, [r3, #12]
 8004a9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	2203      	movs	r2, #3
 8004aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8004aa6:	43db      	mvns	r3, r3
 8004aa8:	693a      	ldr	r2, [r7, #16]
 8004aaa:	4013      	ands	r3, r2
 8004aac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	689a      	ldr	r2, [r3, #8]
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aba:	693a      	ldr	r2, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	f003 0303 	and.w	r3, r3, #3
 8004ace:	2b02      	cmp	r3, #2
 8004ad0:	d123      	bne.n	8004b1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	08da      	lsrs	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	3208      	adds	r2, #8
 8004ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ade:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	f003 0307 	and.w	r3, r3, #7
 8004ae6:	009b      	lsls	r3, r3, #2
 8004ae8:	220f      	movs	r2, #15
 8004aea:	fa02 f303 	lsl.w	r3, r2, r3
 8004aee:	43db      	mvns	r3, r3
 8004af0:	693a      	ldr	r2, [r7, #16]
 8004af2:	4013      	ands	r3, r2
 8004af4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	691a      	ldr	r2, [r3, #16]
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	009b      	lsls	r3, r3, #2
 8004b02:	fa02 f303 	lsl.w	r3, r2, r3
 8004b06:	693a      	ldr	r2, [r7, #16]
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	08da      	lsrs	r2, r3, #3
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	3208      	adds	r2, #8
 8004b14:	6939      	ldr	r1, [r7, #16]
 8004b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	005b      	lsls	r3, r3, #1
 8004b24:	2203      	movs	r2, #3
 8004b26:	fa02 f303 	lsl.w	r3, r2, r3
 8004b2a:	43db      	mvns	r3, r3
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	4013      	ands	r3, r2
 8004b30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	f003 0203 	and.w	r2, r3, #3
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	693a      	ldr	r2, [r7, #16]
 8004b4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	f000 808c 	beq.w	8004c74 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8004b5c:	4a4e      	ldr	r2, [pc, #312]	@ (8004c98 <HAL_GPIO_Init+0x2b0>)
 8004b5e:	697b      	ldr	r3, [r7, #20]
 8004b60:	089b      	lsrs	r3, r3, #2
 8004b62:	3302      	adds	r3, #2
 8004b64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b68:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	f003 0303 	and.w	r3, r3, #3
 8004b70:	009b      	lsls	r3, r3, #2
 8004b72:	2207      	movs	r2, #7
 8004b74:	fa02 f303 	lsl.w	r3, r2, r3
 8004b78:	43db      	mvns	r3, r3
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4013      	ands	r3, r2
 8004b7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b86:	d00d      	beq.n	8004ba4 <HAL_GPIO_Init+0x1bc>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a44      	ldr	r2, [pc, #272]	@ (8004c9c <HAL_GPIO_Init+0x2b4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d007      	beq.n	8004ba0 <HAL_GPIO_Init+0x1b8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a43      	ldr	r2, [pc, #268]	@ (8004ca0 <HAL_GPIO_Init+0x2b8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d101      	bne.n	8004b9c <HAL_GPIO_Init+0x1b4>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e004      	b.n	8004ba6 <HAL_GPIO_Init+0x1be>
 8004b9c:	2307      	movs	r3, #7
 8004b9e:	e002      	b.n	8004ba6 <HAL_GPIO_Init+0x1be>
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e000      	b.n	8004ba6 <HAL_GPIO_Init+0x1be>
 8004ba4:	2300      	movs	r3, #0
 8004ba6:	697a      	ldr	r2, [r7, #20]
 8004ba8:	f002 0203 	and.w	r2, r2, #3
 8004bac:	0092      	lsls	r2, r2, #2
 8004bae:	4093      	lsls	r3, r2
 8004bb0:	693a      	ldr	r2, [r7, #16]
 8004bb2:	4313      	orrs	r3, r2
 8004bb4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8004bb6:	4938      	ldr	r1, [pc, #224]	@ (8004c98 <HAL_GPIO_Init+0x2b0>)
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	089b      	lsrs	r3, r3, #2
 8004bbc:	3302      	adds	r3, #2
 8004bbe:	693a      	ldr	r2, [r7, #16]
 8004bc0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bc4:	4b37      	ldr	r3, [pc, #220]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	43db      	mvns	r3, r3
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d003      	beq.n	8004be8 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	4313      	orrs	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004be8:	4a2e      	ldr	r2, [pc, #184]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8004bee:	4b2d      	ldr	r3, [pc, #180]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	43db      	mvns	r3, r3
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d003      	beq.n	8004c12 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8004c0a:	693a      	ldr	r2, [r7, #16]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c12:	4a24      	ldr	r2, [pc, #144]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8004c18:	4b22      	ldr	r3, [pc, #136]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c1e:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	43db      	mvns	r3, r3
 8004c24:	693a      	ldr	r2, [r7, #16]
 8004c26:	4013      	ands	r3, r2
 8004c28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d003      	beq.n	8004c3e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	4313      	orrs	r3, r2
 8004c3c:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8004c3e:	4a19      	ldr	r2, [pc, #100]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8004c46:	4b17      	ldr	r3, [pc, #92]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c48:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c4c:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	43db      	mvns	r3, r3
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	4013      	ands	r3, r2
 8004c56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d003      	beq.n	8004c6c <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8004c64:	693a      	ldr	r2, [r7, #16]
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8004c6c:	4a0d      	ldr	r2, [pc, #52]	@ (8004ca4 <HAL_GPIO_Init+0x2bc>)
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	3301      	adds	r3, #1
 8004c78:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	fa22 f303 	lsr.w	r3, r2, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f47f aeb7 	bne.w	80049f8 <HAL_GPIO_Init+0x10>
  }
}
 8004c8a:	bf00      	nop
 8004c8c:	bf00      	nop
 8004c8e:	371c      	adds	r7, #28
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bc80      	pop	{r7}
 8004c94:	4770      	bx	lr
 8004c96:	bf00      	nop
 8004c98:	40010000 	.word	0x40010000
 8004c9c:	48000400 	.word	0x48000400
 8004ca0:	48000800 	.word	0x48000800
 8004ca4:	58000800 	.word	0x58000800

08004ca8 <HAL_GPIO_DeInit>:
  * @param GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b087      	sub	sp, #28
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8004cb6:	e0af      	b.n	8004e18 <HAL_GPIO_DeInit+0x170>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8004cb8:	2201      	movs	r2, #1
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8004cc6:	693b      	ldr	r3, [r7, #16]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 80a2 	beq.w	8004e12 <HAL_GPIO_DeInit+0x16a>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8004cce:	4a59      	ldr	r2, [pc, #356]	@ (8004e34 <HAL_GPIO_DeInit+0x18c>)
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	3302      	adds	r3, #2
 8004cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cda:	60fb      	str	r3, [r7, #12]
      tmp &= (0x07uL << (4U * (position & 0x03U)));
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	f003 0303 	and.w	r3, r3, #3
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	2207      	movs	r2, #7
 8004ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	4013      	ands	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004cf6:	d00d      	beq.n	8004d14 <HAL_GPIO_DeInit+0x6c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a4f      	ldr	r2, [pc, #316]	@ (8004e38 <HAL_GPIO_DeInit+0x190>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d007      	beq.n	8004d10 <HAL_GPIO_DeInit+0x68>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a4e      	ldr	r2, [pc, #312]	@ (8004e3c <HAL_GPIO_DeInit+0x194>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d101      	bne.n	8004d0c <HAL_GPIO_DeInit+0x64>
 8004d08:	2302      	movs	r3, #2
 8004d0a:	e004      	b.n	8004d16 <HAL_GPIO_DeInit+0x6e>
 8004d0c:	2307      	movs	r3, #7
 8004d0e:	e002      	b.n	8004d16 <HAL_GPIO_DeInit+0x6e>
 8004d10:	2301      	movs	r3, #1
 8004d12:	e000      	b.n	8004d16 <HAL_GPIO_DeInit+0x6e>
 8004d14:	2300      	movs	r3, #0
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	f002 0203 	and.w	r2, r2, #3
 8004d1c:	0092      	lsls	r2, r2, #2
 8004d1e:	4093      	lsls	r3, r2
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d136      	bne.n	8004d94 <HAL_GPIO_DeInit+0xec>
        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 &= ~(iocurrent);
        EXTI->C2EMR1 &= ~(iocurrent);
#else
        EXTI->IMR1 &= ~(iocurrent);
 8004d26:	4b46      	ldr	r3, [pc, #280]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d28:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	43db      	mvns	r3, r3
 8004d30:	4943      	ldr	r1, [pc, #268]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d32:	4013      	ands	r3, r2
 8004d34:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
        EXTI->EMR1 &= ~(iocurrent);
 8004d38:	4b41      	ldr	r3, [pc, #260]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d3a:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	43db      	mvns	r3, r3
 8004d42:	493f      	ldr	r1, [pc, #252]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* CORE_CM0PLUS */

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8004d4a:	4b3d      	ldr	r3, [pc, #244]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	493b      	ldr	r1, [pc, #236]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d54:	4013      	ands	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8004d58:	4b39      	ldr	r3, [pc, #228]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	43db      	mvns	r3, r3
 8004d60:	4937      	ldr	r1, [pc, #220]	@ (8004e40 <HAL_GPIO_DeInit+0x198>)
 8004d62:	4013      	ands	r3, r2
 8004d64:	604b      	str	r3, [r1, #4]

        /* Clear EXTICR configuration */
        tmp = 0x07uL << (4u * (position & 0x03U));
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f003 0303 	and.w	r3, r3, #3
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	2207      	movs	r2, #7
 8004d70:	fa02 f303 	lsl.w	r3, r2, r3
 8004d74:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8004d76:	4a2f      	ldr	r2, [pc, #188]	@ (8004e34 <HAL_GPIO_DeInit+0x18c>)
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	089b      	lsrs	r3, r3, #2
 8004d7c:	3302      	adds	r3, #2
 8004d7e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	43da      	mvns	r2, r3
 8004d86:	482b      	ldr	r0, [pc, #172]	@ (8004e34 <HAL_GPIO_DeInit+0x18c>)
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	089b      	lsrs	r3, r3, #2
 8004d8c:	400a      	ands	r2, r1
 8004d8e:	3302      	adds	r3, #2
 8004d90:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	2103      	movs	r1, #3
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	08da      	lsrs	r2, r3, #3
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	3208      	adds	r2, #8
 8004db0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004db4:	697b      	ldr	r3, [r7, #20]
 8004db6:	f003 0307 	and.w	r3, r3, #7
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	220f      	movs	r2, #15
 8004dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	08d2      	lsrs	r2, r2, #3
 8004dc8:	4019      	ands	r1, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	3208      	adds	r2, #8
 8004dce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	689a      	ldr	r2, [r3, #8]
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2103      	movs	r1, #3
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	401a      	ands	r2, r3
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	2101      	movs	r1, #1
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	fa01 f303 	lsl.w	r3, r1, r3
 8004df4:	43db      	mvns	r3, r3
 8004df6:	401a      	ands	r2, r3
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68da      	ldr	r2, [r3, #12]
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	005b      	lsls	r3, r3, #1
 8004e04:	2103      	movs	r1, #3
 8004e06:	fa01 f303 	lsl.w	r3, r1, r3
 8004e0a:	43db      	mvns	r3, r3
 8004e0c:	401a      	ands	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	60da      	str	r2, [r3, #12]
    }

    position++;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	3301      	adds	r3, #1
 8004e16:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8004e18:	683a      	ldr	r2, [r7, #0]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f47f af49 	bne.w	8004cb8 <HAL_GPIO_DeInit+0x10>
  }
}
 8004e26:	bf00      	nop
 8004e28:	bf00      	nop
 8004e2a:	371c      	adds	r7, #28
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bc80      	pop	{r7}
 8004e30:	4770      	bx	lr
 8004e32:	bf00      	nop
 8004e34:	40010000 	.word	0x40010000
 8004e38:	48000400 	.word	0x48000400
 8004e3c:	48000800 	.word	0x48000800
 8004e40:	58000800 	.word	0x58000800

08004e44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	807b      	strh	r3, [r7, #2]
 8004e50:	4613      	mov	r3, r2
 8004e52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004e54:	787b      	ldrb	r3, [r7, #1]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d003      	beq.n	8004e62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004e5a:	887a      	ldrh	r2, [r7, #2]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004e60:	e002      	b.n	8004e68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004e62:	887a      	ldrh	r2, [r7, #2]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004e68:	bf00      	nop
 8004e6a:	370c      	adds	r7, #12
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bc80      	pop	{r7}
 8004e70:	4770      	bx	lr
	...

08004e74 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	4603      	mov	r3, r0
 8004e7c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004e7e:	4b08      	ldr	r3, [pc, #32]	@ (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e80:	68da      	ldr	r2, [r3, #12]
 8004e82:	88fb      	ldrh	r3, [r7, #6]
 8004e84:	4013      	ands	r3, r2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d006      	beq.n	8004e98 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004e8a:	4a05      	ldr	r2, [pc, #20]	@ (8004ea0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004e8c:	88fb      	ldrh	r3, [r7, #6]
 8004e8e:	60d3      	str	r3, [r2, #12]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004e90:	88fb      	ldrh	r3, [r7, #6]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f004 fe7e 	bl	8009b94 <HAL_GPIO_EXTI_Callback>
  }
}
 8004e98:	bf00      	nop
 8004e9a:	3708      	adds	r7, #8
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}
 8004ea0:	58000800 	.word	0x58000800

08004ea4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	@ (8004ebc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a03      	ldr	r2, [pc, #12]	@ (8004ebc <HAL_PWR_EnableBkUpAccess+0x18>)
 8004eae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb2:	6013      	str	r3, [r2, #0]
}
 8004eb4:	bf00      	nop
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bc80      	pop	{r7}
 8004eba:	4770      	bx	lr
 8004ebc:	58000400 	.word	0x58000400

08004ec0 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	460b      	mov	r3, r1
 8004eca:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10c      	bne.n	8004eec <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004ed2:	4b13      	ldr	r3, [pc, #76]	@ (8004f20 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004ed4:	695b      	ldr	r3, [r3, #20]
 8004ed6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004eda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ede:	d10d      	bne.n	8004efc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8004ee0:	f000 f83c 	bl	8004f5c <HAL_PWREx_DisableLowPowerRunMode>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d008      	beq.n	8004efc <HAL_PWR_EnterSLEEPMode+0x3c>
      {
        return ;
 8004eea:	e015      	b.n	8004f18 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_CLR(PWR->SR2, (PWR_SR2_REGLPF)))
 8004eec:	4b0c      	ldr	r3, [pc, #48]	@ (8004f20 <HAL_PWR_EnterSLEEPMode+0x60>)
 8004eee:	695b      	ldr	r3, [r3, #20]
 8004ef0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <HAL_PWR_EnterSLEEPMode+0x3c>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8004ef8:	f000 f822 	bl	8004f40 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004efc:	4b09      	ldr	r3, [pc, #36]	@ (8004f24 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	4a08      	ldr	r2, [pc, #32]	@ (8004f24 <HAL_PWR_EnterSLEEPMode+0x64>)
 8004f02:	f023 0304 	bic.w	r3, r3, #4
 8004f06:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if (SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8004f08:	78fb      	ldrb	r3, [r7, #3]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d101      	bne.n	8004f12 <HAL_PWR_EnterSLEEPMode+0x52>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004f0e:	bf30      	wfi
 8004f10:	e002      	b.n	8004f18 <HAL_PWR_EnterSLEEPMode+0x58>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004f12:	bf40      	sev
    __WFE();
 8004f14:	bf20      	wfe
    __WFE();
 8004f16:	bf20      	wfe
  }
}
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	58000400 	.word	0x58000400
 8004f24:	e000ed00 	.word	0xe000ed00

08004f28 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8004f2c:	4b03      	ldr	r3, [pc, #12]	@ (8004f3c <HAL_PWREx_GetVoltageRange+0x14>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bc80      	pop	{r7}
 8004f3a:	4770      	bx	lr
 8004f3c:	58000400 	.word	0x58000400

08004f40 <HAL_PWREx_EnableLowPowerRunMode>:
  * @note  In Low-power Run mode, all I/O pins keep the same state as in Run mode.
  * @note  Clock frequency must be reduced below 2 MHz.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f44:	4b04      	ldr	r3, [pc, #16]	@ (8004f58 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a03      	ldr	r2, [pc, #12]	@ (8004f58 <HAL_PWREx_EnableLowPowerRunMode+0x18>)
 8004f4a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f4e:	6013      	str	r3, [r2, #0]
}
 8004f50:	bf00      	nop
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bc80      	pop	{r7}
 8004f56:	4770      	bx	lr
 8004f58:	58000400 	.word	0x58000400

08004f5c <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 8004f62:	4b16      	ldr	r3, [pc, #88]	@ (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a15      	ldr	r2, [pc, #84]	@ (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f68:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004f6c:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000UL);
 8004f6e:	4b14      	ldr	r3, [pc, #80]	@ (8004fc0 <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2232      	movs	r2, #50	@ 0x32
 8004f74:	fb02 f303 	mul.w	r3, r2, r3
 8004f78:	4a12      	ldr	r2, [pc, #72]	@ (8004fc4 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 8004f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7e:	0c9b      	lsrs	r3, r3, #18
 8004f80:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f82:	e002      	b.n	8004f8a <HAL_PWREx_DisableLowPowerRunMode+0x2e>
  {
    wait_loop_index--;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	3b01      	subs	r3, #1
 8004f88:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 8004f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004f96:	d102      	bne.n	8004f9e <HAL_PWREx_DisableLowPowerRunMode+0x42>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1f2      	bne.n	8004f84 <HAL_PWREx_DisableLowPowerRunMode+0x28>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, (PWR_SR2_REGLPF)))
 8004f9e:	4b07      	ldr	r3, [pc, #28]	@ (8004fbc <HAL_PWREx_DisableLowPowerRunMode+0x60>)
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fa6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004faa:	d101      	bne.n	8004fb0 <HAL_PWREx_DisableLowPowerRunMode+0x54>
  {
    return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e000      	b.n	8004fb2 <HAL_PWREx_DisableLowPowerRunMode+0x56>
  }

  return HAL_OK;
 8004fb0:	2300      	movs	r3, #0
}
 8004fb2:	4618      	mov	r0, r3
 8004fb4:	370c      	adds	r7, #12
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bc80      	pop	{r7}
 8004fba:	4770      	bx	lr
 8004fbc:	58000400 	.word	0x58000400
 8004fc0:	20000000 	.word	0x20000000
 8004fc4:	431bde83 	.word	0x431bde83

08004fc8 <HAL_PWREx_EnterSTOP2Mode>:
  *            @arg @ref PWR_STOPENTRY_WFI  Enter Stop mode with WFI instruction
  *            @arg @ref PWR_STOPENTRY_WFE  Enter Stop mode with WFE instruction
  * @retval None
  */
void HAL_PWREx_EnterSTOP2Mode(uint8_t STOPEntry)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	4603      	mov	r3, r0
 8004fd0:	71fb      	strb	r3, [r7, #7]
#ifdef CORE_CM0PLUS
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->C2CR1, PWR_C2CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
#else
  /* Set Stop mode 2 */
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, PWR_LOWPOWERMODE_STOP2);
 8004fd2:	4b10      	ldr	r3, [pc, #64]	@ (8005014 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f023 0307 	bic.w	r3, r3, #7
 8004fda:	4a0e      	ldr	r2, [pc, #56]	@ (8005014 <HAL_PWREx_EnterSTOP2Mode+0x4c>)
 8004fdc:	f043 0302 	orr.w	r3, r3, #2
 8004fe0:	6013      	str	r3, [r2, #0]
#endif

  /* Set SLEEPDEEP bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	4a0c      	ldr	r2, [pc, #48]	@ (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8004fe8:	f043 0304 	orr.w	r3, r3, #4
 8004fec:	6113      	str	r3, [r2, #16]

  /* Select Stop mode entry --------------------------------------------------*/
  if (STOPEntry == PWR_STOPENTRY_WFI)
 8004fee:	79fb      	ldrb	r3, [r7, #7]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d101      	bne.n	8004ff8 <HAL_PWREx_EnterSTOP2Mode+0x30>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8004ff4:	bf30      	wfi
 8004ff6:	e002      	b.n	8004ffe <HAL_PWREx_EnterSTOP2Mode+0x36>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8004ff8:	bf40      	sev
    __WFE();
 8004ffa:	bf20      	wfe
    __WFE();
 8004ffc:	bf20      	wfe
  }

  /* Reset SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	4a05      	ldr	r2, [pc, #20]	@ (8005018 <HAL_PWREx_EnterSTOP2Mode+0x50>)
 8005004:	f023 0304 	bic.w	r3, r3, #4
 8005008:	6113      	str	r3, [r2, #16]
}
 800500a:	bf00      	nop
 800500c:	370c      	adds	r7, #12
 800500e:	46bd      	mov	sp, r7
 8005010:	bc80      	pop	{r7}
 8005012:	4770      	bx	lr
 8005014:	58000400 	.word	0x58000400
 8005018:	e000ed00 	.word	0xe000ed00

0800501c <LL_PWR_IsEnabledBkUpAccess>:
{
 800501c:	b480      	push	{r7}
 800501e:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8005020:	4b06      	ldr	r3, [pc, #24]	@ (800503c <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005028:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800502c:	d101      	bne.n	8005032 <LL_PWR_IsEnabledBkUpAccess+0x16>
 800502e:	2301      	movs	r3, #1
 8005030:	e000      	b.n	8005034 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	46bd      	mov	sp, r7
 8005038:	bc80      	pop	{r7}
 800503a:	4770      	bx	lr
 800503c:	58000400 	.word	0x58000400

08005040 <LL_RCC_HSE_EnableTcxo>:
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005044:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800504e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005052:	6013      	str	r3, [r2, #0]
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	bc80      	pop	{r7}
 800505a:	4770      	bx	lr

0800505c <LL_RCC_HSE_DisableTcxo>:
{
 800505c:	b480      	push	{r7}
 800505e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8005060:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800506a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800506e:	6013      	str	r3, [r2, #0]
}
 8005070:	bf00      	nop
 8005072:	46bd      	mov	sp, r7
 8005074:	bc80      	pop	{r7}
 8005076:	4770      	bx	lr

08005078 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 800507c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005086:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800508a:	d101      	bne.n	8005090 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 800508c:	2301      	movs	r3, #1
 800508e:	e000      	b.n	8005092 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	46bd      	mov	sp, r7
 8005096:	bc80      	pop	{r7}
 8005098:	4770      	bx	lr

0800509a <LL_RCC_HSE_Enable>:
{
 800509a:	b480      	push	{r7}
 800509c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800509e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ac:	6013      	str	r3, [r2, #0]
}
 80050ae:	bf00      	nop
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bc80      	pop	{r7}
 80050b4:	4770      	bx	lr

080050b6 <LL_RCC_HSE_Disable>:
{
 80050b6:	b480      	push	{r7}
 80050b8:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80050ba:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80050c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80050c8:	6013      	str	r3, [r2, #0]
}
 80050ca:	bf00      	nop
 80050cc:	46bd      	mov	sp, r7
 80050ce:	bc80      	pop	{r7}
 80050d0:	4770      	bx	lr

080050d2 <LL_RCC_HSE_IsReady>:
{
 80050d2:	b480      	push	{r7}
 80050d4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80050d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80050e4:	d101      	bne.n	80050ea <LL_RCC_HSE_IsReady+0x18>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <LL_RCC_HSE_IsReady+0x1a>
 80050ea:	2300      	movs	r3, #0
}
 80050ec:	4618      	mov	r0, r3
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bc80      	pop	{r7}
 80050f2:	4770      	bx	lr

080050f4 <LL_RCC_HSI_Enable>:
{
 80050f4:	b480      	push	{r7}
 80050f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80050f8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005102:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005106:	6013      	str	r3, [r2, #0]
}
 8005108:	bf00      	nop
 800510a:	46bd      	mov	sp, r7
 800510c:	bc80      	pop	{r7}
 800510e:	4770      	bx	lr

08005110 <LL_RCC_HSI_Disable>:
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8005114:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800511e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005122:	6013      	str	r3, [r2, #0]
}
 8005124:	bf00      	nop
 8005126:	46bd      	mov	sp, r7
 8005128:	bc80      	pop	{r7}
 800512a:	4770      	bx	lr

0800512c <LL_RCC_HSI_IsReady>:
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8005130:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800513a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513e:	d101      	bne.n	8005144 <LL_RCC_HSI_IsReady+0x18>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <LL_RCC_HSI_IsReady+0x1a>
 8005144:	2300      	movs	r3, #0
}
 8005146:	4618      	mov	r0, r3
 8005148:	46bd      	mov	sp, r7
 800514a:	bc80      	pop	{r7}
 800514c:	4770      	bx	lr

0800514e <LL_RCC_HSI_SetCalibTrimming>:
{
 800514e:	b480      	push	{r7}
 8005150:	b083      	sub	sp, #12
 8005152:	af00      	add	r7, sp, #0
 8005154:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8005156:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	061b      	lsls	r3, r3, #24
 8005164:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005168:	4313      	orrs	r3, r2
 800516a:	604b      	str	r3, [r1, #4]
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	bc80      	pop	{r7}
 8005174:	4770      	bx	lr

08005176 <LL_RCC_LSE_IsReady>:
{
 8005176:	b480      	push	{r7}
 8005178:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800517a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800517e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005182:	f003 0302 	and.w	r3, r3, #2
 8005186:	2b02      	cmp	r3, #2
 8005188:	d101      	bne.n	800518e <LL_RCC_LSE_IsReady+0x18>
 800518a:	2301      	movs	r3, #1
 800518c:	e000      	b.n	8005190 <LL_RCC_LSE_IsReady+0x1a>
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	bc80      	pop	{r7}
 8005196:	4770      	bx	lr

08005198 <LL_RCC_LSI_Enable>:
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 800519c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051b0:	bf00      	nop
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bc80      	pop	{r7}
 80051b6:	4770      	bx	lr

080051b8 <LL_RCC_LSI_Disable>:
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80051bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051c4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80051c8:	f023 0301 	bic.w	r3, r3, #1
 80051cc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 80051d0:	bf00      	nop
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bc80      	pop	{r7}
 80051d6:	4770      	bx	lr

080051d8 <LL_RCC_LSI_IsReady>:
{
 80051d8:	b480      	push	{r7}
 80051da:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80051dc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80051e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d101      	bne.n	80051f0 <LL_RCC_LSI_IsReady+0x18>
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <LL_RCC_LSI_IsReady+0x1a>
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr

080051fa <LL_RCC_MSI_Enable>:
{
 80051fa:	b480      	push	{r7}
 80051fc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80051fe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005208:	f043 0301 	orr.w	r3, r3, #1
 800520c:	6013      	str	r3, [r2, #0]
}
 800520e:	bf00      	nop
 8005210:	46bd      	mov	sp, r7
 8005212:	bc80      	pop	{r7}
 8005214:	4770      	bx	lr

08005216 <LL_RCC_MSI_Disable>:
{
 8005216:	b480      	push	{r7}
 8005218:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 800521a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005224:	f023 0301 	bic.w	r3, r3, #1
 8005228:	6013      	str	r3, [r2, #0]
}
 800522a:	bf00      	nop
 800522c:	46bd      	mov	sp, r7
 800522e:	bc80      	pop	{r7}
 8005230:	4770      	bx	lr

08005232 <LL_RCC_MSI_IsReady>:
{
 8005232:	b480      	push	{r7}
 8005234:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8005236:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0302 	and.w	r3, r3, #2
 8005240:	2b02      	cmp	r3, #2
 8005242:	d101      	bne.n	8005248 <LL_RCC_MSI_IsReady+0x16>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <LL_RCC_MSI_IsReady+0x18>
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	46bd      	mov	sp, r7
 800524e:	bc80      	pop	{r7}
 8005250:	4770      	bx	lr

08005252 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8005252:	b480      	push	{r7}
 8005254:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8005256:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f003 0308 	and.w	r3, r3, #8
 8005260:	2b08      	cmp	r3, #8
 8005262:	d101      	bne.n	8005268 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8005264:	2301      	movs	r3, #1
 8005266:	e000      	b.n	800526a <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8005268:	2300      	movs	r3, #0
}
 800526a:	4618      	mov	r0, r3
 800526c:	46bd      	mov	sp, r7
 800526e:	bc80      	pop	{r7}
 8005270:	4770      	bx	lr

08005272 <LL_RCC_MSI_GetRange>:
{
 8005272:	b480      	push	{r7}
 8005274:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8005276:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 8005280:	4618      	mov	r0, r3
 8005282:	46bd      	mov	sp, r7
 8005284:	bc80      	pop	{r7}
 8005286:	4770      	bx	lr

08005288 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8005288:	b480      	push	{r7}
 800528a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800528c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005290:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005294:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
}
 8005298:	4618      	mov	r0, r3
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr

080052a0 <LL_RCC_MSI_SetCalibTrimming>:
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80052a8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	021b      	lsls	r3, r3, #8
 80052b6:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052ba:	4313      	orrs	r3, r2
 80052bc:	604b      	str	r3, [r1, #4]
}
 80052be:	bf00      	nop
 80052c0:	370c      	adds	r7, #12
 80052c2:	46bd      	mov	sp, r7
 80052c4:	bc80      	pop	{r7}
 80052c6:	4770      	bx	lr

080052c8 <LL_RCC_SetSysClkSource>:
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80052d0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f023 0203 	bic.w	r2, r3, #3
 80052da:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bc80      	pop	{r7}
 80052ec:	4770      	bx	lr

080052ee <LL_RCC_GetSysClkSource>:
{
 80052ee:	b480      	push	{r7}
 80052f0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80052f2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 030c 	and.w	r3, r3, #12
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	46bd      	mov	sp, r7
 8005300:	bc80      	pop	{r7}
 8005302:	4770      	bx	lr

08005304 <LL_RCC_SetAHBPrescaler>:
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800530c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005316:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4313      	orrs	r3, r2
 800531e:	608b      	str	r3, [r1, #8]
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	bc80      	pop	{r7}
 8005328:	4770      	bx	lr

0800532a <LL_RCC_SetAHB3Prescaler>:
{
 800532a:	b480      	push	{r7}
 800532c:	b083      	sub	sp, #12
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8005332:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005336:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800533a:	f023 020f 	bic.w	r2, r3, #15
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	091b      	lsrs	r3, r3, #4
 8005342:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005346:	4313      	orrs	r3, r2
 8005348:	f8c1 3108 	str.w	r3, [r1, #264]	@ 0x108
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	bc80      	pop	{r7}
 8005354:	4770      	bx	lr

08005356 <LL_RCC_SetAPB1Prescaler>:
{
 8005356:	b480      	push	{r7}
 8005358:	b083      	sub	sp, #12
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800535e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005368:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4313      	orrs	r3, r2
 8005370:	608b      	str	r3, [r1, #8]
}
 8005372:	bf00      	nop
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	bc80      	pop	{r7}
 800537a:	4770      	bx	lr

0800537c <LL_RCC_SetAPB2Prescaler>:
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8005384:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800538e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	4313      	orrs	r3, r2
 8005396:	608b      	str	r3, [r1, #8]
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <LL_RCC_GetAHBPrescaler>:
{
 80053a2:	b480      	push	{r7}
 80053a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80053a6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bc80      	pop	{r7}
 80053b6:	4770      	bx	lr

080053b8 <LL_RCC_GetAHB3Prescaler>:
{
 80053b8:	b480      	push	{r7}
 80053ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80053bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053c0:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80053c4:	011b      	lsls	r3, r3, #4
 80053c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bc80      	pop	{r7}
 80053d0:	4770      	bx	lr

080053d2 <LL_RCC_GetAPB1Prescaler>:
{
 80053d2:	b480      	push	{r7}
 80053d4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80053d6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bc80      	pop	{r7}
 80053e6:	4770      	bx	lr

080053e8 <LL_RCC_GetAPB2Prescaler>:
{
 80053e8:	b480      	push	{r7}
 80053ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80053ec:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bc80      	pop	{r7}
 80053fc:	4770      	bx	lr

080053fe <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80053fe:	b480      	push	{r7}
 8005400:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8005402:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800540c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005410:	6013      	str	r3, [r2, #0]
}
 8005412:	bf00      	nop
 8005414:	46bd      	mov	sp, r7
 8005416:	bc80      	pop	{r7}
 8005418:	4770      	bx	lr

0800541a <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 800541a:	b480      	push	{r7}
 800541c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 800541e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005428:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800542c:	6013      	str	r3, [r2, #0]
}
 800542e:	bf00      	nop
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8005436:	b480      	push	{r7}
 8005438:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 800543a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005444:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005448:	d101      	bne.n	800544e <LL_RCC_PLL_IsReady+0x18>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <LL_RCC_PLL_IsReady+0x1a>
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	bc80      	pop	{r7}
 8005456:	4770      	bx	lr

08005458 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800545c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	0a1b      	lsrs	r3, r3, #8
 8005464:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	bc80      	pop	{r7}
 800546e:	4770      	bx	lr

08005470 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8005470:	b480      	push	{r7}
 8005472:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8005474:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005478:	68db      	ldr	r3, [r3, #12]
 800547a:	f003 4360 	and.w	r3, r3, #3758096384	@ 0xe0000000
}
 800547e:	4618      	mov	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	bc80      	pop	{r7}
 8005484:	4770      	bx	lr

08005486 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8005486:	b480      	push	{r7}
 8005488:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800548a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 8005494:	4618      	mov	r0, r3
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800549c:	b480      	push	{r7}
 800549e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80054a0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054a4:	68db      	ldr	r3, [r3, #12]
 80054a6:	f003 0303 	and.w	r3, r3, #3
}
 80054aa:	4618      	mov	r0, r3
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bc80      	pop	{r7}
 80054b0:	4770      	bx	lr

080054b2 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80054b2:	b480      	push	{r7}
 80054b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80054b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054c4:	d101      	bne.n	80054ca <LL_RCC_IsActiveFlag_HPRE+0x18>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e000      	b.n	80054cc <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80054ca:	2300      	movs	r3, #0
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bc80      	pop	{r7}
 80054d2:	4770      	bx	lr

080054d4 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80054d4:	b480      	push	{r7}
 80054d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80054d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80054dc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 80054e0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054e8:	d101      	bne.n	80054ee <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	bc80      	pop	{r7}
 80054f6:	4770      	bx	lr

080054f8 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80054f8:	b480      	push	{r7}
 80054fa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80054fc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005506:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800550a:	d101      	bne.n	8005510 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 800550c:	2301      	movs	r3, #1
 800550e:	e000      	b.n	8005512 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8005510:	2300      	movs	r3, #0
}
 8005512:	4618      	mov	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	bc80      	pop	{r7}
 8005518:	4770      	bx	lr

0800551a <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 800551a:	b480      	push	{r7}
 800551c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 800551e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005528:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800552c:	d101      	bne.n	8005532 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 800552e:	2301      	movs	r3, #1
 8005530:	e000      	b.n	8005534 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8005532:	2300      	movs	r3, #0
}
 8005534:	4618      	mov	r0, r3
 8005536:	46bd      	mov	sp, r7
 8005538:	bc80      	pop	{r7}
 800553a:	4770      	bx	lr

0800553c <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b088      	sub	sp, #32
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e38b      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800554e:	f7ff fece 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005552:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005554:	f7ff ffa2 	bl	800549c <LL_RCC_PLL_GetMainSource>
 8005558:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0320 	and.w	r3, r3, #32
 8005562:	2b00      	cmp	r3, #0
 8005564:	f000 80c9 	beq.w	80056fa <HAL_RCC_OscConfig+0x1be>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d005      	beq.n	800557a <HAL_RCC_OscConfig+0x3e>
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	2b0c      	cmp	r3, #12
 8005572:	d17b      	bne.n	800566c <HAL_RCC_OscConfig+0x130>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d178      	bne.n	800566c <HAL_RCC_OscConfig+0x130>
    {
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800557a:	f7ff fe5a 	bl	8005232 <LL_RCC_MSI_IsReady>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d005      	beq.n	8005590 <HAL_RCC_OscConfig+0x54>
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6a1b      	ldr	r3, [r3, #32]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_OscConfig+0x54>
      {
        return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e36a      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005594:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0308 	and.w	r3, r3, #8
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <HAL_RCC_OscConfig+0x72>
 80055a2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055ac:	e006      	b.n	80055bc <HAL_RCC_OscConfig+0x80>
 80055ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80055b6:	091b      	lsrs	r3, r3, #4
 80055b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055bc:	4293      	cmp	r3, r2
 80055be:	d222      	bcs.n	8005606 <HAL_RCC_OscConfig+0xca>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055c4:	4618      	mov	r0, r3
 80055c6:	f000 fd51 	bl	800606c <RCC_SetFlashLatencyFromMSIRange>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <HAL_RCC_OscConfig+0x98>
          {
            return HAL_ERROR;
 80055d0:	2301      	movs	r3, #1
 80055d2:	e348      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80055d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80055de:	f043 0308 	orr.w	r3, r3, #8
 80055e2:	6013      	str	r3, [r2, #0]
 80055e4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055f2:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80055f6:	4313      	orrs	r3, r2
 80055f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	4618      	mov	r0, r3
 8005600:	f7ff fe4e 	bl	80052a0 <LL_RCC_MSI_SetCalibTrimming>
 8005604:	e021      	b.n	800564a <HAL_RCC_OscConfig+0x10e>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005606:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005610:	f043 0308 	orr.w	r3, r3, #8
 8005614:	6013      	str	r3, [r2, #0]
 8005616:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005628:	4313      	orrs	r3, r2
 800562a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005630:	4618      	mov	r0, r3
 8005632:	f7ff fe35 	bl	80052a0 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800563a:	4618      	mov	r0, r3
 800563c:	f000 fd16 	bl	800606c <RCC_SetFlashLatencyFromMSIRange>
 8005640:	4603      	mov	r3, r0
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <HAL_RCC_OscConfig+0x10e>
          {
            return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e30d      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800564a:	f000 fcd7 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800564e:	4603      	mov	r3, r0
 8005650:	4aa1      	ldr	r2, [pc, #644]	@ (80058d8 <HAL_RCC_OscConfig+0x39c>)
 8005652:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005654:	4ba1      	ldr	r3, [pc, #644]	@ (80058dc <HAL_RCC_OscConfig+0x3a0>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4618      	mov	r0, r3
 800565a:	f7fc fb37 	bl	8001ccc <HAL_InitTick>
 800565e:	4603      	mov	r3, r0
 8005660:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8005662:	7cfb      	ldrb	r3, [r7, #19]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d047      	beq.n	80056f8 <HAL_RCC_OscConfig+0x1bc>
        {
          return status;
 8005668:	7cfb      	ldrb	r3, [r7, #19]
 800566a:	e2fc      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d02c      	beq.n	80056ce <HAL_RCC_OscConfig+0x192>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005674:	f7ff fdc1 	bl	80051fa <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005678:	f7fc fb32 	bl	8001ce0 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 800567e:	e008      	b.n	8005692 <HAL_RCC_OscConfig+0x156>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005680:	f7fc fb2e 	bl	8001ce0 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b02      	cmp	r3, #2
 800568c:	d901      	bls.n	8005692 <HAL_RCC_OscConfig+0x156>
          {
            return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e2e9      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() == 0U)
 8005692:	f7ff fdce 	bl	8005232 <LL_RCC_MSI_IsReady>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0f1      	beq.n	8005680 <HAL_RCC_OscConfig+0x144>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800569c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80056a6:	f043 0308 	orr.w	r3, r3, #8
 80056aa:	6013      	str	r3, [r2, #0]
 80056ac:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ba:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80056be:	4313      	orrs	r3, r2
 80056c0:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056c6:	4618      	mov	r0, r3
 80056c8:	f7ff fdea 	bl	80052a0 <LL_RCC_MSI_SetCalibTrimming>
 80056cc:	e015      	b.n	80056fa <HAL_RCC_OscConfig+0x1be>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80056ce:	f7ff fda2 	bl	8005216 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80056d2:	f7fc fb05 	bl	8001ce0 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80056d8:	e008      	b.n	80056ec <HAL_RCC_OscConfig+0x1b0>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80056da:	f7fc fb01 	bl	8001ce0 <HAL_GetTick>
 80056de:	4602      	mov	r2, r0
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad3      	subs	r3, r2, r3
 80056e4:	2b02      	cmp	r3, #2
 80056e6:	d901      	bls.n	80056ec <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 80056e8:	2303      	movs	r3, #3
 80056ea:	e2bc      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_MSI_IsReady() != 0U)
 80056ec:	f7ff fda1 	bl	8005232 <LL_RCC_MSI_IsReady>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1f1      	bne.n	80056da <HAL_RCC_OscConfig+0x19e>
 80056f6:	e000      	b.n	80056fa <HAL_RCC_OscConfig+0x1be>
      if ((LL_RCC_MSI_IsReady() != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80056f8:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f003 0301 	and.w	r3, r3, #1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d05f      	beq.n	80057c6 <HAL_RCC_OscConfig+0x28a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	2b08      	cmp	r3, #8
 800570a:	d005      	beq.n	8005718 <HAL_RCC_OscConfig+0x1dc>
 800570c:	69fb      	ldr	r3, [r7, #28]
 800570e:	2b0c      	cmp	r3, #12
 8005710:	d10d      	bne.n	800572e <HAL_RCC_OscConfig+0x1f2>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005712:	69bb      	ldr	r3, [r7, #24]
 8005714:	2b03      	cmp	r3, #3
 8005716:	d10a      	bne.n	800572e <HAL_RCC_OscConfig+0x1f2>
    {
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005718:	f7ff fcdb 	bl	80050d2 <LL_RCC_HSE_IsReady>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d050      	beq.n	80057c4 <HAL_RCC_OscConfig+0x288>
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d14c      	bne.n	80057c4 <HAL_RCC_OscConfig+0x288>
      {
        return HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e29b      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 800572e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005740:	4313      	orrs	r3, r2
 8005742:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	685b      	ldr	r3, [r3, #4]
 8005748:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800574c:	d102      	bne.n	8005754 <HAL_RCC_OscConfig+0x218>
 800574e:	f7ff fca4 	bl	800509a <LL_RCC_HSE_Enable>
 8005752:	e00d      	b.n	8005770 <HAL_RCC_OscConfig+0x234>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 800575c:	d104      	bne.n	8005768 <HAL_RCC_OscConfig+0x22c>
 800575e:	f7ff fc6f 	bl	8005040 <LL_RCC_HSE_EnableTcxo>
 8005762:	f7ff fc9a 	bl	800509a <LL_RCC_HSE_Enable>
 8005766:	e003      	b.n	8005770 <HAL_RCC_OscConfig+0x234>
 8005768:	f7ff fca5 	bl	80050b6 <LL_RCC_HSE_Disable>
 800576c:	f7ff fc76 	bl	800505c <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d012      	beq.n	800579e <HAL_RCC_OscConfig+0x262>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fc fab2 	bl	8001ce0 <HAL_GetTick>
 800577c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x256>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005780:	f7fc faae 	bl	8001ce0 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b64      	cmp	r3, #100	@ 0x64
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x256>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e269      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() == 0U)
 8005792:	f7ff fc9e 	bl	80050d2 <LL_RCC_HSE_IsReady>
 8005796:	4603      	mov	r3, r0
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f1      	beq.n	8005780 <HAL_RCC_OscConfig+0x244>
 800579c:	e013      	b.n	80057c6 <HAL_RCC_OscConfig+0x28a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800579e:	f7fc fa9f 	bl	8001ce0 <HAL_GetTick>
 80057a2:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80057a4:	e008      	b.n	80057b8 <HAL_RCC_OscConfig+0x27c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057a6:	f7fc fa9b 	bl	8001ce0 <HAL_GetTick>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	1ad3      	subs	r3, r2, r3
 80057b0:	2b64      	cmp	r3, #100	@ 0x64
 80057b2:	d901      	bls.n	80057b8 <HAL_RCC_OscConfig+0x27c>
          {
            return HAL_TIMEOUT;
 80057b4:	2303      	movs	r3, #3
 80057b6:	e256      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSE_IsReady() != 0U)
 80057b8:	f7ff fc8b 	bl	80050d2 <LL_RCC_HSE_IsReady>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d1f1      	bne.n	80057a6 <HAL_RCC_OscConfig+0x26a>
 80057c2:	e000      	b.n	80057c6 <HAL_RCC_OscConfig+0x28a>
      if ((LL_RCC_HSE_IsReady() != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057c4:	bf00      	nop
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d04b      	beq.n	800586a <HAL_RCC_OscConfig+0x32e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	2b04      	cmp	r3, #4
 80057d6:	d005      	beq.n	80057e4 <HAL_RCC_OscConfig+0x2a8>
 80057d8:	69fb      	ldr	r3, [r7, #28]
 80057da:	2b0c      	cmp	r3, #12
 80057dc:	d113      	bne.n	8005806 <HAL_RCC_OscConfig+0x2ca>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d110      	bne.n	8005806 <HAL_RCC_OscConfig+0x2ca>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057e4:	f7ff fca2 	bl	800512c <LL_RCC_HSI_IsReady>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d005      	beq.n	80057fa <HAL_RCC_OscConfig+0x2be>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	691b      	ldr	r3, [r3, #16]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d101      	bne.n	80057fa <HAL_RCC_OscConfig+0x2be>
      {
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e235      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fca5 	bl	800514e <LL_RCC_HSI_SetCalibTrimming>
      if ((LL_RCC_HSI_IsReady() != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005804:	e031      	b.n	800586a <HAL_RCC_OscConfig+0x32e>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d019      	beq.n	8005842 <HAL_RCC_OscConfig+0x306>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800580e:	f7ff fc71 	bl	80050f4 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005812:	f7fc fa65 	bl	8001ce0 <HAL_GetTick>
 8005816:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8005818:	e008      	b.n	800582c <HAL_RCC_OscConfig+0x2f0>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800581a:	f7fc fa61 	bl	8001ce0 <HAL_GetTick>
 800581e:	4602      	mov	r2, r0
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	1ad3      	subs	r3, r2, r3
 8005824:	2b02      	cmp	r3, #2
 8005826:	d901      	bls.n	800582c <HAL_RCC_OscConfig+0x2f0>
          {
            return HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	e21c      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() == 0U)
 800582c:	f7ff fc7e 	bl	800512c <LL_RCC_HSI_IsReady>
 8005830:	4603      	mov	r3, r0
 8005832:	2b00      	cmp	r3, #0
 8005834:	d0f1      	beq.n	800581a <HAL_RCC_OscConfig+0x2de>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4618      	mov	r0, r3
 800583c:	f7ff fc87 	bl	800514e <LL_RCC_HSI_SetCalibTrimming>
 8005840:	e013      	b.n	800586a <HAL_RCC_OscConfig+0x32e>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005842:	f7ff fc65 	bl	8005110 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc fa4b 	bl	8001ce0 <HAL_GetTick>
 800584a:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x324>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800584e:	f7fc fa47 	bl	8001ce0 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	697b      	ldr	r3, [r7, #20]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x324>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e202      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_HSI_IsReady() != 0U)
 8005860:	f7ff fc64 	bl	800512c <LL_RCC_HSI_IsReady>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f1      	bne.n	800584e <HAL_RCC_OscConfig+0x312>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0308 	and.w	r3, r3, #8
 8005872:	2b00      	cmp	r3, #0
 8005874:	d06f      	beq.n	8005956 <HAL_RCC_OscConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d057      	beq.n	800592e <HAL_RCC_OscConfig+0x3f2>
    {
      uint32_t csr_temp = RCC->CSR;
 800587e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005886:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	69da      	ldr	r2, [r3, #28]
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f003 0310 	and.w	r3, r3, #16
 8005892:	429a      	cmp	r2, r3
 8005894:	d036      	beq.n	8005904 <HAL_RCC_OscConfig+0x3c8>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d006      	beq.n	80058ae <HAL_RCC_OscConfig+0x372>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_RCC_OscConfig+0x372>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated  */
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e1db      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f003 0301 	and.w	r3, r3, #1
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d018      	beq.n	80058ea <HAL_RCC_OscConfig+0x3ae>
        {
          __HAL_RCC_LSI_DISABLE();
 80058b8:	f7ff fc7e 	bl	80051b8 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058bc:	f7fc fa10 	bl	8001ce0 <HAL_GetTick>
 80058c0:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80058c2:	e00d      	b.n	80058e0 <HAL_RCC_OscConfig+0x3a4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80058c4:	f7fc fa0c 	bl	8001ce0 <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b11      	cmp	r3, #17
 80058d0:	d906      	bls.n	80058e0 <HAL_RCC_OscConfig+0x3a4>
            {
              return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e1c7      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
 80058d6:	bf00      	nop
 80058d8:	20000000 	.word	0x20000000
 80058dc:	20000004 	.word	0x20000004
          while (LL_RCC_LSI_IsReady() != 0U)
 80058e0:	f7ff fc7a 	bl	80051d8 <LL_RCC_LSI_IsReady>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d1ec      	bne.n	80058c4 <HAL_RCC_OscConfig+0x388>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80058ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80058ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058f2:	f023 0210 	bic.w	r2, r3, #16
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005904:	f7ff fc48 	bl	8005198 <LL_RCC_LSI_Enable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005908:	f7fc f9ea 	bl	8001ce0 <HAL_GetTick>
 800590c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800590e:	e008      	b.n	8005922 <HAL_RCC_OscConfig+0x3e6>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005910:	f7fc f9e6 	bl	8001ce0 <HAL_GetTick>
 8005914:	4602      	mov	r2, r0
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	1ad3      	subs	r3, r2, r3
 800591a:	2b11      	cmp	r3, #17
 800591c:	d901      	bls.n	8005922 <HAL_RCC_OscConfig+0x3e6>
        {
          return HAL_TIMEOUT;
 800591e:	2303      	movs	r3, #3
 8005920:	e1a1      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() == 0U)
 8005922:	f7ff fc59 	bl	80051d8 <LL_RCC_LSI_IsReady>
 8005926:	4603      	mov	r3, r0
 8005928:	2b00      	cmp	r3, #0
 800592a:	d0f1      	beq.n	8005910 <HAL_RCC_OscConfig+0x3d4>
 800592c:	e013      	b.n	8005956 <HAL_RCC_OscConfig+0x41a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800592e:	f7ff fc43 	bl	80051b8 <LL_RCC_LSI_Disable>

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005932:	f7fc f9d5 	bl	8001ce0 <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8005938:	e008      	b.n	800594c <HAL_RCC_OscConfig+0x410>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800593a:	f7fc f9d1 	bl	8001ce0 <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b11      	cmp	r3, #17
 8005946:	d901      	bls.n	800594c <HAL_RCC_OscConfig+0x410>
        {
          return HAL_TIMEOUT;
 8005948:	2303      	movs	r3, #3
 800594a:	e18c      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSI_IsReady() != 0U)
 800594c:	f7ff fc44 	bl	80051d8 <LL_RCC_LSI_IsReady>
 8005950:	4603      	mov	r3, r0
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1f1      	bne.n	800593a <HAL_RCC_OscConfig+0x3fe>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 0304 	and.w	r3, r3, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	f000 80d8 	beq.w	8005b14 <HAL_RCC_OscConfig+0x5d8>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005964:	f7ff fb5a 	bl	800501c <LL_PWR_IsEnabledBkUpAccess>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d113      	bne.n	8005996 <HAL_RCC_OscConfig+0x45a>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800596e:	f7ff fa99 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005972:	f7fc f9b5 	bl	8001ce0 <HAL_GetTick>
 8005976:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8005978:	e008      	b.n	800598c <HAL_RCC_OscConfig+0x450>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800597a:	f7fc f9b1 	bl	8001ce0 <HAL_GetTick>
 800597e:	4602      	mov	r2, r0
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	1ad3      	subs	r3, r2, r3
 8005984:	2b02      	cmp	r3, #2
 8005986:	d901      	bls.n	800598c <HAL_RCC_OscConfig+0x450>
        {
          return HAL_TIMEOUT;
 8005988:	2303      	movs	r3, #3
 800598a:	e16c      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800598c:	f7ff fb46 	bl	800501c <LL_PWR_IsEnabledBkUpAccess>
 8005990:	4603      	mov	r3, r0
 8005992:	2b00      	cmp	r3, #0
 8005994:	d0f1      	beq.n	800597a <HAL_RCC_OscConfig+0x43e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	68db      	ldr	r3, [r3, #12]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d07b      	beq.n	8005a96 <HAL_RCC_OscConfig+0x55a>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	2b85      	cmp	r3, #133	@ 0x85
 80059a4:	d003      	beq.n	80059ae <HAL_RCC_OscConfig+0x472>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	68db      	ldr	r3, [r3, #12]
 80059aa:	2b05      	cmp	r3, #5
 80059ac:	d109      	bne.n	80059c2 <HAL_RCC_OscConfig+0x486>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80059ae:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059b6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059ba:	f043 0304 	orr.w	r3, r3, #4
 80059be:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059c2:	f7fc f98d 	bl	8001ce0 <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80059c8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80059dc:	e00a      	b.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80059de:	f7fc f97f 	bl	8001ce0 <HAL_GetTick>
 80059e2:	4602      	mov	r2, r0
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	1ad3      	subs	r3, r2, r3
 80059e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d901      	bls.n	80059f4 <HAL_RCC_OscConfig+0x4b8>
        {
          return HAL_TIMEOUT;
 80059f0:	2303      	movs	r3, #3
 80059f2:	e138      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() == 0U)
 80059f4:	f7ff fbbf 	bl	8005176 <LL_RCC_LSE_IsReady>
 80059f8:	4603      	mov	r3, r0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d0ef      	beq.n	80059de <HAL_RCC_OscConfig+0x4a2>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	2b81      	cmp	r3, #129	@ 0x81
 8005a04:	d003      	beq.n	8005a0e <HAL_RCC_OscConfig+0x4d2>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	68db      	ldr	r3, [r3, #12]
 8005a0a:	2b85      	cmp	r3, #133	@ 0x85
 8005a0c:	d121      	bne.n	8005a52 <HAL_RCC_OscConfig+0x516>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a0e:	f7fc f967 	bl	8001ce0 <HAL_GetTick>
 8005a12:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a1c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a24:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a28:	e00a      	b.n	8005a40 <HAL_RCC_OscConfig+0x504>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a2a:	f7fc f959 	bl	8001ce0 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCC_OscConfig+0x504>
          {
            return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e112      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005a40:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a48:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d0ec      	beq.n	8005a2a <HAL_RCC_OscConfig+0x4ee>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8005a50:	e060      	b.n	8005b14 <HAL_RCC_OscConfig+0x5d8>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a52:	f7fc f945 	bl	8001ce0 <HAL_GetTick>
 8005a56:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a58:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a60:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a6c:	e00a      	b.n	8005a84 <HAL_RCC_OscConfig+0x548>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a6e:	f7fc f937 	bl	8001ce0 <HAL_GetTick>
 8005a72:	4602      	mov	r2, r0
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	1ad3      	subs	r3, r2, r3
 8005a78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d901      	bls.n	8005a84 <HAL_RCC_OscConfig+0x548>
          {
            return HAL_TIMEOUT;
 8005a80:	2303      	movs	r3, #3
 8005a82:	e0f0      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005a84:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1ec      	bne.n	8005a6e <HAL_RCC_OscConfig+0x532>
 8005a94:	e03e      	b.n	8005b14 <HAL_RCC_OscConfig+0x5d8>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a96:	f7fc f923 	bl	8001ce0 <HAL_GetTick>
 8005a9a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005a9c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005aa4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005aac:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ab0:	e00a      	b.n	8005ac8 <HAL_RCC_OscConfig+0x58c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ab2:	f7fc f915 	bl	8001ce0 <HAL_GetTick>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	1ad3      	subs	r3, r2, r3
 8005abc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d901      	bls.n	8005ac8 <HAL_RCC_OscConfig+0x58c>
        {
          return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e0ce      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ac8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ad0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d1ec      	bne.n	8005ab2 <HAL_RCC_OscConfig+0x576>
        }
      }

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ad8:	f7fc f902 	bl	8001ce0 <HAL_GetTick>
 8005adc:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005ade:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ae6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005aea:	f023 0301 	bic.w	r3, r3, #1
 8005aee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8005af2:	e00a      	b.n	8005b0a <HAL_RCC_OscConfig+0x5ce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005af4:	f7fc f8f4 	bl	8001ce0 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	697b      	ldr	r3, [r7, #20]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0x5ce>
        {
          return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e0ad      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      while (LL_RCC_LSE_IsReady() != 0U)
 8005b0a:	f7ff fb34 	bl	8005176 <LL_RCC_LSE_IsReady>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d1ef      	bne.n	8005af4 <HAL_RCC_OscConfig+0x5b8>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80a3 	beq.w	8005c64 <HAL_RCC_OscConfig+0x728>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b1e:	69fb      	ldr	r3, [r7, #28]
 8005b20:	2b0c      	cmp	r3, #12
 8005b22:	d076      	beq.n	8005c12 <HAL_RCC_OscConfig+0x6d6>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d14b      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x688>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b2c:	f7ff fc75 	bl	800541a <LL_RCC_PLL_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b30:	f7fc f8d6 	bl	8001ce0 <HAL_GetTick>
 8005b34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b36:	e008      	b.n	8005b4a <HAL_RCC_OscConfig+0x60e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b38:	f7fc f8d2 	bl	8001ce0 <HAL_GetTick>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	697b      	ldr	r3, [r7, #20]
 8005b40:	1ad3      	subs	r3, r2, r3
 8005b42:	2b0a      	cmp	r3, #10
 8005b44:	d901      	bls.n	8005b4a <HAL_RCC_OscConfig+0x60e>
          {
            return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e08d      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005b4a:	f7ff fc74 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1f1      	bne.n	8005b38 <HAL_RCC_OscConfig+0x5fc>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b54:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b58:	68da      	ldr	r2, [r3, #12]
 8005b5a:	4b45      	ldr	r3, [pc, #276]	@ (8005c70 <HAL_RCC_OscConfig+0x734>)
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	687a      	ldr	r2, [r7, #4]
 8005b60:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005b66:	4311      	orrs	r1, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8005b6c:	0212      	lsls	r2, r2, #8
 8005b6e:	4311      	orrs	r1, r2
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005b74:	4311      	orrs	r1, r2
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005b7a:	4311      	orrs	r1, r2
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8005b80:	430a      	orrs	r2, r1
 8005b82:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8005b86:	4313      	orrs	r3, r2
 8005b88:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b8a:	f7ff fc38 	bl	80053fe <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005b8e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005b98:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b9c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b9e:	f7fc f89f 	bl	8001ce0 <HAL_GetTick>
 8005ba2:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8005ba4:	e008      	b.n	8005bb8 <HAL_RCC_OscConfig+0x67c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005ba6:	f7fc f89b 	bl	8001ce0 <HAL_GetTick>
 8005baa:	4602      	mov	r2, r0
 8005bac:	697b      	ldr	r3, [r7, #20]
 8005bae:	1ad3      	subs	r3, r2, r3
 8005bb0:	2b0a      	cmp	r3, #10
 8005bb2:	d901      	bls.n	8005bb8 <HAL_RCC_OscConfig+0x67c>
          {
            return HAL_TIMEOUT;
 8005bb4:	2303      	movs	r3, #3
 8005bb6:	e056      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() == 0U)
 8005bb8:	f7ff fc3d 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f1      	beq.n	8005ba6 <HAL_RCC_OscConfig+0x66a>
 8005bc2:	e04f      	b.n	8005c64 <HAL_RCC_OscConfig+0x728>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005bc4:	f7ff fc29 	bl	800541a <LL_RCC_PLL_Disable>

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8005bc8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005bd2:	f023 0303 	bic.w	r3, r3, #3
 8005bd6:	60d3      	str	r3, [r2, #12]

        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_RNGCLK | RCC_PLL_ADCCLK);
 8005bd8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005bdc:	68db      	ldr	r3, [r3, #12]
 8005bde:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8005be2:	f023 5388 	bic.w	r3, r3, #285212672	@ 0x11000000
 8005be6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bea:	60d3      	str	r3, [r2, #12]


        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7fc f878 	bl	8001ce0 <HAL_GetTick>
 8005bf0:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8005bf2:	e008      	b.n	8005c06 <HAL_RCC_OscConfig+0x6ca>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf4:	f7fc f874 	bl	8001ce0 <HAL_GetTick>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	1ad3      	subs	r3, r2, r3
 8005bfe:	2b0a      	cmp	r3, #10
 8005c00:	d901      	bls.n	8005c06 <HAL_RCC_OscConfig+0x6ca>
          {
            return HAL_TIMEOUT;
 8005c02:	2303      	movs	r3, #3
 8005c04:	e02f      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        while (LL_RCC_PLL_IsReady() != 0U)
 8005c06:	f7ff fc16 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1f1      	bne.n	8005bf4 <HAL_RCC_OscConfig+0x6b8>
 8005c10:	e028      	b.n	8005c64 <HAL_RCC_OscConfig+0x728>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d101      	bne.n	8005c1e <HAL_RCC_OscConfig+0x6e2>
      {
        return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e023      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005c1e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8005c26:	69bb      	ldr	r3, [r7, #24]
 8005c28:	f003 0203 	and.w	r2, r3, #3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c30:	429a      	cmp	r2, r3
 8005c32:	d115      	bne.n	8005c60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d10e      	bne.n	8005c60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	429a      	cmp	r2, r3
 8005c50:	d106      	bne.n	8005c60 <HAL_RCC_OscConfig+0x724>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f003 4260 	and.w	r2, r3, #3758096384	@ 0xe0000000
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d001      	beq.n	8005c64 <HAL_RCC_OscConfig+0x728>
        {
          return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e000      	b.n	8005c66 <HAL_RCC_OscConfig+0x72a>
        }
      }
    }
  }
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3720      	adds	r7, #32
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	bd80      	pop	{r7, pc}
 8005c6e:	bf00      	nop
 8005c70:	11c1808c 	.word	0x11c1808c

08005c74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d101      	bne.n	8005c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c84:	2301      	movs	r3, #1
 8005c86:	e10f      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005c88:	4b89      	ldr	r3, [pc, #548]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0307 	and.w	r3, r3, #7
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d91b      	bls.n	8005cce <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c96:	4b86      	ldr	r3, [pc, #536]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f023 0207 	bic.w	r2, r3, #7
 8005c9e:	4984      	ldr	r1, [pc, #528]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ca6:	f7fc f81b 	bl	8001ce0 <HAL_GetTick>
 8005caa:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cac:	e008      	b.n	8005cc0 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005cae:	f7fc f817 	bl	8001ce0 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d901      	bls.n	8005cc0 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8005cbc:	2303      	movs	r3, #3
 8005cbe:	e0f3      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cc0:	4b7b      	ldr	r3, [pc, #492]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	683a      	ldr	r2, [r7, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d1ef      	bne.n	8005cae <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 0302 	and.w	r3, r3, #2
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d016      	beq.n	8005d08 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff fb10 	bl	8005304 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005ce4:	f7fb fffc 	bl	8001ce0 <HAL_GetTick>
 8005ce8:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cea:	e008      	b.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005cec:	f7fb fff8 	bl	8001ce0 <HAL_GetTick>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	1ad3      	subs	r3, r2, r3
 8005cf6:	2b02      	cmp	r3, #2
 8005cf8:	d901      	bls.n	8005cfe <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8005cfa:	2303      	movs	r3, #3
 8005cfc:	e0d4      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8005cfe:	f7ff fbd8 	bl	80054b2 <LL_RCC_IsActiveFlag_HPRE>
 8005d02:	4603      	mov	r3, r0
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d0f1      	beq.n	8005cec <HAL_RCC_ClockConfig+0x78>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d016      	beq.n	8005d42 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	695b      	ldr	r3, [r3, #20]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f7ff fb06 	bl	800532a <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d1e:	f7fb ffdf 	bl	8001ce0 <HAL_GetTick>
 8005d22:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d24:	e008      	b.n	8005d38 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d26:	f7fb ffdb 	bl	8001ce0 <HAL_GetTick>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	1ad3      	subs	r3, r2, r3
 8005d30:	2b02      	cmp	r3, #2
 8005d32:	d901      	bls.n	8005d38 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8005d34:	2303      	movs	r3, #3
 8005d36:	e0b7      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8005d38:	f7ff fbcc 	bl	80054d4 <LL_RCC_IsActiveFlag_SHDHPRE>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d0f1      	beq.n	8005d26 <HAL_RCC_ClockConfig+0xb2>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f003 0304 	and.w	r3, r3, #4
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d016      	beq.n	8005d7c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	68db      	ldr	r3, [r3, #12]
 8005d52:	4618      	mov	r0, r3
 8005d54:	f7ff faff 	bl	8005356 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d58:	f7fb ffc2 	bl	8001ce0 <HAL_GetTick>
 8005d5c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d5e:	e008      	b.n	8005d72 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d60:	f7fb ffbe 	bl	8001ce0 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1ad3      	subs	r3, r2, r3
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d901      	bls.n	8005d72 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e09a      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8005d72:	f7ff fbc1 	bl	80054f8 <LL_RCC_IsActiveFlag_PPRE1>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d0f1      	beq.n	8005d60 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f003 0308 	and.w	r3, r3, #8
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d017      	beq.n	8005db8 <HAL_RCC_ClockConfig+0x144>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	00db      	lsls	r3, r3, #3
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f7ff faf4 	bl	800537c <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8005d94:	f7fb ffa4 	bl	8001ce0 <HAL_GetTick>
 8005d98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005d9a:	e008      	b.n	8005dae <HAL_RCC_ClockConfig+0x13a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8005d9c:	f7fb ffa0 	bl	8001ce0 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_ClockConfig+0x13a>
      {
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e07c      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8005dae:	f7ff fbb4 	bl	800551a <LL_RCC_IsActiveFlag_PPRE2>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0f1      	beq.n	8005d9c <HAL_RCC_ClockConfig+0x128>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f003 0301 	and.w	r3, r3, #1
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d043      	beq.n	8005e4c <HAL_RCC_ClockConfig+0x1d8>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b02      	cmp	r3, #2
 8005dca:	d106      	bne.n	8005dda <HAL_RCC_ClockConfig+0x166>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8005dcc:	f7ff f981 	bl	80050d2 <LL_RCC_HSE_IsReady>
 8005dd0:	4603      	mov	r3, r0
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d11e      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e066      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	685b      	ldr	r3, [r3, #4]
 8005dde:	2b03      	cmp	r3, #3
 8005de0:	d106      	bne.n	8005df0 <HAL_RCC_ClockConfig+0x17c>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8005de2:	f7ff fb28 	bl	8005436 <LL_RCC_PLL_IsReady>
 8005de6:	4603      	mov	r3, r0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d113      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e05b      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	685b      	ldr	r3, [r3, #4]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d106      	bne.n	8005e06 <HAL_RCC_ClockConfig+0x192>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8005df8:	f7ff fa1b 	bl	8005232 <LL_RCC_MSI_IsReady>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d108      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e050      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8005e06:	f7ff f991 	bl	800512c <LL_RCC_HSI_IsReady>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d101      	bne.n	8005e14 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005e10:	2301      	movs	r3, #1
 8005e12:	e049      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	f7ff fa55 	bl	80052c8 <LL_RCC_SetSysClkSource>

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e1e:	f7fb ff5f 	bl	8001ce0 <HAL_GetTick>
 8005e22:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e24:	e00a      	b.n	8005e3c <HAL_RCC_ClockConfig+0x1c8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e26:	f7fb ff5b 	bl	8001ce0 <HAL_GetTick>
 8005e2a:	4602      	mov	r2, r0
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	1ad3      	subs	r3, r2, r3
 8005e30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d901      	bls.n	8005e3c <HAL_RCC_ClockConfig+0x1c8>
      {
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e035      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e3c:	f7ff fa57 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005e40:	4602      	mov	r2, r0
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d1ec      	bne.n	8005e26 <HAL_RCC_ClockConfig+0x1b2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e4c:	4b18      	ldr	r3, [pc, #96]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0307 	and.w	r3, r3, #7
 8005e54:	683a      	ldr	r2, [r7, #0]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d21b      	bcs.n	8005e92 <HAL_RCC_ClockConfig+0x21e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e5a:	4b15      	ldr	r3, [pc, #84]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f023 0207 	bic.w	r2, r3, #7
 8005e62:	4913      	ldr	r1, [pc, #76]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	4313      	orrs	r3, r2
 8005e68:	600b      	str	r3, [r1, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e6a:	f7fb ff39 	bl	8001ce0 <HAL_GetTick>
 8005e6e:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e70:	e008      	b.n	8005e84 <HAL_RCC_ClockConfig+0x210>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8005e72:	f7fb ff35 	bl	8001ce0 <HAL_GetTick>
 8005e76:	4602      	mov	r2, r0
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	1ad3      	subs	r3, r2, r3
 8005e7c:	2b02      	cmp	r3, #2
 8005e7e:	d901      	bls.n	8005e84 <HAL_RCC_ClockConfig+0x210>
      {
        return HAL_TIMEOUT;
 8005e80:	2303      	movs	r3, #3
 8005e82:	e011      	b.n	8005ea8 <HAL_RCC_ClockConfig+0x234>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e84:	4b0a      	ldr	r3, [pc, #40]	@ (8005eb0 <HAL_RCC_ClockConfig+0x23c>)
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0307 	and.w	r3, r3, #7
 8005e8c:	683a      	ldr	r2, [r7, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d1ef      	bne.n	8005e72 <HAL_RCC_ClockConfig+0x1fe>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8005e92:	f000 f8b3 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4a06      	ldr	r2, [pc, #24]	@ (8005eb4 <HAL_RCC_ClockConfig+0x240>)
 8005e9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e9c:	4b06      	ldr	r3, [pc, #24]	@ (8005eb8 <HAL_RCC_ClockConfig+0x244>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fb ff13 	bl	8001ccc <HAL_InitTick>
 8005ea6:	4603      	mov	r3, r0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}
 8005eb0:	58004000 	.word	0x58004000
 8005eb4:	20000000 	.word	0x20000000
 8005eb8:	20000004 	.word	0x20000004

08005ebc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005ebc:	b590      	push	{r4, r7, lr}
 8005ebe:	b087      	sub	sp, #28
 8005ec0:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005eca:	f7ff fa10 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005ece:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005ed0:	f7ff fae4 	bl	800549c <LL_RCC_PLL_GetMainSource>
 8005ed4:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d005      	beq.n	8005ee8 <HAL_RCC_GetSysClockFreq+0x2c>
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	2b0c      	cmp	r3, #12
 8005ee0:	d139      	bne.n	8005f56 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d136      	bne.n	8005f56 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /*Retrieve MSI frequency range in HZ*/
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8005ee8:	f7ff f9b3 	bl	8005252 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005eec:	4603      	mov	r3, r0
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d115      	bne.n	8005f1e <HAL_RCC_GetSysClockFreq+0x62>
 8005ef2:	f7ff f9ae 	bl	8005252 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d106      	bne.n	8005f0a <HAL_RCC_GetSysClockFreq+0x4e>
 8005efc:	f7ff f9b9 	bl	8005272 <LL_RCC_MSI_GetRange>
 8005f00:	4603      	mov	r3, r0
 8005f02:	0a1b      	lsrs	r3, r3, #8
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	e005      	b.n	8005f16 <HAL_RCC_GetSysClockFreq+0x5a>
 8005f0a:	f7ff f9bd 	bl	8005288 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	0a1b      	lsrs	r3, r3, #8
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	4a36      	ldr	r2, [pc, #216]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f1c:	e014      	b.n	8005f48 <HAL_RCC_GetSysClockFreq+0x8c>
 8005f1e:	f7ff f998 	bl	8005252 <LL_RCC_MSI_IsEnabledRangeSelect>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d106      	bne.n	8005f36 <HAL_RCC_GetSysClockFreq+0x7a>
 8005f28:	f7ff f9a3 	bl	8005272 <LL_RCC_MSI_GetRange>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	091b      	lsrs	r3, r3, #4
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	e005      	b.n	8005f42 <HAL_RCC_GetSysClockFreq+0x86>
 8005f36:	f7ff f9a7 	bl	8005288 <LL_RCC_MSI_GetRangeAfterStandby>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 030f 	and.w	r3, r3, #15
 8005f42:	4a2b      	ldr	r2, [pc, #172]	@ (8005ff0 <HAL_RCC_GetSysClockFreq+0x134>)
 8005f44:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f48:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d115      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005f54:	e012      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	2b04      	cmp	r3, #4
 8005f5a:	d102      	bne.n	8005f62 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005f5c:	4b25      	ldr	r3, [pc, #148]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f5e:	617b      	str	r3, [r7, #20]
 8005f60:	e00c      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b08      	cmp	r3, #8
 8005f66:	d109      	bne.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005f68:	f7ff f886 	bl	8005078 <LL_RCC_HSE_IsEnabledDiv2>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	2b01      	cmp	r3, #1
 8005f70:	d102      	bne.n	8005f78 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8005f72:	4b20      	ldr	r3, [pc, #128]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f74:	617b      	str	r3, [r7, #20]
 8005f76:	e001      	b.n	8005f7c <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8005f78:	4b1f      	ldr	r3, [pc, #124]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005f7a:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f7c:	f7ff f9b7 	bl	80052ee <LL_RCC_GetSysClkSource>
 8005f80:	4603      	mov	r3, r0
 8005f82:	2b0c      	cmp	r3, #12
 8005f84:	d12f      	bne.n	8005fe6 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8005f86:	f7ff fa89 	bl	800549c <LL_RCC_PLL_GetMainSource>
 8005f8a:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2b02      	cmp	r3, #2
 8005f90:	d003      	beq.n	8005f9a <HAL_RCC_GetSysClockFreq+0xde>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d003      	beq.n	8005fa0 <HAL_RCC_GetSysClockFreq+0xe4>
 8005f98:	e00d      	b.n	8005fb6 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8005f9a:	4b16      	ldr	r3, [pc, #88]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005f9c:	60fb      	str	r3, [r7, #12]
        break;
 8005f9e:	e00d      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8005fa0:	f7ff f86a 	bl	8005078 <LL_RCC_HSE_IsEnabledDiv2>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d102      	bne.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8005faa:	4b12      	ldr	r3, [pc, #72]	@ (8005ff4 <HAL_RCC_GetSysClockFreq+0x138>)
 8005fac:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8005fae:	e005      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8005fb0:	4b11      	ldr	r3, [pc, #68]	@ (8005ff8 <HAL_RCC_GetSysClockFreq+0x13c>)
 8005fb2:	60fb      	str	r3, [r7, #12]
        break;
 8005fb4:	e002      	b.n	8005fbc <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	60fb      	str	r3, [r7, #12]
        break;
 8005fba:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8005fbc:	f7ff fa4c 	bl	8005458 <LL_RCC_PLL_GetN>
 8005fc0:	4602      	mov	r2, r0
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	fb03 f402 	mul.w	r4, r3, r2
 8005fc8:	f7ff fa5d 	bl	8005486 <LL_RCC_PLL_GetDivider>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	091b      	lsrs	r3, r3, #4
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	fbb4 f4f3 	udiv	r4, r4, r3
 8005fd6:	f7ff fa4b 	bl	8005470 <LL_RCC_PLL_GetR>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	0f5b      	lsrs	r3, r3, #29
 8005fde:	3301      	adds	r3, #1
 8005fe0:	fbb4 f3f3 	udiv	r3, r4, r3
 8005fe4:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8005fe6:	697b      	ldr	r3, [r7, #20]
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	371c      	adds	r7, #28
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd90      	pop	{r4, r7, pc}
 8005ff0:	0801c100 	.word	0x0801c100
 8005ff4:	00f42400 	.word	0x00f42400
 8005ff8:	01e84800 	.word	0x01e84800

08005ffc <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005ffc:	b598      	push	{r3, r4, r7, lr}
 8005ffe:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8006000:	f7ff ff5c 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8006004:	4604      	mov	r4, r0
 8006006:	f7ff f9cc 	bl	80053a2 <LL_RCC_GetAHBPrescaler>
 800600a:	4603      	mov	r3, r0
 800600c:	091b      	lsrs	r3, r3, #4
 800600e:	f003 030f 	and.w	r3, r3, #15
 8006012:	4a03      	ldr	r2, [pc, #12]	@ (8006020 <HAL_RCC_GetHCLKFreq+0x24>)
 8006014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006018:	fbb4 f3f3 	udiv	r3, r4, r3
}
 800601c:	4618      	mov	r0, r3
 800601e:	bd98      	pop	{r3, r4, r7, pc}
 8006020:	0801c0a0 	.word	0x0801c0a0

08006024 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006024:	b598      	push	{r3, r4, r7, lr}
 8006026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8006028:	f7ff ffe8 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 800602c:	4604      	mov	r4, r0
 800602e:	f7ff f9d0 	bl	80053d2 <LL_RCC_GetAPB1Prescaler>
 8006032:	4603      	mov	r3, r0
 8006034:	0a1b      	lsrs	r3, r3, #8
 8006036:	4a03      	ldr	r2, [pc, #12]	@ (8006044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006038:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800603c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006040:	4618      	mov	r0, r3
 8006042:	bd98      	pop	{r3, r4, r7, pc}
 8006044:	0801c0e0 	.word	0x0801c0e0

08006048 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006048:	b598      	push	{r3, r4, r7, lr}
 800604a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 800604c:	f7ff ffd6 	bl	8005ffc <HAL_RCC_GetHCLKFreq>
 8006050:	4604      	mov	r4, r0
 8006052:	f7ff f9c9 	bl	80053e8 <LL_RCC_GetAPB2Prescaler>
 8006056:	4603      	mov	r3, r0
 8006058:	0adb      	lsrs	r3, r3, #11
 800605a:	4a03      	ldr	r2, [pc, #12]	@ (8006068 <HAL_RCC_GetPCLK2Freq+0x20>)
 800605c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006060:	fa24 f303 	lsr.w	r3, r4, r3
}
 8006064:	4618      	mov	r0, r3
 8006066:	bd98      	pop	{r3, r4, r7, pc}
 8006068:	0801c0e0 	.word	0x0801c0e0

0800606c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 800606c:	b590      	push	{r4, r7, lr}
 800606e:	b085      	sub	sp, #20
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	091b      	lsrs	r3, r3, #4
 8006078:	f003 030f 	and.w	r3, r3, #15
 800607c:	4a10      	ldr	r2, [pc, #64]	@ (80060c0 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800607e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006082:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8006084:	f7ff f998 	bl	80053b8 <LL_RCC_GetAHB3Prescaler>
 8006088:	4603      	mov	r3, r0
 800608a:	091b      	lsrs	r3, r3, #4
 800608c:	f003 030f 	and.w	r3, r3, #15
 8006090:	4a0c      	ldr	r2, [pc, #48]	@ (80060c4 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8006092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006096:	68fa      	ldr	r2, [r7, #12]
 8006098:	fbb2 f3f3 	udiv	r3, r2, r3
 800609c:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	4a09      	ldr	r2, [pc, #36]	@ (80060c8 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80060a2:	fba2 2303 	umull	r2, r3, r2, r3
 80060a6:	0c9c      	lsrs	r4, r3, #18
 80060a8:	f7fe ff3e 	bl	8004f28 <HAL_PWREx_GetVoltageRange>
 80060ac:	4603      	mov	r3, r0
 80060ae:	4619      	mov	r1, r3
 80060b0:	4620      	mov	r0, r4
 80060b2:	f000 f80b 	bl	80060cc <RCC_SetFlashLatency>
 80060b6:	4603      	mov	r3, r0
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	3714      	adds	r7, #20
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd90      	pop	{r4, r7, pc}
 80060c0:	0801c100 	.word	0x0801c100
 80060c4:	0801c0a0 	.word	0x0801c0a0
 80060c8:	431bde83 	.word	0x431bde83

080060cc <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b08e      	sub	sp, #56	@ 0x38
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80060d6:	4a3a      	ldr	r2, [pc, #232]	@ (80061c0 <RCC_SetFlashLatency+0xf4>)
 80060d8:	f107 0320 	add.w	r3, r7, #32
 80060dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060e0:	6018      	str	r0, [r3, #0]
 80060e2:	3304      	adds	r3, #4
 80060e4:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80060e6:	4a37      	ldr	r2, [pc, #220]	@ (80061c4 <RCC_SetFlashLatency+0xf8>)
 80060e8:	f107 0318 	add.w	r3, r7, #24
 80060ec:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060f0:	6018      	str	r0, [r3, #0]
 80060f2:	3304      	adds	r3, #4
 80060f4:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80060f6:	4a34      	ldr	r2, [pc, #208]	@ (80061c8 <RCC_SetFlashLatency+0xfc>)
 80060f8:	f107 030c 	add.w	r3, r7, #12
 80060fc:	ca07      	ldmia	r2, {r0, r1, r2}
 80060fe:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8006102:	2300      	movs	r3, #0
 8006104:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800610c:	d11b      	bne.n	8006146 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800610e:	2300      	movs	r3, #0
 8006110:	633b      	str	r3, [r7, #48]	@ 0x30
 8006112:	e014      	b.n	800613e <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8006114:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006116:	005b      	lsls	r3, r3, #1
 8006118:	3338      	adds	r3, #56	@ 0x38
 800611a:	443b      	add	r3, r7
 800611c:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8006120:	461a      	mov	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4293      	cmp	r3, r2
 8006126:	d807      	bhi.n	8006138 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	3338      	adds	r3, #56	@ 0x38
 800612e:	443b      	add	r3, r7
 8006130:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8006134:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 8006136:	e021      	b.n	800617c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8006138:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800613a:	3301      	adds	r3, #1
 800613c:	633b      	str	r3, [r7, #48]	@ 0x30
 800613e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006140:	2b02      	cmp	r3, #2
 8006142:	d9e7      	bls.n	8006114 <RCC_SetFlashLatency+0x48>
 8006144:	e01a      	b.n	800617c <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006146:	2300      	movs	r3, #0
 8006148:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800614a:	e014      	b.n	8006176 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 800614c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614e:	005b      	lsls	r3, r3, #1
 8006150:	3338      	adds	r3, #56	@ 0x38
 8006152:	443b      	add	r3, r7
 8006154:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8006158:	461a      	mov	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4293      	cmp	r3, r2
 800615e:	d807      	bhi.n	8006170 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8006160:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	3338      	adds	r3, #56	@ 0x38
 8006166:	443b      	add	r3, r7
 8006168:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800616c:	637b      	str	r3, [r7, #52]	@ 0x34
        break;
 800616e:	e005      	b.n	800617c <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8006170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006172:	3301      	adds	r3, #1
 8006174:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006178:	2b02      	cmp	r3, #2
 800617a:	d9e7      	bls.n	800614c <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800617c:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <RCC_SetFlashLatency+0x100>)
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f023 0207 	bic.w	r2, r3, #7
 8006184:	4911      	ldr	r1, [pc, #68]	@ (80061cc <RCC_SetFlashLatency+0x100>)
 8006186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006188:	4313      	orrs	r3, r2
 800618a:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800618c:	f7fb fda8 	bl	8001ce0 <HAL_GetTick>
 8006190:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8006192:	e008      	b.n	80061a6 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8006194:	f7fb fda4 	bl	8001ce0 <HAL_GetTick>
 8006198:	4602      	mov	r2, r0
 800619a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d901      	bls.n	80061a6 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80061a2:	2303      	movs	r3, #3
 80061a4:	e007      	b.n	80061b6 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80061a6:	4b09      	ldr	r3, [pc, #36]	@ (80061cc <RCC_SetFlashLatency+0x100>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0307 	and.w	r3, r3, #7
 80061ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d1ef      	bne.n	8006194 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3738      	adds	r7, #56	@ 0x38
 80061ba:	46bd      	mov	sp, r7
 80061bc:	bd80      	pop	{r7, pc}
 80061be:	bf00      	nop
 80061c0:	0801b76c 	.word	0x0801b76c
 80061c4:	0801b774 	.word	0x0801b774
 80061c8:	0801b77c 	.word	0x0801b77c
 80061cc:	58004000 	.word	0x58004000

080061d0 <LL_RCC_LSE_IsReady>:
{
 80061d0:	b480      	push	{r7}
 80061d2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80061d4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061dc:	f003 0302 	and.w	r3, r3, #2
 80061e0:	2b02      	cmp	r3, #2
 80061e2:	d101      	bne.n	80061e8 <LL_RCC_LSE_IsReady+0x18>
 80061e4:	2301      	movs	r3, #1
 80061e6:	e000      	b.n	80061ea <LL_RCC_LSE_IsReady+0x1a>
 80061e8:	2300      	movs	r3, #0
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bc80      	pop	{r7}
 80061f0:	4770      	bx	lr

080061f2 <LL_RCC_SetUSARTClockSource>:
{
 80061f2:	b480      	push	{r7}
 80061f4:	b083      	sub	sp, #12
 80061f6:	af00      	add	r7, sp, #0
 80061f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80061fa:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80061fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	0c1b      	lsrs	r3, r3, #16
 8006206:	43db      	mvns	r3, r3
 8006208:	401a      	ands	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	b29b      	uxth	r3, r3
 800620e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006212:	4313      	orrs	r3, r2
 8006214:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006218:	bf00      	nop
 800621a:	370c      	adds	r7, #12
 800621c:	46bd      	mov	sp, r7
 800621e:	bc80      	pop	{r7}
 8006220:	4770      	bx	lr

08006222 <LL_RCC_SetI2SClockSource>:
{
 8006222:	b480      	push	{r7}
 8006224:	b083      	sub	sp, #12
 8006226:	af00      	add	r7, sp, #0
 8006228:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800622a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800622e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006232:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006236:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4313      	orrs	r3, r2
 800623e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006242:	bf00      	nop
 8006244:	370c      	adds	r7, #12
 8006246:	46bd      	mov	sp, r7
 8006248:	bc80      	pop	{r7}
 800624a:	4770      	bx	lr

0800624c <LL_RCC_SetLPUARTClockSource>:
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8006254:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006258:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800625c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8006260:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	4313      	orrs	r3, r2
 8006268:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800626c:	bf00      	nop
 800626e:	370c      	adds	r7, #12
 8006270:	46bd      	mov	sp, r7
 8006272:	bc80      	pop	{r7}
 8006274:	4770      	bx	lr

08006276 <LL_RCC_SetI2CClockSource>:
{
 8006276:	b480      	push	{r7}
 8006278:	b083      	sub	sp, #12
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800627e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006282:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	091b      	lsrs	r3, r3, #4
 800628a:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800628e:	43db      	mvns	r3, r3
 8006290:	401a      	ands	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	011b      	lsls	r3, r3, #4
 8006296:	f403 237f 	and.w	r3, r3, #1044480	@ 0xff000
 800629a:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800629e:	4313      	orrs	r3, r2
 80062a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	bc80      	pop	{r7}
 80062ac:	4770      	bx	lr

080062ae <LL_RCC_SetLPTIMClockSource>:
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80062b6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	0c1b      	lsrs	r3, r3, #16
 80062c2:	041b      	lsls	r3, r3, #16
 80062c4:	43db      	mvns	r3, r3
 80062c6:	401a      	ands	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	041b      	lsls	r3, r3, #16
 80062cc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062d0:	4313      	orrs	r3, r2
 80062d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80062d6:	bf00      	nop
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	bc80      	pop	{r7}
 80062de:	4770      	bx	lr

080062e0 <LL_RCC_SetRNGClockSource>:
{
 80062e0:	b480      	push	{r7}
 80062e2:	b083      	sub	sp, #12
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80062e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80062ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062f0:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80062f4:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 8006300:	bf00      	nop
 8006302:	370c      	adds	r7, #12
 8006304:	46bd      	mov	sp, r7
 8006306:	bc80      	pop	{r7}
 8006308:	4770      	bx	lr

0800630a <LL_RCC_SetADCClockSource>:
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8006312:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800631a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800631e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4313      	orrs	r3, r2
 8006326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <LL_RCC_SetRTCClockSource>:
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 800633c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006340:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006344:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006348:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	4313      	orrs	r3, r2
 8006350:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	bc80      	pop	{r7}
 800635c:	4770      	bx	lr

0800635e <LL_RCC_GetRTCClockSource>:
{
 800635e:	b480      	push	{r7}
 8006360:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8006362:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006366:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800636a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
}
 800636e:	4618      	mov	r0, r3
 8006370:	46bd      	mov	sp, r7
 8006372:	bc80      	pop	{r7}
 8006374:	4770      	bx	lr

08006376 <LL_RCC_ForceBackupDomainReset>:
{
 8006376:	b480      	push	{r7}
 8006378:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800637a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800637e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800638a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 800638e:	bf00      	nop
 8006390:	46bd      	mov	sp, r7
 8006392:	bc80      	pop	{r7}
 8006394:	4770      	bx	lr

08006396 <LL_RCC_ReleaseBackupDomainReset>:
{
 8006396:	b480      	push	{r7}
 8006398:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800639a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800639e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80063a2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80063a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 80063ae:	bf00      	nop
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bc80      	pop	{r7}
 80063b4:	4770      	bx	lr
	...

080063b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80063c0:	2300      	movs	r3, #0
 80063c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80063c4:	2300      	movs	r3, #0
 80063c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80063c8:	2300      	movs	r3, #0
 80063ca:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d058      	beq.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80063d8:	f7fe fd64 	bl	8004ea4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80063dc:	f7fb fc80 	bl	8001ce0 <HAL_GetTick>
 80063e0:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063e2:	e009      	b.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80063e4:	f7fb fc7c 	bl	8001ce0 <HAL_GetTick>
 80063e8:	4602      	mov	r2, r0
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	1ad3      	subs	r3, r2, r3
 80063ee:	2b02      	cmp	r3, #2
 80063f0:	d902      	bls.n	80063f8 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80063f2:	2303      	movs	r3, #3
 80063f4:	74fb      	strb	r3, [r7, #19]
        break;
 80063f6:	e006      	b.n	8006406 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80063f8:	4b7b      	ldr	r3, [pc, #492]	@ (80065e8 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006404:	d1ee      	bne.n	80063e4 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8006406:	7cfb      	ldrb	r3, [r7, #19]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d13c      	bne.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 800640c:	f7ff ffa7 	bl	800635e <LL_RCC_GetRTCClockSource>
 8006410:	4602      	mov	r2, r0
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006416:	429a      	cmp	r2, r3
 8006418:	d00f      	beq.n	800643a <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800641a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800641e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006422:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006426:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006428:	f7ff ffa5 	bl	8006376 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 800642c:	f7ff ffb3 	bl	8006396 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006430:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0302 	and.w	r3, r3, #2
 8006440:	2b00      	cmp	r3, #0
 8006442:	d014      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006444:	f7fb fc4c 	bl	8001ce0 <HAL_GetTick>
 8006448:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800644a:	e00b      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800644c:	f7fb fc48 	bl	8001ce0 <HAL_GetTick>
 8006450:	4602      	mov	r2, r0
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	1ad3      	subs	r3, r2, r3
 8006456:	f241 3288 	movw	r2, #5000	@ 0x1388
 800645a:	4293      	cmp	r3, r2
 800645c:	d902      	bls.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	74fb      	strb	r3, [r7, #19]
            break;
 8006462:	e004      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8006464:	f7ff feb4 	bl	80061d0 <LL_RCC_LSE_IsReady>
 8006468:	4603      	mov	r3, r0
 800646a:	2b01      	cmp	r3, #1
 800646c:	d1ee      	bne.n	800644c <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800646e:	7cfb      	ldrb	r3, [r7, #19]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d105      	bne.n	8006480 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff ff5b 	bl	8006334 <LL_RCC_SetRTCClockSource>
 800647e:	e004      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006480:	7cfb      	ldrb	r3, [r7, #19]
 8006482:	74bb      	strb	r3, [r7, #18]
 8006484:	e001      	b.n	800648a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006486:	7cfb      	ldrb	r3, [r7, #19]
 8006488:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	2b00      	cmp	r3, #0
 8006494:	d004      	beq.n	80064a0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4618      	mov	r0, r3
 800649c:	f7ff fea9 	bl	80061f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f003 0302 	and.w	r3, r3, #2
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d004      	beq.n	80064b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	4618      	mov	r0, r3
 80064b2:	f7ff fe9e 	bl	80061f2 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d004      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	4618      	mov	r0, r3
 80064c8:	f7ff fec0 	bl	800624c <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d004      	beq.n	80064e2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6a1b      	ldr	r3, [r3, #32]
 80064dc:	4618      	mov	r0, r3
 80064de:	f7ff fee6 	bl	80062ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d004      	beq.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064f2:	4618      	mov	r0, r3
 80064f4:	f7ff fedb 	bl	80062ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006500:	2b00      	cmp	r3, #0
 8006502:	d004      	beq.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006508:	4618      	mov	r0, r3
 800650a:	f7ff fed0 	bl	80062ae <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006516:	2b00      	cmp	r3, #0
 8006518:	d004      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	695b      	ldr	r3, [r3, #20]
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff fea9 	bl	8006276 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800652c:	2b00      	cmp	r3, #0
 800652e:	d004      	beq.n	800653a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	699b      	ldr	r3, [r3, #24]
 8006534:	4618      	mov	r0, r3
 8006536:	f7ff fe9e 	bl	8006276 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006542:	2b00      	cmp	r3, #0
 8006544:	d004      	beq.n	8006550 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	69db      	ldr	r3, [r3, #28]
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff fe93 	bl	8006276 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0310 	and.w	r3, r3, #16
 8006558:	2b00      	cmp	r3, #0
 800655a:	d011      	beq.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	4618      	mov	r0, r3
 8006562:	f7ff fe5e 	bl	8006222 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800656e:	d107      	bne.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8006570:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006574:	68db      	ldr	r3, [r3, #12]
 8006576:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800657a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800657e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d010      	beq.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006590:	4618      	mov	r0, r3
 8006592:	f7ff fea5 	bl	80062e0 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659a:	2b00      	cmp	r3, #0
 800659c:	d107      	bne.n	80065ae <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800659e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065a2:	68db      	ldr	r3, [r3, #12]
 80065a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80065ac:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d011      	beq.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065be:	4618      	mov	r0, r3
 80065c0:	f7ff fea3 	bl	800630a <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065cc:	d107      	bne.n	80065de <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80065ce:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80065d2:	68db      	ldr	r3, [r3, #12]
 80065d4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80065dc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80065de:	7cbb      	ldrb	r3, [r7, #18]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}
 80065e8:	58000400 	.word	0x58000400

080065ec <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d068      	beq.n	80066d0 <HAL_RTC_Init+0xe4>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b00      	cmp	r3, #0
 8006608:	d106      	bne.n	8006618 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fb f8b2 	bl	800177c <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	2202      	movs	r2, #2
 800661c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006620:	4b2e      	ldr	r3, [pc, #184]	@ (80066dc <HAL_RTC_Init+0xf0>)
 8006622:	22ca      	movs	r2, #202	@ 0xca
 8006624:	625a      	str	r2, [r3, #36]	@ 0x24
 8006626:	4b2d      	ldr	r3, [pc, #180]	@ (80066dc <HAL_RTC_Init+0xf0>)
 8006628:	2253      	movs	r2, #83	@ 0x53
 800662a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 fa0f 	bl	8006a50 <RTC_EnterInitMode>
 8006632:	4603      	mov	r3, r0
 8006634:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 8006636:	7bfb      	ldrb	r3, [r7, #15]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d13f      	bne.n	80066bc <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800663c:	4b27      	ldr	r3, [pc, #156]	@ (80066dc <HAL_RTC_Init+0xf0>)
 800663e:	699b      	ldr	r3, [r3, #24]
 8006640:	4a26      	ldr	r2, [pc, #152]	@ (80066dc <HAL_RTC_Init+0xf0>)
 8006642:	f023 638e 	bic.w	r3, r3, #74448896	@ 0x4700000
 8006646:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800664a:	6193      	str	r3, [r2, #24]
      /* Set RTC_CR register */
      SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800664c:	4b23      	ldr	r3, [pc, #140]	@ (80066dc <HAL_RTC_Init+0xf0>)
 800664e:	699a      	ldr	r2, [r3, #24]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6859      	ldr	r1, [r3, #4]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	4319      	orrs	r1, r3
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	699b      	ldr	r3, [r3, #24]
 800665e:	430b      	orrs	r3, r1
 8006660:	491e      	ldr	r1, [pc, #120]	@ (80066dc <HAL_RTC_Init+0xf0>)
 8006662:	4313      	orrs	r3, r2
 8006664:	618b      	str	r3, [r1, #24]

      /* Configure the RTC PRER */
      WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	68da      	ldr	r2, [r3, #12]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	041b      	lsls	r3, r3, #16
 8006670:	491a      	ldr	r1, [pc, #104]	@ (80066dc <HAL_RTC_Init+0xf0>)
 8006672:	4313      	orrs	r3, r2
 8006674:	610b      	str	r3, [r1, #16]

      /* Configure the Binary mode */
      MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 8006676:	4b19      	ldr	r3, [pc, #100]	@ (80066dc <HAL_RTC_Init+0xf0>)
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006686:	430b      	orrs	r3, r1
 8006688:	4914      	ldr	r1, [pc, #80]	@ (80066dc <HAL_RTC_Init+0xf0>)
 800668a:	4313      	orrs	r3, r2
 800668c:	60cb      	str	r3, [r1, #12]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800668e:	6878      	ldr	r0, [r7, #4]
 8006690:	f000 fa12 	bl	8006ab8 <RTC_ExitInitMode>
 8006694:	4603      	mov	r3, r0
 8006696:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 8006698:	7bfb      	ldrb	r3, [r7, #15]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10e      	bne.n	80066bc <HAL_RTC_Init+0xd0>
      {
        MODIFY_REG(RTC->CR, \
 800669e:	4b0f      	ldr	r3, [pc, #60]	@ (80066dc <HAL_RTC_Init+0xf0>)
 80066a0:	699b      	ldr	r3, [r3, #24]
 80066a2:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a19      	ldr	r1, [r3, #32]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	69db      	ldr	r3, [r3, #28]
 80066ae:	4319      	orrs	r1, r3
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	695b      	ldr	r3, [r3, #20]
 80066b4:	430b      	orrs	r3, r1
 80066b6:	4909      	ldr	r1, [pc, #36]	@ (80066dc <HAL_RTC_Init+0xf0>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	618b      	str	r3, [r1, #24]
                   hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066bc:	4b07      	ldr	r3, [pc, #28]	@ (80066dc <HAL_RTC_Init+0xf0>)
 80066be:	22ff      	movs	r2, #255	@ 0xff
 80066c0:	625a      	str	r2, [r3, #36]	@ 0x24

    if (status == HAL_OK)
 80066c2:	7bfb      	ldrb	r3, [r7, #15]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d103      	bne.n	80066d0 <HAL_RTC_Init+0xe4>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2201      	movs	r2, #1
 80066cc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    }
  }

  return status;
 80066d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	3710      	adds	r7, #16
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd80      	pop	{r7, pc}
 80066da:	bf00      	nop
 80066dc:	40002800 	.word	0x40002800

080066e0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary format
  *             @arg RTC_FORMAT_BCD: BCD format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80066e0:	b590      	push	{r4, r7, lr}
 80066e2:	b087      	sub	sp, #28
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	60f8      	str	r0, [r7, #12]
 80066e8:	60b9      	str	r1, [r7, #8]
 80066ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80066ec:	2300      	movs	r3, #0
 80066ee:	617b      	str	r3, [r7, #20]
  uint32_t binaryMode;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d101      	bne.n	80066fe <HAL_RTC_SetAlarm_IT+0x1e>
 80066fa:	2302      	movs	r3, #2
 80066fc:	e0f3      	b.n	80068e6 <HAL_RTC_SetAlarm_IT+0x206>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	2201      	movs	r2, #1
 8006702:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2202      	movs	r2, #2
 800670a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    assert_param((sAlarm->AlarmSubSecondMask >> RTC_ALRMASSR_MASKSS_Pos) <= (8U + (READ_BIT(RTC->ICSR, RTC_ICSR_BCDU) >> RTC_ICSR_BCDU_Pos)));
  }
#endif

  /* Get Binary mode (32-bit free-running counter configuration) */
  binaryMode = READ_BIT(RTC->ICSR, RTC_ICSR_BIN);
 800670e:	4b78      	ldr	r3, [pc, #480]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006710:	68db      	ldr	r3, [r3, #12]
 8006712:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006716:	613b      	str	r3, [r7, #16]

  if (binaryMode != RTC_BINARY_ONLY)
 8006718:	693b      	ldr	r3, [r7, #16]
 800671a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800671e:	d06a      	beq.n	80067f6 <HAL_RTC_SetAlarm_IT+0x116>
  {
    if (Format == RTC_FORMAT_BIN)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d13a      	bne.n	800679c <HAL_RTC_SetAlarm_IT+0xbc>
    {
      if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 8006726:	4b72      	ldr	r3, [pc, #456]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006728:	699b      	ldr	r3, [r3, #24]
 800672a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_RTC_SetAlarm_IT+0x58>
        assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
        assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
      }
      else
      {
        sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sAlarm->AlarmTime.Hours));
      }
      assert_param(IS_RTC_MINUTES(sAlarm->AlarmTime.Minutes));
      assert_param(IS_RTC_SECONDS(sAlarm->AlarmTime.Seconds));

      if( sAlarm->AlarmMask != RTC_ALARMMASK_DATEWEEKDAY )
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
        }
      }

      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006740:	68bb      	ldr	r3, [r7, #8]
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	4618      	mov	r0, r3
 8006746:	f000 f9f5 	bl	8006b34 <RTC_ByteToBcd2>
 800674a:	4603      	mov	r3, r0
 800674c:	041c      	lsls	r4, r3, #16
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	785b      	ldrb	r3, [r3, #1]
 8006752:	4618      	mov	r0, r3
 8006754:	f000 f9ee 	bl	8006b34 <RTC_ByteToBcd2>
 8006758:	4603      	mov	r3, r0
 800675a:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 800675c:	431c      	orrs	r4, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 800675e:	68bb      	ldr	r3, [r7, #8]
 8006760:	789b      	ldrb	r3, [r3, #2]
 8006762:	4618      	mov	r0, r3
 8006764:	f000 f9e6 	bl	8006b34 <RTC_ByteToBcd2>
 8006768:	4603      	mov	r3, r0
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 800676a:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	78db      	ldrb	r3, [r3, #3]
 8006772:	059b      	lsls	r3, r3, #22
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 8006774:	ea42 0403 	orr.w	r4, r2, r3
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800677e:	4618      	mov	r0, r3
 8006780:	f000 f9d8 	bl	8006b34 <RTC_ByteToBcd2>
 8006784:	4603      	mov	r3, r0
 8006786:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 8006788:	ea44 0203 	orr.w	r2, r4, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800678c:	68bb      	ldr	r3, [r7, #8]
 800678e:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 8006790:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 8006792:	68bb      	ldr	r3, [r7, #8]
 8006794:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 8006796:	4313      	orrs	r3, r2
 8006798:	617b      	str	r3, [r7, #20]
 800679a:	e02c      	b.n	80067f6 <HAL_RTC_SetAlarm_IT+0x116>
    }
    else /* Format BCD */
    {
      if( sAlarm->AlarmMask != RTC_ALARMMASK_ALL )
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f1b3 3f80 	cmp.w	r3, #2155905152	@ 0x80808080
 80067a4:	d00d      	beq.n	80067c2 <HAL_RTC_SetAlarm_IT+0xe2>
      {
        if( sAlarm->AlarmMask != RTC_ALARMMASK_HOURS )
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	695b      	ldr	r3, [r3, #20]
 80067aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80067ae:	d008      	beq.n	80067c2 <HAL_RTC_SetAlarm_IT+0xe2>
        {
          if (READ_BIT(RTC->CR, RTC_CR_FMT) != 0U)
 80067b0:	4b4f      	ldr	r3, [pc, #316]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <HAL_RTC_SetAlarm_IT+0xe2>
            assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
            assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
          }
          else
          {
            sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	2200      	movs	r2, #0
 80067c0:	70da      	strb	r2, [r3, #3]
        {
          assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
        }
      }
#endif /* USE_FULL_ASSERT */
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	785b      	ldrb	r3, [r3, #1]
 80067cc:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067ce:	4313      	orrs	r3, r2
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067d0:	68ba      	ldr	r2, [r7, #8]
 80067d2:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sAlarm->AlarmTime.Minutes) << RTC_ALRMAR_MNU_Pos) | \
 80067d4:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	78db      	ldrb	r3, [r3, #3]
 80067da:	059b      	lsls	r3, r3, #22
                ((uint32_t)(sAlarm->AlarmTime.Seconds) << RTC_ALRMAR_SU_Pos) | \
 80067dc:	431a      	orrs	r2, r3
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80067e4:	061b      	lsls	r3, r3, #24
                ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << RTC_ALRMAR_PM_Pos) | \
 80067e6:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6a1b      	ldr	r3, [r3, #32]
                ((uint32_t)(sAlarm->AlarmDateWeekDay) << RTC_ALRMAR_DU_Pos) | \
 80067ec:	431a      	orrs	r2, r3
                ((uint32_t)sAlarm->AlarmMask));
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	695b      	ldr	r3, [r3, #20]
      tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << RTC_ALRMAR_HU_Pos) | \
 80067f2:	4313      	orrs	r3, r2
 80067f4:	617b      	str	r3, [r7, #20]

    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067f6:	4b3e      	ldr	r3, [pc, #248]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067f8:	22ca      	movs	r2, #202	@ 0xca
 80067fa:	625a      	str	r2, [r3, #36]	@ 0x24
 80067fc:	4b3c      	ldr	r3, [pc, #240]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80067fe:	2253      	movs	r2, #83	@ 0x53
 8006800:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Configure the Alarm register */
  if (sAlarm->Alarm == RTC_ALARM_A)
 8006802:	68bb      	ldr	r3, [r7, #8]
 8006804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800680a:	d12c      	bne.n	8006866 <HAL_RTC_SetAlarm_IT+0x186>
  {
    /* Disable the Alarm A interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 800680c:	4b38      	ldr	r3, [pc, #224]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800680e:	699b      	ldr	r3, [r3, #24]
 8006810:	4a37      	ldr	r2, [pc, #220]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006812:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8006816:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm A */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006818:	4b35      	ldr	r3, [pc, #212]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800681a:	2201      	movs	r2, #1
 800681c:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006824:	d107      	bne.n	8006836 <HAL_RTC_SetAlarm_IT+0x156>
    {
      RTC->ALRMASSR = sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr;
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	699a      	ldr	r2, [r3, #24]
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	69db      	ldr	r3, [r3, #28]
 800682e:	4930      	ldr	r1, [pc, #192]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006830:	4313      	orrs	r3, r2
 8006832:	644b      	str	r3, [r1, #68]	@ 0x44
 8006834:	e006      	b.n	8006844 <HAL_RTC_SetAlarm_IT+0x164>
    }
    else
    {
      WRITE_REG(RTC->ALRMAR, tmpreg);
 8006836:	4a2e      	ldr	r2, [pc, #184]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006838:	697b      	ldr	r3, [r7, #20]
 800683a:	6413      	str	r3, [r2, #64]	@ 0x40
      WRITE_REG(RTC->ALRMASSR, sAlarm->AlarmSubSecondMask);
 800683c:	4a2c      	ldr	r2, [pc, #176]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	699b      	ldr	r3, [r3, #24]
 8006842:	6453      	str	r3, [r2, #68]	@ 0x44
    }

    WRITE_REG(RTC->ALRABINR, sAlarm->AlarmTime.SubSeconds);
 8006844:	4a2a      	ldr	r2, [pc, #168]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006846:	68bb      	ldr	r3, [r7, #8]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	6713      	str	r3, [r2, #112]	@ 0x70

    /* Store in the handle the Alarm A enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006850:	f043 0201 	orr.w	r2, r3, #1
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006858:	4b25      	ldr	r3, [pc, #148]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800685a:	699b      	ldr	r3, [r3, #24]
 800685c:	4a24      	ldr	r2, [pc, #144]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800685e:	f443 5388 	orr.w	r3, r3, #4352	@ 0x1100
 8006862:	6193      	str	r3, [r2, #24]
 8006864:	e02b      	b.n	80068be <HAL_RTC_SetAlarm_IT+0x1de>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006866:	4b22      	ldr	r3, [pc, #136]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	4a21      	ldr	r2, [pc, #132]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800686c:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 8006870:	6193      	str	r3, [r2, #24]
    /* Clear flag alarm B */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006872:	4b1f      	ldr	r3, [pc, #124]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006874:	2202      	movs	r2, #2
 8006876:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (binaryMode == RTC_BINARY_ONLY)
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800687e:	d107      	bne.n	8006890 <HAL_RTC_SetAlarm_IT+0x1b0>
    {
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask | sAlarm->BinaryAutoClr);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	699a      	ldr	r2, [r3, #24]
 8006884:	68bb      	ldr	r3, [r7, #8]
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	4919      	ldr	r1, [pc, #100]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 800688a:	4313      	orrs	r3, r2
 800688c:	64cb      	str	r3, [r1, #76]	@ 0x4c
 800688e:	e006      	b.n	800689e <HAL_RTC_SetAlarm_IT+0x1be>
    }
    else
    {
      WRITE_REG(RTC->ALRMBR, tmpreg);
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	6493      	str	r3, [r2, #72]	@ 0x48
      WRITE_REG(RTC->ALRMBSSR, sAlarm->AlarmSubSecondMask);
 8006896:	4a16      	ldr	r2, [pc, #88]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	699b      	ldr	r3, [r3, #24]
 800689c:	64d3      	str	r3, [r2, #76]	@ 0x4c
    }

    WRITE_REG(RTC->ALRBBINR, sAlarm->AlarmTime.SubSeconds);
 800689e:	4a14      	ldr	r2, [pc, #80]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	6753      	str	r3, [r2, #116]	@ 0x74

    /* Store in the handle the Alarm B enabled */
    SET_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068aa:	f043 0202 	orr.w	r2, r3, #2
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Configure the Alarm interrupt */
    SET_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 80068b2:	4b0f      	ldr	r3, [pc, #60]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068b8:	f443 5308 	orr.w	r3, r3, #8704	@ 0x2200
 80068bc:	6193      	str	r3, [r2, #24]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80068be:	4b0d      	ldr	r3, [pc, #52]	@ (80068f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80068c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068c4:	4a0b      	ldr	r2, [pc, #44]	@ (80068f4 <HAL_RTC_SetAlarm_IT+0x214>)
 80068c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80068ca:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068ce:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <HAL_RTC_SetAlarm_IT+0x210>)
 80068d0:	22ff      	movs	r2, #255	@ 0xff
 80068d2:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	2201      	movs	r2, #1
 80068d8:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	2200      	movs	r2, #0
 80068e0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80068e4:	2300      	movs	r3, #0
}
 80068e6:	4618      	mov	r0, r3
 80068e8:	371c      	adds	r7, #28
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd90      	pop	{r4, r7, pc}
 80068ee:	bf00      	nop
 80068f0:	40002800 	.word	0x40002800
 80068f4:	58000800 	.word	0x58000800

080068f8 <HAL_RTC_DeactivateAlarm>:
  *            @arg RTC_ALARM_A:  AlarmA
  *            @arg RTC_ALARM_B:  AlarmB
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_DeactivateAlarm(RTC_HandleTypeDef *hrtc, uint32_t Alarm)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_ALARM(Alarm));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006908:	2b01      	cmp	r3, #1
 800690a:	d101      	bne.n	8006910 <HAL_RTC_DeactivateAlarm+0x18>
 800690c:	2302      	movs	r3, #2
 800690e:	e048      	b.n	80069a2 <HAL_RTC_DeactivateAlarm+0xaa>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	2201      	movs	r2, #1
 8006914:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2202      	movs	r2, #2
 800691c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006920:	4b22      	ldr	r3, [pc, #136]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006922:	22ca      	movs	r2, #202	@ 0xca
 8006924:	625a      	str	r2, [r3, #36]	@ 0x24
 8006926:	4b21      	ldr	r3, [pc, #132]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006928:	2253      	movs	r2, #83	@ 0x53
 800692a:	625a      	str	r2, [r3, #36]	@ 0x24

  if (Alarm == RTC_ALARM_A)
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006932:	d115      	bne.n	8006960 <HAL_RTC_DeactivateAlarm+0x68>
  {
    /* AlarmA, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRAE | RTC_CR_ALRAIE);
 8006934:	4b1d      	ldr	r3, [pc, #116]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800693a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800693e:	6193      	str	r3, [r2, #24]

    /* AlarmA, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMASSR, RTC_ALRMASSR_SSCLR);
 8006940:	4b1a      	ldr	r3, [pc, #104]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006942:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006944:	4a19      	ldr	r2, [pc, #100]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006946:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800694a:	6453      	str	r3, [r2, #68]	@ 0x44

    /* Store in the handle the Alarm A disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRAMF);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006950:	f023 0201 	bic.w	r2, r3, #1
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmA flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 8006958:	4b14      	ldr	r3, [pc, #80]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800695a:	2201      	movs	r2, #1
 800695c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800695e:	e014      	b.n	800698a <HAL_RTC_DeactivateAlarm+0x92>
  }
  else
  {
    /* AlarmB, In case of interrupt mode is used, the interrupt source must disabled */
    CLEAR_BIT(RTC->CR, RTC_CR_ALRBE | RTC_CR_ALRBIE);
 8006960:	4b12      	ldr	r3, [pc, #72]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	4a11      	ldr	r2, [pc, #68]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006966:	f423 5308 	bic.w	r3, r3, #8704	@ 0x2200
 800696a:	6193      	str	r3, [r2, #24]

    /* AlarmB, Clear SSCLR */
    CLEAR_BIT(RTC->ALRMBSSR, RTC_ALRMBSSR_SSCLR);
 800696c:	4b0f      	ldr	r3, [pc, #60]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800696e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006970:	4a0e      	ldr	r2, [pc, #56]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006972:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006976:	64d3      	str	r3, [r2, #76]	@ 0x4c

    /* Store in the handle the Alarm B disabled */
    CLEAR_BIT(hrtc->IsEnabled.RtcFeatures, RTC_MISR_ALRBMF);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800697c:	f023 0202 	bic.w	r2, r3, #2
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Clear AlarmB flag */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 8006984:	4b09      	ldr	r3, [pc, #36]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 8006986:	2202      	movs	r2, #2
 8006988:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800698a:	4b08      	ldr	r3, [pc, #32]	@ (80069ac <HAL_RTC_DeactivateAlarm+0xb4>)
 800698c:	22ff      	movs	r2, #255	@ 0xff
 800698e:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2201      	movs	r2, #1
 8006994:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80069a0:	2300      	movs	r3, #0
}
 80069a2:	4618      	mov	r0, r3
 80069a4:	370c      	adds	r7, #12
 80069a6:	46bd      	mov	sp, r7
 80069a8:	bc80      	pop	{r7}
 80069aa:	4770      	bx	lr
 80069ac:	40002800 	.word	0x40002800

080069b0 <HAL_RTC_AlarmIRQHandler>:
  * @brief  Handle Alarm interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef *hrtc)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = READ_REG(RTC->MISR) & READ_REG(hrtc->IsEnabled.RtcFeatures);
 80069b8:	4b11      	ldr	r3, [pc, #68]	@ (8006a00 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069ba:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069c0:	4013      	ands	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

  if ((tmp & RTC_MISR_ALRAMF) != 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	f003 0301 	and.w	r3, r3, #1
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d005      	beq.n	80069da <HAL_RTC_AlarmIRQHandler+0x2a>
  {
    /* Clear the AlarmA interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRAF);
 80069ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006a00 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069d0:	2201      	movs	r2, #1
 80069d2:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmAEventCallback(hrtc);
#else
    HAL_RTC_AlarmAEventCallback(hrtc);
 80069d4:	6878      	ldr	r0, [r7, #4]
 80069d6:	f7fb fbae 	bl	8002136 <HAL_RTC_AlarmAEventCallback>
#endif
  }

  if ((tmp & RTC_MISR_ALRBMF) != 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f003 0302 	and.w	r3, r3, #2
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d005      	beq.n	80069f0 <HAL_RTC_AlarmIRQHandler+0x40>
  {
    /* Clear the AlarmB interrupt pending bit */
    WRITE_REG(RTC->SCR, RTC_SCR_CALRBF);
 80069e4:	4b06      	ldr	r3, [pc, #24]	@ (8006a00 <HAL_RTC_AlarmIRQHandler+0x50>)
 80069e6:	2202      	movs	r2, #2
 80069e8:	65da      	str	r2, [r3, #92]	@ 0x5c

#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call Compare Match registered Callback */
    hrtc->AlarmBEventCallback(hrtc);
#else
    HAL_RTCEx_AlarmBEventCallback(hrtc);
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 f94a 	bl	8006c84 <HAL_RTCEx_AlarmBEventCallback>
#endif
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 80069f8:	bf00      	nop
 80069fa:	3710      	adds	r7, #16
 80069fc:	46bd      	mov	sp, r7
 80069fe:	bd80      	pop	{r7, pc}
 8006a00:	40002800 	.word	0x40002800

08006a04 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  UNUSED(hrtc);
  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8006a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a4c <HAL_RTC_WaitForSynchro+0x48>)
 8006a0e:	68db      	ldr	r3, [r3, #12]
 8006a10:	4a0e      	ldr	r2, [pc, #56]	@ (8006a4c <HAL_RTC_WaitForSynchro+0x48>)
 8006a12:	f023 0320 	bic.w	r3, r3, #32
 8006a16:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006a18:	f7fb f962 	bl	8001ce0 <HAL_GetTick>
 8006a1c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a1e:	e009      	b.n	8006a34 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006a20:	f7fb f95e 	bl	8001ce0 <HAL_GetTick>
 8006a24:	4602      	mov	r2, r0
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a2e:	d901      	bls.n	8006a34 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e006      	b.n	8006a42 <HAL_RTC_WaitForSynchro+0x3e>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8006a34:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <HAL_RTC_WaitForSynchro+0x48>)
 8006a36:	68db      	ldr	r3, [r3, #12]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d0ef      	beq.n	8006a20 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
 8006a4a:	bf00      	nop
 8006a4c:	40002800 	.word	0x40002800

08006a50 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b084      	sub	sp, #16
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	73fb      	strb	r3, [r7, #15]

  UNUSED(hrtc);
  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8006a5c:	4b15      	ldr	r3, [pc, #84]	@ (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d120      	bne.n	8006aaa <RTC_EnterInitMode+0x5a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006a68:	4b12      	ldr	r3, [pc, #72]	@ (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	4a11      	ldr	r2, [pc, #68]	@ (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a72:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8006a74:	f7fb f934 	bl	8001ce0 <HAL_GetTick>
 8006a78:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a7a:	e00d      	b.n	8006a98 <RTC_EnterInitMode+0x48>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8006a7c:	f7fb f930 	bl	8001ce0 <HAL_GetTick>
 8006a80:	4602      	mov	r2, r0
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8006a8a:	d905      	bls.n	8006a98 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 8006a8c:	2303      	movs	r3, #3
 8006a8e:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2203      	movs	r2, #3
 8006a94:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8006a98:	4b06      	ldr	r3, [pc, #24]	@ (8006ab4 <RTC_EnterInitMode+0x64>)
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d102      	bne.n	8006aaa <RTC_EnterInitMode+0x5a>
 8006aa4:	7bfb      	ldrb	r3, [r7, #15]
 8006aa6:	2b03      	cmp	r3, #3
 8006aa8:	d1e8      	bne.n	8006a7c <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return status;
 8006aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	3710      	adds	r7, #16
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}
 8006ab4:	40002800 	.word	0x40002800

08006ab8 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8006ab8:	b580      	push	{r7, lr}
 8006aba:	b084      	sub	sp, #16
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8006ac4:	4b1a      	ldr	r3, [pc, #104]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006ac6:	68db      	ldr	r3, [r3, #12]
 8006ac8:	4a19      	ldr	r2, [pc, #100]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006aca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006ace:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8006ad0:	4b17      	ldr	r3, [pc, #92]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	f003 0320 	and.w	r3, r3, #32
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10c      	bne.n	8006af6 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f7ff ff91 	bl	8006a04 <HAL_RTC_WaitForSynchro>
 8006ae2:	4603      	mov	r3, r0
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01e      	beq.n	8006b26 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2203      	movs	r2, #3
 8006aec:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006af0:	2303      	movs	r3, #3
 8006af2:	73fb      	strb	r3, [r7, #15]
 8006af4:	e017      	b.n	8006b26 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006af6:	4b0e      	ldr	r3, [pc, #56]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006af8:	699b      	ldr	r3, [r3, #24]
 8006afa:	4a0d      	ldr	r2, [pc, #52]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006afc:	f023 0320 	bic.w	r3, r3, #32
 8006b00:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7ff ff7e 	bl	8006a04 <HAL_RTC_WaitForSynchro>
 8006b08:	4603      	mov	r3, r0
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d005      	beq.n	8006b1a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2203      	movs	r2, #3
 8006b12:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
      status = HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006b1a:	4b05      	ldr	r3, [pc, #20]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006b1c:	699b      	ldr	r3, [r3, #24]
 8006b1e:	4a04      	ldr	r2, [pc, #16]	@ (8006b30 <RTC_ExitInitMode+0x78>)
 8006b20:	f043 0320 	orr.w	r3, r3, #32
 8006b24:	6193      	str	r3, [r2, #24]
  }

  return status;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	bd80      	pop	{r7, pc}
 8006b30:	40002800 	.word	0x40002800

08006b34 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	4603      	mov	r3, r0
 8006b3c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	60fb      	str	r3, [r7, #12]
  uint8_t tmp_Value = Value;
 8006b42:	79fb      	ldrb	r3, [r7, #7]
 8006b44:	72fb      	strb	r3, [r7, #11]

  while (tmp_Value >= 10U)
 8006b46:	e005      	b.n	8006b54 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	60fb      	str	r3, [r7, #12]
    tmp_Value -= 10U;
 8006b4e:	7afb      	ldrb	r3, [r7, #11]
 8006b50:	3b0a      	subs	r3, #10
 8006b52:	72fb      	strb	r3, [r7, #11]
  while (tmp_Value >= 10U)
 8006b54:	7afb      	ldrb	r3, [r7, #11]
 8006b56:	2b09      	cmp	r3, #9
 8006b58:	d8f6      	bhi.n	8006b48 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | tmp_Value);
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	011b      	lsls	r3, r3, #4
 8006b60:	b2da      	uxtb	r2, r3
 8006b62:	7afb      	ldrb	r3, [r7, #11]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	b2db      	uxtb	r3, r3
}
 8006b68:	4618      	mov	r0, r3
 8006b6a:	3714      	adds	r7, #20
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bc80      	pop	{r7}
 8006b70:	4770      	bx	lr
	...

08006b74 <HAL_RTCEx_EnableBypassShadow>:
  *         directly from the Calendar counter.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_EnableBypassShadow(RTC_HandleTypeDef *hrtc)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d101      	bne.n	8006b8a <HAL_RTCEx_EnableBypassShadow+0x16>
 8006b86:	2302      	movs	r3, #2
 8006b88:	e01f      	b.n	8006bca <HAL_RTCEx_EnableBypassShadow+0x56>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2201      	movs	r2, #1
 8006b8e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2202      	movs	r2, #2
 8006b96:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006b9a:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006b9c:	22ca      	movs	r2, #202	@ 0xca
 8006b9e:	625a      	str	r2, [r3, #36]	@ 0x24
 8006ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ba2:	2253      	movs	r2, #83	@ 0x53
 8006ba4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the BYPSHAD bit */
  SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8006ba6:	4b0b      	ldr	r3, [pc, #44]	@ (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006ba8:	699b      	ldr	r3, [r3, #24]
 8006baa:	4a0a      	ldr	r2, [pc, #40]	@ (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bac:	f043 0320 	orr.w	r3, r3, #32
 8006bb0:	6193      	str	r3, [r2, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006bb2:	4b08      	ldr	r3, [pc, #32]	@ (8006bd4 <HAL_RTCEx_EnableBypassShadow+0x60>)
 8006bb4:	22ff      	movs	r2, #255	@ 0xff
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2201      	movs	r2, #1
 8006bbc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006bc8:	2300      	movs	r3, #0
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	370c      	adds	r7, #12
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bc80      	pop	{r7}
 8006bd2:	4770      	bx	lr
 8006bd4:	40002800 	.word	0x40002800

08006bd8 <HAL_RTCEx_SetSSRU_IT>:
  * @brief  Set SSR Underflow detection with Interrupt.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetSSRU_IT(RTC_HandleTypeDef *hrtc)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b083      	sub	sp, #12
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8006be6:	2b01      	cmp	r3, #1
 8006be8:	d101      	bne.n	8006bee <HAL_RTCEx_SetSSRU_IT+0x16>
 8006bea:	2302      	movs	r3, #2
 8006bec:	e027      	b.n	8006c3e <HAL_RTCEx_SetSSRU_IT+0x66>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006bfe:	4b12      	ldr	r3, [pc, #72]	@ (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c00:	22ca      	movs	r2, #202	@ 0xca
 8006c02:	625a      	str	r2, [r3, #36]	@ 0x24
 8006c04:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c06:	2253      	movs	r2, #83	@ 0x53
 8006c08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enable IT SSRU */
  __HAL_RTC_SSRU_ENABLE_IT(hrtc, RTC_IT_SSRU);
 8006c0a:	4b0f      	ldr	r3, [pc, #60]	@ (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	4a0e      	ldr	r2, [pc, #56]	@ (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c10:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006c14:	6193      	str	r3, [r2, #24]

  /* RTC SSRU Interrupt Configuration: EXTI configuration */
  __HAL_RTC_SSRU_EXTI_ENABLE_IT();
 8006c16:	4b0d      	ldr	r3, [pc, #52]	@ (8006c4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006c1c:	4a0b      	ldr	r2, [pc, #44]	@ (8006c4c <HAL_RTCEx_SetSSRU_IT+0x74>)
 8006c1e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c22:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c26:	4b08      	ldr	r3, [pc, #32]	@ (8006c48 <HAL_RTCEx_SetSSRU_IT+0x70>)
 8006c28:	22ff      	movs	r2, #255	@ 0xff
 8006c2a:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8006c3c:	2300      	movs	r3, #0
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	370c      	adds	r7, #12
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bc80      	pop	{r7}
 8006c46:	4770      	bx	lr
 8006c48:	40002800 	.word	0x40002800
 8006c4c:	58000800 	.word	0x58000800

08006c50 <HAL_RTCEx_SSRUIRQHandler>:
  * @brief  Handle SSR underflow interrupt request.
  * @param  hrtc RTC handle
  * @retval None
  */
void HAL_RTCEx_SSRUIRQHandler(RTC_HandleTypeDef *hrtc)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b082      	sub	sp, #8
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  if ((RTC->MISR & RTC_MISR_SSRUMF) != 0u)
 8006c58:	4b09      	ldr	r3, [pc, #36]	@ (8006c80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d005      	beq.n	8006c70 <HAL_RTCEx_SSRUIRQHandler+0x20>
  {
    /* Immediately clear flags */
    RTC->SCR = RTC_SCR_CSSRUF;
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_RTCEx_SSRUIRQHandler+0x30>)
 8006c66:	2240      	movs	r2, #64	@ 0x40
 8006c68:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* SSRU callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    /* Call SSRUEvent registered Callback */
    hrtc->SSRUEventCallback(hrtc);
#else
    HAL_RTCEx_SSRUEventCallback(hrtc);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f7fb fa6d 	bl	800214a <HAL_RTCEx_SSRUEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */
  }

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2201      	movs	r2, #1
 8006c74:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
}
 8006c78:	bf00      	nop
 8006c7a:	3708      	adds	r7, #8
 8006c7c:	46bd      	mov	sp, r7
 8006c7e:	bd80      	pop	{r7, pc}
 8006c80:	40002800 	.word	0x40002800

08006c84 <HAL_RTCEx_AlarmBEventCallback>:
  * @brief  Alarm B callback.
  * @param  hrtc RTC handle
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b083      	sub	sp, #12
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  UNUSED(hrtc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTCEx_AlarmBEventCallback could be implemented in the user file
   */
}
 8006c8c:	bf00      	nop
 8006c8e:	370c      	adds	r7, #12
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bc80      	pop	{r7}
 8006c94:	4770      	bx	lr
	...

08006c98 <HAL_RTCEx_BKUPWrite>:
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @param  Data Data to be written in the specified Backup data register.
  * @retval None
  */
void HAL_RTCEx_BKUPWrite(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister, uint32_t Data)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	60f8      	str	r0, [r7, #12]
 8006ca0:	60b9      	str	r1, [r7, #8]
 8006ca2:	607a      	str	r2, [r7, #4]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006ca4:	4b07      	ldr	r3, [pc, #28]	@ (8006cc4 <HAL_RTCEx_BKUPWrite+0x2c>)
 8006ca6:	617b      	str	r3, [r7, #20]
  tmp += (BackupRegister * 4U);
 8006ca8:	68bb      	ldr	r3, [r7, #8]
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	4413      	add	r3, r2
 8006cb0:	617b      	str	r3, [r7, #20]

  /* Write the specified register */
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	687a      	ldr	r2, [r7, #4]
 8006cb6:	601a      	str	r2, [r3, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	bc80      	pop	{r7}
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop
 8006cc4:	4000b100 	.word	0x4000b100

08006cc8 <HAL_RTCEx_BKUPRead>:
  * @param  BackupRegister RTC Backup data Register number.
  *          This parameter can be RTC_BKP_DRx where x can be from 0 to RTC_BACKUP_NB
  * @retval Read value
  */
uint32_t HAL_RTCEx_BKUPRead(RTC_HandleTypeDef *hrtc, uint32_t BackupRegister)
{
 8006cc8:	b480      	push	{r7}
 8006cca:	b085      	sub	sp, #20
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]

  UNUSED(hrtc);
  /* Check the parameters */
  assert_param(IS_RTC_BKP(BackupRegister));

  tmp = (uint32_t) & (TAMP->BKP0R);
 8006cd2:	4b07      	ldr	r3, [pc, #28]	@ (8006cf0 <HAL_RTCEx_BKUPRead+0x28>)
 8006cd4:	60fb      	str	r3, [r7, #12]
  tmp += (BackupRegister * 4U);
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	68fa      	ldr	r2, [r7, #12]
 8006cdc:	4413      	add	r3, r2
 8006cde:	60fb      	str	r3, [r7, #12]

  /* Read the specified register */
  return (*(__IO uint32_t *)tmp);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr
 8006cee:	bf00      	nop
 8006cf0:	4000b100 	.word	0x4000b100

08006cf4 <LL_PWR_SetRadioBusyTrigger>:
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR3, PWR_CR3_EWRFBUSY, RadioBusyTrigger);
 8006cfc:	4b06      	ldr	r3, [pc, #24]	@ (8006d18 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006d04:	4904      	ldr	r1, [pc, #16]	@ (8006d18 <LL_PWR_SetRadioBusyTrigger+0x24>)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	608b      	str	r3, [r1, #8]
}
 8006d0c:	bf00      	nop
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bc80      	pop	{r7}
 8006d14:	4770      	bx	lr
 8006d16:	bf00      	nop
 8006d18:	58000400 	.word	0x58000400

08006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>:
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d20:	4b05      	ldr	r3, [pc, #20]	@ (8006d38 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d26:	4a04      	ldr	r2, [pc, #16]	@ (8006d38 <LL_PWR_UnselectSUBGHZSPI_NSS+0x1c>)
 8006d28:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006d2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d30:	bf00      	nop
 8006d32:	46bd      	mov	sp, r7
 8006d34:	bc80      	pop	{r7}
 8006d36:	4770      	bx	lr
 8006d38:	58000400 	.word	0x58000400

08006d3c <LL_PWR_SelectSUBGHZSPI_NSS>:
{
 8006d3c:	b480      	push	{r7}
 8006d3e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->SUBGHZSPICR, PWR_SUBGHZSPICR_NSS);
 8006d40:	4b05      	ldr	r3, [pc, #20]	@ (8006d58 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d46:	4a04      	ldr	r2, [pc, #16]	@ (8006d58 <LL_PWR_SelectSUBGHZSPI_NSS+0x1c>)
 8006d48:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006d4c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
}
 8006d50:	bf00      	nop
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bc80      	pop	{r7}
 8006d56:	4770      	bx	lr
 8006d58:	58000400 	.word	0x58000400

08006d5c <LL_PWR_ClearFlag_RFBUSY>:
{
 8006d5c:	b480      	push	{r7}
 8006d5e:	af00      	add	r7, sp, #0
  WRITE_REG(PWR->SCR, PWR_SCR_CWRFBUSYF);
 8006d60:	4b03      	ldr	r3, [pc, #12]	@ (8006d70 <LL_PWR_ClearFlag_RFBUSY+0x14>)
 8006d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006d66:	619a      	str	r2, [r3, #24]
}
 8006d68:	bf00      	nop
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bc80      	pop	{r7}
 8006d6e:	4770      	bx	lr
 8006d70:	58000400 	.word	0x58000400

08006d74 <LL_PWR_IsActiveFlag_RFBUSYS>:
{
 8006d74:	b480      	push	{r7}
 8006d76:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYS) == (PWR_SR2_RFBUSYS)) ? 1UL : 0UL);
 8006d78:	4b06      	ldr	r3, [pc, #24]	@ (8006d94 <LL_PWR_IsActiveFlag_RFBUSYS+0x20>)
 8006d7a:	695b      	ldr	r3, [r3, #20]
 8006d7c:	f003 0302 	and.w	r3, r3, #2
 8006d80:	2b02      	cmp	r3, #2
 8006d82:	d101      	bne.n	8006d88 <LL_PWR_IsActiveFlag_RFBUSYS+0x14>
 8006d84:	2301      	movs	r3, #1
 8006d86:	e000      	b.n	8006d8a <LL_PWR_IsActiveFlag_RFBUSYS+0x16>
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bc80      	pop	{r7}
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	58000400 	.word	0x58000400

08006d98 <LL_PWR_IsActiveFlag_RFBUSYMS>:
{
 8006d98:	b480      	push	{r7}
 8006d9a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_RFBUSYMS) == (PWR_SR2_RFBUSYMS)) ? 1UL : 0UL);
 8006d9c:	4b06      	ldr	r3, [pc, #24]	@ (8006db8 <LL_PWR_IsActiveFlag_RFBUSYMS+0x20>)
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f003 0304 	and.w	r3, r3, #4
 8006da4:	2b04      	cmp	r3, #4
 8006da6:	d101      	bne.n	8006dac <LL_PWR_IsActiveFlag_RFBUSYMS+0x14>
 8006da8:	2301      	movs	r3, #1
 8006daa:	e000      	b.n	8006dae <LL_PWR_IsActiveFlag_RFBUSYMS+0x16>
 8006dac:	2300      	movs	r3, #0
}
 8006dae:	4618      	mov	r0, r3
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bc80      	pop	{r7}
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	58000400 	.word	0x58000400

08006dbc <LL_RCC_RF_DisableReset>:
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_RFRST);
 8006dc0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006dc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006dc8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8006dcc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006dd0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
}
 8006dd4:	bf00      	nop
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bc80      	pop	{r7}
 8006dda:	4770      	bx	lr

08006ddc <LL_RCC_IsRFUnderReset>:
{
 8006ddc:	b480      	push	{r7}
 8006dde:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_RFRSTF) == (RCC_CSR_RFRSTF)) ? 1UL : 0UL);
 8006de0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8006de4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006de8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006dec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006df0:	d101      	bne.n	8006df6 <LL_RCC_IsRFUnderReset+0x1a>
 8006df2:	2301      	movs	r3, #1
 8006df4:	e000      	b.n	8006df8 <LL_RCC_IsRFUnderReset+0x1c>
 8006df6:	2300      	movs	r3, #0
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bc80      	pop	{r7}
 8006dfe:	4770      	bx	lr

08006e00 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  *         (*) value not defined in all devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b083      	sub	sp, #12
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006e08:	4b06      	ldr	r3, [pc, #24]	@ (8006e24 <LL_EXTI_EnableIT_32_63+0x24>)
 8006e0a:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8006e0e:	4905      	ldr	r1, [pc, #20]	@ (8006e24 <LL_EXTI_EnableIT_32_63+0x24>)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
}
 8006e18:	bf00      	nop
 8006e1a:	370c      	adds	r7, #12
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bc80      	pop	{r7}
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	58000800 	.word	0x58000800

08006e28 <HAL_SUBGHZ_Init>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SUBGHZ_Init(SUBGHZ_HandleTypeDef *hsubghz)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;

  /* Check the hsubghz handle allocation */
  if (hsubghz == NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d103      	bne.n	8006e3e <HAL_SUBGHZ_Init+0x16>
  {
    status = HAL_ERROR;
 8006e36:	2301      	movs	r3, #1
 8006e38:	73fb      	strb	r3, [r7, #15]
    return status;
 8006e3a:	7bfb      	ldrb	r3, [r7, #15]
 8006e3c:	e04b      	b.n	8006ed6 <HAL_SUBGHZ_Init+0xae>
  }
  else
  {
    status = HAL_OK;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	73fb      	strb	r3, [r7, #15]
  }

  assert_param(IS_SUBGHZSPI_BAUDRATE_PRESCALER(hsubghz->Init.BaudratePrescaler));

  if (hsubghz->State == HAL_SUBGHZ_STATE_RESET)
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	799b      	ldrb	r3, [r3, #6]
 8006e46:	b2db      	uxtb	r3, r3
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d105      	bne.n	8006e58 <HAL_SUBGHZ_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsubghz->Lock = HAL_UNLOCKED;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	2200      	movs	r2, #0
 8006e50:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hsubghz->MspInitCallback(hsubghz);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SUBGHZ_MspInit(hsubghz);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fa fda0 	bl	8001998 <HAL_SUBGHZ_MspInit>
#endif /* USE_HAL_ SUBGHZ_REGISTER_CALLBACKS */
  }

  hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	719a      	strb	r2, [r3, #6]

  /* De-asserts the reset signal of the Radio peripheral */
  LL_RCC_RF_DisableReset();
 8006e5e:	f7ff ffad 	bl	8006dbc <LL_RCC_RF_DisableReset>

  /* Verify that Radio in reset status flag is set */
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8006e62:	4b1f      	ldr	r3, [pc, #124]	@ (8006ee0 <HAL_SUBGHZ_Init+0xb8>)
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	4613      	mov	r3, r2
 8006e68:	00db      	lsls	r3, r3, #3
 8006e6a:	1a9b      	subs	r3, r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	0cdb      	lsrs	r3, r3, #19
 8006e70:	2264      	movs	r2, #100	@ 0x64
 8006e72:	fb02 f303 	mul.w	r3, r2, r3
 8006e76:	60bb      	str	r3, [r7, #8]

  do
  {
    if (count == 0U)
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d105      	bne.n	8006e8a <HAL_SUBGHZ_Init+0x62>
    {
      status  = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	73fb      	strb	r3, [r7, #15]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2201      	movs	r2, #1
 8006e86:	609a      	str	r2, [r3, #8]
      break;
 8006e88:	e007      	b.n	8006e9a <HAL_SUBGHZ_Init+0x72>
    }
    count--;
 8006e8a:	68bb      	ldr	r3, [r7, #8]
 8006e8c:	3b01      	subs	r3, #1
 8006e8e:	60bb      	str	r3, [r7, #8]
  } while (LL_RCC_IsRFUnderReset() != 0UL);
 8006e90:	f7ff ffa4 	bl	8006ddc <LL_RCC_IsRFUnderReset>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d1ee      	bne.n	8006e78 <HAL_SUBGHZ_Init+0x50>

  /* Asserts the reset signal of the Radio peripheral */
  LL_PWR_UnselectSUBGHZSPI_NSS();
 8006e9a:	f7ff ff3f 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

  /* Enable wakeup signal of the Radio peripheral */
  LL_C2_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
#else
  /* Enable EXTI 44 : Radio IRQ ITs for CPU1 */
  LL_EXTI_EnableIT_32_63(LL_EXTI_LINE_44);
 8006e9e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8006ea2:	f7ff ffad 	bl	8006e00 <LL_EXTI_EnableIT_32_63>

  /* Enable wakeup signal of the Radio peripheral */
  LL_PWR_SetRadioBusyTrigger(LL_PWR_RADIO_BUSY_TRIGGER_WU_IT);
 8006ea6:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8006eaa:	f7ff ff23 	bl	8006cf4 <LL_PWR_SetRadioBusyTrigger>
#endif /* CM0PLUS */

  /* Clear Pending Flag */
  LL_PWR_ClearFlag_RFBUSY();
 8006eae:	f7ff ff55 	bl	8006d5c <LL_PWR_ClearFlag_RFBUSY>

  if (status == HAL_OK)
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d10a      	bne.n	8006ece <HAL_SUBGHZ_Init+0xa6>
  {
    /* Initialize SUBGHZSPI Peripheral */
    SUBGHZSPI_Init(hsubghz->Init.BaudratePrescaler);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	f000 faa5 	bl	800740c <SUBGHZSPI_Init>

    hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	711a      	strb	r2, [r3, #4]
    hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_NONE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	609a      	str	r2, [r3, #8]
  }
  hsubghz->State     = HAL_SUBGHZ_STATE_READY;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	719a      	strb	r2, [r3, #6]

  return status;
 8006ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	20000000 	.word	0x20000000

08006ee4 <HAL_SUBGHZ_WriteRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                            uint16_t Address,
                                            uint8_t *pBuffer,
                                            uint16_t Size)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b086      	sub	sp, #24
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	607a      	str	r2, [r7, #4]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	817b      	strh	r3, [r7, #10]
 8006ef4:	4613      	mov	r3, r2
 8006ef6:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	799b      	ldrb	r3, [r3, #6]
 8006efc:	b2db      	uxtb	r3, r3
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	d14a      	bne.n	8006f98 <HAL_SUBGHZ_WriteRegisters+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	795b      	ldrb	r3, [r3, #5]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d101      	bne.n	8006f0e <HAL_SUBGHZ_WriteRegisters+0x2a>
 8006f0a:	2302      	movs	r3, #2
 8006f0c:	e045      	b.n	8006f9a <HAL_SUBGHZ_WriteRegisters+0xb6>
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2201      	movs	r2, #1
 8006f12:	715a      	strb	r2, [r3, #5]

    hsubghz->State = HAL_SUBGHZ_STATE_BUSY;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2202      	movs	r2, #2
 8006f18:	719a      	strb	r2, [r3, #6]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006f1a:	68f8      	ldr	r0, [r7, #12]
 8006f1c:	f000 fb44 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006f20:	f7ff ff0c 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_REGISTER);
 8006f24:	210d      	movs	r1, #13
 8006f26:	68f8      	ldr	r0, [r7, #12]
 8006f28:	f000 fa90 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006f2c:	897b      	ldrh	r3, [r7, #10]
 8006f2e:	0a1b      	lsrs	r3, r3, #8
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	b2db      	uxtb	r3, r3
 8006f34:	4619      	mov	r1, r3
 8006f36:	68f8      	ldr	r0, [r7, #12]
 8006f38:	f000 fa88 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006f3c:	897b      	ldrh	r3, [r7, #10]
 8006f3e:	b2db      	uxtb	r3, r3
 8006f40:	4619      	mov	r1, r3
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 fa82 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8006f48:	2300      	movs	r3, #0
 8006f4a:	82bb      	strh	r3, [r7, #20]
 8006f4c:	e00a      	b.n	8006f64 <HAL_SUBGHZ_WriteRegisters+0x80>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 8006f4e:	8abb      	ldrh	r3, [r7, #20]
 8006f50:	687a      	ldr	r2, [r7, #4]
 8006f52:	4413      	add	r3, r2
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	4619      	mov	r1, r3
 8006f58:	68f8      	ldr	r0, [r7, #12]
 8006f5a:	f000 fa77 	bl	800744c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 8006f5e:	8abb      	ldrh	r3, [r7, #20]
 8006f60:	3301      	adds	r3, #1
 8006f62:	82bb      	strh	r3, [r7, #20]
 8006f64:	8aba      	ldrh	r2, [r7, #20]
 8006f66:	893b      	ldrh	r3, [r7, #8]
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	d3f0      	bcc.n	8006f4e <HAL_SUBGHZ_WriteRegisters+0x6a>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8006f6c:	f7ff fed6 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8006f70:	68f8      	ldr	r0, [r7, #12]
 8006f72:	f000 fb3d 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689b      	ldr	r3, [r3, #8]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_SUBGHZ_WriteRegisters+0xa0>
    {
      status = HAL_ERROR;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	75fb      	strb	r3, [r7, #23]
 8006f82:	e001      	b.n	8006f88 <HAL_SUBGHZ_WriteRegisters+0xa4>
    }
    else
    {
      status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2201      	movs	r2, #1
 8006f8c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	715a      	strb	r2, [r3, #5]

    return status;
 8006f94:	7dfb      	ldrb	r3, [r7, #23]
 8006f96:	e000      	b.n	8006f9a <HAL_SUBGHZ_WriteRegisters+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8006f98:	2302      	movs	r3, #2
  }
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	3718      	adds	r7, #24
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	bd80      	pop	{r7, pc}

08006fa2 <HAL_SUBGHZ_ReadRegisters>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadRegisters(SUBGHZ_HandleTypeDef *hsubghz,
                                           uint16_t Address,
                                           uint8_t *pBuffer,
                                           uint16_t Size)
{
 8006fa2:	b580      	push	{r7, lr}
 8006fa4:	b088      	sub	sp, #32
 8006fa6:	af00      	add	r7, sp, #0
 8006fa8:	60f8      	str	r0, [r7, #12]
 8006faa:	607a      	str	r2, [r7, #4]
 8006fac:	461a      	mov	r2, r3
 8006fae:	460b      	mov	r3, r1
 8006fb0:	817b      	strh	r3, [r7, #10]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	799b      	ldrb	r3, [r3, #6]
 8006fbe:	b2db      	uxtb	r3, r3
 8006fc0:	2b01      	cmp	r3, #1
 8006fc2:	d14a      	bne.n	800705a <HAL_SUBGHZ_ReadRegisters+0xb8>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	795b      	ldrb	r3, [r3, #5]
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_SUBGHZ_ReadRegisters+0x2e>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e045      	b.n	800705c <HAL_SUBGHZ_ReadRegisters+0xba>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	f000 fae6 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8006fdc:	f7ff feae 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_REGISTER);
 8006fe0:	211d      	movs	r1, #29
 8006fe2:	68f8      	ldr	r0, [r7, #12]
 8006fe4:	f000 fa32 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)((Address & 0xFF00U) >> 8U));
 8006fe8:	897b      	ldrh	r3, [r7, #10]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	b2db      	uxtb	r3, r3
 8006ff0:	4619      	mov	r1, r3
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 fa2a 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)(Address & 0x00FFU));
 8006ff8:	897b      	ldrh	r3, [r7, #10]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	68f8      	ldr	r0, [r7, #12]
 8007000:	f000 fa24 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0U);
 8007004:	2100      	movs	r1, #0
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f000 fa20 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 800700c:	2300      	movs	r3, #0
 800700e:	82fb      	strh	r3, [r7, #22]
 8007010:	e009      	b.n	8007026 <HAL_SUBGHZ_ReadRegisters+0x84>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007012:	69b9      	ldr	r1, [r7, #24]
 8007014:	68f8      	ldr	r0, [r7, #12]
 8007016:	f000 fa6f 	bl	80074f8 <SUBGHZSPI_Receive>
      pData++;
 800701a:	69bb      	ldr	r3, [r7, #24]
 800701c:	3301      	adds	r3, #1
 800701e:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007020:	8afb      	ldrh	r3, [r7, #22]
 8007022:	3301      	adds	r3, #1
 8007024:	82fb      	strh	r3, [r7, #22]
 8007026:	8afa      	ldrh	r2, [r7, #22]
 8007028:	893b      	ldrh	r3, [r7, #8]
 800702a:	429a      	cmp	r2, r3
 800702c:	d3f1      	bcc.n	8007012 <HAL_SUBGHZ_ReadRegisters+0x70>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800702e:	f7ff fe75 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fadc 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d002      	beq.n	8007046 <HAL_SUBGHZ_ReadRegisters+0xa4>
    {
      status = HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	77fb      	strb	r3, [r7, #31]
 8007044:	e001      	b.n	800704a <HAL_SUBGHZ_ReadRegisters+0xa8>
    }
    else
    {
      status = HAL_OK;
 8007046:	2300      	movs	r3, #0
 8007048:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2201      	movs	r2, #1
 800704e:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	2200      	movs	r2, #0
 8007054:	715a      	strb	r2, [r3, #5]

    return status;
 8007056:	7ffb      	ldrb	r3, [r7, #31]
 8007058:	e000      	b.n	800705c <HAL_SUBGHZ_ReadRegisters+0xba>
  }
  else
  {
    return HAL_BUSY;
 800705a:	2302      	movs	r3, #2
  }
}
 800705c:	4618      	mov	r0, r3
 800705e:	3720      	adds	r7, #32
 8007060:	46bd      	mov	sp, r7
 8007062:	bd80      	pop	{r7, pc}

08007064 <HAL_SUBGHZ_ExecSetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecSetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioSetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b086      	sub	sp, #24
 8007068:	af00      	add	r7, sp, #0
 800706a:	60f8      	str	r0, [r7, #12]
 800706c:	607a      	str	r2, [r7, #4]
 800706e:	461a      	mov	r2, r3
 8007070:	460b      	mov	r3, r1
 8007072:	72fb      	strb	r3, [r7, #11]
 8007074:	4613      	mov	r3, r2
 8007076:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  /* LORA Modulation not available on STM32WLx4xx devices */
  assert_param(IS_SUBGHZ_MODULATION_SUPPORTED(Command, pBuffer[0U]));

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	799b      	ldrb	r3, [r3, #6]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b01      	cmp	r3, #1
 8007080:	d14a      	bne.n	8007118 <HAL_SUBGHZ_ExecSetCmd+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	795b      	ldrb	r3, [r3, #5]
 8007086:	2b01      	cmp	r3, #1
 8007088:	d101      	bne.n	800708e <HAL_SUBGHZ_ExecSetCmd+0x2a>
 800708a:	2302      	movs	r3, #2
 800708c:	e045      	b.n	800711a <HAL_SUBGHZ_ExecSetCmd+0xb6>
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2201      	movs	r2, #1
 8007092:	715a      	strb	r2, [r3, #5]

    /* Need to wakeup Radio if already in Sleep at startup */
    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007094:	68f8      	ldr	r0, [r7, #12]
 8007096:	f000 fa87 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    if ((Command == RADIO_SET_SLEEP) || (Command == RADIO_SET_RXDUTYCYCLE))
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	2b84      	cmp	r3, #132	@ 0x84
 800709e:	d002      	beq.n	80070a6 <HAL_SUBGHZ_ExecSetCmd+0x42>
 80070a0:	7afb      	ldrb	r3, [r7, #11]
 80070a2:	2b94      	cmp	r3, #148	@ 0x94
 80070a4:	d103      	bne.n	80070ae <HAL_SUBGHZ_ExecSetCmd+0x4a>
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_ENABLE;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2201      	movs	r2, #1
 80070aa:	711a      	strb	r2, [r3, #4]
 80070ac:	e002      	b.n	80070b4 <HAL_SUBGHZ_ExecSetCmd+0x50>
    }
    else
    {
      hsubghz->DeepSleep = SUBGHZ_DEEP_SLEEP_DISABLE;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2200      	movs	r2, #0
 80070b2:	711a      	strb	r2, [r3, #4]
    }

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80070b4:	f7ff fe42 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 80070b8:	7afb      	ldrb	r3, [r7, #11]
 80070ba:	4619      	mov	r1, r3
 80070bc:	68f8      	ldr	r0, [r7, #12]
 80070be:	f000 f9c5 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80070c2:	2300      	movs	r3, #0
 80070c4:	82bb      	strh	r3, [r7, #20]
 80070c6:	e00a      	b.n	80070de <HAL_SUBGHZ_ExecSetCmd+0x7a>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 80070c8:	8abb      	ldrh	r3, [r7, #20]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	4413      	add	r3, r2
 80070ce:	781b      	ldrb	r3, [r3, #0]
 80070d0:	4619      	mov	r1, r3
 80070d2:	68f8      	ldr	r0, [r7, #12]
 80070d4:	f000 f9ba 	bl	800744c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 80070d8:	8abb      	ldrh	r3, [r7, #20]
 80070da:	3301      	adds	r3, #1
 80070dc:	82bb      	strh	r3, [r7, #20]
 80070de:	8aba      	ldrh	r2, [r7, #20]
 80070e0:	893b      	ldrh	r3, [r7, #8]
 80070e2:	429a      	cmp	r2, r3
 80070e4:	d3f0      	bcc.n	80070c8 <HAL_SUBGHZ_ExecSetCmd+0x64>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80070e6:	f7ff fe19 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    if (Command != RADIO_SET_SLEEP)
 80070ea:	7afb      	ldrb	r3, [r7, #11]
 80070ec:	2b84      	cmp	r3, #132	@ 0x84
 80070ee:	d002      	beq.n	80070f6 <HAL_SUBGHZ_ExecSetCmd+0x92>
    {
      (void)SUBGHZ_WaitOnBusy(hsubghz);
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 fa7d 	bl	80075f0 <SUBGHZ_WaitOnBusy>
    }

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d002      	beq.n	8007104 <HAL_SUBGHZ_ExecSetCmd+0xa0>
    {
      status = HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	75fb      	strb	r3, [r7, #23]
 8007102:	e001      	b.n	8007108 <HAL_SUBGHZ_ExecSetCmd+0xa4>
    }
    else
    {
      status = HAL_OK;
 8007104:	2300      	movs	r3, #0
 8007106:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	2201      	movs	r2, #1
 800710c:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	2200      	movs	r2, #0
 8007112:	715a      	strb	r2, [r3, #5]

    return status;
 8007114:	7dfb      	ldrb	r3, [r7, #23]
 8007116:	e000      	b.n	800711a <HAL_SUBGHZ_ExecSetCmd+0xb6>
  }
  else
  {
    return HAL_BUSY;
 8007118:	2302      	movs	r3, #2
  }
}
 800711a:	4618      	mov	r0, r3
 800711c:	3718      	adds	r7, #24
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}

08007122 <HAL_SUBGHZ_ExecGetCmd>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ExecGetCmd(SUBGHZ_HandleTypeDef *hsubghz,
                                        SUBGHZ_RadioGetCmd_t Command,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007122:	b580      	push	{r7, lr}
 8007124:	b088      	sub	sp, #32
 8007126:	af00      	add	r7, sp, #0
 8007128:	60f8      	str	r0, [r7, #12]
 800712a:	607a      	str	r2, [r7, #4]
 800712c:	461a      	mov	r2, r3
 800712e:	460b      	mov	r3, r1
 8007130:	72fb      	strb	r3, [r7, #11]
 8007132:	4613      	mov	r3, r2
 8007134:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	799b      	ldrb	r3, [r3, #6]
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	d13d      	bne.n	80071c0 <HAL_SUBGHZ_ExecGetCmd+0x9e>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	795b      	ldrb	r3, [r3, #5]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d101      	bne.n	8007150 <HAL_SUBGHZ_ExecGetCmd+0x2e>
 800714c:	2302      	movs	r3, #2
 800714e:	e038      	b.n	80071c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	2201      	movs	r2, #1
 8007154:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 8007156:	68f8      	ldr	r0, [r7, #12]
 8007158:	f000 fa26 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 800715c:	f7ff fdee 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, (uint8_t)Command);
 8007160:	7afb      	ldrb	r3, [r7, #11]
 8007162:	4619      	mov	r1, r3
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 f971 	bl	800744c <SUBGHZSPI_Transmit>

    /* Use to flush the Status (First byte) receive from SUBGHZ as not use */
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 800716a:	2100      	movs	r1, #0
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f96d 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007172:	2300      	movs	r3, #0
 8007174:	82fb      	strh	r3, [r7, #22]
 8007176:	e009      	b.n	800718c <HAL_SUBGHZ_ExecGetCmd+0x6a>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 8007178:	69b9      	ldr	r1, [r7, #24]
 800717a:	68f8      	ldr	r0, [r7, #12]
 800717c:	f000 f9bc 	bl	80074f8 <SUBGHZSPI_Receive>
      pData++;
 8007180:	69bb      	ldr	r3, [r7, #24]
 8007182:	3301      	adds	r3, #1
 8007184:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 8007186:	8afb      	ldrh	r3, [r7, #22]
 8007188:	3301      	adds	r3, #1
 800718a:	82fb      	strh	r3, [r7, #22]
 800718c:	8afa      	ldrh	r2, [r7, #22]
 800718e:	893b      	ldrh	r3, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d3f1      	bcc.n	8007178 <HAL_SUBGHZ_ExecGetCmd+0x56>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 8007194:	f7ff fdc2 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 8007198:	68f8      	ldr	r0, [r7, #12]
 800719a:	f000 fa29 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d002      	beq.n	80071ac <HAL_SUBGHZ_ExecGetCmd+0x8a>
    {
      status = HAL_ERROR;
 80071a6:	2301      	movs	r3, #1
 80071a8:	77fb      	strb	r3, [r7, #31]
 80071aa:	e001      	b.n	80071b0 <HAL_SUBGHZ_ExecGetCmd+0x8e>
    }
    else
    {
      status = HAL_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	2201      	movs	r2, #1
 80071b4:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2200      	movs	r2, #0
 80071ba:	715a      	strb	r2, [r3, #5]

    return status;
 80071bc:	7ffb      	ldrb	r3, [r7, #31]
 80071be:	e000      	b.n	80071c2 <HAL_SUBGHZ_ExecGetCmd+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80071c0:	2302      	movs	r3, #2
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3720      	adds	r7, #32
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}

080071ca <HAL_SUBGHZ_WriteBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_WriteBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                         uint8_t Offset,
                                         uint8_t *pBuffer,
                                         uint16_t Size)
{
 80071ca:	b580      	push	{r7, lr}
 80071cc:	b086      	sub	sp, #24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	60f8      	str	r0, [r7, #12]
 80071d2:	607a      	str	r2, [r7, #4]
 80071d4:	461a      	mov	r2, r3
 80071d6:	460b      	mov	r3, r1
 80071d8:	72fb      	strb	r3, [r7, #11]
 80071da:	4613      	mov	r3, r2
 80071dc:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	799b      	ldrb	r3, [r3, #6]
 80071e2:	b2db      	uxtb	r3, r3
 80071e4:	2b01      	cmp	r3, #1
 80071e6:	d13e      	bne.n	8007266 <HAL_SUBGHZ_WriteBuffer+0x9c>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	795b      	ldrb	r3, [r3, #5]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d101      	bne.n	80071f4 <HAL_SUBGHZ_WriteBuffer+0x2a>
 80071f0:	2302      	movs	r3, #2
 80071f2:	e039      	b.n	8007268 <HAL_SUBGHZ_WriteBuffer+0x9e>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2201      	movs	r2, #1
 80071f8:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80071fa:	68f8      	ldr	r0, [r7, #12]
 80071fc:	f000 f9d4 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 8007200:	f7ff fd9c 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_WRITE_BUFFER);
 8007204:	210e      	movs	r1, #14
 8007206:	68f8      	ldr	r0, [r7, #12]
 8007208:	f000 f920 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 800720c:	7afb      	ldrb	r3, [r7, #11]
 800720e:	4619      	mov	r1, r3
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 f91b 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 8007216:	2300      	movs	r3, #0
 8007218:	82bb      	strh	r3, [r7, #20]
 800721a:	e00a      	b.n	8007232 <HAL_SUBGHZ_WriteBuffer+0x68>
    {
      (void)SUBGHZSPI_Transmit(hsubghz, pBuffer[i]);
 800721c:	8abb      	ldrh	r3, [r7, #20]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	4413      	add	r3, r2
 8007222:	781b      	ldrb	r3, [r3, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	68f8      	ldr	r0, [r7, #12]
 8007228:	f000 f910 	bl	800744c <SUBGHZSPI_Transmit>
    for (uint16_t i = 0U; i < Size; i++)
 800722c:	8abb      	ldrh	r3, [r7, #20]
 800722e:	3301      	adds	r3, #1
 8007230:	82bb      	strh	r3, [r7, #20]
 8007232:	8aba      	ldrh	r2, [r7, #20]
 8007234:	893b      	ldrh	r3, [r7, #8]
 8007236:	429a      	cmp	r2, r3
 8007238:	d3f0      	bcc.n	800721c <HAL_SUBGHZ_WriteBuffer+0x52>
    }
    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 800723a:	f7ff fd6f 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 800723e:	68f8      	ldr	r0, [r7, #12]
 8007240:	f000 f9d6 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d002      	beq.n	8007252 <HAL_SUBGHZ_WriteBuffer+0x88>
    {
      status = HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	75fb      	strb	r3, [r7, #23]
 8007250:	e001      	b.n	8007256 <HAL_SUBGHZ_WriteBuffer+0x8c>
    }
    else
    {
      status = HAL_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	75fb      	strb	r3, [r7, #23]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2201      	movs	r2, #1
 800725a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2200      	movs	r2, #0
 8007260:	715a      	strb	r2, [r3, #5]

    return status;
 8007262:	7dfb      	ldrb	r3, [r7, #23]
 8007264:	e000      	b.n	8007268 <HAL_SUBGHZ_WriteBuffer+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8007266:	2302      	movs	r3, #2
  }
}
 8007268:	4618      	mov	r0, r3
 800726a:	3718      	adds	r7, #24
 800726c:	46bd      	mov	sp, r7
 800726e:	bd80      	pop	{r7, pc}

08007270 <HAL_SUBGHZ_ReadBuffer>:
  */
HAL_StatusTypeDef HAL_SUBGHZ_ReadBuffer(SUBGHZ_HandleTypeDef *hsubghz,
                                        uint8_t Offset,
                                        uint8_t *pBuffer,
                                        uint16_t Size)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b088      	sub	sp, #32
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	607a      	str	r2, [r7, #4]
 800727a:	461a      	mov	r2, r3
 800727c:	460b      	mov	r3, r1
 800727e:	72fb      	strb	r3, [r7, #11]
 8007280:	4613      	mov	r3, r2
 8007282:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef status;
  uint8_t *pData = pBuffer;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	61bb      	str	r3, [r7, #24]

  if (hsubghz->State == HAL_SUBGHZ_STATE_READY)
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	799b      	ldrb	r3, [r3, #6]
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d141      	bne.n	8007316 <HAL_SUBGHZ_ReadBuffer+0xa6>
  {
    /* Process Locked */
    __HAL_LOCK(hsubghz);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	795b      	ldrb	r3, [r3, #5]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_SUBGHZ_ReadBuffer+0x2e>
 800729a:	2302      	movs	r3, #2
 800729c:	e03c      	b.n	8007318 <HAL_SUBGHZ_ReadBuffer+0xa8>
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2201      	movs	r2, #1
 80072a2:	715a      	strb	r2, [r3, #5]

    (void)SUBGHZ_CheckDeviceReady(hsubghz);
 80072a4:	68f8      	ldr	r0, [r7, #12]
 80072a6:	f000 f97f 	bl	80075a8 <SUBGHZ_CheckDeviceReady>

    /* NSS = 0 */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80072aa:	f7ff fd47 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    (void)SUBGHZSPI_Transmit(hsubghz, SUBGHZ_RADIO_READ_BUFFER);
 80072ae:	211e      	movs	r1, #30
 80072b0:	68f8      	ldr	r0, [r7, #12]
 80072b2:	f000 f8cb 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, Offset);
 80072b6:	7afb      	ldrb	r3, [r7, #11]
 80072b8:	4619      	mov	r1, r3
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f8c6 	bl	800744c <SUBGHZSPI_Transmit>
    (void)SUBGHZSPI_Transmit(hsubghz, 0x00U);
 80072c0:	2100      	movs	r1, #0
 80072c2:	68f8      	ldr	r0, [r7, #12]
 80072c4:	f000 f8c2 	bl	800744c <SUBGHZSPI_Transmit>

    for (uint16_t i = 0U; i < Size; i++)
 80072c8:	2300      	movs	r3, #0
 80072ca:	82fb      	strh	r3, [r7, #22]
 80072cc:	e009      	b.n	80072e2 <HAL_SUBGHZ_ReadBuffer+0x72>
    {
      (void)SUBGHZSPI_Receive(hsubghz, (pData));
 80072ce:	69b9      	ldr	r1, [r7, #24]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f000 f911 	bl	80074f8 <SUBGHZSPI_Receive>
      pData++;
 80072d6:	69bb      	ldr	r3, [r7, #24]
 80072d8:	3301      	adds	r3, #1
 80072da:	61bb      	str	r3, [r7, #24]
    for (uint16_t i = 0U; i < Size; i++)
 80072dc:	8afb      	ldrh	r3, [r7, #22]
 80072de:	3301      	adds	r3, #1
 80072e0:	82fb      	strh	r3, [r7, #22]
 80072e2:	8afa      	ldrh	r2, [r7, #22]
 80072e4:	893b      	ldrh	r3, [r7, #8]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	d3f1      	bcc.n	80072ce <HAL_SUBGHZ_ReadBuffer+0x5e>
    }

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80072ea:	f7ff fd17 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>

    (void)SUBGHZ_WaitOnBusy(hsubghz);
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f000 f97e 	bl	80075f0 <SUBGHZ_WaitOnBusy>

    if (hsubghz->ErrorCode != HAL_SUBGHZ_ERROR_NONE)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	689b      	ldr	r3, [r3, #8]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <HAL_SUBGHZ_ReadBuffer+0x92>
    {
      status = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
 8007300:	e001      	b.n	8007306 <HAL_SUBGHZ_ReadBuffer+0x96>
    }
    else
    {
      status = HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	77fb      	strb	r3, [r7, #31]
    }

    hsubghz->State = HAL_SUBGHZ_STATE_READY;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2201      	movs	r2, #1
 800730a:	719a      	strb	r2, [r3, #6]

    /* Process Unlocked */
    __HAL_UNLOCK(hsubghz);
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2200      	movs	r2, #0
 8007310:	715a      	strb	r2, [r3, #5]

    return status;
 8007312:	7ffb      	ldrb	r3, [r7, #31]
 8007314:	e000      	b.n	8007318 <HAL_SUBGHZ_ReadBuffer+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007316:	2302      	movs	r3, #2
  }
}
 8007318:	4618      	mov	r0, r3
 800731a:	3720      	adds	r7, #32
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <HAL_SUBGHZ_IRQHandler>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *               the configuration information for the specified SUBGHZ module.
  * @retval None
  */
void HAL_SUBGHZ_IRQHandler(SUBGHZ_HandleTypeDef *hsubghz)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b084      	sub	sp, #16
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
  uint8_t tmpisr[2U] = {0U};
 8007328:	2300      	movs	r3, #0
 800732a:	81bb      	strh	r3, [r7, #12]
  uint16_t itsource;

  /* Retrieve Interrupts from SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecGetCmd(hsubghz, RADIO_GET_IRQSTATUS, tmpisr, 2U);
 800732c:	f107 020c 	add.w	r2, r7, #12
 8007330:	2302      	movs	r3, #2
 8007332:	2112      	movs	r1, #18
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f7ff fef4 	bl	8007122 <HAL_SUBGHZ_ExecGetCmd>
  itsource = tmpisr[0U];
 800733a:	7b3b      	ldrb	r3, [r7, #12]
 800733c:	81fb      	strh	r3, [r7, #14]
  itsource = (itsource << 8U) | tmpisr[1U];
 800733e:	89fb      	ldrh	r3, [r7, #14]
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	b21a      	sxth	r2, r3
 8007344:	7b7b      	ldrb	r3, [r7, #13]
 8007346:	b21b      	sxth	r3, r3
 8007348:	4313      	orrs	r3, r2
 800734a:	b21b      	sxth	r3, r3
 800734c:	81fb      	strh	r3, [r7, #14]

  /* Packet transmission completed Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_TX_CPLT) != RESET)
 800734e:	89fb      	ldrh	r3, [r7, #14]
 8007350:	f003 0301 	and.w	r3, r3, #1
 8007354:	2b00      	cmp	r3, #0
 8007356:	d002      	beq.n	800735e <HAL_SUBGHZ_IRQHandler+0x3e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->TxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_TxCpltCallback(hsubghz);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f012 fc13 	bl	8019b84 <HAL_SUBGHZ_TxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Packet received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_CPLT) != RESET)
 800735e:	89fb      	ldrh	r3, [r7, #14]
 8007360:	f003 0302 	and.w	r3, r3, #2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_SUBGHZ_IRQHandler+0x4e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxCpltCallback(hsubghz);
#else
    HAL_SUBGHZ_RxCpltCallback(hsubghz);
 8007368:	6878      	ldr	r0, [r7, #4]
 800736a:	f012 fc19 	bl	8019ba0 <HAL_SUBGHZ_RxCpltCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Preamble Detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_PREAMBLE_DETECTED) != RESET)
 800736e:	89fb      	ldrh	r3, [r7, #14]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	2b00      	cmp	r3, #0
 8007376:	d002      	beq.n	800737e <HAL_SUBGHZ_IRQHandler+0x5e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->PreambleDetectedCallback(hsubghz);
#else
    HAL_SUBGHZ_PreambleDetectedCallback(hsubghz);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f012 fc69 	bl	8019c50 <HAL_SUBGHZ_PreambleDetectedCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /*  Valid sync word detected Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_SYNCWORD_VALID) != RESET)
 800737e:	89fb      	ldrh	r3, [r7, #14]
 8007380:	f003 0308 	and.w	r3, r3, #8
 8007384:	2b00      	cmp	r3, #0
 8007386:	d002      	beq.n	800738e <HAL_SUBGHZ_IRQHandler+0x6e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->SyncWordValidCallback(hsubghz);
#else
    HAL_SUBGHZ_SyncWordValidCallback(hsubghz);
 8007388:	6878      	ldr	r0, [r7, #4]
 800738a:	f012 fc6f 	bl	8019c6c <HAL_SUBGHZ_SyncWordValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Valid LoRa header received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_VALID) != RESET)
 800738e:	89fb      	ldrh	r3, [r7, #14]
 8007390:	f003 0310 	and.w	r3, r3, #16
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <HAL_SUBGHZ_IRQHandler+0x7e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderValidCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderValidCallback(hsubghz);
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f012 fc75 	bl	8019c88 <HAL_SUBGHZ_HeaderValidCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* LoRa header CRC error Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_HEADER_ERROR) != RESET)
 800739e:	89fb      	ldrh	r3, [r7, #14]
 80073a0:	f003 0320 	and.w	r3, r3, #32
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d002      	beq.n	80073ae <HAL_SUBGHZ_IRQHandler+0x8e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->HeaderErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_HeaderErrorCallback(hsubghz);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f012 fc43 	bl	8019c34 <HAL_SUBGHZ_HeaderErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Wrong CRC received Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CRC_ERROR) != RESET)
 80073ae:	89fb      	ldrh	r3, [r7, #14]
 80073b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d002      	beq.n	80073be <HAL_SUBGHZ_IRQHandler+0x9e>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->CRCErrorCallback(hsubghz);
#else
    HAL_SUBGHZ_CRCErrorCallback(hsubghz);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f012 fbff 	bl	8019bbc <HAL_SUBGHZ_CRCErrorCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Channel activity detection finished Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_DONE) != RESET)
 80073be:	89fb      	ldrh	r3, [r7, #14]
 80073c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d00d      	beq.n	80073e4 <HAL_SUBGHZ_IRQHandler+0xc4>
    {
      hsubghz->CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
    }
#else
    /* Channel activity Detected Interrupt */
    if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_CAD_ACTIVITY_DETECTED) != RESET)
 80073c8:	89fb      	ldrh	r3, [r7, #14]
 80073ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d004      	beq.n	80073dc <HAL_SUBGHZ_IRQHandler+0xbc>
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_DETECTED);
 80073d2:	2101      	movs	r1, #1
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f012 fbff 	bl	8019bd8 <HAL_SUBGHZ_CADStatusCallback>
 80073da:	e003      	b.n	80073e4 <HAL_SUBGHZ_IRQHandler+0xc4>
    }
    else
    {
      HAL_SUBGHZ_CADStatusCallback(hsubghz, HAL_SUBGHZ_CAD_CLEAR);
 80073dc:	2100      	movs	r1, #0
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f012 fbfa 	bl	8019bd8 <HAL_SUBGHZ_CADStatusCallback>
    }
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Rx or Tx Timeout Interrupt */
  if (SUBGHZ_CHECK_IT_SOURCE(itsource, SUBGHZ_IT_RX_TX_TIMEOUT) != RESET)
 80073e4:	89fb      	ldrh	r3, [r7, #14]
 80073e6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d002      	beq.n	80073f4 <HAL_SUBGHZ_IRQHandler+0xd4>
  {
#if (USE_HAL_SUBGHZ_REGISTER_CALLBACKS == 1U)
    hsubghz->RxTxTimeoutCallback(hsubghz);
#else
    HAL_SUBGHZ_RxTxTimeoutCallback(hsubghz);
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f012 fc10 	bl	8019c14 <HAL_SUBGHZ_RxTxTimeoutCallback>
#endif /* USE_HAL_SUBGHZ_REGISTER_CALLBACKS */
  }

  /* Clear SUBGHZ Irq Register */
  (void)HAL_SUBGHZ_ExecSetCmd(hsubghz, RADIO_CLR_IRQSTATUS, tmpisr, 2);
 80073f4:	f107 020c 	add.w	r2, r7, #12
 80073f8:	2302      	movs	r3, #2
 80073fa:	2102      	movs	r1, #2
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff fe31 	bl	8007064 <HAL_SUBGHZ_ExecSetCmd>
}
 8007402:	bf00      	nop
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <SUBGHZSPI_Init>:
  * @brief  Initializes the SUBGHZSPI peripheral
  * @param  BaudratePrescaler SPI Baudrate prescaler
  * @retval None
  */
void SUBGHZSPI_Init(uint32_t BaudratePrescaler)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SUBGHZ_ALL_INSTANCE(SUBGHZSPI));

  /* Disable SUBGHZSPI Peripheral */
  CLEAR_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007414:	4b0c      	ldr	r3, [pc, #48]	@ (8007448 <SUBGHZSPI_Init+0x3c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a0b      	ldr	r2, [pc, #44]	@ (8007448 <SUBGHZSPI_Init+0x3c>)
 800741a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800741e:	6013      	str	r3, [r2, #0]
   *       NSS management: Internal (Done with External bit inside PWR        *
   *  Communication speed: BaudratePrescaler                             *
   *            First bit: MSB                                                *
   *      CRC calculation: Disable                                            *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR1, (SPI_CR1_MSTR | SPI_CR1_SSI | BaudratePrescaler | SPI_CR1_SSM));
 8007420:	4a09      	ldr	r2, [pc, #36]	@ (8007448 <SUBGHZSPI_Init+0x3c>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f443 7341 	orr.w	r3, r3, #772	@ 0x304
 8007428:	6013      	str	r3, [r2, #0]
   *            Data Size: 8bits                                              *
   *              TI Mode: Disable                                            *
   *            NSS Pulse: Disable                                            *
   *    Rx FIFO Threshold: 8bits                                              *
   *--------------------------------------------------------------------------*/
  WRITE_REG(SUBGHZSPI->CR2, (SPI_CR2_FRXTH |  SPI_CR2_DS_0 | SPI_CR2_DS_1 | SPI_CR2_DS_2));
 800742a:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <SUBGHZSPI_Init+0x3c>)
 800742c:	f44f 52b8 	mov.w	r2, #5888	@ 0x1700
 8007430:	605a      	str	r2, [r3, #4]

  /* Enable SUBGHZSPI Peripheral */
  SET_BIT(SUBGHZSPI->CR1, SPI_CR1_SPE);
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <SUBGHZSPI_Init+0x3c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	4a04      	ldr	r2, [pc, #16]	@ (8007448 <SUBGHZSPI_Init+0x3c>)
 8007438:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800743c:	6013      	str	r3, [r2, #0]
}
 800743e:	bf00      	nop
 8007440:	370c      	adds	r7, #12
 8007442:	46bd      	mov	sp, r7
 8007444:	bc80      	pop	{r7}
 8007446:	4770      	bx	lr
 8007448:	58010000 	.word	0x58010000

0800744c <SUBGHZSPI_Transmit>:
  * @param  Data  data to transmit
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Transmit(SUBGHZ_HandleTypeDef *hsubghz,
                                     uint8_t Data)
{
 800744c:	b480      	push	{r7}
 800744e:	b087      	sub	sp, #28
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800745c:	4b23      	ldr	r3, [pc, #140]	@ (80074ec <SUBGHZSPI_Transmit+0xa0>)
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	4613      	mov	r3, r2
 8007462:	00db      	lsls	r3, r3, #3
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	0cdb      	lsrs	r3, r3, #19
 800746a:	2264      	movs	r2, #100	@ 0x64
 800746c:	fb02 f303 	mul.w	r3, r2, r3
 8007470:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d105      	bne.n	8007484 <SUBGHZSPI_Transmit+0x38>
    {
      status = HAL_ERROR;
 8007478:	2301      	movs	r3, #1
 800747a:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2201      	movs	r2, #1
 8007480:	609a      	str	r2, [r3, #8]
      break;
 8007482:	e008      	b.n	8007496 <SUBGHZSPI_Transmit+0x4a>
    }
    count--;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3b01      	subs	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 800748a:	4b19      	ldr	r3, [pc, #100]	@ (80074f0 <SUBGHZSPI_Transmit+0xa4>)
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	f003 0302 	and.w	r3, r3, #2
 8007492:	2b02      	cmp	r3, #2
 8007494:	d1ed      	bne.n	8007472 <SUBGHZSPI_Transmit+0x26>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007496:	4b17      	ldr	r3, [pc, #92]	@ (80074f4 <SUBGHZSPI_Transmit+0xa8>)
 8007498:	613b      	str	r3, [r7, #16]
  *spidr = Data;
 800749a:	693b      	ldr	r3, [r7, #16]
 800749c:	78fa      	ldrb	r2, [r7, #3]
 800749e:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = Data;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 80074a0:	4b12      	ldr	r3, [pc, #72]	@ (80074ec <SUBGHZSPI_Transmit+0xa0>)
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	4613      	mov	r3, r2
 80074a6:	00db      	lsls	r3, r3, #3
 80074a8:	1a9b      	subs	r3, r3, r2
 80074aa:	009b      	lsls	r3, r3, #2
 80074ac:	0cdb      	lsrs	r3, r3, #19
 80074ae:	2264      	movs	r2, #100	@ 0x64
 80074b0:	fb02 f303 	mul.w	r3, r2, r3
 80074b4:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d105      	bne.n	80074c8 <SUBGHZSPI_Transmit+0x7c>
    {
      status = HAL_ERROR;
 80074bc:	2301      	movs	r3, #1
 80074be:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2201      	movs	r2, #1
 80074c4:	609a      	str	r2, [r3, #8]
      break;
 80074c6:	e008      	b.n	80074da <SUBGHZSPI_Transmit+0x8e>
    }
    count--;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3b01      	subs	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 80074ce:	4b08      	ldr	r3, [pc, #32]	@ (80074f0 <SUBGHZSPI_Transmit+0xa4>)
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f003 0301 	and.w	r3, r3, #1
 80074d6:	2b01      	cmp	r3, #1
 80074d8:	d1ed      	bne.n	80074b6 <SUBGHZSPI_Transmit+0x6a>

  /* Flush Rx data */
  READ_REG(SUBGHZSPI->DR);
 80074da:	4b05      	ldr	r3, [pc, #20]	@ (80074f0 <SUBGHZSPI_Transmit+0xa4>)
 80074dc:	68db      	ldr	r3, [r3, #12]

  return status;
 80074de:	7dfb      	ldrb	r3, [r7, #23]
}
 80074e0:	4618      	mov	r0, r3
 80074e2:	371c      	adds	r7, #28
 80074e4:	46bd      	mov	sp, r7
 80074e6:	bc80      	pop	{r7}
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	20000000 	.word	0x20000000
 80074f0:	58010000 	.word	0x58010000
 80074f4:	5801000c 	.word	0x5801000c

080074f8 <SUBGHZSPI_Receive>:
  * @param  pData  pointer on data to receive
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZSPI_Receive(SUBGHZ_HandleTypeDef *hsubghz,
                                    uint8_t *pData)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b087      	sub	sp, #28
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
 8007500:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t count;

  /* Handle Tx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 8007506:	4b25      	ldr	r3, [pc, #148]	@ (800759c <SUBGHZSPI_Receive+0xa4>)
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	4613      	mov	r3, r2
 800750c:	00db      	lsls	r3, r3, #3
 800750e:	1a9b      	subs	r3, r3, r2
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	0cdb      	lsrs	r3, r3, #19
 8007514:	2264      	movs	r2, #100	@ 0x64
 8007516:	fb02 f303 	mul.w	r3, r2, r3
 800751a:	60fb      	str	r3, [r7, #12]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d105      	bne.n	800752e <SUBGHZSPI_Receive+0x36>
    {
      status = HAL_ERROR;
 8007522:	2301      	movs	r3, #1
 8007524:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	609a      	str	r2, [r3, #8]
      break;
 800752c:	e008      	b.n	8007540 <SUBGHZSPI_Receive+0x48>
    }
    count--;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	3b01      	subs	r3, #1
 8007532:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_TXE) != (SPI_SR_TXE));
 8007534:	4b1a      	ldr	r3, [pc, #104]	@ (80075a0 <SUBGHZSPI_Receive+0xa8>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f003 0302 	and.w	r3, r3, #2
 800753c:	2b02      	cmp	r3, #2
 800753e:	d1ed      	bne.n	800751c <SUBGHZSPI_Receive+0x24>

  /* Transmit Data*/
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SUBGHZSPI->DR);
 8007540:	4b18      	ldr	r3, [pc, #96]	@ (80075a4 <SUBGHZSPI_Receive+0xac>)
 8007542:	613b      	str	r3, [r7, #16]
  *spidr = SUBGHZ_DUMMY_DATA;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	22ff      	movs	r2, #255	@ 0xff
 8007548:	701a      	strb	r2, [r3, #0]
  *((__IO uint8_t *)&SUBGHZSPI->DR) = SUBGHZ_DUMMY_DATA;
#endif /* __GNUC__ */

  /* Handle Rx transmission from SUBGHZSPI peripheral to Radio ****************/
  /* Initialize Timeout */
  count = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_DEFAULT_LOOP_TIME;
 800754a:	4b14      	ldr	r3, [pc, #80]	@ (800759c <SUBGHZSPI_Receive+0xa4>)
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4613      	mov	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	1a9b      	subs	r3, r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	0cdb      	lsrs	r3, r3, #19
 8007558:	2264      	movs	r2, #100	@ 0x64
 800755a:	fb02 f303 	mul.w	r3, r2, r3
 800755e:	60fb      	str	r3, [r7, #12]

  /* Wait until RXNE flag is set */
  do
  {
    if (count == 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d105      	bne.n	8007572 <SUBGHZSPI_Receive+0x7a>
    {
      status = HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_TIMEOUT;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2201      	movs	r2, #1
 800756e:	609a      	str	r2, [r3, #8]
      break;
 8007570:	e008      	b.n	8007584 <SUBGHZSPI_Receive+0x8c>
    }
    count--;
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	3b01      	subs	r3, #1
 8007576:	60fb      	str	r3, [r7, #12]
  } while (READ_BIT(SUBGHZSPI->SR, SPI_SR_RXNE) != (SPI_SR_RXNE));
 8007578:	4b09      	ldr	r3, [pc, #36]	@ (80075a0 <SUBGHZSPI_Receive+0xa8>)
 800757a:	689b      	ldr	r3, [r3, #8]
 800757c:	f003 0301 	and.w	r3, r3, #1
 8007580:	2b01      	cmp	r3, #1
 8007582:	d1ed      	bne.n	8007560 <SUBGHZSPI_Receive+0x68>

  /* Retrieve pData */
  *pData = (uint8_t)(READ_REG(SUBGHZSPI->DR));
 8007584:	4b06      	ldr	r3, [pc, #24]	@ (80075a0 <SUBGHZSPI_Receive+0xa8>)
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	b2da      	uxtb	r2, r3
 800758a:	683b      	ldr	r3, [r7, #0]
 800758c:	701a      	strb	r2, [r3, #0]

  return status;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007590:	4618      	mov	r0, r3
 8007592:	371c      	adds	r7, #28
 8007594:	46bd      	mov	sp, r7
 8007596:	bc80      	pop	{r7}
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	20000000 	.word	0x20000000
 80075a0:	58010000 	.word	0x58010000
 80075a4:	5801000c 	.word	0x5801000c

080075a8 <SUBGHZ_CheckDeviceReady>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_CheckDeviceReady(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Wakeup radio in case of sleep mode: Select-Unselect radio */
  if (hsubghz->DeepSleep == SUBGHZ_DEEP_SLEEP_ENABLE)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	791b      	ldrb	r3, [r3, #4]
 80075b4:	2b01      	cmp	r3, #1
 80075b6:	d111      	bne.n	80075dc <SUBGHZ_CheckDeviceReady+0x34>
  {
    /* Initialize NSS switch Delay */
    count  = SUBGHZ_NSS_LOOP_TIME;
 80075b8:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <SUBGHZ_CheckDeviceReady+0x44>)
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	4613      	mov	r3, r2
 80075be:	005b      	lsls	r3, r3, #1
 80075c0:	4413      	add	r3, r2
 80075c2:	00db      	lsls	r3, r3, #3
 80075c4:	0c1b      	lsrs	r3, r3, #16
 80075c6:	60fb      	str	r3, [r7, #12]

    /* NSS = 0; */
    LL_PWR_SelectSUBGHZSPI_NSS();
 80075c8:	f7ff fbb8 	bl	8006d3c <LL_PWR_SelectSUBGHZSPI_NSS>

    /* Wait Radio wakeup */
    do
    {
      count--;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3b01      	subs	r3, #1
 80075d0:	60fb      	str	r3, [r7, #12]
    } while (count != 0UL);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d1f9      	bne.n	80075cc <SUBGHZ_CheckDeviceReady+0x24>

    /* NSS = 1 */
    LL_PWR_UnselectSUBGHZSPI_NSS();
 80075d8:	f7ff fba0 	bl	8006d1c <LL_PWR_UnselectSUBGHZSPI_NSS>
  }
  return (SUBGHZ_WaitOnBusy(hsubghz));
 80075dc:	6878      	ldr	r0, [r7, #4]
 80075de:	f000 f807 	bl	80075f0 <SUBGHZ_WaitOnBusy>
 80075e2:	4603      	mov	r3, r0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}
 80075ec:	20000000 	.word	0x20000000

080075f0 <SUBGHZ_WaitOnBusy>:
  * @param  hsubghz pointer to a SUBGHZ_HandleTypeDef structure that contains
  *         the handle information for SUBGHZ module.
  * @retval HAL status
  */
HAL_StatusTypeDef SUBGHZ_WaitOnBusy(SUBGHZ_HandleTypeDef *hsubghz)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b086      	sub	sp, #24
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  __IO uint32_t count;
  uint32_t mask;

  status = HAL_OK;
 80075f8:	2300      	movs	r3, #0
 80075fa:	75fb      	strb	r3, [r7, #23]
  count  = SUBGHZ_DEFAULT_TIMEOUT * SUBGHZ_RFBUSY_LOOP_TIME;
 80075fc:	4b12      	ldr	r3, [pc, #72]	@ (8007648 <SUBGHZ_WaitOnBusy+0x58>)
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	4613      	mov	r3, r2
 8007602:	005b      	lsls	r3, r3, #1
 8007604:	4413      	add	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	0d1b      	lsrs	r3, r3, #20
 800760a:	2264      	movs	r2, #100	@ 0x64
 800760c:	fb02 f303 	mul.w	r3, r2, r3
 8007610:	60fb      	str	r3, [r7, #12]

  /* Wait until Busy signal is set */
  do
  {
    mask = LL_PWR_IsActiveFlag_RFBUSYMS();
 8007612:	f7ff fbc1 	bl	8006d98 <LL_PWR_IsActiveFlag_RFBUSYMS>
 8007616:	6138      	str	r0, [r7, #16]

    if (count == 0U)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d105      	bne.n	800762a <SUBGHZ_WaitOnBusy+0x3a>
    {
      status  = HAL_ERROR;
 800761e:	2301      	movs	r3, #1
 8007620:	75fb      	strb	r3, [r7, #23]
      hsubghz->ErrorCode = HAL_SUBGHZ_ERROR_RF_BUSY;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2202      	movs	r2, #2
 8007626:	609a      	str	r2, [r3, #8]
      break;
 8007628:	e009      	b.n	800763e <SUBGHZ_WaitOnBusy+0x4e>
    }
    count--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	3b01      	subs	r3, #1
 800762e:	60fb      	str	r3, [r7, #12]
  } while ((LL_PWR_IsActiveFlag_RFBUSYS()& mask) == 1UL);
 8007630:	f7ff fba0 	bl	8006d74 <LL_PWR_IsActiveFlag_RFBUSYS>
 8007634:	4602      	mov	r2, r0
 8007636:	693b      	ldr	r3, [r7, #16]
 8007638:	4013      	ands	r3, r2
 800763a:	2b01      	cmp	r3, #1
 800763c:	d0e9      	beq.n	8007612 <SUBGHZ_WaitOnBusy+0x22>

  return status;
 800763e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20000000 	.word	0x20000000

0800764c <LL_RCC_GetUSARTClockSource>:
{
 800764c:	b480      	push	{r7}
 800764e:	b083      	sub	sp, #12
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8007654:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007658:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	401a      	ands	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	041b      	lsls	r3, r3, #16
 8007664:	4313      	orrs	r3, r2
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr

08007670 <LL_RCC_GetLPUARTClockSource>:
{
 8007670:	b480      	push	{r7}
 8007672:	b083      	sub	sp, #12
 8007674:	af00      	add	r7, sp, #0
 8007676:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8007678:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800767c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	4013      	ands	r3, r2
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b082      	sub	sp, #8
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d101      	bne.n	80076a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800769c:	2301      	movs	r3, #1
 800769e:	e042      	b.n	8007726 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d106      	bne.n	80076b8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80076b2:	6878      	ldr	r0, [r7, #4]
 80076b4:	f7fa feae 	bl	8002414 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2224      	movs	r2, #36	@ 0x24
 80076bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  __HAL_UART_DISABLE(huart);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	681a      	ldr	r2, [r3, #0]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	f022 0201 	bic.w	r2, r2, #1
 80076ce:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	f000 fc4b 	bl	8007f6c <UART_SetConfig>
 80076d6:	4603      	mov	r3, r0
 80076d8:	2b01      	cmp	r3, #1
 80076da:	d101      	bne.n	80076e0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e022      	b.n	8007726 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d002      	beq.n	80076ee <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f000 feb3 	bl	8008454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	685a      	ldr	r2, [r3, #4]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80076fc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689a      	ldr	r2, [r3, #8]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800770c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	681a      	ldr	r2, [r3, #0]
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f042 0201 	orr.w	r2, r2, #1
 800771c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800771e:	6878      	ldr	r0, [r7, #4]
 8007720:	f000 ff39 	bl	8008596 <UART_CheckIdleState>
 8007724:	4603      	mov	r3, r0
}
 8007726:	4618      	mov	r0, r3
 8007728:	3708      	adds	r7, #8
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b08a      	sub	sp, #40	@ 0x28
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007744:	2b20      	cmp	r3, #32
 8007746:	d142      	bne.n	80077ce <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d002      	beq.n	8007754 <HAL_UART_Receive_IT+0x24>
 800774e:	88fb      	ldrh	r3, [r7, #6]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d101      	bne.n	8007758 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e03b      	b.n	80077d0 <HAL_UART_Receive_IT+0xa0>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <HAL_UART_Receive_IT+0x36>
 8007762:	2302      	movs	r3, #2
 8007764:	e034      	b.n	80077d0 <HAL_UART_Receive_IT+0xa0>
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	2201      	movs	r2, #1
 800776a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a17      	ldr	r2, [pc, #92]	@ (80077d8 <HAL_UART_Receive_IT+0xa8>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d01f      	beq.n	80077be <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if(READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007788:	2b00      	cmp	r3, #0
 800778a:	d018      	beq.n	80077be <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	e853 3f00 	ldrex	r3, [r3]
 8007798:	613b      	str	r3, [r7, #16]
   return(result);
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80077a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	461a      	mov	r2, r3
 80077a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077aa:	623b      	str	r3, [r7, #32]
 80077ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ae:	69f9      	ldr	r1, [r7, #28]
 80077b0:	6a3a      	ldr	r2, [r7, #32]
 80077b2:	e841 2300 	strex	r3, r2, [r1]
 80077b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80077b8:	69bb      	ldr	r3, [r7, #24]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1e6      	bne.n	800778c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return(UART_Start_Receive_IT(huart, pData, Size));
 80077be:	88fb      	ldrh	r3, [r7, #6]
 80077c0:	461a      	mov	r2, r3
 80077c2:	68b9      	ldr	r1, [r7, #8]
 80077c4:	68f8      	ldr	r0, [r7, #12]
 80077c6:	f000 fff9 	bl	80087bc <UART_Start_Receive_IT>
 80077ca:	4603      	mov	r3, r0
 80077cc:	e000      	b.n	80077d0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80077ce:	2302      	movs	r3, #2
  }
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3728      	adds	r7, #40	@ 0x28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	40008000 	.word	0x40008000

080077dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08a      	sub	sp, #40	@ 0x28
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80077f0:	2b20      	cmp	r3, #32
 80077f2:	d17a      	bne.n	80078ea <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d002      	beq.n	8007800 <HAL_UART_Transmit_DMA+0x24>
 80077fa:	88fb      	ldrh	r3, [r7, #6]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d101      	bne.n	8007804 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	e073      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
        return  HAL_ERROR;
      }
    }

#endif /* CORE_CM0PLUS */
    __HAL_LOCK(huart);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UART_Transmit_DMA+0x36>
 800780e:	2302      	movs	r3, #2
 8007810:	e06c      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    huart->pTxBuffPtr  = pData;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	88fa      	ldrh	r2, [r7, #6]
 8007824:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	88fa      	ldrh	r2, [r7, #6]
 800782c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2200      	movs	r2, #0
 8007834:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2221      	movs	r2, #33	@ 0x21
 800783c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

    if (huart->hdmatx != NULL)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007844:	2b00      	cmp	r3, #0
 8007846:	d02c      	beq.n	80078a2 <HAL_UART_Transmit_DMA+0xc6>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800784c:	4a29      	ldr	r2, [pc, #164]	@ (80078f4 <HAL_UART_Transmit_DMA+0x118>)
 800784e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007854:	4a28      	ldr	r2, [pc, #160]	@ (80078f8 <HAL_UART_Transmit_DMA+0x11c>)
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800785c:	4a27      	ldr	r2, [pc, #156]	@ (80078fc <HAL_UART_Transmit_DMA+0x120>)
 800785e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007864:	2200      	movs	r2, #0
 8007866:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007870:	4619      	mov	r1, r3
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3328      	adds	r3, #40	@ 0x28
 8007878:	461a      	mov	r2, r3
 800787a:	88fb      	ldrh	r3, [r7, #6]
 800787c:	f7fc fba6 	bl	8003fcc <HAL_DMA_Start_IT>
 8007880:	4603      	mov	r3, r0
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00d      	beq.n	80078a2 <HAL_UART_Transmit_DMA+0xc6>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2210      	movs	r2, #16
 800788a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        __HAL_UNLOCK(huart);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2220      	movs	r2, #32
 800789a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e024      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2240      	movs	r2, #64	@ 0x40
 80078a8:	621a      	str	r2, [r3, #32]

    __HAL_UNLOCK(huart);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	3308      	adds	r3, #8
 80078b8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	e853 3f00 	ldrex	r3, [r3]
 80078c0:	613b      	str	r3, [r7, #16]
   return(result);
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	3308      	adds	r3, #8
 80078d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078d2:	623a      	str	r2, [r7, #32]
 80078d4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078d6:	69f9      	ldr	r1, [r7, #28]
 80078d8:	6a3a      	ldr	r2, [r7, #32]
 80078da:	e841 2300 	strex	r3, r2, [r1]
 80078de:	61bb      	str	r3, [r7, #24]
   return(result);
 80078e0:	69bb      	ldr	r3, [r7, #24]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d1e5      	bne.n	80078b2 <HAL_UART_Transmit_DMA+0xd6>

    return HAL_OK;
 80078e6:	2300      	movs	r3, #0
 80078e8:	e000      	b.n	80078ec <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 80078ea:	2302      	movs	r3, #2
  }
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3728      	adds	r7, #40	@ 0x28
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	08008b57 	.word	0x08008b57
 80078f8:	08008bf1 	.word	0x08008bf1
 80078fc:	08008c0d 	.word	0x08008c0d

08007900 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b0ba      	sub	sp, #232	@ 0xe8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	69db      	ldr	r3, [r3, #28]
 800790e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007926:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800792a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800792e:	4013      	ands	r3, r2
 8007930:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007934:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11b      	bne.n	8007974 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800793c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007940:	f003 0320 	and.w	r3, r3, #32
 8007944:	2b00      	cmp	r3, #0
 8007946:	d015      	beq.n	8007974 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800794c:	f003 0320 	and.w	r3, r3, #32
 8007950:	2b00      	cmp	r3, #0
 8007952:	d105      	bne.n	8007960 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007954:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007958:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800795c:	2b00      	cmp	r3, #0
 800795e:	d009      	beq.n	8007974 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 82d6 	beq.w	8007f16 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	4798      	blx	r3
      }
      return;
 8007972:	e2d0      	b.n	8007f16 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007974:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 811f 	beq.w	8007bbc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800797e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007982:	4b8b      	ldr	r3, [pc, #556]	@ (8007bb0 <HAL_UART_IRQHandler+0x2b0>)
 8007984:	4013      	ands	r3, r2
 8007986:	2b00      	cmp	r3, #0
 8007988:	d106      	bne.n	8007998 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800798a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800798e:	4b89      	ldr	r3, [pc, #548]	@ (8007bb4 <HAL_UART_IRQHandler+0x2b4>)
 8007990:	4013      	ands	r3, r2
 8007992:	2b00      	cmp	r3, #0
 8007994:	f000 8112 	beq.w	8007bbc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007998:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800799c:	f003 0301 	and.w	r3, r3, #1
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d011      	beq.n	80079c8 <HAL_UART_IRQHandler+0xc8>
 80079a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00b      	beq.n	80079c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	2201      	movs	r2, #1
 80079b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079be:	f043 0201 	orr.w	r2, r3, #1
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079cc:	f003 0302 	and.w	r3, r3, #2
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d011      	beq.n	80079f8 <HAL_UART_IRQHandler+0xf8>
 80079d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079d8:	f003 0301 	and.w	r3, r3, #1
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d00b      	beq.n	80079f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	2202      	movs	r2, #2
 80079e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80079ee:	f043 0204 	orr.w	r2, r3, #4
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079fc:	f003 0304 	and.w	r3, r3, #4
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d011      	beq.n	8007a28 <HAL_UART_IRQHandler+0x128>
 8007a04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007a08:	f003 0301 	and.w	r3, r3, #1
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d00b      	beq.n	8007a28 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2204      	movs	r2, #4
 8007a16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a1e:	f043 0202 	orr.w	r2, r3, #2
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a2c:	f003 0308 	and.w	r3, r3, #8
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d017      	beq.n	8007a64 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d105      	bne.n	8007a4c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007a40:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007a44:	4b5a      	ldr	r3, [pc, #360]	@ (8007bb0 <HAL_UART_IRQHandler+0x2b0>)
 8007a46:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d00b      	beq.n	8007a64 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	2208      	movs	r2, #8
 8007a52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a5a:	f043 0208 	orr.w	r2, r3, #8
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007a64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007a68:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d012      	beq.n	8007a96 <HAL_UART_IRQHandler+0x196>
 8007a70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007a74:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00c      	beq.n	8007a96 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007a84:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8c:	f043 0220 	orr.w	r2, r3, #32
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f000 823c 	beq.w	8007f1a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aa6:	f003 0320 	and.w	r3, r3, #32
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ab2:	f003 0320 	and.w	r3, r3, #32
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d105      	bne.n	8007ac6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007aba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d003      	beq.n	8007ad6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007adc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007aea:	2b40      	cmp	r3, #64	@ 0x40
 8007aec:	d005      	beq.n	8007afa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007aee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007af2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d04f      	beq.n	8007b9a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007afa:	6878      	ldr	r0, [r7, #4]
 8007afc:	f000 ffc6 	bl	8008a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	689b      	ldr	r3, [r3, #8]
 8007b06:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b0a:	2b40      	cmp	r3, #64	@ 0x40
 8007b0c:	d141      	bne.n	8007b92 <HAL_UART_IRQHandler+0x292>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	3308      	adds	r3, #8
 8007b14:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b18:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007b1c:	e853 3f00 	ldrex	r3, [r3]
 8007b20:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007b24:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007b28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	3308      	adds	r3, #8
 8007b36:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007b3a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007b46:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007b4a:	e841 2300 	strex	r3, r2, [r1]
 8007b4e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007b52:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d1d9      	bne.n	8007b0e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d013      	beq.n	8007b8a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b66:	4a14      	ldr	r2, [pc, #80]	@ (8007bb8 <HAL_UART_IRQHandler+0x2b8>)
 8007b68:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f7fc fb08 	bl	8004184 <HAL_DMA_Abort_IT>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d017      	beq.n	8007baa <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b80:	687a      	ldr	r2, [r7, #4]
 8007b82:	6fd2      	ldr	r2, [r2, #124]	@ 0x7c
 8007b84:	4610      	mov	r0, r2
 8007b86:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b88:	e00f      	b.n	8007baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 f9d9 	bl	8007f42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b90:	e00b      	b.n	8007baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f000 f9d5 	bl	8007f42 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	e007      	b.n	8007baa <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f9d1 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      }
    }
    return;
 8007ba8:	e1b7      	b.n	8007f1a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007baa:	bf00      	nop
    return;
 8007bac:	e1b5      	b.n	8007f1a <HAL_UART_IRQHandler+0x61a>
 8007bae:	bf00      	nop
 8007bb0:	10000001 	.word	0x10000001
 8007bb4:	04000120 	.word	0x04000120
 8007bb8:	08008c8d 	.word	0x08008c8d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	f040 814a 	bne.w	8007e5a <HAL_UART_IRQHandler+0x55a>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 8007bc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bca:	f003 0310 	and.w	r3, r3, #16
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	f000 8143 	beq.w	8007e5a <HAL_UART_IRQHandler+0x55a>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 8007bd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd8:	f003 0310 	and.w	r3, r3, #16
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 813c 	beq.w	8007e5a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2210      	movs	r2, #16
 8007be8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bf4:	2b40      	cmp	r3, #64	@ 0x40
 8007bf6:	f040 80b5 	bne.w	8007d64 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if (  (nb_remaining_rx_data > 0U)
 8007c06:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	f000 8187 	beq.w	8007f1e <HAL_UART_IRQHandler+0x61e>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	f080 817f 	bcs.w	8007f1e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c26:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	f003 0320 	and.w	r3, r3, #32
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 8086 	bne.w	8007d48 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007c48:	e853 3f00 	ldrex	r3, [r3]
 8007c4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007c50:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007c54:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007c58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007c66:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c6a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007c72:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007c76:	e841 2300 	strex	r3, r2, [r1]
 8007c7a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1da      	bne.n	8007c3c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	3308      	adds	r3, #8
 8007c8c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c8e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c90:	e853 3f00 	ldrex	r3, [r3]
 8007c94:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007c96:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007c98:	f023 0301 	bic.w	r3, r3, #1
 8007c9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	3308      	adds	r3, #8
 8007ca6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007caa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007cae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007cb2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007cb6:	e841 2300 	strex	r3, r2, [r1]
 8007cba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007cbc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d1e1      	bne.n	8007c86 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	3308      	adds	r3, #8
 8007cc8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ccc:	e853 3f00 	ldrex	r3, [r3]
 8007cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007cd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	3308      	adds	r3, #8
 8007ce2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ce6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ce8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007cec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007cee:	e841 2300 	strex	r3, r2, [r1]
 8007cf2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007cf4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d1e3      	bne.n	8007cc2 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2220      	movs	r2, #32
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d10:	e853 3f00 	ldrex	r3, [r3]
 8007d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d18:	f023 0310 	bic.w	r3, r3, #16
 8007d1c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	461a      	mov	r2, r3
 8007d26:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007d2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d2c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007d30:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007d38:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d1e4      	bne.n	8007d08 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007d42:	4618      	mov	r0, r3
 8007d44:	f7fc f9c0 	bl	80040c8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	b29b      	uxth	r3, r3
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 f8f9 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d62:	e0dc      	b.n	8007f1e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d70:	b29b      	uxth	r3, r3
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if (  (huart->RxXferCount > 0U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d7e:	b29b      	uxth	r3, r3
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 80ce 	beq.w	8007f22 <HAL_UART_IRQHandler+0x622>
          &&(nb_rx_data > 0U) )
 8007d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	f000 80c9 	beq.w	8007f22 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d98:	e853 3f00 	ldrex	r3, [r3]
 8007d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007da4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	461a      	mov	r2, r3
 8007dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007db4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007db6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007db8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007dba:	e841 2300 	strex	r3, r2, [r1]
 8007dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d1e4      	bne.n	8007d90 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	3308      	adds	r3, #8
 8007dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd0:	e853 3f00 	ldrex	r3, [r3]
 8007dd4:	623b      	str	r3, [r7, #32]
   return(result);
 8007dd6:	6a3b      	ldr	r3, [r7, #32]
 8007dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ddc:	f023 0301 	bic.w	r3, r3, #1
 8007de0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007dee:	633a      	str	r2, [r7, #48]	@ 0x30
 8007df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007df2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007df4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007df6:	e841 2300 	strex	r3, r2, [r1]
 8007dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d1e1      	bne.n	8007dc6 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2220      	movs	r2, #32
 8007e06:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	671a      	str	r2, [r3, #112]	@ 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	e853 3f00 	ldrex	r3, [r3]
 8007e22:	60fb      	str	r3, [r7, #12]
   return(result);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0310 	bic.w	r3, r3, #16
 8007e2a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007e38:	61fb      	str	r3, [r7, #28]
 8007e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e3c:	69b9      	ldr	r1, [r7, #24]
 8007e3e:	69fa      	ldr	r2, [r7, #28]
 8007e40:	e841 2300 	strex	r3, r2, [r1]
 8007e44:	617b      	str	r3, [r7, #20]
   return(result);
 8007e46:	697b      	ldr	r3, [r7, #20]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d1e4      	bne.n	8007e16 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007e4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007e50:	4619      	mov	r1, r3
 8007e52:	6878      	ldr	r0, [r7, #4]
 8007e54:	f000 f87e 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007e58:	e063      	b.n	8007f22 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e5e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00e      	beq.n	8007e84 <HAL_UART_IRQHandler+0x584>
 8007e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007e6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d008      	beq.n	8007e84 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007e7a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f001 fba3 	bl	80095c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007e82:	e051      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d014      	beq.n	8007eba <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007e90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007e94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d105      	bne.n	8007ea8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007e9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007ea0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d008      	beq.n	8007eba <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d03a      	beq.n	8007f26 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007eb4:	6878      	ldr	r0, [r7, #4]
 8007eb6:	4798      	blx	r3
    }
    return;
 8007eb8:	e035      	b.n	8007f26 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d009      	beq.n	8007eda <HAL_UART_IRQHandler+0x5da>
 8007ec6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d003      	beq.n	8007eda <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fef0 	bl	8008cb8 <UART_EndTransmit_IT>
    return;
 8007ed8:	e026      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007eda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ede:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d009      	beq.n	8007efa <HAL_UART_IRQHandler+0x5fa>
 8007ee6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007eea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d003      	beq.n	8007efa <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007ef2:	6878      	ldr	r0, [r7, #4]
 8007ef4:	f001 fb7a 	bl	80095ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007ef8:	e016      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007efe:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d010      	beq.n	8007f28 <HAL_UART_IRQHandler+0x628>
 8007f06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	da0c      	bge.n	8007f28 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f001 fb63 	bl	80095da <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f14:	e008      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
      return;
 8007f16:	bf00      	nop
 8007f18:	e006      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
    return;
 8007f1a:	bf00      	nop
 8007f1c:	e004      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
      return;
 8007f1e:	bf00      	nop
 8007f20:	e002      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
      return;
 8007f22:	bf00      	nop
 8007f24:	e000      	b.n	8007f28 <HAL_UART_IRQHandler+0x628>
    return;
 8007f26:	bf00      	nop
  }
}
 8007f28:	37e8      	adds	r7, #232	@ 0xe8
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
 8007f2e:	bf00      	nop

08007f30 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bc80      	pop	{r7}
 8007f40:	4770      	bx	lr

08007f42 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007f42:	b480      	push	{r7}
 8007f44:	b083      	sub	sp, #12
 8007f46:	af00      	add	r7, sp, #0
 8007f48:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007f4a:	bf00      	nop
 8007f4c:	370c      	adds	r7, #12
 8007f4e:	46bd      	mov	sp, r7
 8007f50:	bc80      	pop	{r7}
 8007f52:	4770      	bx	lr

08007f54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	460b      	mov	r3, r1
 8007f5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007f60:	bf00      	nop
 8007f62:	370c      	adds	r7, #12
 8007f64:	46bd      	mov	sp, r7
 8007f66:	bc80      	pop	{r7}
 8007f68:	4770      	bx	lr
	...

08007f6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f70:	b08c      	sub	sp, #48	@ 0x30
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007f76:	2300      	movs	r3, #0
 8007f78:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	689a      	ldr	r2, [r3, #8]
 8007f80:	697b      	ldr	r3, [r7, #20]
 8007f82:	691b      	ldr	r3, [r3, #16]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	697b      	ldr	r3, [r7, #20]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	431a      	orrs	r2, r3
 8007f8c:	697b      	ldr	r3, [r7, #20]
 8007f8e:	69db      	ldr	r3, [r3, #28]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	681a      	ldr	r2, [r3, #0]
 8007f9a:	4b94      	ldr	r3, [pc, #592]	@ (80081ec <UART_SetConfig+0x280>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	697a      	ldr	r2, [r7, #20]
 8007fa0:	6812      	ldr	r2, [r2, #0]
 8007fa2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fa4:	430b      	orrs	r3, r1
 8007fa6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007fa8:	697b      	ldr	r3, [r7, #20]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	68da      	ldr	r2, [r3, #12]
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	430a      	orrs	r2, r1
 8007fbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	4a89      	ldr	r2, [pc, #548]	@ (80081f0 <UART_SetConfig+0x284>)
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	d004      	beq.n	8007fd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007fd8:	697b      	ldr	r3, [r7, #20]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007fe2:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	6812      	ldr	r2, [r2, #0]
 8007fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	f023 010f 	bic.w	r1, r3, #15
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	430a      	orrs	r2, r1
 8008004:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a7a      	ldr	r2, [pc, #488]	@ (80081f4 <UART_SetConfig+0x288>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d127      	bne.n	8008060 <UART_SetConfig+0xf4>
 8008010:	2003      	movs	r0, #3
 8008012:	f7ff fb1b 	bl	800764c <LL_RCC_GetUSARTClockSource>
 8008016:	4603      	mov	r3, r0
 8008018:	f5a3 3340 	sub.w	r3, r3, #196608	@ 0x30000
 800801c:	2b03      	cmp	r3, #3
 800801e:	d81b      	bhi.n	8008058 <UART_SetConfig+0xec>
 8008020:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0xbc>)
 8008022:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008026:	bf00      	nop
 8008028:	08008039 	.word	0x08008039
 800802c:	08008049 	.word	0x08008049
 8008030:	08008041 	.word	0x08008041
 8008034:	08008051 	.word	0x08008051
 8008038:	2301      	movs	r3, #1
 800803a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803e:	e080      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008040:	2302      	movs	r3, #2
 8008042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008046:	e07c      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008048:	2304      	movs	r3, #4
 800804a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804e:	e078      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008050:	2308      	movs	r3, #8
 8008052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008056:	e074      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008058:	2310      	movs	r3, #16
 800805a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805e:	e070      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008060:	697b      	ldr	r3, [r7, #20]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	4a64      	ldr	r2, [pc, #400]	@ (80081f8 <UART_SetConfig+0x28c>)
 8008066:	4293      	cmp	r3, r2
 8008068:	d138      	bne.n	80080dc <UART_SetConfig+0x170>
 800806a:	200c      	movs	r0, #12
 800806c:	f7ff faee 	bl	800764c <LL_RCC_GetUSARTClockSource>
 8008070:	4603      	mov	r3, r0
 8008072:	f5a3 2340 	sub.w	r3, r3, #786432	@ 0xc0000
 8008076:	2b0c      	cmp	r3, #12
 8008078:	d82c      	bhi.n	80080d4 <UART_SetConfig+0x168>
 800807a:	a201      	add	r2, pc, #4	@ (adr r2, 8008080 <UART_SetConfig+0x114>)
 800807c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008080:	080080b5 	.word	0x080080b5
 8008084:	080080d5 	.word	0x080080d5
 8008088:	080080d5 	.word	0x080080d5
 800808c:	080080d5 	.word	0x080080d5
 8008090:	080080c5 	.word	0x080080c5
 8008094:	080080d5 	.word	0x080080d5
 8008098:	080080d5 	.word	0x080080d5
 800809c:	080080d5 	.word	0x080080d5
 80080a0:	080080bd 	.word	0x080080bd
 80080a4:	080080d5 	.word	0x080080d5
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	080080d5 	.word	0x080080d5
 80080b0:	080080cd 	.word	0x080080cd
 80080b4:	2300      	movs	r3, #0
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ba:	e042      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080bc:	2302      	movs	r3, #2
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e03e      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ca:	e03a      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080d2:	e036      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080da:	e032      	b.n	8008142 <UART_SetConfig+0x1d6>
 80080dc:	697b      	ldr	r3, [r7, #20]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a43      	ldr	r2, [pc, #268]	@ (80081f0 <UART_SetConfig+0x284>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d12a      	bne.n	800813c <UART_SetConfig+0x1d0>
 80080e6:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 80080ea:	f7ff fac1 	bl	8007670 <LL_RCC_GetLPUARTClockSource>
 80080ee:	4603      	mov	r3, r0
 80080f0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080f4:	d01a      	beq.n	800812c <UART_SetConfig+0x1c0>
 80080f6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080fa:	d81b      	bhi.n	8008134 <UART_SetConfig+0x1c8>
 80080fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008100:	d00c      	beq.n	800811c <UART_SetConfig+0x1b0>
 8008102:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008106:	d815      	bhi.n	8008134 <UART_SetConfig+0x1c8>
 8008108:	2b00      	cmp	r3, #0
 800810a:	d003      	beq.n	8008114 <UART_SetConfig+0x1a8>
 800810c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008110:	d008      	beq.n	8008124 <UART_SetConfig+0x1b8>
 8008112:	e00f      	b.n	8008134 <UART_SetConfig+0x1c8>
 8008114:	2300      	movs	r3, #0
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e012      	b.n	8008142 <UART_SetConfig+0x1d6>
 800811c:	2302      	movs	r3, #2
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e00e      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800812a:	e00a      	b.n	8008142 <UART_SetConfig+0x1d6>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008132:	e006      	b.n	8008142 <UART_SetConfig+0x1d6>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800813a:	e002      	b.n	8008142 <UART_SetConfig+0x1d6>
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a2a      	ldr	r2, [pc, #168]	@ (80081f0 <UART_SetConfig+0x284>)
 8008148:	4293      	cmp	r3, r2
 800814a:	f040 80a4 	bne.w	8008296 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800814e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008152:	2b08      	cmp	r3, #8
 8008154:	d823      	bhi.n	800819e <UART_SetConfig+0x232>
 8008156:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <UART_SetConfig+0x1f0>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008181 	.word	0x08008181
 8008160:	0800819f 	.word	0x0800819f
 8008164:	08008189 	.word	0x08008189
 8008168:	0800819f 	.word	0x0800819f
 800816c:	0800818f 	.word	0x0800818f
 8008170:	0800819f 	.word	0x0800819f
 8008174:	0800819f 	.word	0x0800819f
 8008178:	0800819f 	.word	0x0800819f
 800817c:	08008197 	.word	0x08008197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fd ff50 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 8008184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008186:	e010      	b.n	80081aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008188:	4b1c      	ldr	r3, [pc, #112]	@ (80081fc <UART_SetConfig+0x290>)
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800818c:	e00d      	b.n	80081aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fd fe95 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 8008192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008194:	e009      	b.n	80081aa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800819c:	e005      	b.n	80081aa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8137 	beq.w	8008420 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b6:	4a12      	ldr	r2, [pc, #72]	@ (8008200 <UART_SetConfig+0x294>)
 80081b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081bc:	461a      	mov	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	4413      	add	r3, r2
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d305      	bcc.n	80081e2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d910      	bls.n	8008204 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081e8:	e11a      	b.n	8008420 <UART_SetConfig+0x4b4>
 80081ea:	bf00      	nop
 80081ec:	cfff69f3 	.word	0xcfff69f3
 80081f0:	40008000 	.word	0x40008000
 80081f4:	40013800 	.word	0x40013800
 80081f8:	40004400 	.word	0x40004400
 80081fc:	00f42400 	.word	0x00f42400
 8008200:	0801c190 	.word	0x0801c190
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	2200      	movs	r2, #0
 8008208:	60bb      	str	r3, [r7, #8]
 800820a:	60fa      	str	r2, [r7, #12]
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008210:	4a8e      	ldr	r2, [pc, #568]	@ (800844c <UART_SetConfig+0x4e0>)
 8008212:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008216:	b29b      	uxth	r3, r3
 8008218:	2200      	movs	r2, #0
 800821a:	603b      	str	r3, [r7, #0]
 800821c:	607a      	str	r2, [r7, #4]
 800821e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008222:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008226:	f7f8 fcbf 	bl	8000ba8 <__aeabi_uldivmod>
 800822a:	4602      	mov	r2, r0
 800822c:	460b      	mov	r3, r1
 800822e:	4610      	mov	r0, r2
 8008230:	4619      	mov	r1, r3
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	020b      	lsls	r3, r1, #8
 800823c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008240:	0202      	lsls	r2, r0, #8
 8008242:	6979      	ldr	r1, [r7, #20]
 8008244:	6849      	ldr	r1, [r1, #4]
 8008246:	0849      	lsrs	r1, r1, #1
 8008248:	2000      	movs	r0, #0
 800824a:	460c      	mov	r4, r1
 800824c:	4605      	mov	r5, r0
 800824e:	eb12 0804 	adds.w	r8, r2, r4
 8008252:	eb43 0905 	adc.w	r9, r3, r5
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	685b      	ldr	r3, [r3, #4]
 800825a:	2200      	movs	r2, #0
 800825c:	469a      	mov	sl, r3
 800825e:	4693      	mov	fp, r2
 8008260:	4652      	mov	r2, sl
 8008262:	465b      	mov	r3, fp
 8008264:	4640      	mov	r0, r8
 8008266:	4649      	mov	r1, r9
 8008268:	f7f8 fc9e 	bl	8000ba8 <__aeabi_uldivmod>
 800826c:	4602      	mov	r2, r0
 800826e:	460b      	mov	r3, r1
 8008270:	4613      	mov	r3, r2
 8008272:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800827a:	d308      	bcc.n	800828e <UART_SetConfig+0x322>
 800827c:	6a3b      	ldr	r3, [r7, #32]
 800827e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008282:	d204      	bcs.n	800828e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6a3a      	ldr	r2, [r7, #32]
 800828a:	60da      	str	r2, [r3, #12]
 800828c:	e0c8      	b.n	8008420 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800828e:	2301      	movs	r3, #1
 8008290:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008294:	e0c4      	b.n	8008420 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008296:	697b      	ldr	r3, [r7, #20]
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800829e:	d168      	bne.n	8008372 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 80082a0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082a4:	2b08      	cmp	r3, #8
 80082a6:	d828      	bhi.n	80082fa <UART_SetConfig+0x38e>
 80082a8:	a201      	add	r2, pc, #4	@ (adr r2, 80082b0 <UART_SetConfig+0x344>)
 80082aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082ae:	bf00      	nop
 80082b0:	080082d5 	.word	0x080082d5
 80082b4:	080082dd 	.word	0x080082dd
 80082b8:	080082e5 	.word	0x080082e5
 80082bc:	080082fb 	.word	0x080082fb
 80082c0:	080082eb 	.word	0x080082eb
 80082c4:	080082fb 	.word	0x080082fb
 80082c8:	080082fb 	.word	0x080082fb
 80082cc:	080082fb 	.word	0x080082fb
 80082d0:	080082f3 	.word	0x080082f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082d4:	f7fd fea6 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 80082d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082da:	e014      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082dc:	f7fd feb4 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80082e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082e2:	e010      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082e4:	4b5a      	ldr	r3, [pc, #360]	@ (8008450 <UART_SetConfig+0x4e4>)
 80082e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082e8:	e00d      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ea:	f7fd fde7 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 80082ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082f0:	e009      	b.n	8008306 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082f8:	e005      	b.n	8008306 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80082fa:	2300      	movs	r3, #0
 80082fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082fe:	2301      	movs	r3, #1
 8008300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008304:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008308:	2b00      	cmp	r3, #0
 800830a:	f000 8089 	beq.w	8008420 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008312:	4a4e      	ldr	r2, [pc, #312]	@ (800844c <UART_SetConfig+0x4e0>)
 8008314:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008318:	461a      	mov	r2, r3
 800831a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800831c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008320:	005a      	lsls	r2, r3, #1
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	685b      	ldr	r3, [r3, #4]
 8008326:	085b      	lsrs	r3, r3, #1
 8008328:	441a      	add	r2, r3
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	685b      	ldr	r3, [r3, #4]
 800832e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008332:	b29b      	uxth	r3, r3
 8008334:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008336:	6a3b      	ldr	r3, [r7, #32]
 8008338:	2b0f      	cmp	r3, #15
 800833a:	d916      	bls.n	800836a <UART_SetConfig+0x3fe>
 800833c:	6a3b      	ldr	r3, [r7, #32]
 800833e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008342:	d212      	bcs.n	800836a <UART_SetConfig+0x3fe>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008344:	6a3b      	ldr	r3, [r7, #32]
 8008346:	b29b      	uxth	r3, r3
 8008348:	f023 030f 	bic.w	r3, r3, #15
 800834c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800834e:	6a3b      	ldr	r3, [r7, #32]
 8008350:	085b      	lsrs	r3, r3, #1
 8008352:	b29b      	uxth	r3, r3
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	b29a      	uxth	r2, r3
 800835a:	8bfb      	ldrh	r3, [r7, #30]
 800835c:	4313      	orrs	r3, r2
 800835e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008360:	697b      	ldr	r3, [r7, #20]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	8bfa      	ldrh	r2, [r7, #30]
 8008366:	60da      	str	r2, [r3, #12]
 8008368:	e05a      	b.n	8008420 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008370:	e056      	b.n	8008420 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008372:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008376:	2b08      	cmp	r3, #8
 8008378:	d827      	bhi.n	80083ca <UART_SetConfig+0x45e>
 800837a:	a201      	add	r2, pc, #4	@ (adr r2, 8008380 <UART_SetConfig+0x414>)
 800837c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008380:	080083a5 	.word	0x080083a5
 8008384:	080083ad 	.word	0x080083ad
 8008388:	080083b5 	.word	0x080083b5
 800838c:	080083cb 	.word	0x080083cb
 8008390:	080083bb 	.word	0x080083bb
 8008394:	080083cb 	.word	0x080083cb
 8008398:	080083cb 	.word	0x080083cb
 800839c:	080083cb 	.word	0x080083cb
 80083a0:	080083c3 	.word	0x080083c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083a4:	f7fd fe3e 	bl	8006024 <HAL_RCC_GetPCLK1Freq>
 80083a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083aa:	e014      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083ac:	f7fd fe4c 	bl	8006048 <HAL_RCC_GetPCLK2Freq>
 80083b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083b2:	e010      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80083b4:	4b26      	ldr	r3, [pc, #152]	@ (8008450 <UART_SetConfig+0x4e4>)
 80083b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083b8:	e00d      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80083ba:	f7fd fd7f 	bl	8005ebc <HAL_RCC_GetSysClockFreq>
 80083be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083c0:	e009      	b.n	80083d6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083c8:	e005      	b.n	80083d6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80083ca:	2300      	movs	r3, #0
 80083cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083ce:	2301      	movs	r3, #1
 80083d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083d4:	bf00      	nop
    }

    if (pclk != 0U)
 80083d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d021      	beq.n	8008420 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083dc:	697b      	ldr	r3, [r7, #20]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	4a1a      	ldr	r2, [pc, #104]	@ (800844c <UART_SetConfig+0x4e0>)
 80083e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e6:	461a      	mov	r2, r3
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	685b      	ldr	r3, [r3, #4]
 80083f2:	085b      	lsrs	r3, r3, #1
 80083f4:	441a      	add	r2, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	685b      	ldr	r3, [r3, #4]
 80083fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80083fe:	b29b      	uxth	r3, r3
 8008400:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008402:	6a3b      	ldr	r3, [r7, #32]
 8008404:	2b0f      	cmp	r3, #15
 8008406:	d908      	bls.n	800841a <UART_SetConfig+0x4ae>
 8008408:	6a3b      	ldr	r3, [r7, #32]
 800840a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800840e:	d204      	bcs.n	800841a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = usartdiv;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6a3a      	ldr	r2, [r7, #32]
 8008416:	60da      	str	r2, [r3, #12]
 8008418:	e002      	b.n	8008420 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	2201      	movs	r2, #1
 8008424:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2201      	movs	r2, #1
 800842c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	2200      	movs	r2, #0
 8008434:	671a      	str	r2, [r3, #112]	@ 0x70
  huart->TxISR = NULL;
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2200      	movs	r2, #0
 800843a:	675a      	str	r2, [r3, #116]	@ 0x74

  return ret;
 800843c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008440:	4618      	mov	r0, r3
 8008442:	3730      	adds	r7, #48	@ 0x30
 8008444:	46bd      	mov	sp, r7
 8008446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800844a:	bf00      	nop
 800844c:	0801c190 	.word	0x0801c190
 8008450:	00f42400 	.word	0x00f42400

08008454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008454:	b480      	push	{r7}
 8008456:	b083      	sub	sp, #12
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008460:	f003 0301 	and.w	r3, r3, #1
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008482:	f003 0302 	and.w	r3, r3, #2
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084a4:	f003 0304 	and.w	r3, r3, #4
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	685b      	ldr	r3, [r3, #4]
 80084b2:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084c6:	f003 0308 	and.w	r3, r3, #8
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084e8:	f003 0310 	and.w	r3, r3, #16
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d00a      	beq.n	8008506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d00a      	beq.n	8008528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	689b      	ldr	r3, [r3, #8]
 8008518:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	430a      	orrs	r2, r1
 8008526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800852c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008530:	2b00      	cmp	r3, #0
 8008532:	d01a      	beq.n	800856a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	430a      	orrs	r2, r1
 8008548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800854e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008552:	d10a      	bne.n	800856a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	430a      	orrs	r2, r1
 8008568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	685b      	ldr	r3, [r3, #4]
 800857c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	430a      	orrs	r2, r1
 800858a:	605a      	str	r2, [r3, #4]
  }
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	bc80      	pop	{r7}
 8008594:	4770      	bx	lr

08008596 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b086      	sub	sp, #24
 800859a:	af02      	add	r7, sp, #8
 800859c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085a6:	f7f9 fb9b 	bl	8001ce0 <HAL_GetTick>
 80085aa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f003 0308 	and.w	r3, r3, #8
 80085b6:	2b08      	cmp	r3, #8
 80085b8:	d10e      	bne.n	80085d8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085be:	9300      	str	r3, [sp, #0]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	2200      	movs	r2, #0
 80085c4:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f82f 	bl	800862c <UART_WaitOnFlagUntilTimeout>
 80085ce:	4603      	mov	r3, r0
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d001      	beq.n	80085d8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085d4:	2303      	movs	r3, #3
 80085d6:	e025      	b.n	8008624 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f003 0304 	and.w	r3, r3, #4
 80085e2:	2b04      	cmp	r3, #4
 80085e4:	d10e      	bne.n	8008604 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085e6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085ea:	9300      	str	r3, [sp, #0]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2200      	movs	r2, #0
 80085f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 f819 	bl	800862c <UART_WaitOnFlagUntilTimeout>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d001      	beq.n	8008604 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e00f      	b.n	8008624 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2220      	movs	r2, #32
 8008608:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	2220      	movs	r2, #32
 8008610:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	2200      	movs	r2, #0
 8008618:	66da      	str	r2, [r3, #108]	@ 0x6c

  __HAL_UNLOCK(huart);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8008622:	2300      	movs	r3, #0
}
 8008624:	4618      	mov	r0, r3
 8008626:	3710      	adds	r7, #16
 8008628:	46bd      	mov	sp, r7
 800862a:	bd80      	pop	{r7, pc}

0800862c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b09c      	sub	sp, #112	@ 0x70
 8008630:	af00      	add	r7, sp, #0
 8008632:	60f8      	str	r0, [r7, #12]
 8008634:	60b9      	str	r1, [r7, #8]
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	4613      	mov	r3, r2
 800863a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800863c:	e0a9      	b.n	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800863e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008640:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008644:	f000 80a5 	beq.w	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008648:	f7f9 fb4a 	bl	8001ce0 <HAL_GetTick>
 800864c:	4602      	mov	r2, r0
 800864e:	683b      	ldr	r3, [r7, #0]
 8008650:	1ad3      	subs	r3, r2, r3
 8008652:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8008654:	429a      	cmp	r2, r3
 8008656:	d302      	bcc.n	800865e <UART_WaitOnFlagUntilTimeout+0x32>
 8008658:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800865a:	2b00      	cmp	r3, #0
 800865c:	d140      	bne.n	80086e0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008664:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008666:	e853 3f00 	ldrex	r3, [r3]
 800866a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800866c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800866e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8008672:	667b      	str	r3, [r7, #100]	@ 0x64
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	461a      	mov	r2, r3
 800867a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800867c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800867e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008680:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008682:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008684:	e841 2300 	strex	r3, r2, [r1]
 8008688:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800868a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800868c:	2b00      	cmp	r3, #0
 800868e:	d1e6      	bne.n	800865e <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80086a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086a2:	f023 0301 	bic.w	r3, r3, #1
 80086a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	3308      	adds	r3, #8
 80086ae:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80086b0:	64ba      	str	r2, [r7, #72]	@ 0x48
 80086b2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80086b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80086be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e5      	bne.n	8008690 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2220      	movs	r2, #32
 80086c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2220      	movs	r2, #32
 80086d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        __HAL_UNLOCK(huart);
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e069      	b.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f003 0304 	and.w	r3, r3, #4
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	d051      	beq.n	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	69db      	ldr	r3, [r3, #28]
 80086f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80086f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80086fc:	d149      	bne.n	8008792 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008706:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800870e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008710:	e853 3f00 	ldrex	r3, [r3]
 8008714:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008718:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 800871c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008726:	637b      	str	r3, [r7, #52]	@ 0x34
 8008728:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800872a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800872c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800872e:	e841 2300 	strex	r3, r2, [r1]
 8008732:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008736:	2b00      	cmp	r3, #0
 8008738:	d1e6      	bne.n	8008708 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3308      	adds	r3, #8
 8008740:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	e853 3f00 	ldrex	r3, [r3]
 8008748:	613b      	str	r3, [r7, #16]
   return(result);
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f023 0301 	bic.w	r3, r3, #1
 8008750:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	3308      	adds	r3, #8
 8008758:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800875a:	623a      	str	r2, [r7, #32]
 800875c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875e:	69f9      	ldr	r1, [r7, #28]
 8008760:	6a3a      	ldr	r2, [r7, #32]
 8008762:	e841 2300 	strex	r3, r2, [r1]
 8008766:	61bb      	str	r3, [r7, #24]
   return(result);
 8008768:	69bb      	ldr	r3, [r7, #24]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d1e5      	bne.n	800873a <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2220      	movs	r2, #32
 8008772:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	2220      	movs	r2, #32
 800877a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2200      	movs	r2, #0
 800878a:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

          return HAL_TIMEOUT;
 800878e:	2303      	movs	r3, #3
 8008790:	e010      	b.n	80087b4 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	69da      	ldr	r2, [r3, #28]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	4013      	ands	r3, r2
 800879c:	68ba      	ldr	r2, [r7, #8]
 800879e:	429a      	cmp	r2, r3
 80087a0:	bf0c      	ite	eq
 80087a2:	2301      	moveq	r3, #1
 80087a4:	2300      	movne	r3, #0
 80087a6:	b2db      	uxtb	r3, r3
 80087a8:	461a      	mov	r2, r3
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	429a      	cmp	r2, r3
 80087ae:	f43f af46 	beq.w	800863e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087b2:	2300      	movs	r3, #0
}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3770      	adds	r7, #112	@ 0x70
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087bc:	b480      	push	{r7}
 80087be:	b0a3      	sub	sp, #140	@ 0x8c
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	4613      	mov	r3, r2
 80087c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68ba      	ldr	r2, [r7, #8]
 80087ce:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	88fa      	ldrh	r2, [r7, #6]
 80087dc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2200      	movs	r2, #0
 80087e4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	689b      	ldr	r3, [r3, #8]
 80087ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80087ee:	d10e      	bne.n	800880e <UART_Start_Receive_IT+0x52>
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	691b      	ldr	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d105      	bne.n	8008804 <UART_Start_Receive_IT+0x48>
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80087fe:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008802:	e02d      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	22ff      	movs	r2, #255	@ 0xff
 8008808:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800880c:	e028      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	689b      	ldr	r3, [r3, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d10d      	bne.n	8008832 <UART_Start_Receive_IT+0x76>
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	691b      	ldr	r3, [r3, #16]
 800881a:	2b00      	cmp	r3, #0
 800881c:	d104      	bne.n	8008828 <UART_Start_Receive_IT+0x6c>
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	22ff      	movs	r2, #255	@ 0xff
 8008822:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008826:	e01b      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	227f      	movs	r2, #127	@ 0x7f
 800882c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008830:	e016      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	689b      	ldr	r3, [r3, #8]
 8008836:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800883a:	d10d      	bne.n	8008858 <UART_Start_Receive_IT+0x9c>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	691b      	ldr	r3, [r3, #16]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <UART_Start_Receive_IT+0x92>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	227f      	movs	r2, #127	@ 0x7f
 8008848:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800884c:	e008      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	223f      	movs	r2, #63	@ 0x3f
 8008852:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008856:	e003      	b.n	8008860 <UART_Start_Receive_IT+0xa4>
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	2200      	movs	r2, #0
 800885c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	2200      	movs	r2, #0
 8008864:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2222      	movs	r2, #34	@ 0x22
 800886c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	3308      	adds	r3, #8
 8008876:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008878:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800887a:	e853 3f00 	ldrex	r3, [r3]
 800887e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8008880:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008882:	f043 0301 	orr.w	r3, r3, #1
 8008886:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	3308      	adds	r3, #8
 8008890:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8008894:	673a      	str	r2, [r7, #112]	@ 0x70
 8008896:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800889a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800889c:	e841 2300 	strex	r3, r2, [r1]
 80088a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80088a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1e3      	bne.n	8008870 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80088b0:	d153      	bne.n	800895a <UART_Start_Receive_IT+0x19e>
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80088b8:	88fa      	ldrh	r2, [r7, #6]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d34d      	bcc.n	800895a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80088c6:	d107      	bne.n	80088d8 <UART_Start_Receive_IT+0x11c>
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	691b      	ldr	r3, [r3, #16]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d103      	bne.n	80088d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a4a      	ldr	r2, [pc, #296]	@ (80089fc <UART_Start_Receive_IT+0x240>)
 80088d4:	671a      	str	r2, [r3, #112]	@ 0x70
 80088d6:	e002      	b.n	80088de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4a49      	ldr	r2, [pc, #292]	@ (8008a00 <UART_Start_Receive_IT+0x244>)
 80088dc:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	2200      	movs	r2, #0
 80088e2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	691b      	ldr	r3, [r3, #16]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d01a      	beq.n	8008924 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80088fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80088fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008902:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	461a      	mov	r2, r3
 800890c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008910:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008912:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008916:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800891e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e4      	bne.n	80088ee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800892c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800892e:	e853 3f00 	ldrex	r3, [r3]
 8008932:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008934:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008936:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800893a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3308      	adds	r3, #8
 8008942:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008944:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008946:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008948:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800894a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800894c:	e841 2300 	strex	r3, r2, [r1]
 8008950:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e5      	bne.n	8008924 <UART_Start_Receive_IT+0x168>
 8008958:	e04a      	b.n	80089f0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	689b      	ldr	r3, [r3, #8]
 800895e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008962:	d107      	bne.n	8008974 <UART_Start_Receive_IT+0x1b8>
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	691b      	ldr	r3, [r3, #16]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d103      	bne.n	8008974 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4a25      	ldr	r2, [pc, #148]	@ (8008a04 <UART_Start_Receive_IT+0x248>)
 8008970:	671a      	str	r2, [r3, #112]	@ 0x70
 8008972:	e002      	b.n	800897a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	4a24      	ldr	r2, [pc, #144]	@ (8008a08 <UART_Start_Receive_IT+0x24c>)
 8008978:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    __HAL_UNLOCK(huart);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	2200      	movs	r2, #0
 800897e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	2b00      	cmp	r3, #0
 8008988:	d019      	beq.n	80089be <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008992:	e853 3f00 	ldrex	r3, [r3]
 8008996:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800899a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800899e:	677b      	str	r3, [r7, #116]	@ 0x74
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	461a      	mov	r2, r3
 80089a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80089a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80089aa:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ac:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80089ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80089b0:	e841 2300 	strex	r3, r2, [r1]
 80089b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80089b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d1e6      	bne.n	800898a <UART_Start_Receive_IT+0x1ce>
 80089bc:	e018      	b.n	80089f0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	e853 3f00 	ldrex	r3, [r3]
 80089ca:	613b      	str	r3, [r7, #16]
   return(result);
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f043 0320 	orr.w	r3, r3, #32
 80089d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	461a      	mov	r2, r3
 80089da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80089dc:	623b      	str	r3, [r7, #32]
 80089de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	69f9      	ldr	r1, [r7, #28]
 80089e2:	6a3a      	ldr	r2, [r7, #32]
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089ea:	69bb      	ldr	r3, [r7, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e6      	bne.n	80089be <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089f0:	2300      	movs	r3, #0
}
 80089f2:	4618      	mov	r0, r3
 80089f4:	378c      	adds	r7, #140	@ 0x8c
 80089f6:	46bd      	mov	sp, r7
 80089f8:	bc80      	pop	{r7}
 80089fa:	4770      	bx	lr
 80089fc:	080092c9 	.word	0x080092c9
 8008a00:	08008fd1 	.word	0x08008fd1
 8008a04:	08008e6f 	.word	0x08008e6f
 8008a08:	08008d0f 	.word	0x08008d0f

08008a0c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a0c:	b480      	push	{r7}
 8008a0e:	b08f      	sub	sp, #60	@ 0x3c
 8008a10:	af00      	add	r7, sp, #0
 8008a12:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a1a:	6a3b      	ldr	r3, [r7, #32]
 8008a1c:	e853 3f00 	ldrex	r3, [r3]
 8008a20:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a22:	69fb      	ldr	r3, [r7, #28]
 8008a24:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a28:	637b      	str	r3, [r7, #52]	@ 0x34
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	461a      	mov	r2, r3
 8008a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a32:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008a34:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008a38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008a3a:	e841 2300 	strex	r3, r2, [r1]
 8008a3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008a40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d1e6      	bne.n	8008a14 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	3308      	adds	r3, #8
 8008a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	e853 3f00 	ldrex	r3, [r3]
 8008a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008a5c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a66:	61ba      	str	r2, [r7, #24]
 8008a68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6979      	ldr	r1, [r7, #20]
 8008a6c:	69ba      	ldr	r2, [r7, #24]
 8008a6e:	e841 2300 	strex	r3, r2, [r1]
 8008a72:	613b      	str	r3, [r7, #16]
   return(result);
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1e5      	bne.n	8008a46 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2220      	movs	r2, #32
 8008a7e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
}
 8008a82:	bf00      	nop
 8008a84:	373c      	adds	r7, #60	@ 0x3c
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bc80      	pop	{r7}
 8008a8a:	4770      	bx	lr

08008a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b095      	sub	sp, #84	@ 0x54
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9c:	e853 3f00 	ldrex	r3, [r3]
 8008aa0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008aa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aa4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008aa8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	461a      	mov	r2, r3
 8008ab0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ab2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ab4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ab6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ab8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008aba:	e841 2300 	strex	r3, r2, [r1]
 8008abe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1e6      	bne.n	8008a94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	3308      	adds	r3, #8
 8008acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ace:	6a3b      	ldr	r3, [r7, #32]
 8008ad0:	e853 3f00 	ldrex	r3, [r3]
 8008ad4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008adc:	f023 0301 	bic.w	r3, r3, #1
 8008ae0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	3308      	adds	r3, #8
 8008ae8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008aea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008aec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008af0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008af2:	e841 2300 	strex	r3, r2, [r1]
 8008af6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d1e3      	bne.n	8008ac6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008b02:	2b01      	cmp	r3, #1
 8008b04:	d118      	bne.n	8008b38 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	e853 3f00 	ldrex	r3, [r3]
 8008b12:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	f023 0310 	bic.w	r3, r3, #16
 8008b1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008b24:	61bb      	str	r3, [r7, #24]
 8008b26:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b28:	6979      	ldr	r1, [r7, #20]
 8008b2a:	69ba      	ldr	r2, [r7, #24]
 8008b2c:	e841 2300 	strex	r3, r2, [r1]
 8008b30:	613b      	str	r3, [r7, #16]
   return(result);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d1e6      	bne.n	8008b06 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	2200      	movs	r2, #0
 8008b44:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2200      	movs	r2, #0
 8008b4a:	671a      	str	r2, [r3, #112]	@ 0x70
}
 8008b4c:	bf00      	nop
 8008b4e:	3754      	adds	r7, #84	@ 0x54
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bc80      	pop	{r7}
 8008b54:	4770      	bx	lr

08008b56 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b56:	b580      	push	{r7, lr}
 8008b58:	b090      	sub	sp, #64	@ 0x40
 8008b5a:	af00      	add	r7, sp, #0
 8008b5c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b62:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0320 	and.w	r3, r3, #32
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d137      	bne.n	8008be2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008b72:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008b7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	3308      	adds	r3, #8
 8008b80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b84:	e853 3f00 	ldrex	r3, [r3]
 8008b88:	623b      	str	r3, [r7, #32]
   return(result);
 8008b8a:	6a3b      	ldr	r3, [r7, #32]
 8008b8c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008b90:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008b9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8008b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ba0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ba2:	e841 2300 	strex	r3, r2, [r1]
 8008ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d1e5      	bne.n	8008b7a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008bae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	e853 3f00 	ldrex	r3, [r3]
 8008bba:	60fb      	str	r3, [r7, #12]
   return(result);
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008bc2:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	461a      	mov	r2, r3
 8008bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bcc:	61fb      	str	r3, [r7, #28]
 8008bce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bd0:	69b9      	ldr	r1, [r7, #24]
 8008bd2:	69fa      	ldr	r2, [r7, #28]
 8008bd4:	e841 2300 	strex	r3, r2, [r1]
 8008bd8:	617b      	str	r3, [r7, #20]
   return(result);
 8008bda:	697b      	ldr	r3, [r7, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d1e6      	bne.n	8008bae <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008be0:	e002      	b.n	8008be8 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8008be2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008be4:	f7f9 fd82 	bl	80026ec <HAL_UART_TxCpltCallback>
}
 8008be8:	bf00      	nop
 8008bea:	3740      	adds	r7, #64	@ 0x40
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bfc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008bfe:	68f8      	ldr	r0, [r7, #12]
 8008c00:	f7ff f996 	bl	8007f30 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c04:	bf00      	nop
 8008c06:	3710      	adds	r7, #16
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	bd80      	pop	{r7, pc}

08008c0c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b086      	sub	sp, #24
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c18:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c1a:	697b      	ldr	r3, [r7, #20]
 8008c1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8008c20:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c28:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	689b      	ldr	r3, [r3, #8]
 8008c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c34:	2b80      	cmp	r3, #128	@ 0x80
 8008c36:	d109      	bne.n	8008c4c <UART_DMAError+0x40>
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	2b21      	cmp	r3, #33	@ 0x21
 8008c3c:	d106      	bne.n	8008c4c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2200      	movs	r2, #0
 8008c42:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008c46:	6978      	ldr	r0, [r7, #20]
 8008c48:	f7ff fee0 	bl	8008a0c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	689b      	ldr	r3, [r3, #8]
 8008c52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008c56:	2b40      	cmp	r3, #64	@ 0x40
 8008c58:	d109      	bne.n	8008c6e <UART_DMAError+0x62>
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	2b22      	cmp	r3, #34	@ 0x22
 8008c5e:	d106      	bne.n	8008c6e <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	2200      	movs	r2, #0
 8008c64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008c68:	6978      	ldr	r0, [r7, #20]
 8008c6a:	f7ff ff0f 	bl	8008a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c74:	f043 0210 	orr.w	r2, r3, #16
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c7e:	6978      	ldr	r0, [r7, #20]
 8008c80:	f7ff f95f 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c84:	bf00      	nop
 8008c86:	3718      	adds	r7, #24
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c98:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008caa:	68f8      	ldr	r0, [r7, #12]
 8008cac:	f7ff f949 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cb0:	bf00      	nop
 8008cb2:	3710      	adds	r7, #16
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	bd80      	pop	{r7, pc}

08008cb8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b088      	sub	sp, #32
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	e853 3f00 	ldrex	r3, [r3]
 8008ccc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008cd4:	61fb      	str	r3, [r7, #28]
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	461a      	mov	r2, r3
 8008cdc:	69fb      	ldr	r3, [r7, #28]
 8008cde:	61bb      	str	r3, [r7, #24]
 8008ce0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ce2:	6979      	ldr	r1, [r7, #20]
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	e841 2300 	strex	r3, r2, [r1]
 8008cea:	613b      	str	r3, [r7, #16]
   return(result);
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1e6      	bne.n	8008cc0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	2220      	movs	r2, #32
 8008cf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	675a      	str	r2, [r3, #116]	@ 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7f9 fcf3 	bl	80026ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d06:	bf00      	nop
 8008d08:	3720      	adds	r7, #32
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	bd80      	pop	{r7, pc}

08008d0e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d0e:	b580      	push	{r7, lr}
 8008d10:	b096      	sub	sp, #88	@ 0x58
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008d1c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d26:	2b22      	cmp	r3, #34	@ 0x22
 8008d28:	f040 8095 	bne.w	8008e56 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d32:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d36:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8008d3a:	b2d9      	uxtb	r1, r3
 8008d3c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d46:	400a      	ands	r2, r1
 8008d48:	b2d2      	uxtb	r2, r2
 8008d4a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d50:	1c5a      	adds	r2, r3, #1
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d5c:	b29b      	uxth	r3, r3
 8008d5e:	3b01      	subs	r3, #1
 8008d60:	b29a      	uxth	r2, r3
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008d6e:	b29b      	uxth	r3, r3
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d178      	bne.n	8008e66 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7c:	e853 3f00 	ldrex	r3, [r3]
 8008d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d88:	653b      	str	r3, [r7, #80]	@ 0x50
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	461a      	mov	r2, r3
 8008d90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d92:	647b      	str	r3, [r7, #68]	@ 0x44
 8008d94:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d9a:	e841 2300 	strex	r3, r2, [r1]
 8008d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008da0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d1e6      	bne.n	8008d74 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	3308      	adds	r3, #8
 8008dac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db0:	e853 3f00 	ldrex	r3, [r3]
 8008db4:	623b      	str	r3, [r7, #32]
   return(result);
 8008db6:	6a3b      	ldr	r3, [r7, #32]
 8008db8:	f023 0301 	bic.w	r3, r3, #1
 8008dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	3308      	adds	r3, #8
 8008dc4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008dc6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008dcc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dce:	e841 2300 	strex	r3, r2, [r1]
 8008dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d1e5      	bne.n	8008da6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	2220      	movs	r2, #32
 8008dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2200      	movs	r2, #0
 8008de6:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d12e      	bne.n	8008e4e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	e853 3f00 	ldrex	r3, [r3]
 8008e02:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	f023 0310 	bic.w	r3, r3, #16
 8008e0a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	461a      	mov	r2, r3
 8008e12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008e14:	61fb      	str	r3, [r7, #28]
 8008e16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e18:	69b9      	ldr	r1, [r7, #24]
 8008e1a:	69fa      	ldr	r2, [r7, #28]
 8008e1c:	e841 2300 	strex	r3, r2, [r1]
 8008e20:	617b      	str	r3, [r7, #20]
   return(result);
 8008e22:	697b      	ldr	r3, [r7, #20]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d1e6      	bne.n	8008df6 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69db      	ldr	r3, [r3, #28]
 8008e2e:	f003 0310 	and.w	r3, r3, #16
 8008e32:	2b10      	cmp	r3, #16
 8008e34:	d103      	bne.n	8008e3e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2210      	movs	r2, #16
 8008e3c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e44:	4619      	mov	r1, r3
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7ff f884 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e4c:	e00b      	b.n	8008e66 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e4e:	6878      	ldr	r0, [r7, #4]
 8008e50:	f7f9 fc62 	bl	8002718 <HAL_UART_RxCpltCallback>
}
 8008e54:	e007      	b.n	8008e66 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	699a      	ldr	r2, [r3, #24]
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	f042 0208 	orr.w	r2, r2, #8
 8008e64:	619a      	str	r2, [r3, #24]
}
 8008e66:	bf00      	nop
 8008e68:	3758      	adds	r7, #88	@ 0x58
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}

08008e6e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e6e:	b580      	push	{r7, lr}
 8008e70:	b096      	sub	sp, #88	@ 0x58
 8008e72:	af00      	add	r7, sp, #0
 8008e74:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e7c:	f8a7 3056 	strh.w	r3, [r7, #86]	@ 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e86:	2b22      	cmp	r3, #34	@ 0x22
 8008e88:	f040 8095 	bne.w	8008fb6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e92:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e9a:	653b      	str	r3, [r7, #80]	@ 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e9c:	f8b7 2054 	ldrh.w	r2, [r7, #84]	@ 0x54
 8008ea0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	@ 0x56
 8008ea4:	4013      	ands	r3, r2
 8008ea6:	b29a      	uxth	r2, r3
 8008ea8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008eaa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008eb0:	1c9a      	adds	r2, r3, #2
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ebc:	b29b      	uxth	r3, r3
 8008ebe:	3b01      	subs	r3, #1
 8008ec0:	b29a      	uxth	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ece:	b29b      	uxth	r3, r3
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d178      	bne.n	8008fc6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008edc:	e853 3f00 	ldrex	r3, [r3]
 8008ee0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ee8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	461a      	mov	r2, r3
 8008ef0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ef2:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ef6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ef8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008efa:	e841 2300 	strex	r3, r2, [r1]
 8008efe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d1e6      	bne.n	8008ed4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	3308      	adds	r3, #8
 8008f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f0e:	6a3b      	ldr	r3, [r7, #32]
 8008f10:	e853 3f00 	ldrex	r3, [r3]
 8008f14:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f16:	69fb      	ldr	r3, [r7, #28]
 8008f18:	f023 0301 	bic.w	r3, r3, #1
 8008f1c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	3308      	adds	r3, #8
 8008f24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f28:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f2e:	e841 2300 	strex	r3, r2, [r1]
 8008f32:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1e5      	bne.n	8008f06 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2220      	movs	r2, #32
 8008f3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	2200      	movs	r2, #0
 8008f46:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f4c:	2b01      	cmp	r3, #1
 8008f4e:	d12e      	bne.n	8008fae <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2200      	movs	r2, #0
 8008f54:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	e853 3f00 	ldrex	r3, [r3]
 8008f62:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	f023 0310 	bic.w	r3, r3, #16
 8008f6a:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f74:	61bb      	str	r3, [r7, #24]
 8008f76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f78:	6979      	ldr	r1, [r7, #20]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	e841 2300 	strex	r3, r2, [r1]
 8008f80:	613b      	str	r3, [r7, #16]
   return(result);
 8008f82:	693b      	ldr	r3, [r7, #16]
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d1e6      	bne.n	8008f56 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	69db      	ldr	r3, [r3, #28]
 8008f8e:	f003 0310 	and.w	r3, r3, #16
 8008f92:	2b10      	cmp	r3, #16
 8008f94:	d103      	bne.n	8008f9e <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2210      	movs	r2, #16
 8008f9c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	6878      	ldr	r0, [r7, #4]
 8008fa8:	f7fe ffd4 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fac:	e00b      	b.n	8008fc6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f7f9 fbb2 	bl	8002718 <HAL_UART_RxCpltCallback>
}
 8008fb4:	e007      	b.n	8008fc6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	699a      	ldr	r2, [r3, #24]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f042 0208 	orr.w	r2, r2, #8
 8008fc4:	619a      	str	r2, [r3, #24]
}
 8008fc6:	bf00      	nop
 8008fc8:	3758      	adds	r7, #88	@ 0x58
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
	...

08008fd0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b0a6      	sub	sp, #152	@ 0x98
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008fde:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	69db      	ldr	r3, [r3, #28]
 8008fe8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	689b      	ldr	r3, [r3, #8]
 8008ffc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009006:	2b22      	cmp	r3, #34	@ 0x22
 8009008:	f040 814f 	bne.w	80092aa <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009012:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009016:	e0f6      	b.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800901e:	f8a7 3084 	strh.w	r3, [r7, #132]	@ 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009022:	f8b7 3084 	ldrh.w	r3, [r7, #132]	@ 0x84
 8009026:	b2d9      	uxtb	r1, r3
 8009028:	f8b7 3092 	ldrh.w	r3, [r7, #146]	@ 0x92
 800902c:	b2da      	uxtb	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009032:	400a      	ands	r2, r1
 8009034:	b2d2      	uxtb	r2, r2
 8009036:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800903c:	1c5a      	adds	r2, r3, #1
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009048:	b29b      	uxth	r3, r3
 800904a:	3b01      	subs	r3, #1
 800904c:	b29a      	uxth	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	69db      	ldr	r3, [r3, #28]
 800905a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800905e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009062:	f003 0307 	and.w	r3, r3, #7
 8009066:	2b00      	cmp	r3, #0
 8009068:	d053      	beq.n	8009112 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800906a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800906e:	f003 0301 	and.w	r3, r3, #1
 8009072:	2b00      	cmp	r3, #0
 8009074:	d011      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0xca>
 8009076:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800907a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800907e:	2b00      	cmp	r3, #0
 8009080:	d00b      	beq.n	800909a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2201      	movs	r2, #1
 8009088:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009090:	f043 0201 	orr.w	r2, r3, #1
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800909a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800909e:	f003 0302 	and.w	r3, r3, #2
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d011      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d00b      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2202      	movs	r2, #2
 80090b8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090c0:	f043 0204 	orr.w	r2, r3, #4
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80090ce:	f003 0304 	and.w	r3, r3, #4
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d011      	beq.n	80090fa <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090d6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80090da:	f003 0301 	and.w	r3, r3, #1
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00b      	beq.n	80090fa <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	2204      	movs	r2, #4
 80090e8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f0:	f043 0202 	orr.w	r2, r3, #2
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009100:	2b00      	cmp	r3, #0
 8009102:	d006      	beq.n	8009112 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009104:	6878      	ldr	r0, [r7, #4]
 8009106:	f7fe ff1c 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009118:	b29b      	uxth	r3, r3
 800911a:	2b00      	cmp	r3, #0
 800911c:	d173      	bne.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800912c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800912e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	461a      	mov	r2, r3
 800913c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8009140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009142:	667a      	str	r2, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009144:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8009146:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009148:	e841 2300 	strex	r3, r2, [r1]
 800914c:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800914e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009150:	2b00      	cmp	r3, #0
 8009152:	d1e4      	bne.n	800911e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	3308      	adds	r3, #8
 800915a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800915e:	e853 3f00 	ldrex	r3, [r3]
 8009162:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009164:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800916a:	f023 0301 	bic.w	r3, r3, #1
 800916e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3308      	adds	r3, #8
 8009176:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8009178:	657a      	str	r2, [r7, #84]	@ 0x54
 800917a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800917e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009180:	e841 2300 	strex	r3, r2, [r1]
 8009184:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009186:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009188:	2b00      	cmp	r3, #0
 800918a:	d1e3      	bne.n	8009154 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	2220      	movs	r2, #32
 8009190:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2200      	movs	r2, #0
 8009198:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800919e:	2b01      	cmp	r3, #1
 80091a0:	d12e      	bne.n	8009200 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091b0:	e853 3f00 	ldrex	r3, [r3]
 80091b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80091b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091b8:	f023 0310 	bic.w	r3, r3, #16
 80091bc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	461a      	mov	r2, r3
 80091c4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80091c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80091c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80091cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80091ce:	e841 2300 	strex	r3, r2, [r1]
 80091d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80091d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d1e6      	bne.n	80091a8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	69db      	ldr	r3, [r3, #28]
 80091e0:	f003 0310 	and.w	r3, r3, #16
 80091e4:	2b10      	cmp	r3, #16
 80091e6:	d103      	bne.n	80091f0 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	2210      	movs	r2, #16
 80091ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f7fe feab 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
 80091fe:	e002      	b.n	8009206 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	f7f9 fa89 	bl	8002718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009206:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800920e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009212:	f003 0320 	and.w	r3, r3, #32
 8009216:	2b00      	cmp	r3, #0
 8009218:	f47f aefe 	bne.w	8009018 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009222:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009226:	f8b7 3076 	ldrh.w	r3, [r7, #118]	@ 0x76
 800922a:	2b00      	cmp	r3, #0
 800922c:	d045      	beq.n	80092ba <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009234:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8009238:	429a      	cmp	r2, r3
 800923a:	d23e      	bcs.n	80092ba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	3308      	adds	r3, #8
 8009242:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	e853 3f00 	ldrex	r3, [r3]
 800924a:	61fb      	str	r3, [r7, #28]
   return(result);
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009252:	673b      	str	r3, [r7, #112]	@ 0x70
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	3308      	adds	r3, #8
 800925a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800925c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800925e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009260:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009262:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009264:	e841 2300 	strex	r3, r2, [r1]
 8009268:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	2b00      	cmp	r3, #0
 800926e:	d1e5      	bne.n	800923c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	4a14      	ldr	r2, [pc, #80]	@ (80092c4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009274:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	e853 3f00 	ldrex	r3, [r3]
 8009282:	60bb      	str	r3, [r7, #8]
   return(result);
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f043 0320 	orr.w	r3, r3, #32
 800928a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	461a      	mov	r2, r3
 8009292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009294:	61bb      	str	r3, [r7, #24]
 8009296:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009298:	6979      	ldr	r1, [r7, #20]
 800929a:	69ba      	ldr	r2, [r7, #24]
 800929c:	e841 2300 	strex	r3, r2, [r1]
 80092a0:	613b      	str	r3, [r7, #16]
   return(result);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	d1e6      	bne.n	8009276 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092a8:	e007      	b.n	80092ba <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	699a      	ldr	r2, [r3, #24]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f042 0208 	orr.w	r2, r2, #8
 80092b8:	619a      	str	r2, [r3, #24]
}
 80092ba:	bf00      	nop
 80092bc:	3798      	adds	r7, #152	@ 0x98
 80092be:	46bd      	mov	sp, r7
 80092c0:	bd80      	pop	{r7, pc}
 80092c2:	bf00      	nop
 80092c4:	08008d0f 	.word	0x08008d0f

080092c8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b0a8      	sub	sp, #160	@ 0xa0
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80092d6:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	69db      	ldr	r3, [r3, #28]
 80092e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	689b      	ldr	r3, [r3, #8]
 80092f4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092fe:	2b22      	cmp	r3, #34	@ 0x22
 8009300:	f040 8153 	bne.w	80095aa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800930a:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800930e:	e0fa      	b.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009316:	f8a7 308c 	strh.w	r3, [r7, #140]	@ 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800931e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009322:	f8b7 208c 	ldrh.w	r2, [r7, #140]	@ 0x8c
 8009326:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 800932a:	4013      	ands	r3, r2
 800932c:	b29a      	uxth	r2, r3
 800932e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009332:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009338:	1c9a      	adds	r2, r3, #2
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009344:	b29b      	uxth	r3, r3
 8009346:	3b01      	subs	r3, #1
 8009348:	b29a      	uxth	r2, r3
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	69db      	ldr	r3, [r3, #28]
 8009356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800935a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800935e:	f003 0307 	and.w	r3, r3, #7
 8009362:	2b00      	cmp	r3, #0
 8009364:	d053      	beq.n	800940e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009366:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800936a:	f003 0301 	and.w	r3, r3, #1
 800936e:	2b00      	cmp	r3, #0
 8009370:	d011      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009372:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8009376:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800937a:	2b00      	cmp	r3, #0
 800937c:	d00b      	beq.n	8009396 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2201      	movs	r2, #1
 8009384:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800938c:	f043 0201 	orr.w	r2, r3, #1
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009396:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800939a:	f003 0302 	and.w	r3, r3, #2
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d011      	beq.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093a6:	f003 0301 	and.w	r3, r3, #1
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00b      	beq.n	80093c6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2202      	movs	r2, #2
 80093b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093bc:	f043 0204 	orr.w	r2, r3, #4
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093c6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80093ca:	f003 0304 	and.w	r3, r3, #4
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d011      	beq.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80093d6:	f003 0301 	and.w	r3, r3, #1
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d00b      	beq.n	80093f6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	2204      	movs	r2, #4
 80093e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093ec:	f043 0202 	orr.w	r2, r3, #2
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d006      	beq.n	800940e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f7fe fd9e 	bl	8007f42 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	2200      	movs	r2, #0
 800940a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009414:	b29b      	uxth	r3, r3
 8009416:	2b00      	cmp	r3, #0
 8009418:	d175      	bne.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009420:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009422:	e853 3f00 	ldrex	r3, [r3]
 8009426:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009428:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800942a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800942e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800943c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800943e:	66ba      	str	r2, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009440:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009442:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009444:	e841 2300 	strex	r3, r2, [r1]
 8009448:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800944a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800944c:	2b00      	cmp	r3, #0
 800944e:	d1e4      	bne.n	800941a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	3308      	adds	r3, #8
 8009456:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009458:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800945a:	e853 3f00 	ldrex	r3, [r3]
 800945e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009460:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009462:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009466:	f023 0301 	bic.w	r3, r3, #1
 800946a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	3308      	adds	r3, #8
 8009474:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009478:	65ba      	str	r2, [r7, #88]	@ 0x58
 800947a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800947c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800947e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009480:	e841 2300 	strex	r3, r2, [r1]
 8009484:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009486:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009488:	2b00      	cmp	r3, #0
 800948a:	d1e1      	bne.n	8009450 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2220      	movs	r2, #32
 8009490:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	2200      	movs	r2, #0
 8009498:	671a      	str	r2, [r3, #112]	@ 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800949e:	2b01      	cmp	r3, #1
 80094a0:	d12e      	bne.n	8009500 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80094b0:	e853 3f00 	ldrex	r3, [r3]
 80094b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80094b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80094b8:	f023 0310 	bic.w	r3, r3, #16
 80094bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	461a      	mov	r2, r3
 80094c4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80094c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80094c8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80094cc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094ce:	e841 2300 	strex	r3, r2, [r1]
 80094d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d1e6      	bne.n	80094a8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f003 0310 	and.w	r3, r3, #16
 80094e4:	2b10      	cmp	r3, #16
 80094e6:	d103      	bne.n	80094f0 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	2210      	movs	r2, #16
 80094ee:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80094f6:	4619      	mov	r1, r3
 80094f8:	6878      	ldr	r0, [r7, #4]
 80094fa:	f7fe fd2b 	bl	8007f54 <HAL_UARTEx_RxEventCallback>
 80094fe:	e002      	b.n	8009506 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009500:	6878      	ldr	r0, [r7, #4]
 8009502:	f7f9 f909 	bl	8002718 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009506:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 800950a:	2b00      	cmp	r3, #0
 800950c:	d006      	beq.n	800951c <UART_RxISR_16BIT_FIFOEN+0x254>
 800950e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009512:	f003 0320 	and.w	r3, r3, #32
 8009516:	2b00      	cmp	r3, #0
 8009518:	f47f aefa 	bne.w	8009310 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8009522:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009526:	f8b7 307a 	ldrh.w	r3, [r7, #122]	@ 0x7a
 800952a:	2b00      	cmp	r3, #0
 800952c:	d045      	beq.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009534:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8009538:	429a      	cmp	r2, r3
 800953a:	d23e      	bcs.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	3308      	adds	r3, #8
 8009542:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009546:	e853 3f00 	ldrex	r3, [r3]
 800954a:	623b      	str	r3, [r7, #32]
   return(result);
 800954c:	6a3b      	ldr	r3, [r7, #32]
 800954e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009552:	677b      	str	r3, [r7, #116]	@ 0x74
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	3308      	adds	r3, #8
 800955a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800955c:	633a      	str	r2, [r7, #48]	@ 0x30
 800955e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009560:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009562:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009564:	e841 2300 	strex	r3, r2, [r1]
 8009568:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	2b00      	cmp	r3, #0
 800956e:	d1e5      	bne.n	800953c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	4a14      	ldr	r2, [pc, #80]	@ (80095c4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009574:	671a      	str	r2, [r3, #112]	@ 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	e853 3f00 	ldrex	r3, [r3]
 8009582:	60fb      	str	r3, [r7, #12]
   return(result);
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	f043 0320 	orr.w	r3, r3, #32
 800958a:	673b      	str	r3, [r7, #112]	@ 0x70
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	461a      	mov	r2, r3
 8009592:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009594:	61fb      	str	r3, [r7, #28]
 8009596:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009598:	69b9      	ldr	r1, [r7, #24]
 800959a:	69fa      	ldr	r2, [r7, #28]
 800959c:	e841 2300 	strex	r3, r2, [r1]
 80095a0:	617b      	str	r3, [r7, #20]
   return(result);
 80095a2:	697b      	ldr	r3, [r7, #20]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d1e6      	bne.n	8009576 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095a8:	e007      	b.n	80095ba <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	699a      	ldr	r2, [r3, #24]
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	f042 0208 	orr.w	r2, r2, #8
 80095b8:	619a      	str	r2, [r3, #24]
}
 80095ba:	bf00      	nop
 80095bc:	37a0      	adds	r7, #160	@ 0xa0
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}
 80095c2:	bf00      	nop
 80095c4:	08008e6f 	.word	0x08008e6f

080095c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095c8:	b480      	push	{r7}
 80095ca:	b083      	sub	sp, #12
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bc80      	pop	{r7}
 80095d8:	4770      	bx	lr

080095da <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80095da:	b480      	push	{r7}
 80095dc:	b083      	sub	sp, #12
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80095e2:	bf00      	nop
 80095e4:	370c      	adds	r7, #12
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bc80      	pop	{r7}
 80095ea:	4770      	bx	lr

080095ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bc80      	pop	{r7}
 80095fc:	4770      	bx	lr

080095fe <HAL_UARTEx_StopModeWakeUpSourceConfig>:
  *          @arg @ref UART_WAKEUP_ON_STARTBIT
  *          @arg @ref UART_WAKEUP_ON_READDATA_NONEMPTY
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_StopModeWakeUpSourceConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b088      	sub	sp, #32
 8009602:	af02      	add	r7, sp, #8
 8009604:	60f8      	str	r0, [r7, #12]
 8009606:	1d3b      	adds	r3, r7, #4
 8009608:	e883 0006 	stmia.w	r3, {r1, r2}
  HAL_StatusTypeDef status = HAL_OK;
 800960c:	2300      	movs	r3, #0
 800960e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_UART_WAKEUP_FROMSTOP_INSTANCE(huart->Instance));
  /* check the wake-up selection parameter */
  assert_param(IS_UART_WAKEUP_SELECTION(WakeUpSelection.WakeUpEvent));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009616:	2b01      	cmp	r3, #1
 8009618:	d101      	bne.n	800961e <HAL_UARTEx_StopModeWakeUpSourceConfig+0x20>
 800961a:	2302      	movs	r3, #2
 800961c:	e046      	b.n	80096ac <HAL_UARTEx_StopModeWakeUpSourceConfig+0xae>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2201      	movs	r2, #1
 8009622:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	2224      	movs	r2, #36	@ 0x24
 800962a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	681a      	ldr	r2, [r3, #0]
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	f022 0201 	bic.w	r2, r2, #1
 800963c:	601a      	str	r2, [r3, #0]

  /* Set the wake-up selection scheme */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_WUS, WakeUpSelection.WakeUpEvent);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	689b      	ldr	r3, [r3, #8]
 8009644:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8009648:	687a      	ldr	r2, [r7, #4]
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	430a      	orrs	r2, r1
 8009650:	609a      	str	r2, [r3, #8]

  if (WakeUpSelection.WakeUpEvent == UART_WAKEUP_ON_ADDRESS)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d105      	bne.n	8009664 <HAL_UARTEx_StopModeWakeUpSourceConfig+0x66>
  {
    UARTEx_Wakeup_AddressConfig(huart, WakeUpSelection);
 8009658:	1d3b      	adds	r3, r7, #4
 800965a:	e893 0006 	ldmia.w	r3, {r1, r2}
 800965e:	68f8      	ldr	r0, [r7, #12]
 8009660:	f000 f911 	bl	8009886 <UARTEx_Wakeup_AddressConfig>
  }

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	681a      	ldr	r2, [r3, #0]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f042 0201 	orr.w	r2, r2, #1
 8009672:	601a      	str	r2, [r3, #0]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009674:	f7f8 fb34 	bl	8001ce0 <HAL_GetTick>
 8009678:	6138      	str	r0, [r7, #16]

  /* Wait until REACK flag is set */
  if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800967a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800967e:	9300      	str	r3, [sp, #0]
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	2200      	movs	r2, #0
 8009684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8009688:	68f8      	ldr	r0, [r7, #12]
 800968a:	f7fe ffcf 	bl	800862c <UART_WaitOnFlagUntilTimeout>
 800968e:	4603      	mov	r3, r0
 8009690:	2b00      	cmp	r3, #0
 8009692:	d002      	beq.n	800969a <HAL_UARTEx_StopModeWakeUpSourceConfig+0x9c>
  {
    status = HAL_TIMEOUT;
 8009694:	2303      	movs	r3, #3
 8009696:	75fb      	strb	r3, [r7, #23]
 8009698:	e003      	b.n	80096a2 <HAL_UARTEx_StopModeWakeUpSourceConfig+0xa4>
  }
  else
  {
    /* Initialize the UART State */
    huart->gState = HAL_UART_STATE_READY;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2220      	movs	r2, #32
 800969e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  }

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	2200      	movs	r2, #0
 80096a6:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return status;
 80096aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ac:	4618      	mov	r0, r3
 80096ae:	3718      	adds	r7, #24
 80096b0:	46bd      	mov	sp, r7
 80096b2:	bd80      	pop	{r7, pc}

080096b4 <HAL_UARTEx_EnableStopMode>:
  * @note The UART is able to wake up the MCU from Stop 1 mode as long as UART clock is HSI or LSE.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableStopMode(UART_HandleTypeDef *huart)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b089      	sub	sp, #36	@ 0x24
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(huart);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80096c2:	2b01      	cmp	r3, #1
 80096c4:	d101      	bne.n	80096ca <HAL_UARTEx_EnableStopMode+0x16>
 80096c6:	2302      	movs	r3, #2
 80096c8:	e021      	b.n	800970e <HAL_UARTEx_EnableStopMode+0x5a>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2201      	movs	r2, #1
 80096ce:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  /* Set UESM bit */
  ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_UESM);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	e853 3f00 	ldrex	r3, [r3]
 80096de:	60bb      	str	r3, [r7, #8]
   return(result);
 80096e0:	68bb      	ldr	r3, [r7, #8]
 80096e2:	f043 0302 	orr.w	r3, r3, #2
 80096e6:	61fb      	str	r3, [r7, #28]
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	461a      	mov	r2, r3
 80096ee:	69fb      	ldr	r3, [r7, #28]
 80096f0:	61bb      	str	r3, [r7, #24]
 80096f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f4:	6979      	ldr	r1, [r7, #20]
 80096f6:	69ba      	ldr	r2, [r7, #24]
 80096f8:	e841 2300 	strex	r3, r2, [r1]
 80096fc:	613b      	str	r3, [r7, #16]
   return(result);
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d1e6      	bne.n	80096d2 <HAL_UARTEx_EnableStopMode+0x1e>

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3724      	adds	r7, #36	@ 0x24
 8009712:	46bd      	mov	sp, r7
 8009714:	bc80      	pop	{r7}
 8009716:	4770      	bx	lr

08009718 <HAL_UARTEx_EnableFifoMode>:
  * @brief  Enable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_EnableFifoMode(UART_HandleTypeDef *huart)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_UARTEx_EnableFifoMode+0x16>
 800972a:	2302      	movs	r3, #2
 800972c:	e02b      	b.n	8009786 <HAL_UARTEx_EnableFifoMode+0x6e>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2224      	movs	r2, #36	@ 0x24
 800973a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0201 	bic.w	r2, r2, #1
 8009754:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  SET_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800975c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_ENABLE;
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8009764:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	601a      	str	r2, [r3, #0]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f000 f8ac 	bl	80098cc <UARTEx_SetNbDataToProcess>

  huart->gState = HAL_UART_STATE_READY;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2220      	movs	r2, #32
 8009778:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009784:	2300      	movs	r3, #0
}
 8009786:	4618      	mov	r0, r3
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}

0800978e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800978e:	b580      	push	{r7, lr}
 8009790:	b084      	sub	sp, #16
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
 8009796:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800979e:	2b01      	cmp	r3, #1
 80097a0:	d101      	bne.n	80097a6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80097a2:	2302      	movs	r3, #2
 80097a4:	e02d      	b.n	8009802 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	2201      	movs	r2, #1
 80097aa:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2224      	movs	r2, #36	@ 0x24
 80097b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	f022 0201 	bic.w	r2, r2, #1
 80097cc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	683a      	ldr	r2, [r7, #0]
 80097de:	430a      	orrs	r2, r1
 80097e0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	f000 f872 	bl	80098cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	68fa      	ldr	r2, [r7, #12]
 80097ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2220      	movs	r2, #32
 80097f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800980a:	b580      	push	{r7, lr}
 800980c:	b084      	sub	sp, #16
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800981a:	2b01      	cmp	r3, #1
 800981c:	d101      	bne.n	8009822 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800981e:	2302      	movs	r3, #2
 8009820:	e02d      	b.n	800987e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2224      	movs	r2, #36	@ 0x24
 800982e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f022 0201 	bic.w	r2, r2, #1
 8009848:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	683a      	ldr	r2, [r7, #0]
 800985a:	430a      	orrs	r2, r1
 800985c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800985e:	6878      	ldr	r0, [r7, #4]
 8009860:	f000 f834 	bl	80098cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68fa      	ldr	r2, [r7, #12]
 800986a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2220      	movs	r2, #32
 8009870:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <UARTEx_Wakeup_AddressConfig>:
  * @param huart           UART handle.
  * @param WakeUpSelection UART wake up from stop mode parameters.
  * @retval None
  */
static void UARTEx_Wakeup_AddressConfig(UART_HandleTypeDef *huart, UART_WakeUpTypeDef WakeUpSelection)
{
 8009886:	b480      	push	{r7}
 8009888:	b085      	sub	sp, #20
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	1d3b      	adds	r3, r7, #4
 8009890:	e883 0006 	stmia.w	r3, {r1, r2}
  assert_param(IS_UART_ADDRESSLENGTH_DETECT(WakeUpSelection.AddressLength));

  /* Set the USART address length */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADDM7, WakeUpSelection.AddressLength);
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f023 0210 	bic.w	r2, r3, #16
 800989e:	893b      	ldrh	r3, [r7, #8]
 80098a0:	4619      	mov	r1, r3
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]

  /* Set the USART address node */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)WakeUpSelection.Address << UART_CR2_ADDRESS_LSB_POS));
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f023 417f 	bic.w	r1, r3, #4278190080	@ 0xff000000
 80098b4:	7abb      	ldrb	r3, [r7, #10]
 80098b6:	061a      	lsls	r2, r3, #24
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	430a      	orrs	r2, r1
 80098be:	605a      	str	r2, [r3, #4]
}
 80098c0:	bf00      	nop
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bc80      	pop	{r7}
 80098c8:	4770      	bx	lr
	...

080098cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d108      	bne.n	80098ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2201      	movs	r2, #1
 80098e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	2201      	movs	r2, #1
 80098e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80098ec:	e031      	b.n	8009952 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80098ee:	2308      	movs	r3, #8
 80098f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80098f2:	2308      	movs	r3, #8
 80098f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	0e5b      	lsrs	r3, r3, #25
 80098fe:	b2db      	uxtb	r3, r3
 8009900:	f003 0307 	and.w	r3, r3, #7
 8009904:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	689b      	ldr	r3, [r3, #8]
 800990c:	0f5b      	lsrs	r3, r3, #29
 800990e:	b2db      	uxtb	r3, r3
 8009910:	f003 0307 	and.w	r3, r3, #7
 8009914:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009916:	7bbb      	ldrb	r3, [r7, #14]
 8009918:	7b3a      	ldrb	r2, [r7, #12]
 800991a:	4910      	ldr	r1, [pc, #64]	@ (800995c <UARTEx_SetNbDataToProcess+0x90>)
 800991c:	5c8a      	ldrb	r2, [r1, r2]
 800991e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009922:	7b3a      	ldrb	r2, [r7, #12]
 8009924:	490e      	ldr	r1, [pc, #56]	@ (8009960 <UARTEx_SetNbDataToProcess+0x94>)
 8009926:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009928:	fb93 f3f2 	sdiv	r3, r3, r2
 800992c:	b29a      	uxth	r2, r3
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009934:	7bfb      	ldrb	r3, [r7, #15]
 8009936:	7b7a      	ldrb	r2, [r7, #13]
 8009938:	4908      	ldr	r1, [pc, #32]	@ (800995c <UARTEx_SetNbDataToProcess+0x90>)
 800993a:	5c8a      	ldrb	r2, [r1, r2]
 800993c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009940:	7b7a      	ldrb	r2, [r7, #13]
 8009942:	4907      	ldr	r1, [pc, #28]	@ (8009960 <UARTEx_SetNbDataToProcess+0x94>)
 8009944:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009946:	fb93 f3f2 	sdiv	r3, r3, r2
 800994a:	b29a      	uxth	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009952:	bf00      	nop
 8009954:	3714      	adds	r7, #20
 8009956:	46bd      	mov	sp, r7
 8009958:	bc80      	pop	{r7}
 800995a:	4770      	bx	lr
 800995c:	0801c1a8 	.word	0x0801c1a8
 8009960:	0801c1b0 	.word	0x0801c1b0

08009964 <MX_LoRaWAN_Init>:
/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/

void MX_LoRaWAN_Init(void)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Init_1 */

  /* USER CODE END MX_LoRaWAN_Init_1 */
  SystemApp_Init();
 8009968:	f7f8 f85e 	bl	8001a28 <SystemApp_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_2 */

  /* USER CODE END MX_LoRaWAN_Init_2 */
  LoRaWAN_Init();
 800996c:	f000 f820 	bl	80099b0 <LoRaWAN_Init>
  /* USER CODE BEGIN MX_LoRaWAN_Init_3 */

  /* USER CODE END MX_LoRaWAN_Init_3 */
}
 8009970:	bf00      	nop
 8009972:	bd80      	pop	{r7, pc}

08009974 <MX_LoRaWAN_Process>:

void MX_LoRaWAN_Process(void)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_LoRaWAN_Process_1 */

  /* USER CODE END MX_LoRaWAN_Process_1 */
  UTIL_SEQ_Run(UTIL_SEQ_DEFAULT);
 8009978:	f04f 30ff 	mov.w	r0, #4294967295
 800997c:	f010 ff72 	bl	801a864 <UTIL_SEQ_Run>
  /* USER CODE BEGIN MX_LoRaWAN_Process_2 */

  /* USER CODE END MX_LoRaWAN_Process_2 */
}
 8009980:	bf00      	nop
 8009982:	bd80      	pop	{r7, pc}

08009984 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009984:	b480      	push	{r7}
 8009986:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009988:	f3bf 8f4f 	dsb	sy
}
 800998c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800998e:	4b06      	ldr	r3, [pc, #24]	@ (80099a8 <__NVIC_SystemReset+0x24>)
 8009990:	68db      	ldr	r3, [r3, #12]
 8009992:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009996:	4904      	ldr	r1, [pc, #16]	@ (80099a8 <__NVIC_SystemReset+0x24>)
 8009998:	4b04      	ldr	r3, [pc, #16]	@ (80099ac <__NVIC_SystemReset+0x28>)
 800999a:	4313      	orrs	r3, r2
 800999c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800999e:	f3bf 8f4f 	dsb	sy
}
 80099a2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80099a4:	bf00      	nop
 80099a6:	e7fd      	b.n	80099a4 <__NVIC_SystemReset+0x20>
 80099a8:	e000ed00 	.word	0xe000ed00
 80099ac:	05fa0004 	.word	0x05fa0004

080099b0 <LoRaWAN_Init>:
/* USER CODE BEGIN EF */

/* USER CODE END EF */

void LoRaWAN_Init(void)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b086      	sub	sp, #24
 80099b4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN LoRaWAN_Init_LV */
  uint32_t feature_version = 0UL;
 80099b6:	2300      	movs	r3, #0
 80099b8:	607b      	str	r3, [r7, #4]
  /* USER CODE END LoRaWAN_Init_LV */

  /* USER CODE BEGIN LoRaWAN_Init_1 */

  /* Get LoRaWAN APP version*/
  APP_LOG(TS_OFF, VLEVEL_M, "APPLICATION_VERSION: V%X.%X.%X\r\n",
 80099ba:	2300      	movs	r3, #0
 80099bc:	9302      	str	r3, [sp, #8]
 80099be:	2302      	movs	r3, #2
 80099c0:	9301      	str	r3, [sp, #4]
 80099c2:	2301      	movs	r3, #1
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	4b5a      	ldr	r3, [pc, #360]	@ (8009b30 <LoRaWAN_Init+0x180>)
 80099c8:	2200      	movs	r2, #0
 80099ca:	2100      	movs	r1, #0
 80099cc:	2002      	movs	r0, #2
 80099ce:	f011 fb95 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(APP_VERSION_MAIN),
          (uint8_t)(APP_VERSION_SUB1),
          (uint8_t)(APP_VERSION_SUB2));

  /* Get MW LoRaWAN info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_LORAWAN_VERSION:  V%X.%X.%X\r\n",
 80099d2:	2300      	movs	r3, #0
 80099d4:	9302      	str	r3, [sp, #8]
 80099d6:	2304      	movs	r3, #4
 80099d8:	9301      	str	r3, [sp, #4]
 80099da:	2302      	movs	r3, #2
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	4b55      	ldr	r3, [pc, #340]	@ (8009b34 <LoRaWAN_Init+0x184>)
 80099e0:	2200      	movs	r2, #0
 80099e2:	2100      	movs	r1, #0
 80099e4:	2002      	movs	r0, #2
 80099e6:	f011 fb89 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(LORAWAN_VERSION_MAIN),
          (uint8_t)(LORAWAN_VERSION_SUB1),
          (uint8_t)(LORAWAN_VERSION_SUB2));

  /* Get MW SubGhz_Phy info */
  APP_LOG(TS_OFF, VLEVEL_M, "MW_RADIO_VERSION:    V%X.%X.%X\r\n",
 80099ea:	2300      	movs	r3, #0
 80099ec:	9302      	str	r3, [sp, #8]
 80099ee:	2302      	movs	r3, #2
 80099f0:	9301      	str	r3, [sp, #4]
 80099f2:	2301      	movs	r3, #1
 80099f4:	9300      	str	r3, [sp, #0]
 80099f6:	4b50      	ldr	r3, [pc, #320]	@ (8009b38 <LoRaWAN_Init+0x188>)
 80099f8:	2200      	movs	r2, #0
 80099fa:	2100      	movs	r1, #0
 80099fc:	2002      	movs	r0, #2
 80099fe:	f011 fb7d 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(SUBGHZ_PHY_VERSION_MAIN),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB1),
          (uint8_t)(SUBGHZ_PHY_VERSION_SUB2));

  /* Get LoRaWAN Link Layer info */
  LmHandlerGetVersion(LORAMAC_HANDLER_L2_VERSION, &feature_version);
 8009a02:	1d3b      	adds	r3, r7, #4
 8009a04:	4619      	mov	r1, r3
 8009a06:	2000      	movs	r0, #0
 8009a08:	f003 f96e 	bl	800cce8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "L2_SPEC_VERSION:     V%X.%X.%X\r\n",
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	0e1b      	lsrs	r3, r3, #24
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	0c1b      	lsrs	r3, r3, #16
 8009a18:	b2db      	uxtb	r3, r3
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	0a1b      	lsrs	r3, r3, #8
 8009a20:	b2db      	uxtb	r3, r3
 8009a22:	9302      	str	r3, [sp, #8]
 8009a24:	9101      	str	r1, [sp, #4]
 8009a26:	9200      	str	r2, [sp, #0]
 8009a28:	4b44      	ldr	r3, [pc, #272]	@ (8009b3c <LoRaWAN_Init+0x18c>)
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	2100      	movs	r1, #0
 8009a2e:	2002      	movs	r0, #2
 8009a30:	f011 fb64 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8));

  /* Get LoRaWAN Regional Parameters info */
  LmHandlerGetVersion(LORAMAC_HANDLER_REGION_VERSION, &feature_version);
 8009a34:	1d3b      	adds	r3, r7, #4
 8009a36:	4619      	mov	r1, r3
 8009a38:	2001      	movs	r0, #1
 8009a3a:	f003 f955 	bl	800cce8 <LmHandlerGetVersion>
  APP_LOG(TS_OFF, VLEVEL_M, "RP_SPEC_VERSION:     V%X-%X.%X.%X\r\n",
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	0e1b      	lsrs	r3, r3, #24
 8009a42:	b2db      	uxtb	r3, r3
 8009a44:	461a      	mov	r2, r3
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0c1b      	lsrs	r3, r3, #16
 8009a4a:	b2db      	uxtb	r3, r3
 8009a4c:	4619      	mov	r1, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	0a1b      	lsrs	r3, r3, #8
 8009a52:	b2db      	uxtb	r3, r3
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	b2c0      	uxtb	r0, r0
 8009a58:	9003      	str	r0, [sp, #12]
 8009a5a:	9302      	str	r3, [sp, #8]
 8009a5c:	9101      	str	r1, [sp, #4]
 8009a5e:	9200      	str	r2, [sp, #0]
 8009a60:	4b37      	ldr	r3, [pc, #220]	@ (8009b40 <LoRaWAN_Init+0x190>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	2100      	movs	r1, #0
 8009a66:	2002      	movs	r0, #2
 8009a68:	f011 fb48 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
          (uint8_t)(feature_version >> 24),
          (uint8_t)(feature_version >> 16),
          (uint8_t)(feature_version >> 8),
          (uint8_t)(feature_version));

  UTIL_TIMER_Create(&TxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnTxTimerLedEvent, NULL);
 8009a6c:	2300      	movs	r3, #0
 8009a6e:	9300      	str	r3, [sp, #0]
 8009a70:	4b34      	ldr	r3, [pc, #208]	@ (8009b44 <LoRaWAN_Init+0x194>)
 8009a72:	2200      	movs	r2, #0
 8009a74:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009a78:	4833      	ldr	r0, [pc, #204]	@ (8009b48 <LoRaWAN_Init+0x198>)
 8009a7a:	f011 f891 	bl	801aba0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&RxLedTimer, LED_PERIOD_TIME, UTIL_TIMER_ONESHOT, OnRxTimerLedEvent, NULL);
 8009a7e:	2300      	movs	r3, #0
 8009a80:	9300      	str	r3, [sp, #0]
 8009a82:	4b32      	ldr	r3, [pc, #200]	@ (8009b4c <LoRaWAN_Init+0x19c>)
 8009a84:	2200      	movs	r2, #0
 8009a86:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009a8a:	4831      	ldr	r0, [pc, #196]	@ (8009b50 <LoRaWAN_Init+0x1a0>)
 8009a8c:	f011 f888 	bl	801aba0 <UTIL_TIMER_Create>
  UTIL_TIMER_Create(&JoinLedTimer, LED_PERIOD_TIME, UTIL_TIMER_PERIODIC, OnJoinTimerLedEvent, NULL);
 8009a90:	2300      	movs	r3, #0
 8009a92:	9300      	str	r3, [sp, #0]
 8009a94:	4b2f      	ldr	r3, [pc, #188]	@ (8009b54 <LoRaWAN_Init+0x1a4>)
 8009a96:	2201      	movs	r2, #1
 8009a98:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8009a9c:	482e      	ldr	r0, [pc, #184]	@ (8009b58 <LoRaWAN_Init+0x1a8>)
 8009a9e:	f011 f87f 	bl	801aba0 <UTIL_TIMER_Create>

  /* USER CODE END LoRaWAN_Init_1 */

  UTIL_TIMER_Create(&StopJoinTimer, JOIN_TIME, UTIL_TIMER_ONESHOT, OnStopJoinTimerEvent, NULL);
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	4b2d      	ldr	r3, [pc, #180]	@ (8009b5c <LoRaWAN_Init+0x1ac>)
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8009aae:	482c      	ldr	r0, [pc, #176]	@ (8009b60 <LoRaWAN_Init+0x1b0>)
 8009ab0:	f011 f876 	bl	801aba0 <UTIL_TIMER_Create>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LmHandlerProcess), UTIL_SEQ_RFU, LmHandlerProcess);
 8009ab4:	4a2b      	ldr	r2, [pc, #172]	@ (8009b64 <LoRaWAN_Init+0x1b4>)
 8009ab6:	2100      	movs	r1, #0
 8009ab8:	2001      	movs	r0, #1
 8009aba:	f010 ffcf 	bl	801aa5c <UTIL_SEQ_RegTask>

  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), UTIL_SEQ_RFU, SendTxData);
 8009abe:	4a2a      	ldr	r2, [pc, #168]	@ (8009b68 <LoRaWAN_Init+0x1b8>)
 8009ac0:	2100      	movs	r1, #0
 8009ac2:	2002      	movs	r0, #2
 8009ac4:	f010 ffca 	bl	801aa5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), UTIL_SEQ_RFU, StoreContext);
 8009ac8:	4a28      	ldr	r2, [pc, #160]	@ (8009b6c <LoRaWAN_Init+0x1bc>)
 8009aca:	2100      	movs	r1, #0
 8009acc:	2004      	movs	r0, #4
 8009ace:	f010 ffc5 	bl	801aa5c <UTIL_SEQ_RegTask>
  UTIL_SEQ_RegTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), UTIL_SEQ_RFU, StopJoin);
 8009ad2:	4a27      	ldr	r2, [pc, #156]	@ (8009b70 <LoRaWAN_Init+0x1c0>)
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	2008      	movs	r0, #8
 8009ad8:	f010 ffc0 	bl	801aa5c <UTIL_SEQ_RegTask>

  /* Init Info table used by LmHandler*/
  LoraInfo_Init();
 8009adc:	f000 fd38 	bl	800a550 <LoraInfo_Init>

  /* Init the Lora Stack*/
  LmHandlerInit(&LmHandlerCallbacks, APP_VERSION);
 8009ae0:	f04f 7181 	mov.w	r1, #16908288	@ 0x1020000
 8009ae4:	4823      	ldr	r0, [pc, #140]	@ (8009b74 <LoRaWAN_Init+0x1c4>)
 8009ae6:	f002 f9ed 	bl	800bec4 <LmHandlerInit>

  LmHandlerConfigure(&LmHandlerParams);
 8009aea:	4823      	ldr	r0, [pc, #140]	@ (8009b78 <LoRaWAN_Init+0x1c8>)
 8009aec:	f002 fa48 	bl	800bf80 <LmHandlerConfigure>

  /* USER CODE BEGIN LoRaWAN_Init_2 */
  UTIL_TIMER_Start(&JoinLedTimer);
 8009af0:	4819      	ldr	r0, [pc, #100]	@ (8009b58 <LoRaWAN_Init+0x1a8>)
 8009af2:	f011 f88b 	bl	801ac0c <UTIL_TIMER_Start>

  /* USER CODE END LoRaWAN_Init_2 */

  LmHandlerJoin(ActivationType, ForceRejoin);
 8009af6:	4b21      	ldr	r3, [pc, #132]	@ (8009b7c <LoRaWAN_Init+0x1cc>)
 8009af8:	781b      	ldrb	r3, [r3, #0]
 8009afa:	4a21      	ldr	r2, [pc, #132]	@ (8009b80 <LoRaWAN_Init+0x1d0>)
 8009afc:	7812      	ldrb	r2, [r2, #0]
 8009afe:	4611      	mov	r1, r2
 8009b00:	4618      	mov	r0, r3
 8009b02:	f002 fbb1 	bl	800c268 <LmHandlerJoin>

  if (EventType == TX_ON_TIMER)
 8009b06:	4b1f      	ldr	r3, [pc, #124]	@ (8009b84 <LoRaWAN_Init+0x1d4>)
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d10b      	bne.n	8009b26 <LoRaWAN_Init+0x176>
  {
    /* send every time timer elapses */
    UTIL_TIMER_Create(&TxTimer, TxPeriodicity, UTIL_TIMER_ONESHOT, OnTxTimerEvent, NULL);
 8009b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8009b88 <LoRaWAN_Init+0x1d8>)
 8009b10:	6819      	ldr	r1, [r3, #0]
 8009b12:	2300      	movs	r3, #0
 8009b14:	9300      	str	r3, [sp, #0]
 8009b16:	4b1d      	ldr	r3, [pc, #116]	@ (8009b8c <LoRaWAN_Init+0x1dc>)
 8009b18:	2200      	movs	r2, #0
 8009b1a:	481d      	ldr	r0, [pc, #116]	@ (8009b90 <LoRaWAN_Init+0x1e0>)
 8009b1c:	f011 f840 	bl	801aba0 <UTIL_TIMER_Create>
    UTIL_TIMER_Start(&TxTimer);
 8009b20:	481b      	ldr	r0, [pc, #108]	@ (8009b90 <LoRaWAN_Init+0x1e0>)
 8009b22:	f011 f873 	bl	801ac0c <UTIL_TIMER_Start>
  }

  /* USER CODE BEGIN LoRaWAN_Init_Last */

  /* USER CODE END LoRaWAN_Init_Last */
}
 8009b26:	bf00      	nop
 8009b28:	3708      	adds	r7, #8
 8009b2a:	46bd      	mov	sp, r7
 8009b2c:	bd80      	pop	{r7, pc}
 8009b2e:	bf00      	nop
 8009b30:	0801b7a8 	.word	0x0801b7a8
 8009b34:	0801b7cc 	.word	0x0801b7cc
 8009b38:	0801b7f0 	.word	0x0801b7f0
 8009b3c:	0801b814 	.word	0x0801b814
 8009b40:	0801b838 	.word	0x0801b838
 8009b44:	0800a045 	.word	0x0800a045
 8009b48:	20000460 	.word	0x20000460
 8009b4c:	0800a057 	.word	0x0800a057
 8009b50:	20000478 	.word	0x20000478
 8009b54:	0800a069 	.word	0x0800a069
 8009b58:	20000490 	.word	0x20000490
 8009b5c:	0800a419 	.word	0x0800a419
 8009b60:	20000354 	.word	0x20000354
 8009b64:	0800c1fd 	.word	0x0800c1fd
 8009b68:	08009d05 	.word	0x08009d05
 8009b6c:	0800a43d 	.word	0x0800a43d
 8009b70:	0800a399 	.word	0x0800a399
 8009b74:	20000024 	.word	0x20000024
 8009b78:	20000070 	.word	0x20000070
 8009b7c:	20000020 	.word	0x20000020
 8009b80:	20000021 	.word	0x20000021
 8009b84:	20000338 	.word	0x20000338
 8009b88:	20000084 	.word	0x20000084
 8009b8c:	0800a021 	.word	0x0800a021
 8009b90:	2000033c 	.word	0x2000033c

08009b94 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN PB_Callbacks */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b082      	sub	sp, #8
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	80fb      	strh	r3, [r7, #6]
  switch (GPIO_Pin)
 8009b9e:	88fb      	ldrh	r3, [r7, #6]
 8009ba0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009ba4:	d104      	bne.n	8009bb0 <HAL_GPIO_EXTI_Callback+0x1c>
  {
    case  BUT1_Pin:
    	// XXX: always initialized
      if (EventType == TX_ON_EVENT || 1)
      {
        UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 8009ba6:	2100      	movs	r1, #0
 8009ba8:	2002      	movs	r0, #2
 8009baa:	f010 ff79 	bl	801aaa0 <UTIL_SEQ_SetTask>
      }
      break;
 8009bae:	e000      	b.n	8009bb2 <HAL_GPIO_EXTI_Callback+0x1e>
    default:
      break;
 8009bb0:	bf00      	nop
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	3708      	adds	r7, #8
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
	...

08009bbc <OnRxData>:
/* USER CODE BEGIN PrFD */

/* USER CODE END PrFD */

static void OnRxData(LmHandlerAppData_t *appData, LmHandlerRxParams_t *params)
{
 8009bbc:	b5b0      	push	{r4, r5, r7, lr}
 8009bbe:	b08a      	sub	sp, #40	@ 0x28
 8009bc0:	af06      	add	r7, sp, #24
 8009bc2:	6078      	str	r0, [r7, #4]
 8009bc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRxData_1 */
  uint8_t RxPort = 0;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	73fb      	strb	r3, [r7, #15]

  if (params != NULL)
 8009bca:	683b      	ldr	r3, [r7, #0]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	f000 8086 	beq.w	8009cde <OnRxData+0x122>
  {
#if 0   // XXX:
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET); /* LED_BLUE */
#endif

    UTIL_TIMER_Start(&RxLedTimer);
 8009bd2:	4845      	ldr	r0, [pc, #276]	@ (8009ce8 <OnRxData+0x12c>)
 8009bd4:	f011 f81a 	bl	801ac0c <UTIL_TIMER_Start>

    if (params->IsMcpsIndication)
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	781b      	ldrb	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d05a      	beq.n	8009c96 <OnRxData+0xda>
    {
      if (appData != NULL)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d057      	beq.n	8009c96 <OnRxData+0xda>
      {
        RxPort = appData->Port;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	781b      	ldrb	r3, [r3, #0]
 8009bea:	73fb      	strb	r3, [r7, #15]
        if (appData->Buffer != NULL)
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	685b      	ldr	r3, [r3, #4]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d050      	beq.n	8009c96 <OnRxData+0xda>
        {
          switch (appData->Port)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d01f      	beq.n	8009c3c <OnRxData+0x80>
 8009bfc:	2b03      	cmp	r3, #3
 8009bfe:	d145      	bne.n	8009c8c <OnRxData+0xd0>
          {
            case LORAWAN_SWITCH_CLASS_PORT:
              /*this port switches the class*/
              if (appData->BufferSize == 1)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	785b      	ldrb	r3, [r3, #1]
 8009c04:	2b01      	cmp	r3, #1
 8009c06:	d143      	bne.n	8009c90 <OnRxData+0xd4>
              {
                switch (appData->Buffer[0])
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	685b      	ldr	r3, [r3, #4]
 8009c0c:	781b      	ldrb	r3, [r3, #0]
 8009c0e:	2b02      	cmp	r3, #2
 8009c10:	d00e      	beq.n	8009c30 <OnRxData+0x74>
 8009c12:	2b02      	cmp	r3, #2
 8009c14:	dc10      	bgt.n	8009c38 <OnRxData+0x7c>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d002      	beq.n	8009c20 <OnRxData+0x64>
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d004      	beq.n	8009c28 <OnRxData+0x6c>
                  {
                    LmHandlerRequestClass(CLASS_C);
                    break;
                  }
                  default:
                    break;
 8009c1e:	e00b      	b.n	8009c38 <OnRxData+0x7c>
                    LmHandlerRequestClass(CLASS_A);
 8009c20:	2000      	movs	r0, #0
 8009c22:	f002 fcad 	bl	800c580 <LmHandlerRequestClass>
                    break;
 8009c26:	e008      	b.n	8009c3a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_B);
 8009c28:	2001      	movs	r0, #1
 8009c2a:	f002 fca9 	bl	800c580 <LmHandlerRequestClass>
                    break;
 8009c2e:	e004      	b.n	8009c3a <OnRxData+0x7e>
                    LmHandlerRequestClass(CLASS_C);
 8009c30:	2002      	movs	r0, #2
 8009c32:	f002 fca5 	bl	800c580 <LmHandlerRequestClass>
                    break;
 8009c36:	e000      	b.n	8009c3a <OnRxData+0x7e>
                    break;
 8009c38:	bf00      	nop
                }
              }
              break;
 8009c3a:	e029      	b.n	8009c90 <OnRxData+0xd4>
            case LORAWAN_USER_APP_PORT:
              if (appData->BufferSize == 1)
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	785b      	ldrb	r3, [r3, #1]
 8009c40:	2b01      	cmp	r3, #1
 8009c42:	d127      	bne.n	8009c94 <OnRxData+0xd8>
              {
                AppLedStateOn = appData->Buffer[0] & 0x01;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	685b      	ldr	r3, [r3, #4]
 8009c48:	781b      	ldrb	r3, [r3, #0]
 8009c4a:	f003 0301 	and.w	r3, r3, #1
 8009c4e:	b2da      	uxtb	r2, r3
 8009c50:	4b26      	ldr	r3, [pc, #152]	@ (8009cec <OnRxData+0x130>)
 8009c52:	701a      	strb	r2, [r3, #0]
                if (AppLedStateOn == RESET)
 8009c54:	4b25      	ldr	r3, [pc, #148]	@ (8009cec <OnRxData+0x130>)
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d10b      	bne.n	8009c74 <OnRxData+0xb8>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED OFF\r\n");
 8009c5c:	4b24      	ldr	r3, [pc, #144]	@ (8009cf0 <OnRxData+0x134>)
 8009c5e:	2200      	movs	r2, #0
 8009c60:	2100      	movs	r1, #0
 8009c62:	2003      	movs	r0, #3
 8009c64:	f011 fa4a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_RED */
 8009c68:	2201      	movs	r2, #1
 8009c6a:	2120      	movs	r1, #32
 8009c6c:	4821      	ldr	r0, [pc, #132]	@ (8009cf4 <OnRxData+0x138>)
 8009c6e:	f7fb f8e9 	bl	8004e44 <HAL_GPIO_WritePin>
                {
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
                }
              }
              break;
 8009c72:	e00f      	b.n	8009c94 <OnRxData+0xd8>
                  APP_LOG(TS_OFF, VLEVEL_H, "LED ON\r\n");
 8009c74:	4b20      	ldr	r3, [pc, #128]	@ (8009cf8 <OnRxData+0x13c>)
 8009c76:	2200      	movs	r2, #0
 8009c78:	2100      	movs	r1, #0
 8009c7a:	2003      	movs	r0, #3
 8009c7c:	f011 fa3e 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
                  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_RED */
 8009c80:	2200      	movs	r2, #0
 8009c82:	2120      	movs	r1, #32
 8009c84:	481b      	ldr	r0, [pc, #108]	@ (8009cf4 <OnRxData+0x138>)
 8009c86:	f7fb f8dd 	bl	8004e44 <HAL_GPIO_WritePin>
              break;
 8009c8a:	e003      	b.n	8009c94 <OnRxData+0xd8>

            default:

              break;
 8009c8c:	bf00      	nop
 8009c8e:	e002      	b.n	8009c96 <OnRxData+0xda>
              break;
 8009c90:	bf00      	nop
 8009c92:	e000      	b.n	8009c96 <OnRxData+0xda>
              break;
 8009c94:	bf00      	nop
          }
        }
      }
    }
    if (params->RxSlot < RX_SLOT_NONE)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	7c1b      	ldrb	r3, [r3, #16]
 8009c9a:	2b05      	cmp	r3, #5
 8009c9c:	d81f      	bhi.n	8009cde <OnRxData+0x122>
    {
      APP_LOG(TS_OFF, VLEVEL_H, "###### D/L FRAME:%04d | PORT:%d | DR:%d | SLOT:%s | RSSI:%d | SNR:%d\r\n",
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	68db      	ldr	r3, [r3, #12]
 8009ca2:	7bfa      	ldrb	r2, [r7, #15]
 8009ca4:	6839      	ldr	r1, [r7, #0]
 8009ca6:	f991 1008 	ldrsb.w	r1, [r1, #8]
 8009caa:	460c      	mov	r4, r1
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	7c09      	ldrb	r1, [r1, #16]
 8009cb0:	4608      	mov	r0, r1
 8009cb2:	4912      	ldr	r1, [pc, #72]	@ (8009cfc <OnRxData+0x140>)
 8009cb4:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8009cb8:	6838      	ldr	r0, [r7, #0]
 8009cba:	f990 0009 	ldrsb.w	r0, [r0, #9]
 8009cbe:	4605      	mov	r5, r0
 8009cc0:	6838      	ldr	r0, [r7, #0]
 8009cc2:	f990 000a 	ldrsb.w	r0, [r0, #10]
 8009cc6:	9005      	str	r0, [sp, #20]
 8009cc8:	9504      	str	r5, [sp, #16]
 8009cca:	9103      	str	r1, [sp, #12]
 8009ccc:	9402      	str	r4, [sp, #8]
 8009cce:	9201      	str	r2, [sp, #4]
 8009cd0:	9300      	str	r3, [sp, #0]
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8009d00 <OnRxData+0x144>)
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	2003      	movs	r0, #3
 8009cda:	f011 fa0f 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
              params->DownlinkCounter, RxPort, params->Datarate, slotStrings[params->RxSlot], params->Rssi, params->Snr);
    }
  }
  /* USER CODE END OnRxData_1 */
}
 8009cde:	bf00      	nop
 8009ce0:	3710      	adds	r7, #16
 8009ce2:	46bd      	mov	sp, r7
 8009ce4:	bdb0      	pop	{r4, r5, r7, pc}
 8009ce6:	bf00      	nop
 8009ce8:	20000478 	.word	0x20000478
 8009cec:	2000045e 	.word	0x2000045e
 8009cf0:	0801b85c 	.word	0x0801b85c
 8009cf4:	48000400 	.word	0x48000400
 8009cf8:	0801b868 	.word	0x0801b868
 8009cfc:	20000008 	.word	0x20000008
 8009d00:	0801b874 	.word	0x0801b874

08009d04 <SendTxData>:

static void SendTxData(void)
{
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b091      	sub	sp, #68	@ 0x44
 8009d08:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN SendTxData_1 */
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 8009d0a:	23ff      	movs	r3, #255	@ 0xff
 8009d0c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint8_t batteryLevel = GetBatteryLevel();
 8009d10:	f7f7 feba 	bl	8001a88 <GetBatteryLevel>
 8009d14:	4603      	mov	r3, r0
 8009d16:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  sensor_t sensor_data;
  UTIL_TIMER_Time_t nextTxIn = 0;
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	637b      	str	r3, [r7, #52]	@ 0x34

#ifdef CAYENNE_LPP
  uint8_t channel = 0;
#else
  uint16_t pressure = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  int16_t temperature = 0;
 8009d22:	2300      	movs	r3, #0
 8009d24:	857b      	strh	r3, [r7, #42]	@ 0x2a
  uint16_t humidity = 0;
 8009d26:	2300      	movs	r3, #0
 8009d28:	853b      	strh	r3, [r7, #40]	@ 0x28
  uint32_t i = 0;
 8009d2a:	2300      	movs	r3, #0
 8009d2c:	633b      	str	r3, [r7, #48]	@ 0x30
  int32_t latitude = 0;
 8009d2e:	2300      	movs	r3, #0
 8009d30:	627b      	str	r3, [r7, #36]	@ 0x24
  int32_t longitude = 0;
 8009d32:	2300      	movs	r3, #0
 8009d34:	623b      	str	r3, [r7, #32]
  uint16_t altitudeGps = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	83fb      	strh	r3, [r7, #30]
#endif /* CAYENNE_LPP */

  EnvSensors_Read(&sensor_data);
 8009d3a:	1d3b      	adds	r3, r7, #4
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	f7f8 f863 	bl	8001e08 <EnvSensors_Read>

  APP_LOG(TS_ON, VLEVEL_M, "VDDA: %d\r\n", batteryLevel);
 8009d42:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009d46:	9300      	str	r3, [sp, #0]
 8009d48:	4b8f      	ldr	r3, [pc, #572]	@ (8009f88 <SendTxData+0x284>)
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	2100      	movs	r1, #0
 8009d4e:	2002      	movs	r0, #2
 8009d50:	f011 f9d4 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
  APP_LOG(TS_ON, VLEVEL_M, "temp: %d\r\n", (int16_t)(sensor_data.temperature));
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	4618      	mov	r0, r3
 8009d58:	f7f6 fee0 	bl	8000b1c <__aeabi_f2iz>
 8009d5c:	4603      	mov	r3, r0
 8009d5e:	b21b      	sxth	r3, r3
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	4b8a      	ldr	r3, [pc, #552]	@ (8009f8c <SendTxData+0x288>)
 8009d64:	2201      	movs	r2, #1
 8009d66:	2100      	movs	r1, #0
 8009d68:	2002      	movs	r0, #2
 8009d6a:	f011 f9c7 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>

  AppData.Port = LORAWAN_USER_APP_PORT;
 8009d6e:	4b88      	ldr	r3, [pc, #544]	@ (8009f90 <SendTxData+0x28c>)
 8009d70:	2202      	movs	r2, #2
 8009d72:	701a      	strb	r2, [r3, #0]
  }

  CayenneLppCopy(AppData.Buffer);
  AppData.BufferSize = CayenneLppGetSize();
#else  /* not CAYENNE_LPP */
  humidity    = (uint16_t)(sensor_data.humidity * 10);            /* in %*10     */
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	4987      	ldr	r1, [pc, #540]	@ (8009f94 <SendTxData+0x290>)
 8009d78:	4618      	mov	r0, r3
 8009d7a:	f7f6 fd7f 	bl	800087c <__aeabi_fmul>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7f6 fef1 	bl	8000b68 <__aeabi_f2uiz>
 8009d86:	4603      	mov	r3, r0
 8009d88:	853b      	strh	r3, [r7, #40]	@ 0x28
  temperature = (int16_t)(sensor_data.temperature);
 8009d8a:	68bb      	ldr	r3, [r7, #8]
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7f6 fec5 	bl	8000b1c <__aeabi_f2iz>
 8009d92:	4603      	mov	r3, r0
 8009d94:	857b      	strh	r3, [r7, #42]	@ 0x2a
  pressure = (uint16_t)(sensor_data.pressure * 100 / 10); /* in hPa / 10 */
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	497f      	ldr	r1, [pc, #508]	@ (8009f98 <SendTxData+0x294>)
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	f7f6 fd6e 	bl	800087c <__aeabi_fmul>
 8009da0:	4603      	mov	r3, r0
 8009da2:	497c      	ldr	r1, [pc, #496]	@ (8009f94 <SendTxData+0x290>)
 8009da4:	4618      	mov	r0, r3
 8009da6:	f7f6 fe1d 	bl	80009e4 <__aeabi_fdiv>
 8009daa:	4603      	mov	r3, r0
 8009dac:	4618      	mov	r0, r3
 8009dae:	f7f6 fedb 	bl	8000b68 <__aeabi_f2uiz>
 8009db2:	4603      	mov	r3, r0
 8009db4:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  AppData.Buffer[i++] = AppLedStateOn;
 8009db6:	4b76      	ldr	r3, [pc, #472]	@ (8009f90 <SendTxData+0x28c>)
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dbc:	1c59      	adds	r1, r3, #1
 8009dbe:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dc0:	4413      	add	r3, r2
 8009dc2:	4a76      	ldr	r2, [pc, #472]	@ (8009f9c <SendTxData+0x298>)
 8009dc4:	7812      	ldrb	r2, [r2, #0]
 8009dc6:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((pressure >> 8) & 0xFF);
 8009dc8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8009dca:	0a1b      	lsrs	r3, r3, #8
 8009dcc:	b298      	uxth	r0, r3
 8009dce:	4b70      	ldr	r3, [pc, #448]	@ (8009f90 <SendTxData+0x28c>)
 8009dd0:	685a      	ldr	r2, [r3, #4]
 8009dd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd4:	1c59      	adds	r1, r3, #1
 8009dd6:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dd8:	4413      	add	r3, r2
 8009dda:	b2c2      	uxtb	r2, r0
 8009ddc:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(pressure & 0xFF);
 8009dde:	4b6c      	ldr	r3, [pc, #432]	@ (8009f90 <SendTxData+0x28c>)
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de4:	1c59      	adds	r1, r3, #1
 8009de6:	6339      	str	r1, [r7, #48]	@ 0x30
 8009de8:	4413      	add	r3, r2
 8009dea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8009dec:	b2d2      	uxtb	r2, r2
 8009dee:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(temperature & 0xFF);
 8009df0:	4b67      	ldr	r3, [pc, #412]	@ (8009f90 <SendTxData+0x28c>)
 8009df2:	685a      	ldr	r2, [r3, #4]
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df6:	1c59      	adds	r1, r3, #1
 8009df8:	6339      	str	r1, [r7, #48]	@ 0x30
 8009dfa:	4413      	add	r3, r2
 8009dfc:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8009dfe:	b2d2      	uxtb	r2, r2
 8009e00:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)((humidity >> 8) & 0xFF);
 8009e02:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8009e04:	0a1b      	lsrs	r3, r3, #8
 8009e06:	b298      	uxth	r0, r3
 8009e08:	4b61      	ldr	r3, [pc, #388]	@ (8009f90 <SendTxData+0x28c>)
 8009e0a:	685a      	ldr	r2, [r3, #4]
 8009e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e0e:	1c59      	adds	r1, r3, #1
 8009e10:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e12:	4413      	add	r3, r2
 8009e14:	b2c2      	uxtb	r2, r0
 8009e16:	701a      	strb	r2, [r3, #0]
  AppData.Buffer[i++] = (uint8_t)(humidity & 0xFF);
 8009e18:	4b5d      	ldr	r3, [pc, #372]	@ (8009f90 <SendTxData+0x28c>)
 8009e1a:	685a      	ldr	r2, [r3, #4]
 8009e1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e1e:	1c59      	adds	r1, r3, #1
 8009e20:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e22:	4413      	add	r3, r2
 8009e24:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8009e26:	b2d2      	uxtb	r2, r2
 8009e28:	701a      	strb	r2, [r3, #0]

  if ((LmHandlerParams.ActiveRegion == LORAMAC_REGION_US915) || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AU915)
 8009e2a:	4b5d      	ldr	r3, [pc, #372]	@ (8009fa0 <SendTxData+0x29c>)
 8009e2c:	781b      	ldrb	r3, [r3, #0]
 8009e2e:	2b08      	cmp	r3, #8
 8009e30:	d007      	beq.n	8009e42 <SendTxData+0x13e>
 8009e32:	4b5b      	ldr	r3, [pc, #364]	@ (8009fa0 <SendTxData+0x29c>)
 8009e34:	781b      	ldrb	r3, [r3, #0]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d003      	beq.n	8009e42 <SendTxData+0x13e>
      || (LmHandlerParams.ActiveRegion == LORAMAC_REGION_AS923))
 8009e3a:	4b59      	ldr	r3, [pc, #356]	@ (8009fa0 <SendTxData+0x29c>)
 8009e3c:	781b      	ldrb	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d120      	bne.n	8009e84 <SendTxData+0x180>
  {
    AppData.Buffer[i++] = 0;
 8009e42:	4b53      	ldr	r3, [pc, #332]	@ (8009f90 <SendTxData+0x28c>)
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e48:	1c59      	adds	r1, r3, #1
 8009e4a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e4c:	4413      	add	r3, r2
 8009e4e:	2200      	movs	r2, #0
 8009e50:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e52:	4b4f      	ldr	r3, [pc, #316]	@ (8009f90 <SendTxData+0x28c>)
 8009e54:	685a      	ldr	r2, [r3, #4]
 8009e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e58:	1c59      	adds	r1, r3, #1
 8009e5a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e5c:	4413      	add	r3, r2
 8009e5e:	2200      	movs	r2, #0
 8009e60:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e62:	4b4b      	ldr	r3, [pc, #300]	@ (8009f90 <SendTxData+0x28c>)
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e68:	1c59      	adds	r1, r3, #1
 8009e6a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e6c:	4413      	add	r3, r2
 8009e6e:	2200      	movs	r2, #0
 8009e70:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = 0;
 8009e72:	4b47      	ldr	r3, [pc, #284]	@ (8009f90 <SendTxData+0x28c>)
 8009e74:	685a      	ldr	r2, [r3, #4]
 8009e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e78:	1c59      	adds	r1, r3, #1
 8009e7a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e7c:	4413      	add	r3, r2
 8009e7e:	2200      	movs	r2, #0
 8009e80:	701a      	strb	r2, [r3, #0]
 8009e82:	e05b      	b.n	8009f3c <SendTxData+0x238>
  }
  else
  {
    latitude = sensor_data.latitude;
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	627b      	str	r3, [r7, #36]	@ 0x24
    longitude = sensor_data.longitude;
 8009e88:	697b      	ldr	r3, [r7, #20]
 8009e8a:	623b      	str	r3, [r7, #32]

    AppData.Buffer[i++] = GetBatteryLevel();        /* 1 (very low) to 254 (fully charged) */
 8009e8c:	4b40      	ldr	r3, [pc, #256]	@ (8009f90 <SendTxData+0x28c>)
 8009e8e:	685a      	ldr	r2, [r3, #4]
 8009e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e92:	1c59      	adds	r1, r3, #1
 8009e94:	6339      	str	r1, [r7, #48]	@ 0x30
 8009e96:	18d4      	adds	r4, r2, r3
 8009e98:	f7f7 fdf6 	bl	8001a88 <GetBatteryLevel>
 8009e9c:	4603      	mov	r3, r0
 8009e9e:	7023      	strb	r3, [r4, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 16) & 0xFF);
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ea2:	1418      	asrs	r0, r3, #16
 8009ea4:	4b3a      	ldr	r3, [pc, #232]	@ (8009f90 <SendTxData+0x28c>)
 8009ea6:	685a      	ldr	r2, [r3, #4]
 8009ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009eaa:	1c59      	adds	r1, r3, #1
 8009eac:	6339      	str	r1, [r7, #48]	@ 0x30
 8009eae:	4413      	add	r3, r2
 8009eb0:	b2c2      	uxtb	r2, r0
 8009eb2:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((latitude >> 8) & 0xFF);
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb6:	1218      	asrs	r0, r3, #8
 8009eb8:	4b35      	ldr	r3, [pc, #212]	@ (8009f90 <SendTxData+0x28c>)
 8009eba:	685a      	ldr	r2, [r3, #4]
 8009ebc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ebe:	1c59      	adds	r1, r3, #1
 8009ec0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ec2:	4413      	add	r3, r2
 8009ec4:	b2c2      	uxtb	r2, r0
 8009ec6:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(latitude & 0xFF);
 8009ec8:	4b31      	ldr	r3, [pc, #196]	@ (8009f90 <SendTxData+0x28c>)
 8009eca:	685a      	ldr	r2, [r3, #4]
 8009ecc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ece:	1c59      	adds	r1, r3, #1
 8009ed0:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ed2:	4413      	add	r3, r2
 8009ed4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009ed6:	b2d2      	uxtb	r2, r2
 8009ed8:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 16) & 0xFF);
 8009eda:	6a3b      	ldr	r3, [r7, #32]
 8009edc:	1418      	asrs	r0, r3, #16
 8009ede:	4b2c      	ldr	r3, [pc, #176]	@ (8009f90 <SendTxData+0x28c>)
 8009ee0:	685a      	ldr	r2, [r3, #4]
 8009ee2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee4:	1c59      	adds	r1, r3, #1
 8009ee6:	6339      	str	r1, [r7, #48]	@ 0x30
 8009ee8:	4413      	add	r3, r2
 8009eea:	b2c2      	uxtb	r2, r0
 8009eec:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((longitude >> 8) & 0xFF);
 8009eee:	6a3b      	ldr	r3, [r7, #32]
 8009ef0:	1218      	asrs	r0, r3, #8
 8009ef2:	4b27      	ldr	r3, [pc, #156]	@ (8009f90 <SendTxData+0x28c>)
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef8:	1c59      	adds	r1, r3, #1
 8009efa:	6339      	str	r1, [r7, #48]	@ 0x30
 8009efc:	4413      	add	r3, r2
 8009efe:	b2c2      	uxtb	r2, r0
 8009f00:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(longitude & 0xFF);
 8009f02:	4b23      	ldr	r3, [pc, #140]	@ (8009f90 <SendTxData+0x28c>)
 8009f04:	685a      	ldr	r2, [r3, #4]
 8009f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f08:	1c59      	adds	r1, r3, #1
 8009f0a:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f0c:	4413      	add	r3, r2
 8009f0e:	6a3a      	ldr	r2, [r7, #32]
 8009f10:	b2d2      	uxtb	r2, r2
 8009f12:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)((altitudeGps >> 8) & 0xFF);
 8009f14:	8bfb      	ldrh	r3, [r7, #30]
 8009f16:	0a1b      	lsrs	r3, r3, #8
 8009f18:	b298      	uxth	r0, r3
 8009f1a:	4b1d      	ldr	r3, [pc, #116]	@ (8009f90 <SendTxData+0x28c>)
 8009f1c:	685a      	ldr	r2, [r3, #4]
 8009f1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f20:	1c59      	adds	r1, r3, #1
 8009f22:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f24:	4413      	add	r3, r2
 8009f26:	b2c2      	uxtb	r2, r0
 8009f28:	701a      	strb	r2, [r3, #0]
    AppData.Buffer[i++] = (uint8_t)(altitudeGps & 0xFF);
 8009f2a:	4b19      	ldr	r3, [pc, #100]	@ (8009f90 <SendTxData+0x28c>)
 8009f2c:	685a      	ldr	r2, [r3, #4]
 8009f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f30:	1c59      	adds	r1, r3, #1
 8009f32:	6339      	str	r1, [r7, #48]	@ 0x30
 8009f34:	4413      	add	r3, r2
 8009f36:	8bfa      	ldrh	r2, [r7, #30]
 8009f38:	b2d2      	uxtb	r2, r2
 8009f3a:	701a      	strb	r2, [r3, #0]
  }

  AppData.BufferSize = i;
 8009f3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f3e:	b2da      	uxtb	r2, r3
 8009f40:	4b13      	ldr	r3, [pc, #76]	@ (8009f90 <SendTxData+0x28c>)
 8009f42:	705a      	strb	r2, [r3, #1]
#endif /* CAYENNE_LPP */

  if ((JoinLedTimer.IsRunning) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 8009f44:	4b17      	ldr	r3, [pc, #92]	@ (8009fa4 <SendTxData+0x2a0>)
 8009f46:	7a5b      	ldrb	r3, [r3, #9]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d007      	beq.n	8009f5c <SendTxData+0x258>
 8009f4c:	f002 fa0e 	bl	800c36c <LmHandlerJoinStatus>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b01      	cmp	r3, #1
 8009f54:	d102      	bne.n	8009f5c <SendTxData+0x258>
  {
    UTIL_TIMER_Stop(&JoinLedTimer);
 8009f56:	4813      	ldr	r0, [pc, #76]	@ (8009fa4 <SendTxData+0x2a0>)
 8009f58:	f010 fec6 	bl	801ace8 <UTIL_TIMER_Stop>
#if 0   // XXX:
    HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif
  }

  status = LmHandlerSend(&AppData, LmHandlerParams.IsTxConfirmed, false);
 8009f5c:	4b10      	ldr	r3, [pc, #64]	@ (8009fa0 <SendTxData+0x29c>)
 8009f5e:	78db      	ldrb	r3, [r3, #3]
 8009f60:	2200      	movs	r2, #0
 8009f62:	4619      	mov	r1, r3
 8009f64:	480a      	ldr	r0, [pc, #40]	@ (8009f90 <SendTxData+0x28c>)
 8009f66:	f002 fa1d 	bl	800c3a4 <LmHandlerSend>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (LORAMAC_HANDLER_SUCCESS == status)
 8009f70:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d119      	bne.n	8009fac <SendTxData+0x2a8>
  {
    APP_LOG(TS_ON, VLEVEL_L, "SEND REQUEST\r\n");
 8009f78:	4b0b      	ldr	r3, [pc, #44]	@ (8009fa8 <SendTxData+0x2a4>)
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	2100      	movs	r1, #0
 8009f7e:	2001      	movs	r0, #1
 8009f80:	f011 f8bc 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 8009f84:	e029      	b.n	8009fda <SendTxData+0x2d6>
 8009f86:	bf00      	nop
 8009f88:	0801b8bc 	.word	0x0801b8bc
 8009f8c:	0801b8c8 	.word	0x0801b8c8
 8009f90:	20000088 	.word	0x20000088
 8009f94:	41200000 	.word	0x41200000
 8009f98:	42c80000 	.word	0x42c80000
 8009f9c:	2000045e 	.word	0x2000045e
 8009fa0:	20000070 	.word	0x20000070
 8009fa4:	20000490 	.word	0x20000490
 8009fa8:	0801b8d4 	.word	0x0801b8d4
  }
  else if (LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED == status)
 8009fac:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8009fb0:	f113 0f06 	cmn.w	r3, #6
 8009fb4:	d111      	bne.n	8009fda <SendTxData+0x2d6>
  {
    nextTxIn = LmHandlerGetDutyCycleWaitTime();
 8009fb6:	f002 f94d 	bl	800c254 <LmHandlerGetDutyCycleWaitTime>
 8009fba:	6378      	str	r0, [r7, #52]	@ 0x34
    if (nextTxIn > 0)
 8009fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d00b      	beq.n	8009fda <SendTxData+0x2d6>
    {
      APP_LOG(TS_ON, VLEVEL_L, "Next Tx in  : ~%d second(s)\r\n", (nextTxIn / 1000));
 8009fc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fc4:	4a11      	ldr	r2, [pc, #68]	@ (800a00c <SendTxData+0x308>)
 8009fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8009fca:	099b      	lsrs	r3, r3, #6
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4b10      	ldr	r3, [pc, #64]	@ (800a010 <SendTxData+0x30c>)
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	2100      	movs	r1, #0
 8009fd4:	2001      	movs	r0, #1
 8009fd6:	f011 f891 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    }
  }

  if (EventType == TX_ON_TIMER)
 8009fda:	4b0e      	ldr	r3, [pc, #56]	@ (800a014 <SendTxData+0x310>)
 8009fdc:	781b      	ldrb	r3, [r3, #0]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d10f      	bne.n	800a002 <SendTxData+0x2fe>
  {
    UTIL_TIMER_Stop(&TxTimer);
 8009fe2:	480d      	ldr	r0, [pc, #52]	@ (800a018 <SendTxData+0x314>)
 8009fe4:	f010 fe80 	bl	801ace8 <UTIL_TIMER_Stop>
    UTIL_TIMER_SetPeriod(&TxTimer, MAX(nextTxIn, TxPeriodicity));
 8009fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800a01c <SendTxData+0x318>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	bf38      	it	cc
 8009ff2:	4613      	movcc	r3, r2
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	4808      	ldr	r0, [pc, #32]	@ (800a018 <SendTxData+0x314>)
 8009ff8:	f010 fee6 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    UTIL_TIMER_Start(&TxTimer);
 8009ffc:	4806      	ldr	r0, [pc, #24]	@ (800a018 <SendTxData+0x314>)
 8009ffe:	f010 fe05 	bl	801ac0c <UTIL_TIMER_Start>
  }

  /* USER CODE END SendTxData_1 */
}
 800a002:	bf00      	nop
 800a004:	373c      	adds	r7, #60	@ 0x3c
 800a006:	46bd      	mov	sp, r7
 800a008:	bd90      	pop	{r4, r7, pc}
 800a00a:	bf00      	nop
 800a00c:	10624dd3 	.word	0x10624dd3
 800a010:	0801b8e4 	.word	0x0801b8e4
 800a014:	20000338 	.word	0x20000338
 800a018:	2000033c 	.word	0x2000033c
 800a01c:	20000084 	.word	0x20000084

0800a020 <OnTxTimerEvent>:

static void OnTxTimerEvent(void *context)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b082      	sub	sp, #8
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxTimerEvent_1 */

  /* USER CODE END OnTxTimerEvent_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaSendOnTxTimerOrButtonEvent), CFG_SEQ_Prio_0);
 800a028:	2100      	movs	r1, #0
 800a02a:	2002      	movs	r0, #2
 800a02c:	f010 fd38 	bl	801aaa0 <UTIL_SEQ_SetTask>

  /*Wait for next tx slot*/
  UTIL_TIMER_Start(&TxTimer);
 800a030:	4803      	ldr	r0, [pc, #12]	@ (800a040 <OnTxTimerEvent+0x20>)
 800a032:	f010 fdeb 	bl	801ac0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxTimerEvent_2 */

  /* USER CODE END OnTxTimerEvent_2 */
}
 800a036:	bf00      	nop
 800a038:	3708      	adds	r7, #8
 800a03a:	46bd      	mov	sp, r7
 800a03c:	bd80      	pop	{r7, pc}
 800a03e:	bf00      	nop
 800a040:	2000033c 	.word	0x2000033c

0800a044 <OnTxTimerLedEvent>:

/* USER CODE BEGIN PrFD_LedEvents */
static void OnTxTimerLedEvent(void *context)
{
 800a044:	b480      	push	{r7}
 800a046:	b083      	sub	sp, #12
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
#if 0	// XXX: No LED available
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
}
 800a04c:	bf00      	nop
 800a04e:	370c      	adds	r7, #12
 800a050:	46bd      	mov	sp, r7
 800a052:	bc80      	pop	{r7}
 800a054:	4770      	bx	lr

0800a056 <OnRxTimerLedEvent>:

static void OnRxTimerLedEvent(void *context)
{
 800a056:	b480      	push	{r7}
 800a058:	b083      	sub	sp, #12
 800a05a:	af00      	add	r7, sp, #0
 800a05c:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
#endif
}
 800a05e:	bf00      	nop
 800a060:	370c      	adds	r7, #12
 800a062:	46bd      	mov	sp, r7
 800a064:	bc80      	pop	{r7}
 800a066:	4770      	bx	lr

0800a068 <OnJoinTimerLedEvent>:

static void OnJoinTimerLedEvent(void *context)
{
 800a068:	b480      	push	{r7}
 800a06a:	b083      	sub	sp, #12
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
#if 0   // XXX: No LED available
  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin); /* LED_RED */
#endif
}
 800a070:	bf00      	nop
 800a072:	370c      	adds	r7, #12
 800a074:	46bd      	mov	sp, r7
 800a076:	bc80      	pop	{r7}
 800a078:	4770      	bx	lr
	...

0800a07c <OnTxData>:

/* USER CODE END PrFD_LedEvents */

static void OnTxData(LmHandlerTxParams_t *params)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af04      	add	r7, sp, #16
 800a082:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxData_1 */
  if ((params != NULL))
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d041      	beq.n	800a10e <OnTxData+0x92>
  {
    /* Process Tx event only if its a mcps response to prevent some internal events (mlme) */
    if (params->IsMcpsConfirm != 0)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	781b      	ldrb	r3, [r3, #0]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d03d      	beq.n	800a10e <OnTxData+0x92>
    {
#if 0	// XXX: No LED available
      HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif
      UTIL_TIMER_Start(&TxLedTimer);
 800a092:	4821      	ldr	r0, [pc, #132]	@ (800a118 <OnTxData+0x9c>)
 800a094:	f010 fdba 	bl	801ac0c <UTIL_TIMER_Start>

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### ========== MCPS-Confirm =============\r\n");
 800a098:	4b20      	ldr	r3, [pc, #128]	@ (800a11c <OnTxData+0xa0>)
 800a09a:	2200      	movs	r2, #0
 800a09c:	2100      	movs	r1, #0
 800a09e:	2002      	movs	r0, #2
 800a0a0:	f011 f82c 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      APP_LOG(TS_OFF, VLEVEL_H, "###### U/L FRAME:%04d | PORT:%d | DR:%d | PWR:%d", params->UplinkCounter,
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	68db      	ldr	r3, [r3, #12]
 800a0a8:	687a      	ldr	r2, [r7, #4]
 800a0aa:	7c12      	ldrb	r2, [r2, #16]
 800a0ac:	4611      	mov	r1, r2
 800a0ae:	687a      	ldr	r2, [r7, #4]
 800a0b0:	f992 200a 	ldrsb.w	r2, [r2, #10]
 800a0b4:	4610      	mov	r0, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	f992 2018 	ldrsb.w	r2, [r2, #24]
 800a0bc:	9203      	str	r2, [sp, #12]
 800a0be:	9002      	str	r0, [sp, #8]
 800a0c0:	9101      	str	r1, [sp, #4]
 800a0c2:	9300      	str	r3, [sp, #0]
 800a0c4:	4b16      	ldr	r3, [pc, #88]	@ (800a120 <OnTxData+0xa4>)
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	2100      	movs	r1, #0
 800a0ca:	2003      	movs	r0, #3
 800a0cc:	f011 f816 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
              params->AppData.Port, params->Datarate, params->TxPower);

      APP_LOG(TS_OFF, VLEVEL_H, " | MSG TYPE:");
 800a0d0:	4b14      	ldr	r3, [pc, #80]	@ (800a124 <OnTxData+0xa8>)
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	2100      	movs	r1, #0
 800a0d6:	2003      	movs	r0, #3
 800a0d8:	f011 f810 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      if (params->MsgType == LORAMAC_HANDLER_CONFIRMED_MSG)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	7a1b      	ldrb	r3, [r3, #8]
 800a0e0:	2b01      	cmp	r3, #1
 800a0e2:	d10e      	bne.n	800a102 <OnTxData+0x86>
      {
        APP_LOG(TS_OFF, VLEVEL_H, "CONFIRMED [%s]\r\n", (params->AckReceived != 0) ? "ACK" : "NACK");
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	7a5b      	ldrb	r3, [r3, #9]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <OnTxData+0x74>
 800a0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800a128 <OnTxData+0xac>)
 800a0ee:	e000      	b.n	800a0f2 <OnTxData+0x76>
 800a0f0:	4b0e      	ldr	r3, [pc, #56]	@ (800a12c <OnTxData+0xb0>)
 800a0f2:	9300      	str	r3, [sp, #0]
 800a0f4:	4b0e      	ldr	r3, [pc, #56]	@ (800a130 <OnTxData+0xb4>)
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	2003      	movs	r0, #3
 800a0fc:	f010 fffe 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
      }
    }
  }
  /* USER CODE END OnTxData_1 */
}
 800a100:	e005      	b.n	800a10e <OnTxData+0x92>
        APP_LOG(TS_OFF, VLEVEL_H, "UNCONFIRMED\r\n");
 800a102:	4b0c      	ldr	r3, [pc, #48]	@ (800a134 <OnTxData+0xb8>)
 800a104:	2200      	movs	r2, #0
 800a106:	2100      	movs	r1, #0
 800a108:	2003      	movs	r0, #3
 800a10a:	f010 fff7 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a10e:	bf00      	nop
 800a110:	3708      	adds	r7, #8
 800a112:	46bd      	mov	sp, r7
 800a114:	bd80      	pop	{r7, pc}
 800a116:	bf00      	nop
 800a118:	20000460 	.word	0x20000460
 800a11c:	0801b904 	.word	0x0801b904
 800a120:	0801b938 	.word	0x0801b938
 800a124:	0801b96c 	.word	0x0801b96c
 800a128:	0801b97c 	.word	0x0801b97c
 800a12c:	0801b980 	.word	0x0801b980
 800a130:	0801b988 	.word	0x0801b988
 800a134:	0801b99c 	.word	0x0801b99c

0800a138 <OnJoinRequest>:

static void OnJoinRequest(LmHandlerJoinParams_t *joinParams)
{
 800a138:	b580      	push	{r7, lr}
 800a13a:	b082      	sub	sp, #8
 800a13c:	af00      	add	r7, sp, #0
 800a13e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnJoinRequest_1 */
  if (joinParams != NULL)
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d039      	beq.n	800a1ba <OnJoinRequest+0x82>
  {
    if (joinParams->Status == LORAMAC_HANDLER_SUCCESS)
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	f993 3005 	ldrsb.w	r3, [r3, #5]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d11e      	bne.n	800a18e <OnJoinRequest+0x56>
    {
      UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStoreContextEvent), CFG_SEQ_Prio_0);
 800a150:	2100      	movs	r1, #0
 800a152:	2004      	movs	r0, #4
 800a154:	f010 fca4 	bl	801aaa0 <UTIL_SEQ_SetTask>

      UTIL_TIMER_Stop(&JoinLedTimer);
 800a158:	481a      	ldr	r0, [pc, #104]	@ (800a1c4 <OnJoinRequest+0x8c>)
 800a15a:	f010 fdc5 	bl	801ace8 <UTIL_TIMER_Stop>
#if 0   // XXX:
      HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
#endif

      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOINED = ");
 800a15e:	4b1a      	ldr	r3, [pc, #104]	@ (800a1c8 <OnJoinRequest+0x90>)
 800a160:	2200      	movs	r2, #0
 800a162:	2100      	movs	r1, #0
 800a164:	2002      	movs	r0, #2
 800a166:	f010 ffc9 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_ABP)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	799b      	ldrb	r3, [r3, #6]
 800a16e:	2b01      	cmp	r3, #1
 800a170:	d106      	bne.n	800a180 <OnJoinRequest+0x48>
      {
        APP_LOG(TS_OFF, VLEVEL_M, "ABP ======================\r\n");
 800a172:	4b16      	ldr	r3, [pc, #88]	@ (800a1cc <OnJoinRequest+0x94>)
 800a174:	2200      	movs	r2, #0
 800a176:	2100      	movs	r1, #0
 800a178:	2002      	movs	r0, #2
 800a17a:	f010 ffbf 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
      }
    }
  }
  /* USER CODE END OnJoinRequest_1 */
}
 800a17e:	e01c      	b.n	800a1ba <OnJoinRequest+0x82>
        APP_LOG(TS_OFF, VLEVEL_M, "OTAA =====================\r\n");
 800a180:	4b13      	ldr	r3, [pc, #76]	@ (800a1d0 <OnJoinRequest+0x98>)
 800a182:	2200      	movs	r2, #0
 800a184:	2100      	movs	r1, #0
 800a186:	2002      	movs	r0, #2
 800a188:	f010 ffb8 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a18c:	e015      	b.n	800a1ba <OnJoinRequest+0x82>
      APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = JOIN FAILED\r\n");
 800a18e:	4b11      	ldr	r3, [pc, #68]	@ (800a1d4 <OnJoinRequest+0x9c>)
 800a190:	2200      	movs	r2, #0
 800a192:	2100      	movs	r1, #0
 800a194:	2002      	movs	r0, #2
 800a196:	f010 ffb1 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      if (joinParams->Mode == ACTIVATION_TYPE_OTAA) {
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	799b      	ldrb	r3, [r3, #6]
 800a19e:	2b02      	cmp	r3, #2
 800a1a0:	d10b      	bne.n	800a1ba <OnJoinRequest+0x82>
          APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### = RE-TRYING OTAA JOIN\r\n");
 800a1a2:	4b0d      	ldr	r3, [pc, #52]	@ (800a1d8 <OnJoinRequest+0xa0>)
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	2002      	movs	r0, #2
 800a1aa:	f010 ffa7 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    	LmHandlerJoin(ActivationType, LORAWAN_FORCE_REJOIN_AT_BOOT);
 800a1ae:	4b0b      	ldr	r3, [pc, #44]	@ (800a1dc <OnJoinRequest+0xa4>)
 800a1b0:	781b      	ldrb	r3, [r3, #0]
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	f002 f857 	bl	800c268 <LmHandlerJoin>
}
 800a1ba:	bf00      	nop
 800a1bc:	3708      	adds	r7, #8
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	bd80      	pop	{r7, pc}
 800a1c2:	bf00      	nop
 800a1c4:	20000490 	.word	0x20000490
 800a1c8:	0801b9ac 	.word	0x0801b9ac
 800a1cc:	0801b9c4 	.word	0x0801b9c4
 800a1d0:	0801b9e4 	.word	0x0801b9e4
 800a1d4:	0801ba04 	.word	0x0801ba04
 800a1d8:	0801ba20 	.word	0x0801ba20
 800a1dc:	20000020 	.word	0x20000020

0800a1e0 <OnBeaconStatusChange>:

static void OnBeaconStatusChange(LmHandlerBeaconParams_t *params)
{
 800a1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a1e2:	b093      	sub	sp, #76	@ 0x4c
 800a1e4:	af0c      	add	r7, sp, #48	@ 0x30
 800a1e6:	6178      	str	r0, [r7, #20]
  /* USER CODE BEGIN OnBeaconStatusChange_1 */
  if (params != NULL)
 800a1e8:	697b      	ldr	r3, [r7, #20]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d056      	beq.n	800a29c <OnBeaconStatusChange+0xbc>
  {
    switch (params->State)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	785b      	ldrb	r3, [r3, #1]
 800a1f2:	2b02      	cmp	r3, #2
 800a1f4:	d008      	beq.n	800a208 <OnBeaconStatusChange+0x28>
 800a1f6:	2b03      	cmp	r3, #3
 800a1f8:	d049      	beq.n	800a28e <OnBeaconStatusChange+0xae>
    {
      default:
      case LORAMAC_HANDLER_BEACON_LOST:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON LOST\r\n");
 800a1fa:	4b2a      	ldr	r3, [pc, #168]	@ (800a2a4 <OnBeaconStatusChange+0xc4>)
 800a1fc:	2200      	movs	r2, #0
 800a1fe:	2100      	movs	r1, #0
 800a200:	2002      	movs	r0, #2
 800a202:	f010 ff7b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a206:	e049      	b.n	800a29c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_RX:
      {
        APP_LOG(TS_OFF, VLEVEL_M,
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	7c1b      	ldrb	r3, [r3, #16]
 800a20c:	4618      	mov	r0, r3
 800a20e:	697b      	ldr	r3, [r7, #20]
 800a210:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800a214:	461c      	mov	r4, r3
 800a216:	697b      	ldr	r3, [r7, #20]
 800a218:	f993 3014 	ldrsb.w	r3, [r3, #20]
 800a21c:	461d      	mov	r5, r3
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	68db      	ldr	r3, [r3, #12]
 800a222:	697a      	ldr	r2, [r7, #20]
 800a224:	6852      	ldr	r2, [r2, #4]
 800a226:	6979      	ldr	r1, [r7, #20]
 800a228:	7d89      	ldrb	r1, [r1, #22]
 800a22a:	460e      	mov	r6, r1
 800a22c:	6979      	ldr	r1, [r7, #20]
 800a22e:	7dc9      	ldrb	r1, [r1, #23]
 800a230:	6139      	str	r1, [r7, #16]
 800a232:	6979      	ldr	r1, [r7, #20]
 800a234:	7e09      	ldrb	r1, [r1, #24]
 800a236:	60f9      	str	r1, [r7, #12]
 800a238:	6979      	ldr	r1, [r7, #20]
 800a23a:	7e49      	ldrb	r1, [r1, #25]
 800a23c:	60b9      	str	r1, [r7, #8]
 800a23e:	6979      	ldr	r1, [r7, #20]
 800a240:	7e89      	ldrb	r1, [r1, #26]
 800a242:	6079      	str	r1, [r7, #4]
 800a244:	6979      	ldr	r1, [r7, #20]
 800a246:	7ec9      	ldrb	r1, [r1, #27]
 800a248:	6039      	str	r1, [r7, #0]
 800a24a:	6979      	ldr	r1, [r7, #20]
 800a24c:	7f09      	ldrb	r1, [r1, #28]
 800a24e:	910b      	str	r1, [sp, #44]	@ 0x2c
 800a250:	f8d7 c000 	ldr.w	ip, [r7]
 800a254:	f8cd c028 	str.w	ip, [sp, #40]	@ 0x28
 800a258:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800a25c:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 800a260:	f8d7 c008 	ldr.w	ip, [r7, #8]
 800a264:	f8cd c020 	str.w	ip, [sp, #32]
 800a268:	f8d7 c00c 	ldr.w	ip, [r7, #12]
 800a26c:	f8cd c01c 	str.w	ip, [sp, #28]
 800a270:	6939      	ldr	r1, [r7, #16]
 800a272:	9106      	str	r1, [sp, #24]
 800a274:	9605      	str	r6, [sp, #20]
 800a276:	9204      	str	r2, [sp, #16]
 800a278:	9303      	str	r3, [sp, #12]
 800a27a:	9502      	str	r5, [sp, #8]
 800a27c:	9401      	str	r4, [sp, #4]
 800a27e:	9000      	str	r0, [sp, #0]
 800a280:	4b09      	ldr	r3, [pc, #36]	@ (800a2a8 <OnBeaconStatusChange+0xc8>)
 800a282:	2200      	movs	r2, #0
 800a284:	2100      	movs	r1, #0
 800a286:	2002      	movs	r0, #2
 800a288:	f010 ff38 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
                params->Info.Datarate, params->Info.Rssi, params->Info.Snr, params->Info.Frequency,
                params->Info.Time.Seconds, params->Info.GwSpecific.InfoDesc,
                params->Info.GwSpecific.Info[0], params->Info.GwSpecific.Info[1],
                params->Info.GwSpecific.Info[2], params->Info.GwSpecific.Info[3],
                params->Info.GwSpecific.Info[4], params->Info.GwSpecific.Info[5]);
        break;
 800a28c:	e006      	b.n	800a29c <OnBeaconStatusChange+0xbc>
      }
      case LORAMAC_HANDLER_BEACON_NRX:
      {
        APP_LOG(TS_OFF, VLEVEL_M, "\r\n###### BEACON NOT RECEIVED\r\n");
 800a28e:	4b07      	ldr	r3, [pc, #28]	@ (800a2ac <OnBeaconStatusChange+0xcc>)
 800a290:	2200      	movs	r2, #0
 800a292:	2100      	movs	r1, #0
 800a294:	2002      	movs	r0, #2
 800a296:	f010 ff31 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 800a29a:	bf00      	nop
      }
    }
  }
  /* USER CODE END OnBeaconStatusChange_1 */
}
 800a29c:	bf00      	nop
 800a29e:	371c      	adds	r7, #28
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2a4:	0801ba44 	.word	0x0801ba44
 800a2a8:	0801ba5c 	.word	0x0801ba5c
 800a2ac:	0801bad0 	.word	0x0801bad0

0800a2b0 <OnClassChange>:

static void OnClassChange(DeviceClass_t deviceClass)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b084      	sub	sp, #16
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnClassChange_1 */
  APP_LOG(TS_OFF, VLEVEL_M, "Switch to Class %c done\r\n", "ABC"[deviceClass]);
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	4a06      	ldr	r2, [pc, #24]	@ (800a2d8 <OnClassChange+0x28>)
 800a2be:	5cd3      	ldrb	r3, [r2, r3]
 800a2c0:	9300      	str	r3, [sp, #0]
 800a2c2:	4b06      	ldr	r3, [pc, #24]	@ (800a2dc <OnClassChange+0x2c>)
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	2100      	movs	r1, #0
 800a2c8:	2002      	movs	r0, #2
 800a2ca:	f010 ff17 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
  /* USER CODE END OnClassChange_1 */
}
 800a2ce:	bf00      	nop
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	0801bb0c 	.word	0x0801bb0c
 800a2dc:	0801baf0 	.word	0x0801baf0

0800a2e0 <OnMacProcessNotify>:

static void OnMacProcessNotify(void)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnMacProcessNotify_1 */

  /* USER CODE END OnMacProcessNotify_1 */
  UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LmHandlerProcess), CFG_SEQ_Prio_0);
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	f010 fbda 	bl	801aaa0 <UTIL_SEQ_SetTask>

  /* USER CODE BEGIN OnMacProcessNotify_2 */

  /* USER CODE END OnMacProcessNotify_2 */
}
 800a2ec:	bf00      	nop
 800a2ee:	bd80      	pop	{r7, pc}

0800a2f0 <OnTxPeriodicityChanged>:

static void OnTxPeriodicityChanged(uint32_t periodicity)
{
 800a2f0:	b580      	push	{r7, lr}
 800a2f2:	b082      	sub	sp, #8
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnTxPeriodicityChanged_1 */

  /* USER CODE END OnTxPeriodicityChanged_1 */
  TxPeriodicity = periodicity;
 800a2f8:	4a0d      	ldr	r2, [pc, #52]	@ (800a330 <OnTxPeriodicityChanged+0x40>)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6013      	str	r3, [r2, #0]

  if (TxPeriodicity == 0)
 800a2fe:	4b0c      	ldr	r3, [pc, #48]	@ (800a330 <OnTxPeriodicityChanged+0x40>)
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d103      	bne.n	800a30e <OnTxPeriodicityChanged+0x1e>
  {
    /* Revert to application default periodicity */
    TxPeriodicity = APP_TX_DUTYCYCLE;
 800a306:	4b0a      	ldr	r3, [pc, #40]	@ (800a330 <OnTxPeriodicityChanged+0x40>)
 800a308:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a30c:	601a      	str	r2, [r3, #0]
  }

  /* Update timer periodicity */
  UTIL_TIMER_Stop(&TxTimer);
 800a30e:	4809      	ldr	r0, [pc, #36]	@ (800a334 <OnTxPeriodicityChanged+0x44>)
 800a310:	f010 fcea 	bl	801ace8 <UTIL_TIMER_Stop>
  UTIL_TIMER_SetPeriod(&TxTimer, TxPeriodicity);
 800a314:	4b06      	ldr	r3, [pc, #24]	@ (800a330 <OnTxPeriodicityChanged+0x40>)
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4619      	mov	r1, r3
 800a31a:	4806      	ldr	r0, [pc, #24]	@ (800a334 <OnTxPeriodicityChanged+0x44>)
 800a31c:	f010 fd54 	bl	801adc8 <UTIL_TIMER_SetPeriod>
  UTIL_TIMER_Start(&TxTimer);
 800a320:	4804      	ldr	r0, [pc, #16]	@ (800a334 <OnTxPeriodicityChanged+0x44>)
 800a322:	f010 fc73 	bl	801ac0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN OnTxPeriodicityChanged_2 */

  /* USER CODE END OnTxPeriodicityChanged_2 */
}
 800a326:	bf00      	nop
 800a328:	3708      	adds	r7, #8
 800a32a:	46bd      	mov	sp, r7
 800a32c:	bd80      	pop	{r7, pc}
 800a32e:	bf00      	nop
 800a330:	20000084 	.word	0x20000084
 800a334:	2000033c 	.word	0x2000033c

0800a338 <OnTxFrameCtrlChanged>:

static void OnTxFrameCtrlChanged(LmHandlerMsgTypes_t isTxConfirmed)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	4603      	mov	r3, r0
 800a340:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_1 */

  /* USER CODE END OnTxFrameCtrlChanged_1 */
  LmHandlerParams.IsTxConfirmed = isTxConfirmed;
 800a342:	4a04      	ldr	r2, [pc, #16]	@ (800a354 <OnTxFrameCtrlChanged+0x1c>)
 800a344:	79fb      	ldrb	r3, [r7, #7]
 800a346:	70d3      	strb	r3, [r2, #3]
  /* USER CODE BEGIN OnTxFrameCtrlChanged_2 */

  /* USER CODE END OnTxFrameCtrlChanged_2 */
}
 800a348:	bf00      	nop
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	bc80      	pop	{r7}
 800a350:	4770      	bx	lr
 800a352:	bf00      	nop
 800a354:	20000070 	.word	0x20000070

0800a358 <OnPingSlotPeriodicityChanged>:

static void OnPingSlotPeriodicityChanged(uint8_t pingSlotPeriodicity)
{
 800a358:	b480      	push	{r7}
 800a35a:	b083      	sub	sp, #12
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	4603      	mov	r3, r0
 800a360:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_1 */

  /* USER CODE END OnPingSlotPeriodicityChanged_1 */
  LmHandlerParams.PingSlotPeriodicity = pingSlotPeriodicity;
 800a362:	4a04      	ldr	r2, [pc, #16]	@ (800a374 <OnPingSlotPeriodicityChanged+0x1c>)
 800a364:	79fb      	ldrb	r3, [r7, #7]
 800a366:	7313      	strb	r3, [r2, #12]
  /* USER CODE BEGIN OnPingSlotPeriodicityChanged_2 */

  /* USER CODE END OnPingSlotPeriodicityChanged_2 */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	bc80      	pop	{r7}
 800a370:	4770      	bx	lr
 800a372:	bf00      	nop
 800a374:	20000070 	.word	0x20000070

0800a378 <OnSystemReset>:

static void OnSystemReset(void)
{
 800a378:	b580      	push	{r7, lr}
 800a37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OnSystemReset_1 */

  /* USER CODE END OnSystemReset_1 */
  if ((LORAMAC_HANDLER_SUCCESS == LmHandlerHalt()) && (LmHandlerJoinStatus() == LORAMAC_HANDLER_SET))
 800a37c:	f002 fce5 	bl	800cd4a <LmHandlerHalt>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <OnSystemReset+0x1c>
 800a386:	f001 fff1 	bl	800c36c <LmHandlerJoinStatus>
 800a38a:	4603      	mov	r3, r0
 800a38c:	2b01      	cmp	r3, #1
 800a38e:	d101      	bne.n	800a394 <OnSystemReset+0x1c>
  {
    NVIC_SystemReset();
 800a390:	f7ff faf8 	bl	8009984 <__NVIC_SystemReset>
  }
  /* USER CODE BEGIN OnSystemReset_Last */

  /* USER CODE END OnSystemReset_Last */
}
 800a394:	bf00      	nop
 800a396:	bd80      	pop	{r7, pc}

0800a398 <StopJoin>:

static void StopJoin(void)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_SET); /* LED_GREEN */
#endif

  /* USER CODE END StopJoin_1 */

  UTIL_TIMER_Stop(&TxTimer);
 800a39c:	4817      	ldr	r0, [pc, #92]	@ (800a3fc <StopJoin+0x64>)
 800a39e:	f010 fca3 	bl	801ace8 <UTIL_TIMER_Stop>

  if (LORAMAC_HANDLER_SUCCESS != LmHandlerStop())
 800a3a2:	f002 fcc5 	bl	800cd30 <LmHandlerStop>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d006      	beq.n	800a3ba <StopJoin+0x22>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stop on going ...\r\n");
 800a3ac:	4b14      	ldr	r3, [pc, #80]	@ (800a400 <StopJoin+0x68>)
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2100      	movs	r1, #0
 800a3b2:	2002      	movs	r0, #2
 800a3b4:	f010 fea2 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800a3b8:	e01a      	b.n	800a3f0 <StopJoin+0x58>
  }
  else
  {
    APP_LOG(TS_OFF, VLEVEL_M, "LmHandler Stopped\r\n");
 800a3ba:	4b12      	ldr	r3, [pc, #72]	@ (800a404 <StopJoin+0x6c>)
 800a3bc:	2200      	movs	r2, #0
 800a3be:	2100      	movs	r1, #0
 800a3c0:	2002      	movs	r0, #2
 800a3c2:	f010 fe9b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
      ActivationType = ACTIVATION_TYPE_OTAA;
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to OTAA mode\r\n");
    }
    else
    {
      ActivationType = ACTIVATION_TYPE_ABP;
 800a3c6:	4b10      	ldr	r3, [pc, #64]	@ (800a408 <StopJoin+0x70>)
 800a3c8:	2201      	movs	r2, #1
 800a3ca:	701a      	strb	r2, [r3, #0]
      APP_LOG(TS_OFF, VLEVEL_M, "LmHandler switch to ABP mode\r\n");
 800a3cc:	4b0f      	ldr	r3, [pc, #60]	@ (800a40c <StopJoin+0x74>)
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	2100      	movs	r1, #0
 800a3d2:	2002      	movs	r0, #2
 800a3d4:	f010 fe92 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    }
    LmHandlerConfigure(&LmHandlerParams);
 800a3d8:	480d      	ldr	r0, [pc, #52]	@ (800a410 <StopJoin+0x78>)
 800a3da:	f001 fdd1 	bl	800bf80 <LmHandlerConfigure>
    LmHandlerJoin(ActivationType, true);
 800a3de:	4b0a      	ldr	r3, [pc, #40]	@ (800a408 <StopJoin+0x70>)
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2101      	movs	r1, #1
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	f001 ff3f 	bl	800c268 <LmHandlerJoin>
    UTIL_TIMER_Start(&TxTimer);
 800a3ea:	4804      	ldr	r0, [pc, #16]	@ (800a3fc <StopJoin+0x64>)
 800a3ec:	f010 fc0e 	bl	801ac0c <UTIL_TIMER_Start>
  }
  UTIL_TIMER_Start(&StopJoinTimer);
 800a3f0:	4808      	ldr	r0, [pc, #32]	@ (800a414 <StopJoin+0x7c>)
 800a3f2:	f010 fc0b 	bl	801ac0c <UTIL_TIMER_Start>
  /* USER CODE BEGIN StopJoin_Last */

  /* USER CODE END StopJoin_Last */
}
 800a3f6:	bf00      	nop
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	2000033c 	.word	0x2000033c
 800a400:	0801bb10 	.word	0x0801bb10
 800a404:	0801bb30 	.word	0x0801bb30
 800a408:	20000020 	.word	0x20000020
 800a40c:	0801bb44 	.word	0x0801bb44
 800a410:	20000070 	.word	0x20000070
 800a414:	20000354 	.word	0x20000354

0800a418 <OnStopJoinTimerEvent>:

static void OnStopJoinTimerEvent(void *context)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b082      	sub	sp, #8
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OnStopJoinTimerEvent_1 */

  /* USER CODE END OnStopJoinTimerEvent_1 */
  if (ActivationType == LORAWAN_DEFAULT_ACTIVATION_TYPE)
 800a420:	4b05      	ldr	r3, [pc, #20]	@ (800a438 <OnStopJoinTimerEvent+0x20>)
 800a422:	781b      	ldrb	r3, [r3, #0]
 800a424:	2b02      	cmp	r3, #2
 800a426:	d103      	bne.n	800a430 <OnStopJoinTimerEvent+0x18>
  {
    UTIL_SEQ_SetTask((1 << CFG_SEQ_Task_LoRaStopJoinEvent), CFG_SEQ_Prio_0);
 800a428:	2100      	movs	r1, #0
 800a42a:	2008      	movs	r0, #8
 800a42c:	f010 fb38 	bl	801aaa0 <UTIL_SEQ_SetTask>
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET); /* LED_BLUE */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET); /* LED_RED */
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET); /* LED_GREEN */
#endif
  /* USER CODE END OnStopJoinTimerEvent_Last */
}
 800a430:	bf00      	nop
 800a432:	3708      	adds	r7, #8
 800a434:	46bd      	mov	sp, r7
 800a436:	bd80      	pop	{r7, pc}
 800a438:	20000020 	.word	0x20000020

0800a43c <StoreContext>:

static void StoreContext(void)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b082      	sub	sp, #8
 800a440:	af00      	add	r7, sp, #0
  LmHandlerErrorStatus_t status = LORAMAC_HANDLER_ERROR;
 800a442:	23ff      	movs	r3, #255	@ 0xff
 800a444:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN StoreContext_1 */

  /* USER CODE END StoreContext_1 */
  status = LmHandlerNvmDataStore();
 800a446:	f002 fc8d 	bl	800cd64 <LmHandlerNvmDataStore>
 800a44a:	4603      	mov	r3, r0
 800a44c:	71fb      	strb	r3, [r7, #7]

  if (status == LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE)
 800a44e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a452:	f113 0f08 	cmn.w	r3, #8
 800a456:	d106      	bne.n	800a466 <StoreContext+0x2a>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA UP TO DATE\r\n");
 800a458:	4b0a      	ldr	r3, [pc, #40]	@ (800a484 <StoreContext+0x48>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	2100      	movs	r1, #0
 800a45e:	2002      	movs	r0, #2
 800a460:	f010 fe4c 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
  }
  /* USER CODE BEGIN StoreContext_Last */

  /* USER CODE END StoreContext_Last */
}
 800a464:	e00a      	b.n	800a47c <StoreContext+0x40>
  else if (status == LORAMAC_HANDLER_ERROR)
 800a466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a46a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46e:	d105      	bne.n	800a47c <StoreContext+0x40>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORE FAILED\r\n");
 800a470:	4b05      	ldr	r3, [pc, #20]	@ (800a488 <StoreContext+0x4c>)
 800a472:	2200      	movs	r2, #0
 800a474:	2100      	movs	r1, #0
 800a476:	2002      	movs	r0, #2
 800a478:	f010 fe40 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a47c:	bf00      	nop
 800a47e:	3708      	adds	r7, #8
 800a480:	46bd      	mov	sp, r7
 800a482:	bd80      	pop	{r7, pc}
 800a484:	0801bb64 	.word	0x0801bb64
 800a488:	0801bb7c 	.word	0x0801bb7c

0800a48c <OnNvmDataChange>:

static void OnNvmDataChange(LmHandlerNvmContextStates_t state)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN OnNvmDataChange_1 */

  /* USER CODE END OnNvmDataChange_1 */
  if (state == LORAMAC_HANDLER_NVM_STORE)
 800a496:	79fb      	ldrb	r3, [r7, #7]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d106      	bne.n	800a4aa <OnNvmDataChange+0x1e>
  {
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA STORED\r\n");
 800a49c:	4b08      	ldr	r3, [pc, #32]	@ (800a4c0 <OnNvmDataChange+0x34>)
 800a49e:	2200      	movs	r2, #0
 800a4a0:	2100      	movs	r1, #0
 800a4a2:	2002      	movs	r0, #2
 800a4a4:	f010 fe2a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
  }
  /* USER CODE BEGIN OnNvmDataChange_Last */

  /* USER CODE END OnNvmDataChange_Last */
}
 800a4a8:	e005      	b.n	800a4b6 <OnNvmDataChange+0x2a>
    APP_LOG(TS_OFF, VLEVEL_M, "NVM DATA RESTORED\r\n");
 800a4aa:	4b06      	ldr	r3, [pc, #24]	@ (800a4c4 <OnNvmDataChange+0x38>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	2100      	movs	r1, #0
 800a4b0:	2002      	movs	r0, #2
 800a4b2:	f010 fe23 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800a4b6:	bf00      	nop
 800a4b8:	3708      	adds	r7, #8
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	bd80      	pop	{r7, pc}
 800a4be:	bf00      	nop
 800a4c0:	0801bb94 	.word	0x0801bb94
 800a4c4:	0801bba8 	.word	0x0801bba8

0800a4c8 <OnStoreContextRequest>:

static void OnStoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnStoreContextRequest_1 */

  /* USER CODE END OnStoreContextRequest_1 */
  /* store nvm in flash */
  if (HAL_FLASH_Unlock() == HAL_OK)
 800a4d2:	f7fa f86b 	bl	80045ac <HAL_FLASH_Unlock>
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d11c      	bne.n	800a516 <OnStoreContextRequest+0x4e>
  {
    if (FLASH_IF_EraseByPages(PAGE(LORAWAN_NVM_BASE_ADDRESS), 1, 0U) == FLASH_OK)
 800a4dc:	4b10      	ldr	r3, [pc, #64]	@ (800a520 <OnStoreContextRequest+0x58>)
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	029a      	lsls	r2, r3, #10
 800a4e2:	4b10      	ldr	r3, [pc, #64]	@ (800a524 <OnStoreContextRequest+0x5c>)
 800a4e4:	4013      	ands	r3, r2
 800a4e6:	f44f 327c 	mov.w	r2, #258048	@ 0x3f000
 800a4ea:	fbb2 f1f3 	udiv	r1, r2, r3
 800a4ee:	fb01 f303 	mul.w	r3, r1, r3
 800a4f2:	1ad3      	subs	r3, r2, r3
 800a4f4:	0adb      	lsrs	r3, r3, #11
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	2101      	movs	r1, #1
 800a4fa:	4618      	mov	r0, r3
 800a4fc:	f7f6 ff11 	bl	8001322 <FLASH_IF_EraseByPages>
 800a500:	4603      	mov	r3, r0
 800a502:	2b00      	cmp	r3, #0
 800a504:	d105      	bne.n	800a512 <OnStoreContextRequest+0x4a>
    {
      FLASH_IF_Write(LORAWAN_NVM_BASE_ADDRESS, (uint8_t *)nvm, nvm_size, NULL);
 800a506:	2300      	movs	r3, #0
 800a508:	683a      	ldr	r2, [r7, #0]
 800a50a:	6879      	ldr	r1, [r7, #4]
 800a50c:	4806      	ldr	r0, [pc, #24]	@ (800a528 <OnStoreContextRequest+0x60>)
 800a50e:	f7f6 fe27 	bl	8001160 <FLASH_IF_Write>
    }
    HAL_FLASH_Lock();
 800a512:	f7fa f86d 	bl	80045f0 <HAL_FLASH_Lock>
  }
  /* USER CODE BEGIN OnStoreContextRequest_Last */

  /* USER CODE END OnStoreContextRequest_Last */
}
 800a516:	bf00      	nop
 800a518:	3708      	adds	r7, #8
 800a51a:	46bd      	mov	sp, r7
 800a51c:	bd80      	pop	{r7, pc}
 800a51e:	bf00      	nop
 800a520:	1fff75e0 	.word	0x1fff75e0
 800a524:	03fffc00 	.word	0x03fffc00
 800a528:	0803f000 	.word	0x0803f000

0800a52c <OnRestoreContextRequest>:

static void OnRestoreContextRequest(void *nvm, uint32_t nvm_size)
{
 800a52c:	b580      	push	{r7, lr}
 800a52e:	b082      	sub	sp, #8
 800a530:	af00      	add	r7, sp, #0
 800a532:	6078      	str	r0, [r7, #4]
 800a534:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN OnRestoreContextRequest_1 */

  /* USER CODE END OnRestoreContextRequest_1 */
  UTIL_MEM_cpy_8(nvm, (void *)LORAWAN_NVM_BASE_ADDRESS, nvm_size);
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	461a      	mov	r2, r3
 800a53c:	4903      	ldr	r1, [pc, #12]	@ (800a54c <OnRestoreContextRequest+0x20>)
 800a53e:	6878      	ldr	r0, [r7, #4]
 800a540:	f00f fd92 	bl	801a068 <UTIL_MEM_cpy_8>
  /* USER CODE BEGIN OnRestoreContextRequest_Last */

  /* USER CODE END OnRestoreContextRequest_Last */
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	0803f000 	.word	0x0803f000

0800a550 <LoraInfo_Init>:

/* USER CODE END EV */

/* Exported functions --------------------------------------------------------*/
void LoraInfo_Init(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  loraInfo.ActivationMode = 0;
 800a554:	4b15      	ldr	r3, [pc, #84]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a556:	2200      	movs	r2, #0
 800a558:	601a      	str	r2, [r3, #0]
  loraInfo.Region = 0;
 800a55a:	4b14      	ldr	r3, [pc, #80]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a55c:	2200      	movs	r2, #0
 800a55e:	605a      	str	r2, [r3, #4]
  loraInfo.ClassB = 0;
 800a560:	4b12      	ldr	r3, [pc, #72]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a562:	2200      	movs	r2, #0
 800a564:	609a      	str	r2, [r3, #8]
  loraInfo.Kms = 0;
 800a566:	4b11      	ldr	r3, [pc, #68]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a568:	2200      	movs	r2, #0
 800a56a:	60da      	str	r2, [r3, #12]
#endif /* REGION_CN779 */
#ifdef  REGION_EU433
  loraInfo.Region |= (1 << LORAMAC_REGION_EU433);
#endif /* REGION_EU433 */
#ifdef  REGION_EU868
  loraInfo.Region |= (1 << LORAMAC_REGION_EU868);
 800a56c:	4b0f      	ldr	r3, [pc, #60]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a56e:	685b      	ldr	r3, [r3, #4]
 800a570:	f043 0320 	orr.w	r3, r3, #32
 800a574:	4a0d      	ldr	r2, [pc, #52]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a576:	6053      	str	r3, [r2, #4]
#endif /* REGION_US915 */
#ifdef  REGION_RU864
  loraInfo.Region |= (1 << LORAMAC_REGION_RU864);
#endif /* REGION_RU864 */

  if (loraInfo.Region == 0)
 800a578:	4b0c      	ldr	r3, [pc, #48]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10d      	bne.n	800a59c <LoraInfo_Init+0x4c>
  {
    APP_PRINTF("error: At least one region shall be defined in the MW: check lorawan_conf.h \r\n");
 800a580:	4b0b      	ldr	r3, [pc, #44]	@ (800a5b0 <LoraInfo_Init+0x60>)
 800a582:	2200      	movs	r2, #0
 800a584:	2100      	movs	r1, #0
 800a586:	2000      	movs	r0, #0
 800a588:	f010 fdb8 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    while (1 != UTIL_ADV_TRACE_IsBufferEmpty())
 800a58c:	bf00      	nop
 800a58e:	f010 fda3 	bl	801b0d8 <UTIL_ADV_TRACE_IsBufferEmpty>
 800a592:	4603      	mov	r3, r0
 800a594:	2b01      	cmp	r3, #1
 800a596:	d1fa      	bne.n	800a58e <LoraInfo_Init+0x3e>
    {
      /* Wait that all printfs are completed*/
    }
    while (1) {} /* At least one region shall be defined */
 800a598:	bf00      	nop
 800a59a:	e7fd      	b.n	800a598 <LoraInfo_Init+0x48>
#elif !defined (LORAMAC_CLASSB_ENABLED)
#error LORAMAC_CLASSB_ENABLED not defined ( shall be <0 or 1> )
#endif /* LORAMAC_CLASSB_ENABLED */

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
  loraInfo.Kms = 0;
 800a59c:	4b03      	ldr	r3, [pc, #12]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	60da      	str	r2, [r3, #12]
  loraInfo.ActivationMode = 3;
 800a5a2:	4b02      	ldr	r3, [pc, #8]	@ (800a5ac <LoraInfo_Init+0x5c>)
 800a5a4:	2203      	movs	r2, #3
 800a5a6:	601a      	str	r2, [r3, #0]
  loraInfo.ActivationMode = ACTIVATION_BY_PERSONALIZATION + (OVER_THE_AIR_ACTIVATION << 1);
#endif /* LORAWAN_KMS */
  /* USER CODE BEGIN LoraInfo_Init_2 */

  /* USER CODE END LoraInfo_Init_2 */
}
 800a5a8:	bf00      	nop
 800a5aa:	bd80      	pop	{r7, pc}
 800a5ac:	200004a8 	.word	0x200004a8
 800a5b0:	0801bbbc 	.word	0x0801bbbc

0800a5b4 <LoraInfo_GetPtr>:

LoraInfo_t *LoraInfo_GetPtr(void)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LoraInfo_GetPtr */

  /* USER CODE END LoraInfo_GetPtr */
  return &loraInfo;
 800a5b8:	4b02      	ldr	r3, [pc, #8]	@ (800a5c4 <LoraInfo_GetPtr+0x10>)
}
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bc80      	pop	{r7}
 800a5c0:	4770      	bx	lr
 800a5c2:	bf00      	nop
 800a5c4:	200004a8 	.word	0x200004a8

0800a5c8 <RBI_Init>:

/* USER CODE END PFP */

/* Exported functions --------------------------------------------------------*/
int32_t RBI_Init(void)
{
 800a5c8:	b580      	push	{r7, lr}
 800a5ca:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_Init();
 800a5cc:	f7f8 f8f5 	bl	80027ba <BSP_RADIO_Init>
 800a5d0:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_Init_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_Init_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	bd80      	pop	{r7, pc}

0800a5d6 <RBI_ConfigRFSwitch>:
  return retcode;
#endif  /* USE_BSP_DRIVER */
}

int32_t RBI_ConfigRFSwitch(RBI_Switch_TypeDef Config)
{
 800a5d6:	b580      	push	{r7, lr}
 800a5d8:	b082      	sub	sp, #8
 800a5da:	af00      	add	r7, sp, #0
 800a5dc:	4603      	mov	r3, r0
 800a5de:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_ConfigRFSwitch((BSP_RADIO_Switch_TypeDef) Config);
 800a5e0:	79fb      	ldrb	r3, [r7, #7]
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	f7f8 f91a 	bl	800281c <BSP_RADIO_ConfigRFSwitch>
 800a5e8:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_ConfigRFSwitch_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_ConfigRFSwitch_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <RBI_GetTxConfig>:

int32_t RBI_GetTxConfig(void)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetTxConfig();
 800a5f6:	f7f8 f95f 	bl	80028b8 <BSP_RADIO_GetTxConfig>
 800a5fa:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_GetTxConfig_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_GetTxConfig_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER */
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	bd80      	pop	{r7, pc}

0800a600 <RBI_IsTCXO>:

int32_t RBI_IsTCXO(void)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsTCXO();
 800a604:	f7f8 f95f 	bl	80028c6 <BSP_RADIO_IsTCXO>
 800a608:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsTCXO_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsTCXO_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	bd80      	pop	{r7, pc}

0800a60e <RBI_IsDCDC>:

int32_t RBI_IsDCDC(void)
{
 800a60e:	b580      	push	{r7, lr}
 800a610:	af00      	add	r7, sp, #0
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_IsDCDC();
 800a612:	f7f8 f95f 	bl	80028d4 <BSP_RADIO_IsDCDC>
 800a616:	4603      	mov	r3, r0
  /* USER CODE BEGIN RBI_IsDCDC_2 */
#warning user to provide its board code or to call his board driver functions
  /* USER CODE END RBI_IsDCDC_2 */
  return retcode;
#endif  /* USE_BSP_DRIVER  */
}
 800a618:	4618      	mov	r0, r3
 800a61a:	bd80      	pop	{r7, pc}

0800a61c <RBI_GetRFOMaxPowerConfig>:

int32_t RBI_GetRFOMaxPowerConfig(RBI_RFOMaxPowerConfig_TypeDef Config)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b082      	sub	sp, #8
 800a620:	af00      	add	r7, sp, #0
 800a622:	4603      	mov	r3, r0
 800a624:	71fb      	strb	r3, [r7, #7]
   * 1/ For User boards, the BSP/STM32WLxx_Nucleo/ directory can be copied and replaced in the project. The copy must then be updated depending:
   *       on board RF switch configuration (pin control, number of port etc)
   *       on TCXO configuration
   *       on DC/DC configuration
   *       on maximum output power that the board can deliver*/
  return BSP_RADIO_GetRFOMaxPowerConfig((BSP_RADIO_RFOMaxPowerConfig_TypeDef) Config);
 800a626:	79fb      	ldrb	r3, [r7, #7]
 800a628:	4618      	mov	r0, r3
 800a62a:	f7f8 f95a 	bl	80028e2 <BSP_RADIO_GetRFOMaxPowerConfig>
 800a62e:	4603      	mov	r3, r0
    ret = 22; /*dBm*/
  }
  /* USER CODE END RBI_GetRFOMaxPowerConfig_2 */
  return ret;
#endif  /* USE_BSP_DRIVER  */
}
 800a630:	4618      	mov	r0, r3
 800a632:	3708      	adds	r7, #8
 800a634:	46bd      	mov	sp, r7
 800a636:	bd80      	pop	{r7, pc}

0800a638 <AES_CMAC_Init>:
            ( r )[i] = ( r )[i] ^ ( v )[i]; \
        }                                   \
    } while( 0 )

void AES_CMAC_Init( AES_CMAC_CTX* ctx )
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	b082      	sub	sp, #8
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	6078      	str	r0, [r7, #4]
    memset1( ctx->X, 0, sizeof ctx->X );
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	33f1      	adds	r3, #241	@ 0xf1
 800a644:	2210      	movs	r2, #16
 800a646:	2100      	movs	r1, #0
 800a648:	4618      	mov	r0, r3
 800a64a:	f00c fa43 	bl	8016ad4 <memset1>
    ctx->M_n = 0;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2200      	movs	r2, #0
 800a652:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
    memset1( ctx->rijndael.ksch, '\0', 240 );
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	22f0      	movs	r2, #240	@ 0xf0
 800a65a:	2100      	movs	r1, #0
 800a65c:	4618      	mov	r0, r3
 800a65e:	f00c fa39 	bl	8016ad4 <memset1>
}
 800a662:	bf00      	nop
 800a664:	3708      	adds	r7, #8
 800a666:	46bd      	mov	sp, r7
 800a668:	bd80      	pop	{r7, pc}

0800a66a <AES_CMAC_SetKey>:

void AES_CMAC_SetKey( AES_CMAC_CTX* ctx, const uint8_t key[AES_CMAC_KEY_LENGTH] )
{
 800a66a:	b580      	push	{r7, lr}
 800a66c:	b082      	sub	sp, #8
 800a66e:	af00      	add	r7, sp, #0
 800a670:	6078      	str	r0, [r7, #4]
 800a672:	6039      	str	r1, [r7, #0]
    lorawan_aes_set_key( key, AES_CMAC_KEY_LENGTH, &ctx->rijndael );
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	461a      	mov	r2, r3
 800a678:	2110      	movs	r1, #16
 800a67a:	6838      	ldr	r0, [r7, #0]
 800a67c:	f000 fe5c 	bl	800b338 <lorawan_aes_set_key>
}
 800a680:	bf00      	nop
 800a682:	3708      	adds	r7, #8
 800a684:	46bd      	mov	sp, r7
 800a686:	bd80      	pop	{r7, pc}

0800a688 <AES_CMAC_Update>:

void AES_CMAC_Update( AES_CMAC_CTX* ctx, const uint8_t* data, uint32_t len )
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b08c      	sub	sp, #48	@ 0x30
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60f8      	str	r0, [r7, #12]
 800a690:	60b9      	str	r1, [r7, #8]
 800a692:	607a      	str	r2, [r7, #4]
    uint32_t mlen;
    uint8_t  in[16];

    if( ctx->M_n > 0 )
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	f000 80a1 	beq.w	800a7e2 <AES_CMAC_Update+0x15a>
    {
        mlen = MIN( 16 - ctx->M_n, len );
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6a6:	f1c3 0310 	rsb	r3, r3, #16
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	4293      	cmp	r3, r2
 800a6ae:	bf28      	it	cs
 800a6b0:	4613      	movcs	r3, r2
 800a6b2:	627b      	str	r3, [r7, #36]	@ 0x24
        memcpy1( ctx->M_last + ctx->M_n, data, mlen );
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	f203 1201 	addw	r2, r3, #257	@ 0x101
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6c0:	4413      	add	r3, r2
 800a6c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6c4:	b292      	uxth	r2, r2
 800a6c6:	68b9      	ldr	r1, [r7, #8]
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f00c f9c8 	bl	8016a5e <memcpy1>
        ctx->M_n += mlen;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	441a      	add	r2, r3
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        if( ctx->M_n < 16 || len == mlen )
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a6e4:	2b0f      	cmp	r3, #15
 800a6e6:	f240 808d 	bls.w	800a804 <AES_CMAC_Update+0x17c>
 800a6ea:	687a      	ldr	r2, [r7, #4]
 800a6ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ee:	429a      	cmp	r2, r3
 800a6f0:	f000 8088 	beq.w	800a804 <AES_CMAC_Update+0x17c>
            return;
        XOR( ctx->M_last, ctx->X );
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6f8:	e015      	b.n	800a726 <AES_CMAC_Update+0x9e>
 800a6fa:	68fa      	ldr	r2, [r7, #12]
 800a6fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6fe:	4413      	add	r3, r2
 800a700:	33f1      	adds	r3, #241	@ 0xf1
 800a702:	781a      	ldrb	r2, [r3, #0]
 800a704:	68f9      	ldr	r1, [r7, #12]
 800a706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a708:	440b      	add	r3, r1
 800a70a:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a70e:	781b      	ldrb	r3, [r3, #0]
 800a710:	4053      	eors	r3, r2
 800a712:	b2d9      	uxtb	r1, r3
 800a714:	68fa      	ldr	r2, [r7, #12]
 800a716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a718:	4413      	add	r3, r2
 800a71a:	33f1      	adds	r3, #241	@ 0xf1
 800a71c:	460a      	mov	r2, r1
 800a71e:	701a      	strb	r2, [r3, #0]
 800a720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a722:	3301      	adds	r3, #1
 800a724:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a726:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a728:	2b0f      	cmp	r3, #15
 800a72a:	dde6      	ble.n	800a6fa <AES_CMAC_Update+0x72>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a732:	f107 0314 	add.w	r3, r7, #20
 800a736:	2210      	movs	r2, #16
 800a738:	4618      	mov	r0, r3
 800a73a:	f00c f990 	bl	8016a5e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	f107 0114 	add.w	r1, r7, #20
 800a744:	f107 0314 	add.w	r3, r7, #20
 800a748:	4618      	mov	r0, r3
 800a74a:	f000 fed3 	bl	800b4f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	33f1      	adds	r3, #241	@ 0xf1
 800a752:	f107 0114 	add.w	r1, r7, #20
 800a756:	2210      	movs	r2, #16
 800a758:	4618      	mov	r0, r3
 800a75a:	f00c f980 	bl	8016a5e <memcpy1>

        data += mlen;
 800a75e:	68ba      	ldr	r2, [r7, #8]
 800a760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a762:	4413      	add	r3, r2
 800a764:	60bb      	str	r3, [r7, #8]
        len -= mlen;
 800a766:	687a      	ldr	r2, [r7, #4]
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	1ad3      	subs	r3, r2, r3
 800a76c:	607b      	str	r3, [r7, #4]
    }
    while( len > 16 )
 800a76e:	e038      	b.n	800a7e2 <AES_CMAC_Update+0x15a>
    { /* not last block */

        XOR( data, ctx->X );
 800a770:	2300      	movs	r3, #0
 800a772:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a774:	e013      	b.n	800a79e <AES_CMAC_Update+0x116>
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	4413      	add	r3, r2
 800a77c:	33f1      	adds	r3, #241	@ 0xf1
 800a77e:	781a      	ldrb	r2, [r3, #0]
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	440b      	add	r3, r1
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	4053      	eors	r3, r2
 800a78a:	b2d9      	uxtb	r1, r3
 800a78c:	68fa      	ldr	r2, [r7, #12]
 800a78e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a790:	4413      	add	r3, r2
 800a792:	33f1      	adds	r3, #241	@ 0xf1
 800a794:	460a      	mov	r2, r1
 800a796:	701a      	strb	r2, [r3, #0]
 800a798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a79a:	3301      	adds	r3, #1
 800a79c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a79e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7a0:	2b0f      	cmp	r3, #15
 800a7a2:	dde8      	ble.n	800a776 <AES_CMAC_Update+0xee>

        memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800a7aa:	f107 0314 	add.w	r3, r7, #20
 800a7ae:	2210      	movs	r2, #16
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f00c f954 	bl	8016a5e <memcpy1>
        lorawan_aes_encrypt( in, in, &ctx->rijndael );
 800a7b6:	68fa      	ldr	r2, [r7, #12]
 800a7b8:	f107 0114 	add.w	r1, r7, #20
 800a7bc:	f107 0314 	add.w	r3, r7, #20
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 fe97 	bl	800b4f4 <lorawan_aes_encrypt>
        memcpy1( &ctx->X[0], in, 16 );
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	33f1      	adds	r3, #241	@ 0xf1
 800a7ca:	f107 0114 	add.w	r1, r7, #20
 800a7ce:	2210      	movs	r2, #16
 800a7d0:	4618      	mov	r0, r3
 800a7d2:	f00c f944 	bl	8016a5e <memcpy1>

        data += 16;
 800a7d6:	68bb      	ldr	r3, [r7, #8]
 800a7d8:	3310      	adds	r3, #16
 800a7da:	60bb      	str	r3, [r7, #8]
        len -= 16;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	3b10      	subs	r3, #16
 800a7e0:	607b      	str	r3, [r7, #4]
    while( len > 16 )
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2b10      	cmp	r3, #16
 800a7e6:	d8c3      	bhi.n	800a770 <AES_CMAC_Update+0xe8>
    }
    /* potential last block, save it */
    memcpy1( ctx->M_last, data, len );
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a7ee:	687a      	ldr	r2, [r7, #4]
 800a7f0:	b292      	uxth	r2, r2
 800a7f2:	68b9      	ldr	r1, [r7, #8]
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f00c f932 	bl	8016a5e <memcpy1>
    ctx->M_n = len;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	687a      	ldr	r2, [r7, #4]
 800a7fe:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800a802:	e000      	b.n	800a806 <AES_CMAC_Update+0x17e>
            return;
 800a804:	bf00      	nop
}
 800a806:	3730      	adds	r7, #48	@ 0x30
 800a808:	46bd      	mov	sp, r7
 800a80a:	bd80      	pop	{r7, pc}

0800a80c <AES_CMAC_Final>:

void AES_CMAC_Final( uint8_t digest[AES_CMAC_DIGEST_LENGTH], AES_CMAC_CTX* ctx )
{
 800a80c:	b580      	push	{r7, lr}
 800a80e:	b092      	sub	sp, #72	@ 0x48
 800a810:	af00      	add	r7, sp, #0
 800a812:	6078      	str	r0, [r7, #4]
 800a814:	6039      	str	r1, [r7, #0]
    uint8_t K[16];
    uint8_t in[16];
    /* generate subkey K1 */
    memset1( K, '\0', 16 );
 800a816:	f107 031c 	add.w	r3, r7, #28
 800a81a:	2210      	movs	r2, #16
 800a81c:	2100      	movs	r1, #0
 800a81e:	4618      	mov	r0, r3
 800a820:	f00c f958 	bl	8016ad4 <memset1>

    lorawan_aes_encrypt( K, K, &ctx->rijndael );
 800a824:	683a      	ldr	r2, [r7, #0]
 800a826:	f107 011c 	add.w	r1, r7, #28
 800a82a:	f107 031c 	add.w	r3, r7, #28
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 fe60 	bl	800b4f4 <lorawan_aes_encrypt>

    if( K[0] & 0x80 )
 800a834:	7f3b      	ldrb	r3, [r7, #28]
 800a836:	b25b      	sxtb	r3, r3
 800a838:	2b00      	cmp	r3, #0
 800a83a:	da30      	bge.n	800a89e <AES_CMAC_Final+0x92>
    {
        LSHIFT( K, K );
 800a83c:	2300      	movs	r3, #0
 800a83e:	647b      	str	r3, [r7, #68]	@ 0x44
 800a840:	e01b      	b.n	800a87a <AES_CMAC_Final+0x6e>
 800a842:	f107 021c 	add.w	r2, r7, #28
 800a846:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a848:	4413      	add	r3, r2
 800a84a:	781b      	ldrb	r3, [r3, #0]
 800a84c:	005b      	lsls	r3, r3, #1
 800a84e:	b25a      	sxtb	r2, r3
 800a850:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a852:	3301      	adds	r3, #1
 800a854:	3348      	adds	r3, #72	@ 0x48
 800a856:	443b      	add	r3, r7
 800a858:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a85c:	09db      	lsrs	r3, r3, #7
 800a85e:	b2db      	uxtb	r3, r3
 800a860:	b25b      	sxtb	r3, r3
 800a862:	4313      	orrs	r3, r2
 800a864:	b25b      	sxtb	r3, r3
 800a866:	b2d9      	uxtb	r1, r3
 800a868:	f107 021c 	add.w	r2, r7, #28
 800a86c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a86e:	4413      	add	r3, r2
 800a870:	460a      	mov	r2, r1
 800a872:	701a      	strb	r2, [r3, #0]
 800a874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a876:	3301      	adds	r3, #1
 800a878:	647b      	str	r3, [r7, #68]	@ 0x44
 800a87a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a87c:	2b0e      	cmp	r3, #14
 800a87e:	dde0      	ble.n	800a842 <AES_CMAC_Final+0x36>
 800a880:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a884:	005b      	lsls	r3, r3, #1
 800a886:	b2db      	uxtb	r3, r3
 800a888:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        K[15] ^= 0x87;
 800a88c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a890:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a894:	43db      	mvns	r3, r3
 800a896:	b2db      	uxtb	r3, r3
 800a898:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a89c:	e027      	b.n	800a8ee <AES_CMAC_Final+0xe2>
    }
    else
        LSHIFT( K, K );
 800a89e:	2300      	movs	r3, #0
 800a8a0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8a2:	e01b      	b.n	800a8dc <AES_CMAC_Final+0xd0>
 800a8a4:	f107 021c 	add.w	r2, r7, #28
 800a8a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8aa:	4413      	add	r3, r2
 800a8ac:	781b      	ldrb	r3, [r3, #0]
 800a8ae:	005b      	lsls	r3, r3, #1
 800a8b0:	b25a      	sxtb	r2, r3
 800a8b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8b4:	3301      	adds	r3, #1
 800a8b6:	3348      	adds	r3, #72	@ 0x48
 800a8b8:	443b      	add	r3, r7
 800a8ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a8be:	09db      	lsrs	r3, r3, #7
 800a8c0:	b2db      	uxtb	r3, r3
 800a8c2:	b25b      	sxtb	r3, r3
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	b25b      	sxtb	r3, r3
 800a8c8:	b2d9      	uxtb	r1, r3
 800a8ca:	f107 021c 	add.w	r2, r7, #28
 800a8ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d0:	4413      	add	r3, r2
 800a8d2:	460a      	mov	r2, r1
 800a8d4:	701a      	strb	r2, [r3, #0]
 800a8d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8d8:	3301      	adds	r3, #1
 800a8da:	643b      	str	r3, [r7, #64]	@ 0x40
 800a8dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a8de:	2b0e      	cmp	r3, #14
 800a8e0:	dde0      	ble.n	800a8a4 <AES_CMAC_Final+0x98>
 800a8e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a8e6:	005b      	lsls	r3, r3, #1
 800a8e8:	b2db      	uxtb	r3, r3
 800a8ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    if( ctx->M_n == 16 )
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a8f4:	2b10      	cmp	r3, #16
 800a8f6:	d11d      	bne.n	800a934 <AES_CMAC_Final+0x128>
    {
        /* last block was a complete block */
        XOR( K, ctx->M_last );
 800a8f8:	2300      	movs	r3, #0
 800a8fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a8fc:	e016      	b.n	800a92c <AES_CMAC_Final+0x120>
 800a8fe:	683a      	ldr	r2, [r7, #0]
 800a900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a902:	4413      	add	r3, r2
 800a904:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a908:	781a      	ldrb	r2, [r3, #0]
 800a90a:	f107 011c 	add.w	r1, r7, #28
 800a90e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a910:	440b      	add	r3, r1
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	4053      	eors	r3, r2
 800a916:	b2d9      	uxtb	r1, r3
 800a918:	683a      	ldr	r2, [r7, #0]
 800a91a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a91c:	4413      	add	r3, r2
 800a91e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800a922:	460a      	mov	r2, r1
 800a924:	701a      	strb	r2, [r3, #0]
 800a926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a928:	3301      	adds	r3, #1
 800a92a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a92e:	2b0f      	cmp	r3, #15
 800a930:	dde5      	ble.n	800a8fe <AES_CMAC_Final+0xf2>
 800a932:	e096      	b.n	800aa62 <AES_CMAC_Final+0x256>
    }
    else
    {
        /* generate subkey K2 */
        if( K[0] & 0x80 )
 800a934:	7f3b      	ldrb	r3, [r7, #28]
 800a936:	b25b      	sxtb	r3, r3
 800a938:	2b00      	cmp	r3, #0
 800a93a:	da30      	bge.n	800a99e <AES_CMAC_Final+0x192>
        {
            LSHIFT( K, K );
 800a93c:	2300      	movs	r3, #0
 800a93e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a940:	e01b      	b.n	800a97a <AES_CMAC_Final+0x16e>
 800a942:	f107 021c 	add.w	r2, r7, #28
 800a946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a948:	4413      	add	r3, r2
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	005b      	lsls	r3, r3, #1
 800a94e:	b25a      	sxtb	r2, r3
 800a950:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a952:	3301      	adds	r3, #1
 800a954:	3348      	adds	r3, #72	@ 0x48
 800a956:	443b      	add	r3, r7
 800a958:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a95c:	09db      	lsrs	r3, r3, #7
 800a95e:	b2db      	uxtb	r3, r3
 800a960:	b25b      	sxtb	r3, r3
 800a962:	4313      	orrs	r3, r2
 800a964:	b25b      	sxtb	r3, r3
 800a966:	b2d9      	uxtb	r1, r3
 800a968:	f107 021c 	add.w	r2, r7, #28
 800a96c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a96e:	4413      	add	r3, r2
 800a970:	460a      	mov	r2, r1
 800a972:	701a      	strb	r2, [r3, #0]
 800a974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a976:	3301      	adds	r3, #1
 800a978:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a97a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a97c:	2b0e      	cmp	r3, #14
 800a97e:	dde0      	ble.n	800a942 <AES_CMAC_Final+0x136>
 800a980:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a984:	005b      	lsls	r3, r3, #1
 800a986:	b2db      	uxtb	r3, r3
 800a988:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            K[15] ^= 0x87;
 800a98c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a990:	f083 0378 	eor.w	r3, r3, #120	@ 0x78
 800a994:	43db      	mvns	r3, r3
 800a996:	b2db      	uxtb	r3, r3
 800a998:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800a99c:	e027      	b.n	800a9ee <AES_CMAC_Final+0x1e2>
        }
        else
            LSHIFT( K, K );
 800a99e:	2300      	movs	r3, #0
 800a9a0:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9a2:	e01b      	b.n	800a9dc <AES_CMAC_Final+0x1d0>
 800a9a4:	f107 021c 	add.w	r2, r7, #28
 800a9a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9aa:	4413      	add	r3, r2
 800a9ac:	781b      	ldrb	r3, [r3, #0]
 800a9ae:	005b      	lsls	r3, r3, #1
 800a9b0:	b25a      	sxtb	r2, r3
 800a9b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9b4:	3301      	adds	r3, #1
 800a9b6:	3348      	adds	r3, #72	@ 0x48
 800a9b8:	443b      	add	r3, r7
 800a9ba:	f813 3c2c 	ldrb.w	r3, [r3, #-44]
 800a9be:	09db      	lsrs	r3, r3, #7
 800a9c0:	b2db      	uxtb	r3, r3
 800a9c2:	b25b      	sxtb	r3, r3
 800a9c4:	4313      	orrs	r3, r2
 800a9c6:	b25b      	sxtb	r3, r3
 800a9c8:	b2d9      	uxtb	r1, r3
 800a9ca:	f107 021c 	add.w	r2, r7, #28
 800a9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d0:	4413      	add	r3, r2
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	701a      	strb	r2, [r3, #0]
 800a9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9d8:	3301      	adds	r3, #1
 800a9da:	637b      	str	r3, [r7, #52]	@ 0x34
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a9de:	2b0e      	cmp	r3, #14
 800a9e0:	dde0      	ble.n	800a9a4 <AES_CMAC_Final+0x198>
 800a9e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a9e6:	005b      	lsls	r3, r3, #1
 800a9e8:	b2db      	uxtb	r3, r3
 800a9ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

        /* padding(M_last) */
        ctx->M_last[ctx->M_n] = 0x80;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800a9f4:	683a      	ldr	r2, [r7, #0]
 800a9f6:	4413      	add	r3, r2
 800a9f8:	2280      	movs	r2, #128	@ 0x80
 800a9fa:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800a9fe:	e007      	b.n	800aa10 <AES_CMAC_Final+0x204>
            ctx->M_last[ctx->M_n] = 0;
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4413      	add	r3, r2
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 2101 	strb.w	r2, [r3, #257]	@ 0x101
        while( ++ctx->M_n < 16 )
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa16:	1c5a      	adds	r2, r3, #1
 800aa18:	683b      	ldr	r3, [r7, #0]
 800aa1a:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
 800aa1e:	683b      	ldr	r3, [r7, #0]
 800aa20:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800aa24:	2b0f      	cmp	r3, #15
 800aa26:	d9eb      	bls.n	800aa00 <AES_CMAC_Final+0x1f4>

        XOR( K, ctx->M_last );
 800aa28:	2300      	movs	r3, #0
 800aa2a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa2c:	e016      	b.n	800aa5c <AES_CMAC_Final+0x250>
 800aa2e:	683a      	ldr	r2, [r7, #0]
 800aa30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa32:	4413      	add	r3, r2
 800aa34:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa38:	781a      	ldrb	r2, [r3, #0]
 800aa3a:	f107 011c 	add.w	r1, r7, #28
 800aa3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa40:	440b      	add	r3, r1
 800aa42:	781b      	ldrb	r3, [r3, #0]
 800aa44:	4053      	eors	r3, r2
 800aa46:	b2d9      	uxtb	r1, r3
 800aa48:	683a      	ldr	r2, [r7, #0]
 800aa4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa4c:	4413      	add	r3, r2
 800aa4e:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa52:	460a      	mov	r2, r1
 800aa54:	701a      	strb	r2, [r3, #0]
 800aa56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa58:	3301      	adds	r3, #1
 800aa5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa5e:	2b0f      	cmp	r3, #15
 800aa60:	dde5      	ble.n	800aa2e <AES_CMAC_Final+0x222>
    }
    XOR( ctx->M_last, ctx->X );
 800aa62:	2300      	movs	r3, #0
 800aa64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa66:	e015      	b.n	800aa94 <AES_CMAC_Final+0x288>
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa6c:	4413      	add	r3, r2
 800aa6e:	33f1      	adds	r3, #241	@ 0xf1
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	6839      	ldr	r1, [r7, #0]
 800aa74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa76:	440b      	add	r3, r1
 800aa78:	f203 1301 	addw	r3, r3, #257	@ 0x101
 800aa7c:	781b      	ldrb	r3, [r3, #0]
 800aa7e:	4053      	eors	r3, r2
 800aa80:	b2d9      	uxtb	r1, r3
 800aa82:	683a      	ldr	r2, [r7, #0]
 800aa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa86:	4413      	add	r3, r2
 800aa88:	33f1      	adds	r3, #241	@ 0xf1
 800aa8a:	460a      	mov	r2, r1
 800aa8c:	701a      	strb	r2, [r3, #0]
 800aa8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa90:	3301      	adds	r3, #1
 800aa92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa96:	2b0f      	cmp	r3, #15
 800aa98:	dde6      	ble.n	800aa68 <AES_CMAC_Final+0x25c>

    memcpy1( in, &ctx->X[0], 16 );  // Otherwise it does not look good
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	f103 01f1 	add.w	r1, r3, #241	@ 0xf1
 800aaa0:	f107 030c 	add.w	r3, r7, #12
 800aaa4:	2210      	movs	r2, #16
 800aaa6:	4618      	mov	r0, r3
 800aaa8:	f00b ffd9 	bl	8016a5e <memcpy1>
    lorawan_aes_encrypt( in, digest, &ctx->rijndael );
 800aaac:	683a      	ldr	r2, [r7, #0]
 800aaae:	f107 030c 	add.w	r3, r7, #12
 800aab2:	6879      	ldr	r1, [r7, #4]
 800aab4:	4618      	mov	r0, r3
 800aab6:	f000 fd1d 	bl	800b4f4 <lorawan_aes_encrypt>
    memset1( K, 0, sizeof K );
 800aaba:	f107 031c 	add.w	r3, r7, #28
 800aabe:	2210      	movs	r2, #16
 800aac0:	2100      	movs	r1, #0
 800aac2:	4618      	mov	r0, r3
 800aac4:	f00c f806 	bl	8016ad4 <memset1>
}
 800aac8:	bf00      	nop
 800aaca:	3748      	adds	r7, #72	@ 0x48
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <copy_block>:
#  define block_copy_nn(d, s, l)    copy_block_nn(d, s, l)
#  define block_copy(d, s)          copy_block(d, s)
#endif

static void copy_block( void *d, const void *s )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b083      	sub	sp, #12
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0];
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	781a      	ldrb	r2, [r3, #0]
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1];
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3301      	adds	r3, #1
 800aae6:	683a      	ldr	r2, [r7, #0]
 800aae8:	7852      	ldrb	r2, [r2, #1]
 800aaea:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2];
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	3302      	adds	r3, #2
 800aaf0:	683a      	ldr	r2, [r7, #0]
 800aaf2:	7892      	ldrb	r2, [r2, #2]
 800aaf4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3];
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	3303      	adds	r3, #3
 800aafa:	683a      	ldr	r2, [r7, #0]
 800aafc:	78d2      	ldrb	r2, [r2, #3]
 800aafe:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4];
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	3304      	adds	r3, #4
 800ab04:	683a      	ldr	r2, [r7, #0]
 800ab06:	7912      	ldrb	r2, [r2, #4]
 800ab08:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5];
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	3305      	adds	r3, #5
 800ab0e:	683a      	ldr	r2, [r7, #0]
 800ab10:	7952      	ldrb	r2, [r2, #5]
 800ab12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6];
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	3306      	adds	r3, #6
 800ab18:	683a      	ldr	r2, [r7, #0]
 800ab1a:	7992      	ldrb	r2, [r2, #6]
 800ab1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7];
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	3307      	adds	r3, #7
 800ab22:	683a      	ldr	r2, [r7, #0]
 800ab24:	79d2      	ldrb	r2, [r2, #7]
 800ab26:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8];
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	3308      	adds	r3, #8
 800ab2c:	683a      	ldr	r2, [r7, #0]
 800ab2e:	7a12      	ldrb	r2, [r2, #8]
 800ab30:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9];
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	3309      	adds	r3, #9
 800ab36:	683a      	ldr	r2, [r7, #0]
 800ab38:	7a52      	ldrb	r2, [r2, #9]
 800ab3a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10];
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	330a      	adds	r3, #10
 800ab40:	683a      	ldr	r2, [r7, #0]
 800ab42:	7a92      	ldrb	r2, [r2, #10]
 800ab44:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11];
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	330b      	adds	r3, #11
 800ab4a:	683a      	ldr	r2, [r7, #0]
 800ab4c:	7ad2      	ldrb	r2, [r2, #11]
 800ab4e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12];
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	330c      	adds	r3, #12
 800ab54:	683a      	ldr	r2, [r7, #0]
 800ab56:	7b12      	ldrb	r2, [r2, #12]
 800ab58:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13];
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	330d      	adds	r3, #13
 800ab5e:	683a      	ldr	r2, [r7, #0]
 800ab60:	7b52      	ldrb	r2, [r2, #13]
 800ab62:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14];
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	330e      	adds	r3, #14
 800ab68:	683a      	ldr	r2, [r7, #0]
 800ab6a:	7b92      	ldrb	r2, [r2, #14]
 800ab6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15];
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	330f      	adds	r3, #15
 800ab72:	683a      	ldr	r2, [r7, #0]
 800ab74:	7bd2      	ldrb	r2, [r2, #15]
 800ab76:	701a      	strb	r2, [r3, #0]
#endif
}
 800ab78:	bf00      	nop
 800ab7a:	370c      	adds	r7, #12
 800ab7c:	46bd      	mov	sp, r7
 800ab7e:	bc80      	pop	{r7}
 800ab80:	4770      	bx	lr

0800ab82 <copy_block_nn>:

static void copy_block_nn( uint8_t * d, const uint8_t *s, uint8_t nn )
{
 800ab82:	b480      	push	{r7}
 800ab84:	b085      	sub	sp, #20
 800ab86:	af00      	add	r7, sp, #0
 800ab88:	60f8      	str	r0, [r7, #12]
 800ab8a:	60b9      	str	r1, [r7, #8]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	71fb      	strb	r3, [r7, #7]
    while( nn-- )
 800ab90:	e007      	b.n	800aba2 <copy_block_nn+0x20>
        //*((uint8_t*)d)++ = *((uint8_t*)s)++;
        *d++ = *s++;
 800ab92:	68ba      	ldr	r2, [r7, #8]
 800ab94:	1c53      	adds	r3, r2, #1
 800ab96:	60bb      	str	r3, [r7, #8]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	1c59      	adds	r1, r3, #1
 800ab9c:	60f9      	str	r1, [r7, #12]
 800ab9e:	7812      	ldrb	r2, [r2, #0]
 800aba0:	701a      	strb	r2, [r3, #0]
    while( nn-- )
 800aba2:	79fb      	ldrb	r3, [r7, #7]
 800aba4:	1e5a      	subs	r2, r3, #1
 800aba6:	71fa      	strb	r2, [r7, #7]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1f2      	bne.n	800ab92 <copy_block_nn+0x10>
}
 800abac:	bf00      	nop
 800abae:	bf00      	nop
 800abb0:	3714      	adds	r7, #20
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bc80      	pop	{r7}
 800abb6:	4770      	bx	lr

0800abb8 <xor_block>:

static void xor_block( void *d, const void *s )
{
 800abb8:	b480      	push	{r7}
 800abba:	b083      	sub	sp, #12
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
    ((uint32_t*)d)[ 0] ^= ((uint32_t*)s)[ 0];
    ((uint32_t*)d)[ 1] ^= ((uint32_t*)s)[ 1];
    ((uint32_t*)d)[ 2] ^= ((uint32_t*)s)[ 2];
    ((uint32_t*)d)[ 3] ^= ((uint32_t*)s)[ 3];
#else
    ((uint8_t*)d)[ 0] ^= ((uint8_t*)s)[ 0];
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	781a      	ldrb	r2, [r3, #0]
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	4053      	eors	r3, r2
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] ^= ((uint8_t*)s)[ 1];
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	3301      	adds	r3, #1
 800abd6:	7819      	ldrb	r1, [r3, #0]
 800abd8:	683b      	ldr	r3, [r7, #0]
 800abda:	3301      	adds	r3, #1
 800abdc:	781a      	ldrb	r2, [r3, #0]
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	3301      	adds	r3, #1
 800abe2:	404a      	eors	r2, r1
 800abe4:	b2d2      	uxtb	r2, r2
 800abe6:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] ^= ((uint8_t*)s)[ 2];
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3302      	adds	r3, #2
 800abec:	7819      	ldrb	r1, [r3, #0]
 800abee:	683b      	ldr	r3, [r7, #0]
 800abf0:	3302      	adds	r3, #2
 800abf2:	781a      	ldrb	r2, [r3, #0]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	3302      	adds	r3, #2
 800abf8:	404a      	eors	r2, r1
 800abfa:	b2d2      	uxtb	r2, r2
 800abfc:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] ^= ((uint8_t*)s)[ 3];
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	3303      	adds	r3, #3
 800ac02:	7819      	ldrb	r1, [r3, #0]
 800ac04:	683b      	ldr	r3, [r7, #0]
 800ac06:	3303      	adds	r3, #3
 800ac08:	781a      	ldrb	r2, [r3, #0]
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	3303      	adds	r3, #3
 800ac0e:	404a      	eors	r2, r1
 800ac10:	b2d2      	uxtb	r2, r2
 800ac12:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] ^= ((uint8_t*)s)[ 4];
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	3304      	adds	r3, #4
 800ac18:	7819      	ldrb	r1, [r3, #0]
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	3304      	adds	r3, #4
 800ac1e:	781a      	ldrb	r2, [r3, #0]
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	3304      	adds	r3, #4
 800ac24:	404a      	eors	r2, r1
 800ac26:	b2d2      	uxtb	r2, r2
 800ac28:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] ^= ((uint8_t*)s)[ 5];
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	3305      	adds	r3, #5
 800ac2e:	7819      	ldrb	r1, [r3, #0]
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	3305      	adds	r3, #5
 800ac34:	781a      	ldrb	r2, [r3, #0]
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	3305      	adds	r3, #5
 800ac3a:	404a      	eors	r2, r1
 800ac3c:	b2d2      	uxtb	r2, r2
 800ac3e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] ^= ((uint8_t*)s)[ 6];
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3306      	adds	r3, #6
 800ac44:	7819      	ldrb	r1, [r3, #0]
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	3306      	adds	r3, #6
 800ac4a:	781a      	ldrb	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	3306      	adds	r3, #6
 800ac50:	404a      	eors	r2, r1
 800ac52:	b2d2      	uxtb	r2, r2
 800ac54:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] ^= ((uint8_t*)s)[ 7];
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	3307      	adds	r3, #7
 800ac5a:	7819      	ldrb	r1, [r3, #0]
 800ac5c:	683b      	ldr	r3, [r7, #0]
 800ac5e:	3307      	adds	r3, #7
 800ac60:	781a      	ldrb	r2, [r3, #0]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	3307      	adds	r3, #7
 800ac66:	404a      	eors	r2, r1
 800ac68:	b2d2      	uxtb	r2, r2
 800ac6a:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] ^= ((uint8_t*)s)[ 8];
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3308      	adds	r3, #8
 800ac70:	7819      	ldrb	r1, [r3, #0]
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	3308      	adds	r3, #8
 800ac76:	781a      	ldrb	r2, [r3, #0]
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	3308      	adds	r3, #8
 800ac7c:	404a      	eors	r2, r1
 800ac7e:	b2d2      	uxtb	r2, r2
 800ac80:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] ^= ((uint8_t*)s)[ 9];
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	3309      	adds	r3, #9
 800ac86:	7819      	ldrb	r1, [r3, #0]
 800ac88:	683b      	ldr	r3, [r7, #0]
 800ac8a:	3309      	adds	r3, #9
 800ac8c:	781a      	ldrb	r2, [r3, #0]
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	3309      	adds	r3, #9
 800ac92:	404a      	eors	r2, r1
 800ac94:	b2d2      	uxtb	r2, r2
 800ac96:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] ^= ((uint8_t*)s)[10];
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	330a      	adds	r3, #10
 800ac9c:	7819      	ldrb	r1, [r3, #0]
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	330a      	adds	r3, #10
 800aca2:	781a      	ldrb	r2, [r3, #0]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	330a      	adds	r3, #10
 800aca8:	404a      	eors	r2, r1
 800acaa:	b2d2      	uxtb	r2, r2
 800acac:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] ^= ((uint8_t*)s)[11];
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	330b      	adds	r3, #11
 800acb2:	7819      	ldrb	r1, [r3, #0]
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	330b      	adds	r3, #11
 800acb8:	781a      	ldrb	r2, [r3, #0]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	330b      	adds	r3, #11
 800acbe:	404a      	eors	r2, r1
 800acc0:	b2d2      	uxtb	r2, r2
 800acc2:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] ^= ((uint8_t*)s)[12];
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	330c      	adds	r3, #12
 800acc8:	7819      	ldrb	r1, [r3, #0]
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	330c      	adds	r3, #12
 800acce:	781a      	ldrb	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	330c      	adds	r3, #12
 800acd4:	404a      	eors	r2, r1
 800acd6:	b2d2      	uxtb	r2, r2
 800acd8:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] ^= ((uint8_t*)s)[13];
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	330d      	adds	r3, #13
 800acde:	7819      	ldrb	r1, [r3, #0]
 800ace0:	683b      	ldr	r3, [r7, #0]
 800ace2:	330d      	adds	r3, #13
 800ace4:	781a      	ldrb	r2, [r3, #0]
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	330d      	adds	r3, #13
 800acea:	404a      	eors	r2, r1
 800acec:	b2d2      	uxtb	r2, r2
 800acee:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] ^= ((uint8_t*)s)[14];
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	330e      	adds	r3, #14
 800acf4:	7819      	ldrb	r1, [r3, #0]
 800acf6:	683b      	ldr	r3, [r7, #0]
 800acf8:	330e      	adds	r3, #14
 800acfa:	781a      	ldrb	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	330e      	adds	r3, #14
 800ad00:	404a      	eors	r2, r1
 800ad02:	b2d2      	uxtb	r2, r2
 800ad04:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] ^= ((uint8_t*)s)[15];
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	330f      	adds	r3, #15
 800ad0a:	7819      	ldrb	r1, [r3, #0]
 800ad0c:	683b      	ldr	r3, [r7, #0]
 800ad0e:	330f      	adds	r3, #15
 800ad10:	781a      	ldrb	r2, [r3, #0]
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	330f      	adds	r3, #15
 800ad16:	404a      	eors	r2, r1
 800ad18:	b2d2      	uxtb	r2, r2
 800ad1a:	701a      	strb	r2, [r3, #0]
#endif
}
 800ad1c:	bf00      	nop
 800ad1e:	370c      	adds	r7, #12
 800ad20:	46bd      	mov	sp, r7
 800ad22:	bc80      	pop	{r7}
 800ad24:	4770      	bx	lr

0800ad26 <copy_and_key>:

static void copy_and_key( void *d, const void *s, const void *k )
{
 800ad26:	b480      	push	{r7}
 800ad28:	b085      	sub	sp, #20
 800ad2a:	af00      	add	r7, sp, #0
 800ad2c:	60f8      	str	r0, [r7, #12]
 800ad2e:	60b9      	str	r1, [r7, #8]
 800ad30:	607a      	str	r2, [r7, #4]
    ((uint32_t*)d)[ 0] = ((uint32_t*)s)[ 0] ^ ((uint32_t*)k)[ 0];
    ((uint32_t*)d)[ 1] = ((uint32_t*)s)[ 1] ^ ((uint32_t*)k)[ 1];
    ((uint32_t*)d)[ 2] = ((uint32_t*)s)[ 2] ^ ((uint32_t*)k)[ 2];
    ((uint32_t*)d)[ 3] = ((uint32_t*)s)[ 3] ^ ((uint32_t*)k)[ 3];
#elif 1
    ((uint8_t*)d)[ 0] = ((uint8_t*)s)[ 0] ^ ((uint8_t*)k)[ 0];
 800ad32:	68bb      	ldr	r3, [r7, #8]
 800ad34:	781a      	ldrb	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	781b      	ldrb	r3, [r3, #0]
 800ad3a:	4053      	eors	r3, r2
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 1] = ((uint8_t*)s)[ 1] ^ ((uint8_t*)k)[ 1];
 800ad42:	68bb      	ldr	r3, [r7, #8]
 800ad44:	3301      	adds	r3, #1
 800ad46:	7819      	ldrb	r1, [r3, #0]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	781a      	ldrb	r2, [r3, #0]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	3301      	adds	r3, #1
 800ad52:	404a      	eors	r2, r1
 800ad54:	b2d2      	uxtb	r2, r2
 800ad56:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 2] = ((uint8_t*)s)[ 2] ^ ((uint8_t*)k)[ 2];
 800ad58:	68bb      	ldr	r3, [r7, #8]
 800ad5a:	3302      	adds	r3, #2
 800ad5c:	7819      	ldrb	r1, [r3, #0]
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	3302      	adds	r3, #2
 800ad62:	781a      	ldrb	r2, [r3, #0]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	3302      	adds	r3, #2
 800ad68:	404a      	eors	r2, r1
 800ad6a:	b2d2      	uxtb	r2, r2
 800ad6c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 3] = ((uint8_t*)s)[ 3] ^ ((uint8_t*)k)[ 3];
 800ad6e:	68bb      	ldr	r3, [r7, #8]
 800ad70:	3303      	adds	r3, #3
 800ad72:	7819      	ldrb	r1, [r3, #0]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	3303      	adds	r3, #3
 800ad78:	781a      	ldrb	r2, [r3, #0]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	3303      	adds	r3, #3
 800ad7e:	404a      	eors	r2, r1
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 4] = ((uint8_t*)s)[ 4] ^ ((uint8_t*)k)[ 4];
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	3304      	adds	r3, #4
 800ad88:	7819      	ldrb	r1, [r3, #0]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3304      	adds	r3, #4
 800ad8e:	781a      	ldrb	r2, [r3, #0]
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	3304      	adds	r3, #4
 800ad94:	404a      	eors	r2, r1
 800ad96:	b2d2      	uxtb	r2, r2
 800ad98:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 5] = ((uint8_t*)s)[ 5] ^ ((uint8_t*)k)[ 5];
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	3305      	adds	r3, #5
 800ad9e:	7819      	ldrb	r1, [r3, #0]
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	3305      	adds	r3, #5
 800ada4:	781a      	ldrb	r2, [r3, #0]
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	3305      	adds	r3, #5
 800adaa:	404a      	eors	r2, r1
 800adac:	b2d2      	uxtb	r2, r2
 800adae:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 6] = ((uint8_t*)s)[ 6] ^ ((uint8_t*)k)[ 6];
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	3306      	adds	r3, #6
 800adb4:	7819      	ldrb	r1, [r3, #0]
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	3306      	adds	r3, #6
 800adba:	781a      	ldrb	r2, [r3, #0]
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	3306      	adds	r3, #6
 800adc0:	404a      	eors	r2, r1
 800adc2:	b2d2      	uxtb	r2, r2
 800adc4:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 7] = ((uint8_t*)s)[ 7] ^ ((uint8_t*)k)[ 7];
 800adc6:	68bb      	ldr	r3, [r7, #8]
 800adc8:	3307      	adds	r3, #7
 800adca:	7819      	ldrb	r1, [r3, #0]
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	3307      	adds	r3, #7
 800add0:	781a      	ldrb	r2, [r3, #0]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	3307      	adds	r3, #7
 800add6:	404a      	eors	r2, r1
 800add8:	b2d2      	uxtb	r2, r2
 800adda:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 8] = ((uint8_t*)s)[ 8] ^ ((uint8_t*)k)[ 8];
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	3308      	adds	r3, #8
 800ade0:	7819      	ldrb	r1, [r3, #0]
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	3308      	adds	r3, #8
 800ade6:	781a      	ldrb	r2, [r3, #0]
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3308      	adds	r3, #8
 800adec:	404a      	eors	r2, r1
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[ 9] = ((uint8_t*)s)[ 9] ^ ((uint8_t*)k)[ 9];
 800adf2:	68bb      	ldr	r3, [r7, #8]
 800adf4:	3309      	adds	r3, #9
 800adf6:	7819      	ldrb	r1, [r3, #0]
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3309      	adds	r3, #9
 800adfc:	781a      	ldrb	r2, [r3, #0]
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	3309      	adds	r3, #9
 800ae02:	404a      	eors	r2, r1
 800ae04:	b2d2      	uxtb	r2, r2
 800ae06:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[10] = ((uint8_t*)s)[10] ^ ((uint8_t*)k)[10];
 800ae08:	68bb      	ldr	r3, [r7, #8]
 800ae0a:	330a      	adds	r3, #10
 800ae0c:	7819      	ldrb	r1, [r3, #0]
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	330a      	adds	r3, #10
 800ae12:	781a      	ldrb	r2, [r3, #0]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	330a      	adds	r3, #10
 800ae18:	404a      	eors	r2, r1
 800ae1a:	b2d2      	uxtb	r2, r2
 800ae1c:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[11] = ((uint8_t*)s)[11] ^ ((uint8_t*)k)[11];
 800ae1e:	68bb      	ldr	r3, [r7, #8]
 800ae20:	330b      	adds	r3, #11
 800ae22:	7819      	ldrb	r1, [r3, #0]
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	330b      	adds	r3, #11
 800ae28:	781a      	ldrb	r2, [r3, #0]
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	330b      	adds	r3, #11
 800ae2e:	404a      	eors	r2, r1
 800ae30:	b2d2      	uxtb	r2, r2
 800ae32:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[12] = ((uint8_t*)s)[12] ^ ((uint8_t*)k)[12];
 800ae34:	68bb      	ldr	r3, [r7, #8]
 800ae36:	330c      	adds	r3, #12
 800ae38:	7819      	ldrb	r1, [r3, #0]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	330c      	adds	r3, #12
 800ae3e:	781a      	ldrb	r2, [r3, #0]
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	330c      	adds	r3, #12
 800ae44:	404a      	eors	r2, r1
 800ae46:	b2d2      	uxtb	r2, r2
 800ae48:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[13] = ((uint8_t*)s)[13] ^ ((uint8_t*)k)[13];
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	330d      	adds	r3, #13
 800ae4e:	7819      	ldrb	r1, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	330d      	adds	r3, #13
 800ae54:	781a      	ldrb	r2, [r3, #0]
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	330d      	adds	r3, #13
 800ae5a:	404a      	eors	r2, r1
 800ae5c:	b2d2      	uxtb	r2, r2
 800ae5e:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[14] = ((uint8_t*)s)[14] ^ ((uint8_t*)k)[14];
 800ae60:	68bb      	ldr	r3, [r7, #8]
 800ae62:	330e      	adds	r3, #14
 800ae64:	7819      	ldrb	r1, [r3, #0]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	330e      	adds	r3, #14
 800ae6a:	781a      	ldrb	r2, [r3, #0]
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	330e      	adds	r3, #14
 800ae70:	404a      	eors	r2, r1
 800ae72:	b2d2      	uxtb	r2, r2
 800ae74:	701a      	strb	r2, [r3, #0]
    ((uint8_t*)d)[15] = ((uint8_t*)s)[15] ^ ((uint8_t*)k)[15];
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	330f      	adds	r3, #15
 800ae7a:	7819      	ldrb	r1, [r3, #0]
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	330f      	adds	r3, #15
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	330f      	adds	r3, #15
 800ae86:	404a      	eors	r2, r1
 800ae88:	b2d2      	uxtb	r2, r2
 800ae8a:	701a      	strb	r2, [r3, #0]
#else
    block_copy(d, s);
    xor_block(d, k);
#endif
}
 800ae8c:	bf00      	nop
 800ae8e:	3714      	adds	r7, #20
 800ae90:	46bd      	mov	sp, r7
 800ae92:	bc80      	pop	{r7}
 800ae94:	4770      	bx	lr

0800ae96 <add_round_key>:

static void add_round_key( uint8_t d[N_BLOCK], const uint8_t k[N_BLOCK] )
{
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b082      	sub	sp, #8
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	6039      	str	r1, [r7, #0]
    xor_block(d, k);
 800aea0:	6839      	ldr	r1, [r7, #0]
 800aea2:	6878      	ldr	r0, [r7, #4]
 800aea4:	f7ff fe88 	bl	800abb8 <xor_block>
}
 800aea8:	bf00      	nop
 800aeaa:	3708      	adds	r7, #8
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <shift_sub_rows>:

static void shift_sub_rows( uint8_t st[N_BLOCK] )
{   uint8_t tt;
 800aeb0:	b480      	push	{r7}
 800aeb2:	b085      	sub	sp, #20
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]

    st[ 0] = s_box(st[ 0]); st[ 4] = s_box(st[ 4]);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	781b      	ldrb	r3, [r3, #0]
 800aebc:	461a      	mov	r2, r3
 800aebe:	4b48      	ldr	r3, [pc, #288]	@ (800afe0 <shift_sub_rows+0x130>)
 800aec0:	5c9a      	ldrb	r2, [r3, r2]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	701a      	strb	r2, [r3, #0]
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	3304      	adds	r3, #4
 800aeca:	781b      	ldrb	r3, [r3, #0]
 800aecc:	4619      	mov	r1, r3
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	3304      	adds	r3, #4
 800aed2:	4a43      	ldr	r2, [pc, #268]	@ (800afe0 <shift_sub_rows+0x130>)
 800aed4:	5c52      	ldrb	r2, [r2, r1]
 800aed6:	701a      	strb	r2, [r3, #0]
    st[ 8] = s_box(st[ 8]); st[12] = s_box(st[12]);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	3308      	adds	r3, #8
 800aedc:	781b      	ldrb	r3, [r3, #0]
 800aede:	4619      	mov	r1, r3
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	3308      	adds	r3, #8
 800aee4:	4a3e      	ldr	r2, [pc, #248]	@ (800afe0 <shift_sub_rows+0x130>)
 800aee6:	5c52      	ldrb	r2, [r2, r1]
 800aee8:	701a      	strb	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	330c      	adds	r3, #12
 800aeee:	781b      	ldrb	r3, [r3, #0]
 800aef0:	4619      	mov	r1, r3
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	330c      	adds	r3, #12
 800aef6:	4a3a      	ldr	r2, [pc, #232]	@ (800afe0 <shift_sub_rows+0x130>)
 800aef8:	5c52      	ldrb	r2, [r2, r1]
 800aefa:	701a      	strb	r2, [r3, #0]

    tt = st[1]; st[ 1] = s_box(st[ 5]); st[ 5] = s_box(st[ 9]);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	785b      	ldrb	r3, [r3, #1]
 800af00:	73fb      	strb	r3, [r7, #15]
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	3305      	adds	r3, #5
 800af06:	781b      	ldrb	r3, [r3, #0]
 800af08:	4619      	mov	r1, r3
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3301      	adds	r3, #1
 800af0e:	4a34      	ldr	r2, [pc, #208]	@ (800afe0 <shift_sub_rows+0x130>)
 800af10:	5c52      	ldrb	r2, [r2, r1]
 800af12:	701a      	strb	r2, [r3, #0]
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	3309      	adds	r3, #9
 800af18:	781b      	ldrb	r3, [r3, #0]
 800af1a:	4619      	mov	r1, r3
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	3305      	adds	r3, #5
 800af20:	4a2f      	ldr	r2, [pc, #188]	@ (800afe0 <shift_sub_rows+0x130>)
 800af22:	5c52      	ldrb	r2, [r2, r1]
 800af24:	701a      	strb	r2, [r3, #0]
    st[ 9] = s_box(st[13]); st[13] = s_box( tt );
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	330d      	adds	r3, #13
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	4619      	mov	r1, r3
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	3309      	adds	r3, #9
 800af32:	4a2b      	ldr	r2, [pc, #172]	@ (800afe0 <shift_sub_rows+0x130>)
 800af34:	5c52      	ldrb	r2, [r2, r1]
 800af36:	701a      	strb	r2, [r3, #0]
 800af38:	7bfa      	ldrb	r2, [r7, #15]
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	330d      	adds	r3, #13
 800af3e:	4928      	ldr	r1, [pc, #160]	@ (800afe0 <shift_sub_rows+0x130>)
 800af40:	5c8a      	ldrb	r2, [r1, r2]
 800af42:	701a      	strb	r2, [r3, #0]

    tt = st[2]; st[ 2] = s_box(st[10]); st[10] = s_box( tt );
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	789b      	ldrb	r3, [r3, #2]
 800af48:	73fb      	strb	r3, [r7, #15]
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	330a      	adds	r3, #10
 800af4e:	781b      	ldrb	r3, [r3, #0]
 800af50:	4619      	mov	r1, r3
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3302      	adds	r3, #2
 800af56:	4a22      	ldr	r2, [pc, #136]	@ (800afe0 <shift_sub_rows+0x130>)
 800af58:	5c52      	ldrb	r2, [r2, r1]
 800af5a:	701a      	strb	r2, [r3, #0]
 800af5c:	7bfa      	ldrb	r2, [r7, #15]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	330a      	adds	r3, #10
 800af62:	491f      	ldr	r1, [pc, #124]	@ (800afe0 <shift_sub_rows+0x130>)
 800af64:	5c8a      	ldrb	r2, [r1, r2]
 800af66:	701a      	strb	r2, [r3, #0]
    tt = st[6]; st[ 6] = s_box(st[14]); st[14] = s_box( tt );
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	799b      	ldrb	r3, [r3, #6]
 800af6c:	73fb      	strb	r3, [r7, #15]
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	330e      	adds	r3, #14
 800af72:	781b      	ldrb	r3, [r3, #0]
 800af74:	4619      	mov	r1, r3
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	3306      	adds	r3, #6
 800af7a:	4a19      	ldr	r2, [pc, #100]	@ (800afe0 <shift_sub_rows+0x130>)
 800af7c:	5c52      	ldrb	r2, [r2, r1]
 800af7e:	701a      	strb	r2, [r3, #0]
 800af80:	7bfa      	ldrb	r2, [r7, #15]
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	330e      	adds	r3, #14
 800af86:	4916      	ldr	r1, [pc, #88]	@ (800afe0 <shift_sub_rows+0x130>)
 800af88:	5c8a      	ldrb	r2, [r1, r2]
 800af8a:	701a      	strb	r2, [r3, #0]

    tt = st[15]; st[15] = s_box(st[11]); st[11] = s_box(st[ 7]);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	7bdb      	ldrb	r3, [r3, #15]
 800af90:	73fb      	strb	r3, [r7, #15]
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	330b      	adds	r3, #11
 800af96:	781b      	ldrb	r3, [r3, #0]
 800af98:	4619      	mov	r1, r3
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	330f      	adds	r3, #15
 800af9e:	4a10      	ldr	r2, [pc, #64]	@ (800afe0 <shift_sub_rows+0x130>)
 800afa0:	5c52      	ldrb	r2, [r2, r1]
 800afa2:	701a      	strb	r2, [r3, #0]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	3307      	adds	r3, #7
 800afa8:	781b      	ldrb	r3, [r3, #0]
 800afaa:	4619      	mov	r1, r3
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	330b      	adds	r3, #11
 800afb0:	4a0b      	ldr	r2, [pc, #44]	@ (800afe0 <shift_sub_rows+0x130>)
 800afb2:	5c52      	ldrb	r2, [r2, r1]
 800afb4:	701a      	strb	r2, [r3, #0]
    st[ 7] = s_box(st[ 3]); st[ 3] = s_box( tt );
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3303      	adds	r3, #3
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	4619      	mov	r1, r3
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	3307      	adds	r3, #7
 800afc2:	4a07      	ldr	r2, [pc, #28]	@ (800afe0 <shift_sub_rows+0x130>)
 800afc4:	5c52      	ldrb	r2, [r2, r1]
 800afc6:	701a      	strb	r2, [r3, #0]
 800afc8:	7bfa      	ldrb	r2, [r7, #15]
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3303      	adds	r3, #3
 800afce:	4904      	ldr	r1, [pc, #16]	@ (800afe0 <shift_sub_rows+0x130>)
 800afd0:	5c8a      	ldrb	r2, [r1, r2]
 800afd2:	701a      	strb	r2, [r3, #0]
}
 800afd4:	bf00      	nop
 800afd6:	3714      	adds	r7, #20
 800afd8:	46bd      	mov	sp, r7
 800afda:	bc80      	pop	{r7}
 800afdc:	4770      	bx	lr
 800afde:	bf00      	nop
 800afe0:	0801c1b8 	.word	0x0801c1b8

0800afe4 <mix_sub_columns>:

#endif

#if defined( VERSION_1 )
  static void mix_sub_columns( uint8_t dt[N_BLOCK] )
  { uint8_t st[N_BLOCK];
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b086      	sub	sp, #24
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
    block_copy(st, dt);
 800afec:	f107 0308 	add.w	r3, r7, #8
 800aff0:	6879      	ldr	r1, [r7, #4]
 800aff2:	4618      	mov	r0, r3
 800aff4:	f7ff fd6c 	bl	800aad0 <copy_block>
#else
  static void mix_sub_columns( uint8_t dt[N_BLOCK], uint8_t st[N_BLOCK] )
  {
#endif
    dt[ 0] = gfm2_sb(st[0]) ^ gfm3_sb(st[5]) ^ s_box(st[10]) ^ s_box(st[15]);
 800aff8:	7a3b      	ldrb	r3, [r7, #8]
 800affa:	461a      	mov	r2, r3
 800affc:	4b9a      	ldr	r3, [pc, #616]	@ (800b268 <mix_sub_columns+0x284>)
 800affe:	5c9a      	ldrb	r2, [r3, r2]
 800b000:	7b7b      	ldrb	r3, [r7, #13]
 800b002:	4619      	mov	r1, r3
 800b004:	4b99      	ldr	r3, [pc, #612]	@ (800b26c <mix_sub_columns+0x288>)
 800b006:	5c5b      	ldrb	r3, [r3, r1]
 800b008:	4053      	eors	r3, r2
 800b00a:	b2da      	uxtb	r2, r3
 800b00c:	7cbb      	ldrb	r3, [r7, #18]
 800b00e:	4619      	mov	r1, r3
 800b010:	4b97      	ldr	r3, [pc, #604]	@ (800b270 <mix_sub_columns+0x28c>)
 800b012:	5c5b      	ldrb	r3, [r3, r1]
 800b014:	4053      	eors	r3, r2
 800b016:	b2da      	uxtb	r2, r3
 800b018:	7dfb      	ldrb	r3, [r7, #23]
 800b01a:	4619      	mov	r1, r3
 800b01c:	4b94      	ldr	r3, [pc, #592]	@ (800b270 <mix_sub_columns+0x28c>)
 800b01e:	5c5b      	ldrb	r3, [r3, r1]
 800b020:	4053      	eors	r3, r2
 800b022:	b2da      	uxtb	r2, r3
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	701a      	strb	r2, [r3, #0]
    dt[ 1] = s_box(st[0]) ^ gfm2_sb(st[5]) ^ gfm3_sb(st[10]) ^ s_box(st[15]);
 800b028:	7a3b      	ldrb	r3, [r7, #8]
 800b02a:	461a      	mov	r2, r3
 800b02c:	4b90      	ldr	r3, [pc, #576]	@ (800b270 <mix_sub_columns+0x28c>)
 800b02e:	5c9a      	ldrb	r2, [r3, r2]
 800b030:	7b7b      	ldrb	r3, [r7, #13]
 800b032:	4619      	mov	r1, r3
 800b034:	4b8c      	ldr	r3, [pc, #560]	@ (800b268 <mix_sub_columns+0x284>)
 800b036:	5c5b      	ldrb	r3, [r3, r1]
 800b038:	4053      	eors	r3, r2
 800b03a:	b2da      	uxtb	r2, r3
 800b03c:	7cbb      	ldrb	r3, [r7, #18]
 800b03e:	4619      	mov	r1, r3
 800b040:	4b8a      	ldr	r3, [pc, #552]	@ (800b26c <mix_sub_columns+0x288>)
 800b042:	5c5b      	ldrb	r3, [r3, r1]
 800b044:	4053      	eors	r3, r2
 800b046:	b2d9      	uxtb	r1, r3
 800b048:	7dfb      	ldrb	r3, [r7, #23]
 800b04a:	461a      	mov	r2, r3
 800b04c:	4b88      	ldr	r3, [pc, #544]	@ (800b270 <mix_sub_columns+0x28c>)
 800b04e:	5c9a      	ldrb	r2, [r3, r2]
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	3301      	adds	r3, #1
 800b054:	404a      	eors	r2, r1
 800b056:	b2d2      	uxtb	r2, r2
 800b058:	701a      	strb	r2, [r3, #0]
    dt[ 2] = s_box(st[0]) ^ s_box(st[5]) ^ gfm2_sb(st[10]) ^ gfm3_sb(st[15]);
 800b05a:	7a3b      	ldrb	r3, [r7, #8]
 800b05c:	461a      	mov	r2, r3
 800b05e:	4b84      	ldr	r3, [pc, #528]	@ (800b270 <mix_sub_columns+0x28c>)
 800b060:	5c9a      	ldrb	r2, [r3, r2]
 800b062:	7b7b      	ldrb	r3, [r7, #13]
 800b064:	4619      	mov	r1, r3
 800b066:	4b82      	ldr	r3, [pc, #520]	@ (800b270 <mix_sub_columns+0x28c>)
 800b068:	5c5b      	ldrb	r3, [r3, r1]
 800b06a:	4053      	eors	r3, r2
 800b06c:	b2da      	uxtb	r2, r3
 800b06e:	7cbb      	ldrb	r3, [r7, #18]
 800b070:	4619      	mov	r1, r3
 800b072:	4b7d      	ldr	r3, [pc, #500]	@ (800b268 <mix_sub_columns+0x284>)
 800b074:	5c5b      	ldrb	r3, [r3, r1]
 800b076:	4053      	eors	r3, r2
 800b078:	b2d9      	uxtb	r1, r3
 800b07a:	7dfb      	ldrb	r3, [r7, #23]
 800b07c:	461a      	mov	r2, r3
 800b07e:	4b7b      	ldr	r3, [pc, #492]	@ (800b26c <mix_sub_columns+0x288>)
 800b080:	5c9a      	ldrb	r2, [r3, r2]
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	3302      	adds	r3, #2
 800b086:	404a      	eors	r2, r1
 800b088:	b2d2      	uxtb	r2, r2
 800b08a:	701a      	strb	r2, [r3, #0]
    dt[ 3] = gfm3_sb(st[0]) ^ s_box(st[5]) ^ s_box(st[10]) ^ gfm2_sb(st[15]);
 800b08c:	7a3b      	ldrb	r3, [r7, #8]
 800b08e:	461a      	mov	r2, r3
 800b090:	4b76      	ldr	r3, [pc, #472]	@ (800b26c <mix_sub_columns+0x288>)
 800b092:	5c9a      	ldrb	r2, [r3, r2]
 800b094:	7b7b      	ldrb	r3, [r7, #13]
 800b096:	4619      	mov	r1, r3
 800b098:	4b75      	ldr	r3, [pc, #468]	@ (800b270 <mix_sub_columns+0x28c>)
 800b09a:	5c5b      	ldrb	r3, [r3, r1]
 800b09c:	4053      	eors	r3, r2
 800b09e:	b2da      	uxtb	r2, r3
 800b0a0:	7cbb      	ldrb	r3, [r7, #18]
 800b0a2:	4619      	mov	r1, r3
 800b0a4:	4b72      	ldr	r3, [pc, #456]	@ (800b270 <mix_sub_columns+0x28c>)
 800b0a6:	5c5b      	ldrb	r3, [r3, r1]
 800b0a8:	4053      	eors	r3, r2
 800b0aa:	b2d9      	uxtb	r1, r3
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	4b6d      	ldr	r3, [pc, #436]	@ (800b268 <mix_sub_columns+0x284>)
 800b0b2:	5c9a      	ldrb	r2, [r3, r2]
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3303      	adds	r3, #3
 800b0b8:	404a      	eors	r2, r1
 800b0ba:	b2d2      	uxtb	r2, r2
 800b0bc:	701a      	strb	r2, [r3, #0]

    dt[ 4] = gfm2_sb(st[4]) ^ gfm3_sb(st[9]) ^ s_box(st[14]) ^ s_box(st[3]);
 800b0be:	7b3b      	ldrb	r3, [r7, #12]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	4b69      	ldr	r3, [pc, #420]	@ (800b268 <mix_sub_columns+0x284>)
 800b0c4:	5c9a      	ldrb	r2, [r3, r2]
 800b0c6:	7c7b      	ldrb	r3, [r7, #17]
 800b0c8:	4619      	mov	r1, r3
 800b0ca:	4b68      	ldr	r3, [pc, #416]	@ (800b26c <mix_sub_columns+0x288>)
 800b0cc:	5c5b      	ldrb	r3, [r3, r1]
 800b0ce:	4053      	eors	r3, r2
 800b0d0:	b2da      	uxtb	r2, r3
 800b0d2:	7dbb      	ldrb	r3, [r7, #22]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	4b66      	ldr	r3, [pc, #408]	@ (800b270 <mix_sub_columns+0x28c>)
 800b0d8:	5c5b      	ldrb	r3, [r3, r1]
 800b0da:	4053      	eors	r3, r2
 800b0dc:	b2d9      	uxtb	r1, r3
 800b0de:	7afb      	ldrb	r3, [r7, #11]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4b63      	ldr	r3, [pc, #396]	@ (800b270 <mix_sub_columns+0x28c>)
 800b0e4:	5c9a      	ldrb	r2, [r3, r2]
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3304      	adds	r3, #4
 800b0ea:	404a      	eors	r2, r1
 800b0ec:	b2d2      	uxtb	r2, r2
 800b0ee:	701a      	strb	r2, [r3, #0]
    dt[ 5] = s_box(st[4]) ^ gfm2_sb(st[9]) ^ gfm3_sb(st[14]) ^ s_box(st[3]);
 800b0f0:	7b3b      	ldrb	r3, [r7, #12]
 800b0f2:	461a      	mov	r2, r3
 800b0f4:	4b5e      	ldr	r3, [pc, #376]	@ (800b270 <mix_sub_columns+0x28c>)
 800b0f6:	5c9a      	ldrb	r2, [r3, r2]
 800b0f8:	7c7b      	ldrb	r3, [r7, #17]
 800b0fa:	4619      	mov	r1, r3
 800b0fc:	4b5a      	ldr	r3, [pc, #360]	@ (800b268 <mix_sub_columns+0x284>)
 800b0fe:	5c5b      	ldrb	r3, [r3, r1]
 800b100:	4053      	eors	r3, r2
 800b102:	b2da      	uxtb	r2, r3
 800b104:	7dbb      	ldrb	r3, [r7, #22]
 800b106:	4619      	mov	r1, r3
 800b108:	4b58      	ldr	r3, [pc, #352]	@ (800b26c <mix_sub_columns+0x288>)
 800b10a:	5c5b      	ldrb	r3, [r3, r1]
 800b10c:	4053      	eors	r3, r2
 800b10e:	b2d9      	uxtb	r1, r3
 800b110:	7afb      	ldrb	r3, [r7, #11]
 800b112:	461a      	mov	r2, r3
 800b114:	4b56      	ldr	r3, [pc, #344]	@ (800b270 <mix_sub_columns+0x28c>)
 800b116:	5c9a      	ldrb	r2, [r3, r2]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	3305      	adds	r3, #5
 800b11c:	404a      	eors	r2, r1
 800b11e:	b2d2      	uxtb	r2, r2
 800b120:	701a      	strb	r2, [r3, #0]
    dt[ 6] = s_box(st[4]) ^ s_box(st[9]) ^ gfm2_sb(st[14]) ^ gfm3_sb(st[3]);
 800b122:	7b3b      	ldrb	r3, [r7, #12]
 800b124:	461a      	mov	r2, r3
 800b126:	4b52      	ldr	r3, [pc, #328]	@ (800b270 <mix_sub_columns+0x28c>)
 800b128:	5c9a      	ldrb	r2, [r3, r2]
 800b12a:	7c7b      	ldrb	r3, [r7, #17]
 800b12c:	4619      	mov	r1, r3
 800b12e:	4b50      	ldr	r3, [pc, #320]	@ (800b270 <mix_sub_columns+0x28c>)
 800b130:	5c5b      	ldrb	r3, [r3, r1]
 800b132:	4053      	eors	r3, r2
 800b134:	b2da      	uxtb	r2, r3
 800b136:	7dbb      	ldrb	r3, [r7, #22]
 800b138:	4619      	mov	r1, r3
 800b13a:	4b4b      	ldr	r3, [pc, #300]	@ (800b268 <mix_sub_columns+0x284>)
 800b13c:	5c5b      	ldrb	r3, [r3, r1]
 800b13e:	4053      	eors	r3, r2
 800b140:	b2d9      	uxtb	r1, r3
 800b142:	7afb      	ldrb	r3, [r7, #11]
 800b144:	461a      	mov	r2, r3
 800b146:	4b49      	ldr	r3, [pc, #292]	@ (800b26c <mix_sub_columns+0x288>)
 800b148:	5c9a      	ldrb	r2, [r3, r2]
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	3306      	adds	r3, #6
 800b14e:	404a      	eors	r2, r1
 800b150:	b2d2      	uxtb	r2, r2
 800b152:	701a      	strb	r2, [r3, #0]
    dt[ 7] = gfm3_sb(st[4]) ^ s_box(st[9]) ^ s_box(st[14]) ^ gfm2_sb(st[3]);
 800b154:	7b3b      	ldrb	r3, [r7, #12]
 800b156:	461a      	mov	r2, r3
 800b158:	4b44      	ldr	r3, [pc, #272]	@ (800b26c <mix_sub_columns+0x288>)
 800b15a:	5c9a      	ldrb	r2, [r3, r2]
 800b15c:	7c7b      	ldrb	r3, [r7, #17]
 800b15e:	4619      	mov	r1, r3
 800b160:	4b43      	ldr	r3, [pc, #268]	@ (800b270 <mix_sub_columns+0x28c>)
 800b162:	5c5b      	ldrb	r3, [r3, r1]
 800b164:	4053      	eors	r3, r2
 800b166:	b2da      	uxtb	r2, r3
 800b168:	7dbb      	ldrb	r3, [r7, #22]
 800b16a:	4619      	mov	r1, r3
 800b16c:	4b40      	ldr	r3, [pc, #256]	@ (800b270 <mix_sub_columns+0x28c>)
 800b16e:	5c5b      	ldrb	r3, [r3, r1]
 800b170:	4053      	eors	r3, r2
 800b172:	b2d9      	uxtb	r1, r3
 800b174:	7afb      	ldrb	r3, [r7, #11]
 800b176:	461a      	mov	r2, r3
 800b178:	4b3b      	ldr	r3, [pc, #236]	@ (800b268 <mix_sub_columns+0x284>)
 800b17a:	5c9a      	ldrb	r2, [r3, r2]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	3307      	adds	r3, #7
 800b180:	404a      	eors	r2, r1
 800b182:	b2d2      	uxtb	r2, r2
 800b184:	701a      	strb	r2, [r3, #0]

    dt[ 8] = gfm2_sb(st[8]) ^ gfm3_sb(st[13]) ^ s_box(st[2]) ^ s_box(st[7]);
 800b186:	7c3b      	ldrb	r3, [r7, #16]
 800b188:	461a      	mov	r2, r3
 800b18a:	4b37      	ldr	r3, [pc, #220]	@ (800b268 <mix_sub_columns+0x284>)
 800b18c:	5c9a      	ldrb	r2, [r3, r2]
 800b18e:	7d7b      	ldrb	r3, [r7, #21]
 800b190:	4619      	mov	r1, r3
 800b192:	4b36      	ldr	r3, [pc, #216]	@ (800b26c <mix_sub_columns+0x288>)
 800b194:	5c5b      	ldrb	r3, [r3, r1]
 800b196:	4053      	eors	r3, r2
 800b198:	b2da      	uxtb	r2, r3
 800b19a:	7abb      	ldrb	r3, [r7, #10]
 800b19c:	4619      	mov	r1, r3
 800b19e:	4b34      	ldr	r3, [pc, #208]	@ (800b270 <mix_sub_columns+0x28c>)
 800b1a0:	5c5b      	ldrb	r3, [r3, r1]
 800b1a2:	4053      	eors	r3, r2
 800b1a4:	b2d9      	uxtb	r1, r3
 800b1a6:	7bfb      	ldrb	r3, [r7, #15]
 800b1a8:	461a      	mov	r2, r3
 800b1aa:	4b31      	ldr	r3, [pc, #196]	@ (800b270 <mix_sub_columns+0x28c>)
 800b1ac:	5c9a      	ldrb	r2, [r3, r2]
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	404a      	eors	r2, r1
 800b1b4:	b2d2      	uxtb	r2, r2
 800b1b6:	701a      	strb	r2, [r3, #0]
    dt[ 9] = s_box(st[8]) ^ gfm2_sb(st[13]) ^ gfm3_sb(st[2]) ^ s_box(st[7]);
 800b1b8:	7c3b      	ldrb	r3, [r7, #16]
 800b1ba:	461a      	mov	r2, r3
 800b1bc:	4b2c      	ldr	r3, [pc, #176]	@ (800b270 <mix_sub_columns+0x28c>)
 800b1be:	5c9a      	ldrb	r2, [r3, r2]
 800b1c0:	7d7b      	ldrb	r3, [r7, #21]
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	4b28      	ldr	r3, [pc, #160]	@ (800b268 <mix_sub_columns+0x284>)
 800b1c6:	5c5b      	ldrb	r3, [r3, r1]
 800b1c8:	4053      	eors	r3, r2
 800b1ca:	b2da      	uxtb	r2, r3
 800b1cc:	7abb      	ldrb	r3, [r7, #10]
 800b1ce:	4619      	mov	r1, r3
 800b1d0:	4b26      	ldr	r3, [pc, #152]	@ (800b26c <mix_sub_columns+0x288>)
 800b1d2:	5c5b      	ldrb	r3, [r3, r1]
 800b1d4:	4053      	eors	r3, r2
 800b1d6:	b2d9      	uxtb	r1, r3
 800b1d8:	7bfb      	ldrb	r3, [r7, #15]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	4b24      	ldr	r3, [pc, #144]	@ (800b270 <mix_sub_columns+0x28c>)
 800b1de:	5c9a      	ldrb	r2, [r3, r2]
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3309      	adds	r3, #9
 800b1e4:	404a      	eors	r2, r1
 800b1e6:	b2d2      	uxtb	r2, r2
 800b1e8:	701a      	strb	r2, [r3, #0]
    dt[10] = s_box(st[8]) ^ s_box(st[13]) ^ gfm2_sb(st[2]) ^ gfm3_sb(st[7]);
 800b1ea:	7c3b      	ldrb	r3, [r7, #16]
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	4b20      	ldr	r3, [pc, #128]	@ (800b270 <mix_sub_columns+0x28c>)
 800b1f0:	5c9a      	ldrb	r2, [r3, r2]
 800b1f2:	7d7b      	ldrb	r3, [r7, #21]
 800b1f4:	4619      	mov	r1, r3
 800b1f6:	4b1e      	ldr	r3, [pc, #120]	@ (800b270 <mix_sub_columns+0x28c>)
 800b1f8:	5c5b      	ldrb	r3, [r3, r1]
 800b1fa:	4053      	eors	r3, r2
 800b1fc:	b2da      	uxtb	r2, r3
 800b1fe:	7abb      	ldrb	r3, [r7, #10]
 800b200:	4619      	mov	r1, r3
 800b202:	4b19      	ldr	r3, [pc, #100]	@ (800b268 <mix_sub_columns+0x284>)
 800b204:	5c5b      	ldrb	r3, [r3, r1]
 800b206:	4053      	eors	r3, r2
 800b208:	b2d9      	uxtb	r1, r3
 800b20a:	7bfb      	ldrb	r3, [r7, #15]
 800b20c:	461a      	mov	r2, r3
 800b20e:	4b17      	ldr	r3, [pc, #92]	@ (800b26c <mix_sub_columns+0x288>)
 800b210:	5c9a      	ldrb	r2, [r3, r2]
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	330a      	adds	r3, #10
 800b216:	404a      	eors	r2, r1
 800b218:	b2d2      	uxtb	r2, r2
 800b21a:	701a      	strb	r2, [r3, #0]
    dt[11] = gfm3_sb(st[8]) ^ s_box(st[13]) ^ s_box(st[2]) ^ gfm2_sb(st[7]);
 800b21c:	7c3b      	ldrb	r3, [r7, #16]
 800b21e:	461a      	mov	r2, r3
 800b220:	4b12      	ldr	r3, [pc, #72]	@ (800b26c <mix_sub_columns+0x288>)
 800b222:	5c9a      	ldrb	r2, [r3, r2]
 800b224:	7d7b      	ldrb	r3, [r7, #21]
 800b226:	4619      	mov	r1, r3
 800b228:	4b11      	ldr	r3, [pc, #68]	@ (800b270 <mix_sub_columns+0x28c>)
 800b22a:	5c5b      	ldrb	r3, [r3, r1]
 800b22c:	4053      	eors	r3, r2
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	7abb      	ldrb	r3, [r7, #10]
 800b232:	4619      	mov	r1, r3
 800b234:	4b0e      	ldr	r3, [pc, #56]	@ (800b270 <mix_sub_columns+0x28c>)
 800b236:	5c5b      	ldrb	r3, [r3, r1]
 800b238:	4053      	eors	r3, r2
 800b23a:	b2d9      	uxtb	r1, r3
 800b23c:	7bfb      	ldrb	r3, [r7, #15]
 800b23e:	461a      	mov	r2, r3
 800b240:	4b09      	ldr	r3, [pc, #36]	@ (800b268 <mix_sub_columns+0x284>)
 800b242:	5c9a      	ldrb	r2, [r3, r2]
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	330b      	adds	r3, #11
 800b248:	404a      	eors	r2, r1
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]

    dt[12] = gfm2_sb(st[12]) ^ gfm3_sb(st[1]) ^ s_box(st[6]) ^ s_box(st[11]);
 800b24e:	7d3b      	ldrb	r3, [r7, #20]
 800b250:	461a      	mov	r2, r3
 800b252:	4b05      	ldr	r3, [pc, #20]	@ (800b268 <mix_sub_columns+0x284>)
 800b254:	5c9a      	ldrb	r2, [r3, r2]
 800b256:	7a7b      	ldrb	r3, [r7, #9]
 800b258:	4619      	mov	r1, r3
 800b25a:	4b04      	ldr	r3, [pc, #16]	@ (800b26c <mix_sub_columns+0x288>)
 800b25c:	5c5b      	ldrb	r3, [r3, r1]
 800b25e:	4053      	eors	r3, r2
 800b260:	b2da      	uxtb	r2, r3
 800b262:	7bbb      	ldrb	r3, [r7, #14]
 800b264:	4619      	mov	r1, r3
 800b266:	e005      	b.n	800b274 <mix_sub_columns+0x290>
 800b268:	0801c2b8 	.word	0x0801c2b8
 800b26c:	0801c3b8 	.word	0x0801c3b8
 800b270:	0801c1b8 	.word	0x0801c1b8
 800b274:	4b2d      	ldr	r3, [pc, #180]	@ (800b32c <mix_sub_columns+0x348>)
 800b276:	5c5b      	ldrb	r3, [r3, r1]
 800b278:	4053      	eors	r3, r2
 800b27a:	b2d9      	uxtb	r1, r3
 800b27c:	7cfb      	ldrb	r3, [r7, #19]
 800b27e:	461a      	mov	r2, r3
 800b280:	4b2a      	ldr	r3, [pc, #168]	@ (800b32c <mix_sub_columns+0x348>)
 800b282:	5c9a      	ldrb	r2, [r3, r2]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	330c      	adds	r3, #12
 800b288:	404a      	eors	r2, r1
 800b28a:	b2d2      	uxtb	r2, r2
 800b28c:	701a      	strb	r2, [r3, #0]
    dt[13] = s_box(st[12]) ^ gfm2_sb(st[1]) ^ gfm3_sb(st[6]) ^ s_box(st[11]);
 800b28e:	7d3b      	ldrb	r3, [r7, #20]
 800b290:	461a      	mov	r2, r3
 800b292:	4b26      	ldr	r3, [pc, #152]	@ (800b32c <mix_sub_columns+0x348>)
 800b294:	5c9a      	ldrb	r2, [r3, r2]
 800b296:	7a7b      	ldrb	r3, [r7, #9]
 800b298:	4619      	mov	r1, r3
 800b29a:	4b25      	ldr	r3, [pc, #148]	@ (800b330 <mix_sub_columns+0x34c>)
 800b29c:	5c5b      	ldrb	r3, [r3, r1]
 800b29e:	4053      	eors	r3, r2
 800b2a0:	b2da      	uxtb	r2, r3
 800b2a2:	7bbb      	ldrb	r3, [r7, #14]
 800b2a4:	4619      	mov	r1, r3
 800b2a6:	4b23      	ldr	r3, [pc, #140]	@ (800b334 <mix_sub_columns+0x350>)
 800b2a8:	5c5b      	ldrb	r3, [r3, r1]
 800b2aa:	4053      	eors	r3, r2
 800b2ac:	b2d9      	uxtb	r1, r3
 800b2ae:	7cfb      	ldrb	r3, [r7, #19]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	4b1e      	ldr	r3, [pc, #120]	@ (800b32c <mix_sub_columns+0x348>)
 800b2b4:	5c9a      	ldrb	r2, [r3, r2]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	330d      	adds	r3, #13
 800b2ba:	404a      	eors	r2, r1
 800b2bc:	b2d2      	uxtb	r2, r2
 800b2be:	701a      	strb	r2, [r3, #0]
    dt[14] = s_box(st[12]) ^ s_box(st[1]) ^ gfm2_sb(st[6]) ^ gfm3_sb(st[11]);
 800b2c0:	7d3b      	ldrb	r3, [r7, #20]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	4b19      	ldr	r3, [pc, #100]	@ (800b32c <mix_sub_columns+0x348>)
 800b2c6:	5c9a      	ldrb	r2, [r3, r2]
 800b2c8:	7a7b      	ldrb	r3, [r7, #9]
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4b17      	ldr	r3, [pc, #92]	@ (800b32c <mix_sub_columns+0x348>)
 800b2ce:	5c5b      	ldrb	r3, [r3, r1]
 800b2d0:	4053      	eors	r3, r2
 800b2d2:	b2da      	uxtb	r2, r3
 800b2d4:	7bbb      	ldrb	r3, [r7, #14]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	4b15      	ldr	r3, [pc, #84]	@ (800b330 <mix_sub_columns+0x34c>)
 800b2da:	5c5b      	ldrb	r3, [r3, r1]
 800b2dc:	4053      	eors	r3, r2
 800b2de:	b2d9      	uxtb	r1, r3
 800b2e0:	7cfb      	ldrb	r3, [r7, #19]
 800b2e2:	461a      	mov	r2, r3
 800b2e4:	4b13      	ldr	r3, [pc, #76]	@ (800b334 <mix_sub_columns+0x350>)
 800b2e6:	5c9a      	ldrb	r2, [r3, r2]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	330e      	adds	r3, #14
 800b2ec:	404a      	eors	r2, r1
 800b2ee:	b2d2      	uxtb	r2, r2
 800b2f0:	701a      	strb	r2, [r3, #0]
    dt[15] = gfm3_sb(st[12]) ^ s_box(st[1]) ^ s_box(st[6]) ^ gfm2_sb(st[11]);
 800b2f2:	7d3b      	ldrb	r3, [r7, #20]
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	4b0f      	ldr	r3, [pc, #60]	@ (800b334 <mix_sub_columns+0x350>)
 800b2f8:	5c9a      	ldrb	r2, [r3, r2]
 800b2fa:	7a7b      	ldrb	r3, [r7, #9]
 800b2fc:	4619      	mov	r1, r3
 800b2fe:	4b0b      	ldr	r3, [pc, #44]	@ (800b32c <mix_sub_columns+0x348>)
 800b300:	5c5b      	ldrb	r3, [r3, r1]
 800b302:	4053      	eors	r3, r2
 800b304:	b2da      	uxtb	r2, r3
 800b306:	7bbb      	ldrb	r3, [r7, #14]
 800b308:	4619      	mov	r1, r3
 800b30a:	4b08      	ldr	r3, [pc, #32]	@ (800b32c <mix_sub_columns+0x348>)
 800b30c:	5c5b      	ldrb	r3, [r3, r1]
 800b30e:	4053      	eors	r3, r2
 800b310:	b2d9      	uxtb	r1, r3
 800b312:	7cfb      	ldrb	r3, [r7, #19]
 800b314:	461a      	mov	r2, r3
 800b316:	4b06      	ldr	r3, [pc, #24]	@ (800b330 <mix_sub_columns+0x34c>)
 800b318:	5c9a      	ldrb	r2, [r3, r2]
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	330f      	adds	r3, #15
 800b31e:	404a      	eors	r2, r1
 800b320:	b2d2      	uxtb	r2, r2
 800b322:	701a      	strb	r2, [r3, #0]
  }
 800b324:	bf00      	nop
 800b326:	3718      	adds	r7, #24
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	0801c1b8 	.word	0x0801c1b8
 800b330:	0801c2b8 	.word	0x0801c2b8
 800b334:	0801c3b8 	.word	0x0801c3b8

0800b338 <lorawan_aes_set_key>:
#if defined( AES_ENC_PREKEYED ) || defined( AES_DEC_PREKEYED )

/*  Set the cipher key for the pre-keyed version */

return_type lorawan_aes_set_key( const uint8_t key[], length_type keylen, lorawan_aes_context ctx[1] )
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b086      	sub	sp, #24
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	460b      	mov	r3, r1
 800b342:	607a      	str	r2, [r7, #4]
 800b344:	72fb      	strb	r3, [r7, #11]
    uint8_t cc, rc, hi;

    switch( keylen )
 800b346:	7afb      	ldrb	r3, [r7, #11]
 800b348:	3b10      	subs	r3, #16
 800b34a:	2b10      	cmp	r3, #16
 800b34c:	bf8c      	ite	hi
 800b34e:	2201      	movhi	r2, #1
 800b350:	2200      	movls	r2, #0
 800b352:	b2d2      	uxtb	r2, r2
 800b354:	2a00      	cmp	r2, #0
 800b356:	d10b      	bne.n	800b370 <lorawan_aes_set_key+0x38>
 800b358:	4a64      	ldr	r2, [pc, #400]	@ (800b4ec <lorawan_aes_set_key+0x1b4>)
 800b35a:	fa22 f303 	lsr.w	r3, r2, r3
 800b35e:	f003 0301 	and.w	r3, r3, #1
 800b362:	2b00      	cmp	r3, #0
 800b364:	bf14      	ite	ne
 800b366:	2301      	movne	r3, #1
 800b368:	2300      	moveq	r3, #0
 800b36a:	b2db      	uxtb	r3, r3
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d105      	bne.n	800b37c <lorawan_aes_set_key+0x44>
    case 16:
    case 24:
    case 32:
        break;
    default:
        ctx->rnd = 0;
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	2200      	movs	r2, #0
 800b374:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
        return ( uint8_t )-1;
 800b378:	23ff      	movs	r3, #255	@ 0xff
 800b37a:	e0b2      	b.n	800b4e2 <lorawan_aes_set_key+0x1aa>
        break;
 800b37c:	bf00      	nop
    }
    block_copy_nn(ctx->ksch, key, keylen);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	7afa      	ldrb	r2, [r7, #11]
 800b382:	68f9      	ldr	r1, [r7, #12]
 800b384:	4618      	mov	r0, r3
 800b386:	f7ff fbfc 	bl	800ab82 <copy_block_nn>
    hi = (keylen + 28) << 2;
 800b38a:	7afb      	ldrb	r3, [r7, #11]
 800b38c:	331c      	adds	r3, #28
 800b38e:	b2db      	uxtb	r3, r3
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	747b      	strb	r3, [r7, #17]
    ctx->rnd = (hi >> 4) - 1;
 800b394:	7c7b      	ldrb	r3, [r7, #17]
 800b396:	091b      	lsrs	r3, r3, #4
 800b398:	b2db      	uxtb	r3, r3
 800b39a:	3b01      	subs	r3, #1
 800b39c:	b2da      	uxtb	r2, r3
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f883 20f0 	strb.w	r2, [r3, #240]	@ 0xf0
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b3a4:	7afb      	ldrb	r3, [r7, #11]
 800b3a6:	75fb      	strb	r3, [r7, #23]
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	75bb      	strb	r3, [r7, #22]
 800b3ac:	e093      	b.n	800b4d6 <lorawan_aes_set_key+0x19e>
    {   uint8_t tt, t0, t1, t2, t3;

        t0 = ctx->ksch[cc - 4];
 800b3ae:	7dfb      	ldrb	r3, [r7, #23]
 800b3b0:	3b04      	subs	r3, #4
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	5cd3      	ldrb	r3, [r2, r3]
 800b3b6:	757b      	strb	r3, [r7, #21]
        t1 = ctx->ksch[cc - 3];
 800b3b8:	7dfb      	ldrb	r3, [r7, #23]
 800b3ba:	3b03      	subs	r3, #3
 800b3bc:	687a      	ldr	r2, [r7, #4]
 800b3be:	5cd3      	ldrb	r3, [r2, r3]
 800b3c0:	753b      	strb	r3, [r7, #20]
        t2 = ctx->ksch[cc - 2];
 800b3c2:	7dfb      	ldrb	r3, [r7, #23]
 800b3c4:	3b02      	subs	r3, #2
 800b3c6:	687a      	ldr	r2, [r7, #4]
 800b3c8:	5cd3      	ldrb	r3, [r2, r3]
 800b3ca:	74fb      	strb	r3, [r7, #19]
        t3 = ctx->ksch[cc - 1];
 800b3cc:	7dfb      	ldrb	r3, [r7, #23]
 800b3ce:	3b01      	subs	r3, #1
 800b3d0:	687a      	ldr	r2, [r7, #4]
 800b3d2:	5cd3      	ldrb	r3, [r2, r3]
 800b3d4:	74bb      	strb	r3, [r7, #18]
        if( cc % keylen == 0 )
 800b3d6:	7dfb      	ldrb	r3, [r7, #23]
 800b3d8:	7afa      	ldrb	r2, [r7, #11]
 800b3da:	fbb3 f1f2 	udiv	r1, r3, r2
 800b3de:	fb01 f202 	mul.w	r2, r1, r2
 800b3e2:	1a9b      	subs	r3, r3, r2
 800b3e4:	b2db      	uxtb	r3, r3
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d127      	bne.n	800b43a <lorawan_aes_set_key+0x102>
        {
            tt = t0;
 800b3ea:	7d7b      	ldrb	r3, [r7, #21]
 800b3ec:	743b      	strb	r3, [r7, #16]
            t0 = s_box(t1) ^ rc;
 800b3ee:	7d3b      	ldrb	r3, [r7, #20]
 800b3f0:	4a3f      	ldr	r2, [pc, #252]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b3f2:	5cd2      	ldrb	r2, [r2, r3]
 800b3f4:	7dbb      	ldrb	r3, [r7, #22]
 800b3f6:	4053      	eors	r3, r2
 800b3f8:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t2);
 800b3fa:	7cfb      	ldrb	r3, [r7, #19]
 800b3fc:	4a3c      	ldr	r2, [pc, #240]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b3fe:	5cd3      	ldrb	r3, [r2, r3]
 800b400:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t3);
 800b402:	7cbb      	ldrb	r3, [r7, #18]
 800b404:	4a3a      	ldr	r2, [pc, #232]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b406:	5cd3      	ldrb	r3, [r2, r3]
 800b408:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(tt);
 800b40a:	7c3b      	ldrb	r3, [r7, #16]
 800b40c:	4a38      	ldr	r2, [pc, #224]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b40e:	5cd3      	ldrb	r3, [r2, r3]
 800b410:	74bb      	strb	r3, [r7, #18]
            rc = f2(rc);
 800b412:	7dbb      	ldrb	r3, [r7, #22]
 800b414:	005b      	lsls	r3, r3, #1
 800b416:	b25a      	sxtb	r2, r3
 800b418:	7dbb      	ldrb	r3, [r7, #22]
 800b41a:	09db      	lsrs	r3, r3, #7
 800b41c:	b2db      	uxtb	r3, r3
 800b41e:	4619      	mov	r1, r3
 800b420:	0049      	lsls	r1, r1, #1
 800b422:	440b      	add	r3, r1
 800b424:	4619      	mov	r1, r3
 800b426:	00c8      	lsls	r0, r1, #3
 800b428:	4619      	mov	r1, r3
 800b42a:	4603      	mov	r3, r0
 800b42c:	440b      	add	r3, r1
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	b25b      	sxtb	r3, r3
 800b432:	4053      	eors	r3, r2
 800b434:	b25b      	sxtb	r3, r3
 800b436:	75bb      	strb	r3, [r7, #22]
 800b438:	e01c      	b.n	800b474 <lorawan_aes_set_key+0x13c>
        }
        else if( keylen > 24 && cc % keylen == 16 )
 800b43a:	7afb      	ldrb	r3, [r7, #11]
 800b43c:	2b18      	cmp	r3, #24
 800b43e:	d919      	bls.n	800b474 <lorawan_aes_set_key+0x13c>
 800b440:	7dfb      	ldrb	r3, [r7, #23]
 800b442:	7afa      	ldrb	r2, [r7, #11]
 800b444:	fbb3 f1f2 	udiv	r1, r3, r2
 800b448:	fb01 f202 	mul.w	r2, r1, r2
 800b44c:	1a9b      	subs	r3, r3, r2
 800b44e:	b2db      	uxtb	r3, r3
 800b450:	2b10      	cmp	r3, #16
 800b452:	d10f      	bne.n	800b474 <lorawan_aes_set_key+0x13c>
        {
            t0 = s_box(t0);
 800b454:	7d7b      	ldrb	r3, [r7, #21]
 800b456:	4a26      	ldr	r2, [pc, #152]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b458:	5cd3      	ldrb	r3, [r2, r3]
 800b45a:	757b      	strb	r3, [r7, #21]
            t1 = s_box(t1);
 800b45c:	7d3b      	ldrb	r3, [r7, #20]
 800b45e:	4a24      	ldr	r2, [pc, #144]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b460:	5cd3      	ldrb	r3, [r2, r3]
 800b462:	753b      	strb	r3, [r7, #20]
            t2 = s_box(t2);
 800b464:	7cfb      	ldrb	r3, [r7, #19]
 800b466:	4a22      	ldr	r2, [pc, #136]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b468:	5cd3      	ldrb	r3, [r2, r3]
 800b46a:	74fb      	strb	r3, [r7, #19]
            t3 = s_box(t3);
 800b46c:	7cbb      	ldrb	r3, [r7, #18]
 800b46e:	4a20      	ldr	r2, [pc, #128]	@ (800b4f0 <lorawan_aes_set_key+0x1b8>)
 800b470:	5cd3      	ldrb	r3, [r2, r3]
 800b472:	74bb      	strb	r3, [r7, #18]
        }
        tt = cc - keylen;
 800b474:	7dfa      	ldrb	r2, [r7, #23]
 800b476:	7afb      	ldrb	r3, [r7, #11]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	743b      	strb	r3, [r7, #16]
        ctx->ksch[cc + 0] = ctx->ksch[tt + 0] ^ t0;
 800b47c:	7c3b      	ldrb	r3, [r7, #16]
 800b47e:	687a      	ldr	r2, [r7, #4]
 800b480:	5cd1      	ldrb	r1, [r2, r3]
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	7d7a      	ldrb	r2, [r7, #21]
 800b486:	404a      	eors	r2, r1
 800b488:	b2d1      	uxtb	r1, r2
 800b48a:	687a      	ldr	r2, [r7, #4]
 800b48c:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 1] = ctx->ksch[tt + 1] ^ t1;
 800b48e:	7c3b      	ldrb	r3, [r7, #16]
 800b490:	3301      	adds	r3, #1
 800b492:	687a      	ldr	r2, [r7, #4]
 800b494:	5cd1      	ldrb	r1, [r2, r3]
 800b496:	7dfb      	ldrb	r3, [r7, #23]
 800b498:	3301      	adds	r3, #1
 800b49a:	7d3a      	ldrb	r2, [r7, #20]
 800b49c:	404a      	eors	r2, r1
 800b49e:	b2d1      	uxtb	r1, r2
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 2] = ctx->ksch[tt + 2] ^ t2;
 800b4a4:	7c3b      	ldrb	r3, [r7, #16]
 800b4a6:	3302      	adds	r3, #2
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	5cd1      	ldrb	r1, [r2, r3]
 800b4ac:	7dfb      	ldrb	r3, [r7, #23]
 800b4ae:	3302      	adds	r3, #2
 800b4b0:	7cfa      	ldrb	r2, [r7, #19]
 800b4b2:	404a      	eors	r2, r1
 800b4b4:	b2d1      	uxtb	r1, r2
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	54d1      	strb	r1, [r2, r3]
        ctx->ksch[cc + 3] = ctx->ksch[tt + 3] ^ t3;
 800b4ba:	7c3b      	ldrb	r3, [r7, #16]
 800b4bc:	3303      	adds	r3, #3
 800b4be:	687a      	ldr	r2, [r7, #4]
 800b4c0:	5cd1      	ldrb	r1, [r2, r3]
 800b4c2:	7dfb      	ldrb	r3, [r7, #23]
 800b4c4:	3303      	adds	r3, #3
 800b4c6:	7cba      	ldrb	r2, [r7, #18]
 800b4c8:	404a      	eors	r2, r1
 800b4ca:	b2d1      	uxtb	r1, r2
 800b4cc:	687a      	ldr	r2, [r7, #4]
 800b4ce:	54d1      	strb	r1, [r2, r3]
    for( cc = keylen, rc = 1; cc < hi; cc += 4 )
 800b4d0:	7dfb      	ldrb	r3, [r7, #23]
 800b4d2:	3304      	adds	r3, #4
 800b4d4:	75fb      	strb	r3, [r7, #23]
 800b4d6:	7dfa      	ldrb	r2, [r7, #23]
 800b4d8:	7c7b      	ldrb	r3, [r7, #17]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	f4ff af67 	bcc.w	800b3ae <lorawan_aes_set_key+0x76>
    }
    return 0;
 800b4e0:	2300      	movs	r3, #0
}
 800b4e2:	4618      	mov	r0, r3
 800b4e4:	3718      	adds	r7, #24
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
 800b4ea:	bf00      	nop
 800b4ec:	00010101 	.word	0x00010101
 800b4f0:	0801c1b8 	.word	0x0801c1b8

0800b4f4 <lorawan_aes_encrypt>:
#if defined( AES_ENC_PREKEYED )

/*  Encrypt a single block of 16 bytes */

return_type lorawan_aes_encrypt( const uint8_t in[N_BLOCK], uint8_t  out[N_BLOCK], const lorawan_aes_context ctx[1] )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b08a      	sub	sp, #40	@ 0x28
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	60f8      	str	r0, [r7, #12]
 800b4fc:	60b9      	str	r1, [r7, #8]
 800b4fe:	607a      	str	r2, [r7, #4]
    if( ctx->rnd )
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b506:	2b00      	cmp	r3, #0
 800b508:	d038      	beq.n	800b57c <lorawan_aes_encrypt+0x88>
    {
        uint8_t s1[N_BLOCK], r;
        copy_and_key( s1, in, ctx->ksch );
 800b50a:	687a      	ldr	r2, [r7, #4]
 800b50c:	f107 0314 	add.w	r3, r7, #20
 800b510:	68f9      	ldr	r1, [r7, #12]
 800b512:	4618      	mov	r0, r3
 800b514:	f7ff fc07 	bl	800ad26 <copy_and_key>

        for( r = 1 ; r < ctx->rnd ; ++r )
 800b518:	2301      	movs	r3, #1
 800b51a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b51e:	e014      	b.n	800b54a <lorawan_aes_encrypt+0x56>
#if defined( VERSION_1 )
        {
            mix_sub_columns( s1 );
 800b520:	f107 0314 	add.w	r3, r7, #20
 800b524:	4618      	mov	r0, r3
 800b526:	f7ff fd5d 	bl	800afe4 <mix_sub_columns>
            add_round_key( s1, ctx->ksch + r * N_BLOCK);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b530:	0112      	lsls	r2, r2, #4
 800b532:	441a      	add	r2, r3
 800b534:	f107 0314 	add.w	r3, r7, #20
 800b538:	4611      	mov	r1, r2
 800b53a:	4618      	mov	r0, r3
 800b53c:	f7ff fcab 	bl	800ae96 <add_round_key>
        for( r = 1 ; r < ctx->rnd ; ++r )
 800b540:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b544:	3301      	adds	r3, #1
 800b546:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b550:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b554:	429a      	cmp	r2, r3
 800b556:	d3e3      	bcc.n	800b520 <lorawan_aes_encrypt+0x2c>
        {   uint8_t s2[N_BLOCK];
            mix_sub_columns( s2, s1 );
            copy_and_key( s1, s2, ctx->ksch + r * N_BLOCK);
        }
#endif
        shift_sub_rows( s1 );
 800b558:	f107 0314 	add.w	r3, r7, #20
 800b55c:	4618      	mov	r0, r3
 800b55e:	f7ff fca7 	bl	800aeb0 <shift_sub_rows>
        copy_and_key( out, s1, ctx->ksch + r * N_BLOCK );
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b568:	0112      	lsls	r2, r2, #4
 800b56a:	441a      	add	r2, r3
 800b56c:	f107 0314 	add.w	r3, r7, #20
 800b570:	4619      	mov	r1, r3
 800b572:	68b8      	ldr	r0, [r7, #8]
 800b574:	f7ff fbd7 	bl	800ad26 <copy_and_key>
    }
    else
        return ( uint8_t )-1;
    return 0;
 800b578:	2300      	movs	r3, #0
 800b57a:	e000      	b.n	800b57e <lorawan_aes_encrypt+0x8a>
        return ( uint8_t )-1;
 800b57c:	23ff      	movs	r3, #255	@ 0xff
}
 800b57e:	4618      	mov	r0, r3
 800b580:	3728      	adds	r7, #40	@ 0x28
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
	...

0800b588 <PrintKey>:
static SecureElementStatus_t ComputeCmac(uint8_t *micBxBuffer, uint8_t *buffer, uint16_t size, KeyIdentifier_t keyID,
                                         uint32_t *cmac);

/* Private functions ---------------------------------------------------------*/
static void PrintKey( KeyIdentifier_t key )
{
 800b588:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b58a:	b09d      	sub	sp, #116	@ 0x74
 800b58c:	af10      	add	r7, sp, #64	@ 0x40
 800b58e:	4603      	mov	r3, r0
 800b590:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 800b594:	2306      	movs	r3, #6
 800b596:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    Key_t *keyItem;
    retval = SecureElementGetKeyByID(key, &keyItem);
 800b59a:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800b59e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5a2:	4611      	mov	r1, r2
 800b5a4:	4618      	mov	r0, r3
 800b5a6:	f000 f9a7 	bl	800b8f8 <SecureElementGetKeyByID>
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
#else
    uint8_t extractable_key[16] = {0};
    retval = SecureElementGetKeyByID(key, (uint8_t*)extractable_key);
#endif /* LORAWAN_KMS */
    if (retval == SECURE_ELEMENT_SUCCESS)
 800b5b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	f040 80b0 	bne.w	800b71a <PrintKey+0x192>
    {
        if (key == APP_KEY)
 800b5ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d106      	bne.n	800b5d0 <PrintKey+0x48>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppKey:      ");
 800b5c2:	4b58      	ldr	r3, [pc, #352]	@ (800b724 <PrintKey+0x19c>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	2100      	movs	r1, #0
 800b5c8:	2002      	movs	r0, #2
 800b5ca:	f00f fd97 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b5ce:	e056      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == NWK_KEY)
 800b5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5d4:	2b01      	cmp	r3, #1
 800b5d6:	d106      	bne.n	800b5e6 <PrintKey+0x5e>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkKey:      ");
 800b5d8:	4b53      	ldr	r3, [pc, #332]	@ (800b728 <PrintKey+0x1a0>)
 800b5da:	2200      	movs	r2, #0
 800b5dc:	2100      	movs	r1, #0
 800b5de:	2002      	movs	r0, #2
 800b5e0:	f00f fd8c 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b5e4:	e04b      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == APP_S_KEY)
 800b5e6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b5ea:	2b03      	cmp	r3, #3
 800b5ec:	d106      	bne.n	800b5fc <PrintKey+0x74>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### AppSKey:     ");
 800b5ee:	4b4f      	ldr	r3, [pc, #316]	@ (800b72c <PrintKey+0x1a4>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	2100      	movs	r1, #0
 800b5f4:	2002      	movs	r0, #2
 800b5f6:	f00f fd81 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b5fa:	e040      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == NWK_S_KEY)
 800b5fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b600:	2b02      	cmp	r3, #2
 800b602:	d106      	bne.n	800b612 <PrintKey+0x8a>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### NwkSKey:     ");
 800b604:	4b4a      	ldr	r3, [pc, #296]	@ (800b730 <PrintKey+0x1a8>)
 800b606:	2200      	movs	r2, #0
 800b608:	2100      	movs	r1, #0
 800b60a:	2002      	movs	r0, #2
 800b60c:	f00f fd76 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b610:	e035      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == MC_ROOT_KEY)
 800b612:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b616:	2b04      	cmp	r3, #4
 800b618:	d106      	bne.n	800b628 <PrintKey+0xa0>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCRootKey:   ");
 800b61a:	4b46      	ldr	r3, [pc, #280]	@ (800b734 <PrintKey+0x1ac>)
 800b61c:	2200      	movs	r2, #0
 800b61e:	2100      	movs	r1, #0
 800b620:	2002      	movs	r0, #2
 800b622:	f00f fd6b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b626:	e02a      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == MC_KE_KEY)
 800b628:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b62c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b62e:	d106      	bne.n	800b63e <PrintKey+0xb6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKEKey:     ");
 800b630:	4b41      	ldr	r3, [pc, #260]	@ (800b738 <PrintKey+0x1b0>)
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	2002      	movs	r0, #2
 800b638:	f00f fd60 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b63c:	e01f      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == MC_KEY_0)
 800b63e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b642:	2b80      	cmp	r3, #128	@ 0x80
 800b644:	d106      	bne.n	800b654 <PrintKey+0xcc>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCKey_0:     ");
 800b646:	4b3d      	ldr	r3, [pc, #244]	@ (800b73c <PrintKey+0x1b4>)
 800b648:	2200      	movs	r2, #0
 800b64a:	2100      	movs	r1, #0
 800b64c:	2002      	movs	r0, #2
 800b64e:	f00f fd55 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b652:	e014      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == MC_APP_S_KEY_0)
 800b654:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b658:	2b81      	cmp	r3, #129	@ 0x81
 800b65a:	d106      	bne.n	800b66a <PrintKey+0xe2>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCAppSKey_0: ");
 800b65c:	4b38      	ldr	r3, [pc, #224]	@ (800b740 <PrintKey+0x1b8>)
 800b65e:	2200      	movs	r2, #0
 800b660:	2100      	movs	r1, #0
 800b662:	2002      	movs	r0, #2
 800b664:	f00f fd4a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 800b668:	e009      	b.n	800b67e <PrintKey+0xf6>
        }
        else if (key == MC_NWK_S_KEY_0)
 800b66a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b66e:	2b82      	cmp	r3, #130	@ 0x82
 800b670:	d105      	bne.n	800b67e <PrintKey+0xf6>
        {
            MW_LOG(TS_OFF, VLEVEL_M, "###### MCNwkSKey_0: ");
 800b672:	4b34      	ldr	r3, [pc, #208]	@ (800b744 <PrintKey+0x1bc>)
 800b674:	2200      	movs	r2, #0
 800b676:	2100      	movs	r1, #0
 800b678:	2002      	movs	r0, #2
 800b67a:	f00f fd3f 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        }
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b67e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b680:	785b      	ldrb	r3, [r3, #1]
 800b682:	4618      	mov	r0, r3
 800b684:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b686:	789b      	ldrb	r3, [r3, #2]
 800b688:	461c      	mov	r4, r3
 800b68a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b68c:	78db      	ldrb	r3, [r3, #3]
 800b68e:	461d      	mov	r5, r3
 800b690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b692:	791b      	ldrb	r3, [r3, #4]
 800b694:	461e      	mov	r6, r3
 800b696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b698:	795b      	ldrb	r3, [r3, #5]
 800b69a:	623b      	str	r3, [r7, #32]
 800b69c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b69e:	799b      	ldrb	r3, [r3, #6]
 800b6a0:	61fb      	str	r3, [r7, #28]
 800b6a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6a4:	79db      	ldrb	r3, [r3, #7]
 800b6a6:	61bb      	str	r3, [r7, #24]
 800b6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6aa:	7a1b      	ldrb	r3, [r3, #8]
 800b6ac:	617b      	str	r3, [r7, #20]
 800b6ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b0:	7a5b      	ldrb	r3, [r3, #9]
 800b6b2:	613b      	str	r3, [r7, #16]
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	7a9b      	ldrb	r3, [r3, #10]
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6bc:	7adb      	ldrb	r3, [r3, #11]
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c2:	7b1b      	ldrb	r3, [r3, #12]
 800b6c4:	607b      	str	r3, [r7, #4]
 800b6c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6c8:	7b5b      	ldrb	r3, [r3, #13]
 800b6ca:	603b      	str	r3, [r7, #0]
 800b6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ce:	7b9b      	ldrb	r3, [r3, #14]
 800b6d0:	4619      	mov	r1, r3
 800b6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6d4:	7bdb      	ldrb	r3, [r3, #15]
 800b6d6:	461a      	mov	r2, r3
 800b6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6da:	7c1b      	ldrb	r3, [r3, #16]
 800b6dc:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b6de:	920e      	str	r2, [sp, #56]	@ 0x38
 800b6e0:	910d      	str	r1, [sp, #52]	@ 0x34
 800b6e2:	683a      	ldr	r2, [r7, #0]
 800b6e4:	920c      	str	r2, [sp, #48]	@ 0x30
 800b6e6:	687a      	ldr	r2, [r7, #4]
 800b6e8:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b6ea:	68ba      	ldr	r2, [r7, #8]
 800b6ec:	920a      	str	r2, [sp, #40]	@ 0x28
 800b6ee:	68fa      	ldr	r2, [r7, #12]
 800b6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 800b6f2:	693a      	ldr	r2, [r7, #16]
 800b6f4:	9208      	str	r2, [sp, #32]
 800b6f6:	697a      	ldr	r2, [r7, #20]
 800b6f8:	9207      	str	r2, [sp, #28]
 800b6fa:	69ba      	ldr	r2, [r7, #24]
 800b6fc:	9206      	str	r2, [sp, #24]
 800b6fe:	69fa      	ldr	r2, [r7, #28]
 800b700:	9205      	str	r2, [sp, #20]
 800b702:	6a3b      	ldr	r3, [r7, #32]
 800b704:	9304      	str	r3, [sp, #16]
 800b706:	9603      	str	r6, [sp, #12]
 800b708:	9502      	str	r5, [sp, #8]
 800b70a:	9401      	str	r4, [sp, #4]
 800b70c:	9000      	str	r0, [sp, #0]
 800b70e:	4b0e      	ldr	r3, [pc, #56]	@ (800b748 <PrintKey+0x1c0>)
 800b710:	2200      	movs	r2, #0
 800b712:	2100      	movs	r1, #0
 800b714:	2002      	movs	r0, #2
 800b716:	f00f fcf1 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        MW_LOG(TS_OFF, VLEVEL_M, "%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
               HEX16(extractable_key));
#endif /* LORAWAN_KMS */
    }
#endif /* KEY_EXTRACTABLE */
}
 800b71a:	bf00      	nop
 800b71c:	3734      	adds	r7, #52	@ 0x34
 800b71e:	46bd      	mov	sp, r7
 800b720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b722:	bf00      	nop
 800b724:	0801bc0c 	.word	0x0801bc0c
 800b728:	0801bc24 	.word	0x0801bc24
 800b72c:	0801bc3c 	.word	0x0801bc3c
 800b730:	0801bc54 	.word	0x0801bc54
 800b734:	0801bc6c 	.word	0x0801bc6c
 800b738:	0801bc84 	.word	0x0801bc84
 800b73c:	0801bc9c 	.word	0x0801bc9c
 800b740:	0801bcb4 	.word	0x0801bcb4
 800b744:	0801bccc 	.word	0x0801bccc
 800b748:	0801bce4 	.word	0x0801bce4

0800b74c <GetKeyByID>:
 * \param [in] keyID          - Key identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t GetKeyByID( KeyIdentifier_t keyID, Key_t** keyItem )
{
 800b74c:	b480      	push	{r7}
 800b74e:	b085      	sub	sp, #20
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	6039      	str	r1, [r7, #0]
 800b756:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b758:	2300      	movs	r3, #0
 800b75a:	73fb      	strb	r3, [r7, #15]
 800b75c:	e01a      	b.n	800b794 <GetKeyByID+0x48>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800b75e:	4b12      	ldr	r3, [pc, #72]	@ (800b7a8 <GetKeyByID+0x5c>)
 800b760:	6819      	ldr	r1, [r3, #0]
 800b762:	7bfa      	ldrb	r2, [r7, #15]
 800b764:	4613      	mov	r3, r2
 800b766:	011b      	lsls	r3, r3, #4
 800b768:	4413      	add	r3, r2
 800b76a:	440b      	add	r3, r1
 800b76c:	3310      	adds	r3, #16
 800b76e:	781b      	ldrb	r3, [r3, #0]
 800b770:	79fa      	ldrb	r2, [r7, #7]
 800b772:	429a      	cmp	r2, r3
 800b774:	d10b      	bne.n	800b78e <GetKeyByID+0x42>
        {
            *keyItem = &( SeNvm->KeyList[i] );
 800b776:	4b0c      	ldr	r3, [pc, #48]	@ (800b7a8 <GetKeyByID+0x5c>)
 800b778:	6819      	ldr	r1, [r3, #0]
 800b77a:	7bfa      	ldrb	r2, [r7, #15]
 800b77c:	4613      	mov	r3, r2
 800b77e:	011b      	lsls	r3, r3, #4
 800b780:	4413      	add	r3, r2
 800b782:	3310      	adds	r3, #16
 800b784:	18ca      	adds	r2, r1, r3
 800b786:	683b      	ldr	r3, [r7, #0]
 800b788:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b78a:	2300      	movs	r3, #0
 800b78c:	e006      	b.n	800b79c <GetKeyByID+0x50>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800b78e:	7bfb      	ldrb	r3, [r7, #15]
 800b790:	3301      	adds	r3, #1
 800b792:	73fb      	strb	r3, [r7, #15]
 800b794:	7bfb      	ldrb	r3, [r7, #15]
 800b796:	2b09      	cmp	r3, #9
 800b798:	d9e1      	bls.n	800b75e <GetKeyByID+0x12>
        }
    }
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b79a:	2303      	movs	r3, #3
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	3714      	adds	r7, #20
 800b7a0:	46bd      	mov	sp, r7
 800b7a2:	bc80      	pop	{r7}
 800b7a4:	4770      	bx	lr
 800b7a6:	bf00      	nop
 800b7a8:	200004b8 	.word	0x200004b8

0800b7ac <ComputeCmac>:
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static SecureElementStatus_t ComputeCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                          uint32_t* cmac )
{
 800b7ac:	b590      	push	{r4, r7, lr}
 800b7ae:	b0d1      	sub	sp, #324	@ 0x144
 800b7b0:	af00      	add	r7, sp, #0
 800b7b2:	f507 74a0 	add.w	r4, r7, #320	@ 0x140
 800b7b6:	f5a4 749a 	sub.w	r4, r4, #308	@ 0x134
 800b7ba:	6020      	str	r0, [r4, #0]
 800b7bc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 800b7c0:	f5a0 709c 	sub.w	r0, r0, #312	@ 0x138
 800b7c4:	6001      	str	r1, [r0, #0]
 800b7c6:	4619      	mov	r1, r3
 800b7c8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7cc:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b7d0:	801a      	strh	r2, [r3, #0]
 800b7d2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7d6:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800b7da:	460a      	mov	r2, r1
 800b7dc:	701a      	strb	r2, [r3, #0]
    if( ( buffer == NULL ) || ( cmac == NULL ) )
 800b7de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b7e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d003      	beq.n	800b7f4 <ComputeCmac+0x48>
 800b7ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <ComputeCmac+0x4c>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b7f4:	2302      	movs	r3, #2
 800b7f6:	e05c      	b.n	800b8b2 <ComputeCmac+0x106>

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t Cmac[16];
    AES_CMAC_CTX aesCmacCtx[1];

    AES_CMAC_Init( aesCmacCtx );
 800b7f8:	f107 0314 	add.w	r3, r7, #20
 800b7fc:	4618      	mov	r0, r3
 800b7fe:	f7fe ff1b 	bl	800a638 <AES_CMAC_Init>

    Key_t*                keyItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &keyItem );
 800b802:	f107 0210 	add.w	r2, r7, #16
 800b806:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b80a:	f2a3 133b 	subw	r3, r3, #315	@ 0x13b
 800b80e:	781b      	ldrb	r3, [r3, #0]
 800b810:	4611      	mov	r1, r2
 800b812:	4618      	mov	r0, r3
 800b814:	f7ff ff9a 	bl	800b74c <GetKeyByID>
 800b818:	4603      	mov	r3, r0
 800b81a:	f887 313f 	strb.w	r3, [r7, #319]	@ 0x13f

    if( retval == SECURE_ELEMENT_SUCCESS )
 800b81e:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
 800b822:	2b00      	cmp	r3, #0
 800b824:	d143      	bne.n	800b8ae <ComputeCmac+0x102>
    {
        AES_CMAC_SetKey( aesCmacCtx, keyItem->KeyValue );
 800b826:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b82a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	1c5a      	adds	r2, r3, #1
 800b832:	f107 0314 	add.w	r3, r7, #20
 800b836:	4611      	mov	r1, r2
 800b838:	4618      	mov	r0, r3
 800b83a:	f7fe ff16 	bl	800a66a <AES_CMAC_SetKey>

        if( micBxBuffer != NULL )
 800b83e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b842:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d009      	beq.n	800b860 <ComputeCmac+0xb4>
        {
            AES_CMAC_Update( aesCmacCtx, micBxBuffer, 16 );
 800b84c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b850:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800b854:	f107 0014 	add.w	r0, r7, #20
 800b858:	2210      	movs	r2, #16
 800b85a:	6819      	ldr	r1, [r3, #0]
 800b85c:	f7fe ff14 	bl	800a688 <AES_CMAC_Update>
        }

        AES_CMAC_Update( aesCmacCtx, buffer, size );
 800b860:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b864:	f5a3 739d 	sub.w	r3, r3, #314	@ 0x13a
 800b868:	881a      	ldrh	r2, [r3, #0]
 800b86a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800b86e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800b872:	f107 0014 	add.w	r0, r7, #20
 800b876:	6819      	ldr	r1, [r3, #0]
 800b878:	f7fe ff06 	bl	800a688 <AES_CMAC_Update>

        AES_CMAC_Final( Cmac, aesCmacCtx );
 800b87c:	f107 0214 	add.w	r2, r7, #20
 800b880:	f507 7396 	add.w	r3, r7, #300	@ 0x12c
 800b884:	4611      	mov	r1, r2
 800b886:	4618      	mov	r0, r3
 800b888:	f7fe ffc0 	bl	800a80c <AES_CMAC_Final>

        // Bring into the required format
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b88c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800b890:	061a      	lsls	r2, r3, #24
 800b892:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800b896:	041b      	lsls	r3, r3, #16
 800b898:	431a      	orrs	r2, r3
 800b89a:	f897 312d 	ldrb.w	r3, [r7, #301]	@ 0x12d
 800b89e:	021b      	lsls	r3, r3, #8
 800b8a0:	4313      	orrs	r3, r2
                              ( uint32_t ) Cmac[0] );
 800b8a2:	f897 212c 	ldrb.w	r2, [r7, #300]	@ 0x12c
        *cmac = ( uint32_t )( ( uint32_t ) Cmac[3] << 24 | ( uint32_t ) Cmac[2] << 16 | ( uint32_t ) Cmac[1] << 8 |
 800b8a6:	431a      	orrs	r2, r3
 800b8a8:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 800b8ac:	601a      	str	r2, [r3, #0]
    if (rv != CKR_OK)
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */
    return retval;
 800b8ae:	f897 313f 	ldrb.w	r3, [r7, #319]	@ 0x13f
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 800b8b8:	46bd      	mov	sp, r7
 800b8ba:	bd90      	pop	{r4, r7, pc}

0800b8bc <SecureElementInit>:
/*
 * API functions
 */
/* ST_WORKAROUND: Add unique ID callback as input parameter */
SecureElementStatus_t SecureElementInit( SecureElementNvmData_t *nvm, SecureElementGetUniqueId seGetUniqueId )
{
 800b8bc:	b580      	push	{r7, lr}
 800b8be:	b082      	sub	sp, #8
 800b8c0:	af00      	add	r7, sp, #0
 800b8c2:	6078      	str	r0, [r7, #4]
 800b8c4:	6039      	str	r1, [r7, #0]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    if( nvm == NULL )
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d101      	bne.n	800b8d0 <SecureElementInit+0x14>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800b8cc:	2302      	movs	r3, #2
 800b8ce:	e00a      	b.n	800b8e6 <SecureElementInit+0x2a>
    }

    // Initialize nvm pointer
    SeNvm = nvm;
 800b8d0:	4a07      	ldr	r2, [pc, #28]	@ (800b8f0 <SecureElementInit+0x34>)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	6013      	str	r3, [r2, #0]

    // Initialize data
    memcpy1( ( uint8_t* )SeNvm, ( uint8_t* )&seNvmInit, sizeof( seNvmInit ) );
 800b8d6:	4b06      	ldr	r3, [pc, #24]	@ (800b8f0 <SecureElementInit+0x34>)
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	22c0      	movs	r2, #192	@ 0xc0
 800b8dc:	4905      	ldr	r1, [pc, #20]	@ (800b8f4 <SecureElementInit+0x38>)
 800b8de:	4618      	mov	r0, r3
 800b8e0:	f00b f8bd 	bl	8016a5e <memcpy1>
        // Get a DevEUI from MCU unique ID
        seGetUniqueId(SeNvm->DevEui);
    }
#endif /* STATIC_DEVICE_EUI */
#endif /* !SECURE_ELEMENT_PRE_PROVISIONED */
    return SECURE_ELEMENT_SUCCESS;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3708      	adds	r7, #8
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}
 800b8ee:	bf00      	nop
 800b8f0:	200004b8 	.word	0x200004b8
 800b8f4:	0801c648 	.word	0x0801c648

0800b8f8 <SecureElementGetKeyByID>:
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, Key_t **keyItem)
#else
SecureElementStatus_t SecureElementGetKeyByID( KeyIdentifier_t keyID, uint8_t* extractable_key )
#endif /* LORAWAN_KMS */
{
 800b8f8:	b480      	push	{r7}
 800b8fa:	b085      	sub	sp, #20
 800b8fc:	af00      	add	r7, sp, #0
 800b8fe:	4603      	mov	r3, r0
 800b900:	6039      	str	r1, [r7, #0]
 800b902:	71fb      	strb	r3, [r7, #7]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b904:	2300      	movs	r3, #0
 800b906:	73fb      	strb	r3, [r7, #15]
 800b908:	e01a      	b.n	800b940 <SecureElementGetKeyByID+0x48>
    {
        if (SeNvm->KeyList[i].KeyID == keyID)
 800b90a:	4b12      	ldr	r3, [pc, #72]	@ (800b954 <SecureElementGetKeyByID+0x5c>)
 800b90c:	6819      	ldr	r1, [r3, #0]
 800b90e:	7bfa      	ldrb	r2, [r7, #15]
 800b910:	4613      	mov	r3, r2
 800b912:	011b      	lsls	r3, r3, #4
 800b914:	4413      	add	r3, r2
 800b916:	440b      	add	r3, r1
 800b918:	3310      	adds	r3, #16
 800b91a:	781b      	ldrb	r3, [r3, #0]
 800b91c:	79fa      	ldrb	r2, [r7, #7]
 800b91e:	429a      	cmp	r2, r3
 800b920:	d10b      	bne.n	800b93a <SecureElementGetKeyByID+0x42>
        {
            *keyItem = &(SeNvm->KeyList[i]);
 800b922:	4b0c      	ldr	r3, [pc, #48]	@ (800b954 <SecureElementGetKeyByID+0x5c>)
 800b924:	6819      	ldr	r1, [r3, #0]
 800b926:	7bfa      	ldrb	r2, [r7, #15]
 800b928:	4613      	mov	r3, r2
 800b92a:	011b      	lsls	r3, r3, #4
 800b92c:	4413      	add	r3, r2
 800b92e:	3310      	adds	r3, #16
 800b930:	18ca      	adds	r2, r1, r3
 800b932:	683b      	ldr	r3, [r7, #0]
 800b934:	601a      	str	r2, [r3, #0]
            return SECURE_ELEMENT_SUCCESS;
 800b936:	2300      	movs	r3, #0
 800b938:	e006      	b.n	800b948 <SecureElementGetKeyByID+0x50>
    for (uint8_t i = 0; i < NUM_OF_KEYS; i++)
 800b93a:	7bfb      	ldrb	r3, [r7, #15]
 800b93c:	3301      	adds	r3, #1
 800b93e:	73fb      	strb	r3, [r7, #15]
 800b940:	7bfb      	ldrb	r3, [r7, #15]
 800b942:	2b09      	cmp	r3, #9
 800b944:	d9e1      	bls.n	800b90a <SecureElementGetKeyByID+0x12>
        }
    }
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800b946:	2303      	movs	r3, #3
        return SECURE_ELEMENT_ERROR;
    }
    return SECURE_ELEMENT_SUCCESS;

#endif /* LORAWAN_KMS == 1 */
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	bc80      	pop	{r7}
 800b950:	4770      	bx	lr
 800b952:	bf00      	nop
 800b954:	200004b8 	.word	0x200004b8

0800b958 <SecureElementPrintKeys>:

SecureElementStatus_t SecureElementPrintKeys( void )
{
 800b958:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b95a:	b08b      	sub	sp, #44	@ 0x2c
 800b95c:	af08      	add	r7, sp, #32
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    MW_LOG(TS_OFF, VLEVEL_M, "###### OTAA ######\r\n");
 800b95e:	4b3f      	ldr	r3, [pc, #252]	@ (800ba5c <SecureElementPrintKeys+0x104>)
 800b960:	2200      	movs	r2, #0
 800b962:	2100      	movs	r1, #0
 800b964:	2002      	movs	r0, #2
 800b966:	f00f fbc9 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_KEY);
 800b96a:	2000      	movs	r0, #0
 800b96c:	f7ff fe0c 	bl	800b588 <PrintKey>
    PrintKey(NWK_KEY);
 800b970:	2001      	movs	r0, #1
 800b972:	f7ff fe09 	bl	800b588 <PrintKey>
    MW_LOG(TS_OFF, VLEVEL_M, "###### ABP  ######\r\n");
 800b976:	4b3a      	ldr	r3, [pc, #232]	@ (800ba60 <SecureElementPrintKeys+0x108>)
 800b978:	2200      	movs	r2, #0
 800b97a:	2100      	movs	r1, #0
 800b97c:	2002      	movs	r0, #2
 800b97e:	f00f fbbd 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    PrintKey(APP_S_KEY);
 800b982:	2003      	movs	r0, #3
 800b984:	f7ff fe00 	bl	800b588 <PrintKey>
    PrintKey(NWK_S_KEY);
 800b988:	2002      	movs	r0, #2
 800b98a:	f7ff fdfd 	bl	800b588 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    MW_LOG(TS_OFF, VLEVEL_M, "###### IDs  ######\r\n");
 800b98e:	4b35      	ldr	r3, [pc, #212]	@ (800ba64 <SecureElementPrintKeys+0x10c>)
 800b990:	2200      	movs	r2, #0
 800b992:	2100      	movs	r1, #0
 800b994:	2002      	movs	r0, #2
 800b996:	f00f fbb1 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b99a:	4b33      	ldr	r3, [pc, #204]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	461a      	mov	r2, r3
 800b9a2:	4b31      	ldr	r3, [pc, #196]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	785b      	ldrb	r3, [r3, #1]
 800b9a8:	4619      	mov	r1, r3
 800b9aa:	4b2f      	ldr	r3, [pc, #188]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	789b      	ldrb	r3, [r3, #2]
 800b9b0:	4618      	mov	r0, r3
 800b9b2:	4b2d      	ldr	r3, [pc, #180]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	78db      	ldrb	r3, [r3, #3]
 800b9b8:	461c      	mov	r4, r3
 800b9ba:	4b2b      	ldr	r3, [pc, #172]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	791b      	ldrb	r3, [r3, #4]
 800b9c0:	461d      	mov	r5, r3
 800b9c2:	4b29      	ldr	r3, [pc, #164]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	795b      	ldrb	r3, [r3, #5]
 800b9c8:	461e      	mov	r6, r3
 800b9ca:	4b27      	ldr	r3, [pc, #156]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	799b      	ldrb	r3, [r3, #6]
 800b9d0:	607b      	str	r3, [r7, #4]
 800b9d2:	4b25      	ldr	r3, [pc, #148]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	79db      	ldrb	r3, [r3, #7]
 800b9d8:	9307      	str	r3, [sp, #28]
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	9306      	str	r3, [sp, #24]
 800b9de:	9605      	str	r6, [sp, #20]
 800b9e0:	9504      	str	r5, [sp, #16]
 800b9e2:	9403      	str	r4, [sp, #12]
 800b9e4:	9002      	str	r0, [sp, #8]
 800b9e6:	9101      	str	r1, [sp, #4]
 800b9e8:	9200      	str	r2, [sp, #0]
 800b9ea:	4b20      	ldr	r3, [pc, #128]	@ (800ba6c <SecureElementPrintKeys+0x114>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2100      	movs	r1, #0
 800b9f0:	2002      	movs	r0, #2
 800b9f2:	f00f fb83 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->DevEui));
    MW_LOG(TS_OFF, VLEVEL_M, "###### AppEui:      %02X:%02X:%02X:%02X:%02X:%02X:%02X:%02X\r\n",
 800b9f6:	4b1c      	ldr	r3, [pc, #112]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	7a1b      	ldrb	r3, [r3, #8]
 800b9fc:	461a      	mov	r2, r3
 800b9fe:	4b1a      	ldr	r3, [pc, #104]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	7a5b      	ldrb	r3, [r3, #9]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4b18      	ldr	r3, [pc, #96]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	7a9b      	ldrb	r3, [r3, #10]
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	4b16      	ldr	r3, [pc, #88]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	7adb      	ldrb	r3, [r3, #11]
 800ba14:	461c      	mov	r4, r3
 800ba16:	4b14      	ldr	r3, [pc, #80]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	7b1b      	ldrb	r3, [r3, #12]
 800ba1c:	461d      	mov	r5, r3
 800ba1e:	4b12      	ldr	r3, [pc, #72]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	7b5b      	ldrb	r3, [r3, #13]
 800ba24:	461e      	mov	r6, r3
 800ba26:	4b10      	ldr	r3, [pc, #64]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	7b9b      	ldrb	r3, [r3, #14]
 800ba2c:	607b      	str	r3, [r7, #4]
 800ba2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ba68 <SecureElementPrintKeys+0x110>)
 800ba30:	681b      	ldr	r3, [r3, #0]
 800ba32:	7bdb      	ldrb	r3, [r3, #15]
 800ba34:	9307      	str	r3, [sp, #28]
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	9306      	str	r3, [sp, #24]
 800ba3a:	9605      	str	r6, [sp, #20]
 800ba3c:	9504      	str	r5, [sp, #16]
 800ba3e:	9403      	str	r4, [sp, #12]
 800ba40:	9002      	str	r0, [sp, #8]
 800ba42:	9101      	str	r1, [sp, #4]
 800ba44:	9200      	str	r2, [sp, #0]
 800ba46:	4b0a      	ldr	r3, [pc, #40]	@ (800ba70 <SecureElementPrintKeys+0x118>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	2002      	movs	r0, #2
 800ba4e:	f00f fb55 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
           HEX8(SeNvm->JoinEui));
    return SECURE_ELEMENT_SUCCESS;
 800ba52:	2300      	movs	r3, #0
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	370c      	adds	r7, #12
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ba5c:	0801bd38 	.word	0x0801bd38
 800ba60:	0801bd50 	.word	0x0801bd50
 800ba64:	0801bd68 	.word	0x0801bd68
 800ba68:	200004b8 	.word	0x200004b8
 800ba6c:	0801bd80 	.word	0x0801bd80
 800ba70:	0801bdc0 	.word	0x0801bdc0

0800ba74 <SecureElementPrintSessionKeys>:
    
SecureElementStatus_t SecureElementPrintSessionKeys( void )
{
 800ba74:	b580      	push	{r7, lr}
 800ba76:	af00      	add	r7, sp, #0
#if (defined (KEY_EXTRACTABLE) && (KEY_EXTRACTABLE == 1))
    PrintKey(MC_ROOT_KEY);
 800ba78:	2004      	movs	r0, #4
 800ba7a:	f7ff fd85 	bl	800b588 <PrintKey>
    PrintKey(MC_KE_KEY);
 800ba7e:	207f      	movs	r0, #127	@ 0x7f
 800ba80:	f7ff fd82 	bl	800b588 <PrintKey>
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    PrintKey(F_NWK_S_INT_KEY);
    PrintKey(S_NWK_S_INT_KEY);
    PrintKey(NWK_S_ENC_KEY);
#else
    PrintKey(NWK_S_KEY);
 800ba84:	2002      	movs	r0, #2
 800ba86:	f7ff fd7f 	bl	800b588 <PrintKey>
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    PrintKey(APP_S_KEY);
 800ba8a:	2003      	movs	r0, #3
 800ba8c:	f7ff fd7c 	bl	800b588 <PrintKey>
#endif /* KEY_EXTRACTABLE */
    return SECURE_ELEMENT_SUCCESS;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	bd80      	pop	{r7, pc}
	...

0800ba98 <SecureElementSetKey>:
#endif /* LORAWAN_KMS */
}
/* ST_WORKAROUND_END */

SecureElementStatus_t SecureElementSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b088      	sub	sp, #32
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	4603      	mov	r3, r0
 800baa0:	6039      	str	r1, [r7, #0]
 800baa2:	71fb      	strb	r3, [r7, #7]
    if( key == NULL )
 800baa4:	683b      	ldr	r3, [r7, #0]
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d101      	bne.n	800baae <SecureElementSetKey+0x16>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800baaa:	2302      	movs	r3, #2
 800baac:	e04c      	b.n	800bb48 <SecureElementSetKey+0xb0>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800baae:	2300      	movs	r3, #0
 800bab0:	77fb      	strb	r3, [r7, #31]
 800bab2:	e045      	b.n	800bb40 <SecureElementSetKey+0xa8>
    {
        if( SeNvm->KeyList[i].KeyID == keyID )
 800bab4:	4b26      	ldr	r3, [pc, #152]	@ (800bb50 <SecureElementSetKey+0xb8>)
 800bab6:	6819      	ldr	r1, [r3, #0]
 800bab8:	7ffa      	ldrb	r2, [r7, #31]
 800baba:	4613      	mov	r3, r2
 800babc:	011b      	lsls	r3, r3, #4
 800babe:	4413      	add	r3, r2
 800bac0:	440b      	add	r3, r1
 800bac2:	3310      	adds	r3, #16
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	79fa      	ldrb	r2, [r7, #7]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d136      	bne.n	800bb3a <SecureElementSetKey+0xa2>
        {
            /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX == 1 )
            if ( keyID == MC_KEY_0 )
 800bacc:	79fb      	ldrb	r3, [r7, #7]
 800bace:	2b80      	cmp	r3, #128	@ 0x80
 800bad0:	d123      	bne.n	800bb1a <SecureElementSetKey+0x82>
#else /* LORAMAC_MAX_MC_CTX > 1 */
            if( ( keyID == MC_KEY_0 ) || ( keyID == MC_KEY_1 ) || ( keyID == MC_KEY_2 ) || ( keyID == MC_KEY_3 ) )
#endif /* LORAMAC_MAX_MC_CTX */
            /* ST_WORKAROUND_END */
            {  // Decrypt the key if its a Mckey
                SecureElementStatus_t retval           = SECURE_ELEMENT_ERROR;
 800bad2:	2306      	movs	r3, #6
 800bad4:	77bb      	strb	r3, [r7, #30]
                uint8_t               decryptedKey[16] = { 0 };
 800bad6:	2300      	movs	r3, #0
 800bad8:	60fb      	str	r3, [r7, #12]
 800bada:	f107 0310 	add.w	r3, r7, #16
 800bade:	2200      	movs	r2, #0
 800bae0:	601a      	str	r2, [r3, #0]
 800bae2:	605a      	str	r2, [r3, #4]
 800bae4:	609a      	str	r2, [r3, #8]

                retval = SecureElementAesEncrypt( key, 16, MC_KE_KEY, decryptedKey );
 800bae6:	f107 030c 	add.w	r3, r7, #12
 800baea:	227f      	movs	r2, #127	@ 0x7f
 800baec:	2110      	movs	r1, #16
 800baee:	6838      	ldr	r0, [r7, #0]
 800baf0:	f000 f87d 	bl	800bbee <SecureElementAesEncrypt>
 800baf4:	4603      	mov	r3, r0
 800baf6:	77bb      	strb	r3, [r7, #30]

                memcpy1( SeNvm->KeyList[i].KeyValue, decryptedKey, SE_KEY_SIZE );
 800baf8:	4b15      	ldr	r3, [pc, #84]	@ (800bb50 <SecureElementSetKey+0xb8>)
 800bafa:	6819      	ldr	r1, [r3, #0]
 800bafc:	7ffa      	ldrb	r2, [r7, #31]
 800bafe:	4613      	mov	r3, r2
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	4413      	add	r3, r2
 800bb04:	3310      	adds	r3, #16
 800bb06:	440b      	add	r3, r1
 800bb08:	3301      	adds	r3, #1
 800bb0a:	f107 010c 	add.w	r1, r7, #12
 800bb0e:	2210      	movs	r2, #16
 800bb10:	4618      	mov	r0, r3
 800bb12:	f00a ffa4 	bl	8016a5e <memcpy1>
                return retval;
 800bb16:	7fbb      	ldrb	r3, [r7, #30]
 800bb18:	e016      	b.n	800bb48 <SecureElementSetKey+0xb0>
            }
            else
            {
                memcpy1( SeNvm->KeyList[i].KeyValue, key, SE_KEY_SIZE );
 800bb1a:	4b0d      	ldr	r3, [pc, #52]	@ (800bb50 <SecureElementSetKey+0xb8>)
 800bb1c:	6819      	ldr	r1, [r3, #0]
 800bb1e:	7ffa      	ldrb	r2, [r7, #31]
 800bb20:	4613      	mov	r3, r2
 800bb22:	011b      	lsls	r3, r3, #4
 800bb24:	4413      	add	r3, r2
 800bb26:	3310      	adds	r3, #16
 800bb28:	440b      	add	r3, r1
 800bb2a:	3301      	adds	r3, #1
 800bb2c:	2210      	movs	r2, #16
 800bb2e:	6839      	ldr	r1, [r7, #0]
 800bb30:	4618      	mov	r0, r3
 800bb32:	f00a ff94 	bl	8016a5e <memcpy1>
                return SECURE_ELEMENT_SUCCESS;
 800bb36:	2300      	movs	r3, #0
 800bb38:	e006      	b.n	800bb48 <SecureElementSetKey+0xb0>
    for( uint8_t i = 0; i < NUM_OF_KEYS; i++ )
 800bb3a:	7ffb      	ldrb	r3, [r7, #31]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	77fb      	strb	r3, [r7, #31]
 800bb40:	7ffb      	ldrb	r3, [r7, #31]
 800bb42:	2b09      	cmp	r3, #9
 800bb44:	d9b6      	bls.n	800bab4 <SecureElementSetKey+0x1c>
            }
        }
    }

    return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb46:	2303      	movs	r3, #3
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3720      	adds	r7, #32
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}
 800bb50:	200004b8 	.word	0x200004b8

0800bb54 <SecureElementComputeAesCmac>:

SecureElementStatus_t SecureElementComputeAesCmac( uint8_t* micBxBuffer, uint8_t* buffer, uint16_t size,
                                                   KeyIdentifier_t keyID, uint32_t* cmac )
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b086      	sub	sp, #24
 800bb58:	af02      	add	r7, sp, #8
 800bb5a:	60f8      	str	r0, [r7, #12]
 800bb5c:	60b9      	str	r1, [r7, #8]
 800bb5e:	4611      	mov	r1, r2
 800bb60:	461a      	mov	r2, r3
 800bb62:	460b      	mov	r3, r1
 800bb64:	80fb      	strh	r3, [r7, #6]
 800bb66:	4613      	mov	r3, r2
 800bb68:	717b      	strb	r3, [r7, #5]
    if( keyID >= LORAMAC_CRYPTO_MULTICAST_KEYS )
 800bb6a:	797b      	ldrb	r3, [r7, #5]
 800bb6c:	2b7e      	cmp	r3, #126	@ 0x7e
 800bb6e:	d901      	bls.n	800bb74 <SecureElementComputeAesCmac+0x20>
    {
        // Never accept multicast key identifier for cmac computation
        return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e009      	b.n	800bb88 <SecureElementComputeAesCmac+0x34>
    }

    return ComputeCmac( micBxBuffer, buffer, size, keyID, cmac );
 800bb74:	7979      	ldrb	r1, [r7, #5]
 800bb76:	88fa      	ldrh	r2, [r7, #6]
 800bb78:	69bb      	ldr	r3, [r7, #24]
 800bb7a:	9300      	str	r3, [sp, #0]
 800bb7c:	460b      	mov	r3, r1
 800bb7e:	68b9      	ldr	r1, [r7, #8]
 800bb80:	68f8      	ldr	r0, [r7, #12]
 800bb82:	f7ff fe13 	bl	800b7ac <ComputeCmac>
 800bb86:	4603      	mov	r3, r0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3710      	adds	r7, #16
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	bd80      	pop	{r7, pc}

0800bb90 <SecureElementVerifyAesCmac>:

SecureElementStatus_t SecureElementVerifyAesCmac( uint8_t* buffer, uint16_t size, uint32_t expectedCmac,
                                                  KeyIdentifier_t keyID )
{
 800bb90:	b580      	push	{r7, lr}
 800bb92:	b088      	sub	sp, #32
 800bb94:	af02      	add	r7, sp, #8
 800bb96:	60f8      	str	r0, [r7, #12]
 800bb98:	607a      	str	r2, [r7, #4]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	460b      	mov	r3, r1
 800bb9e:	817b      	strh	r3, [r7, #10]
 800bba0:	4613      	mov	r3, r2
 800bba2:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL )
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d101      	bne.n	800bbae <SecureElementVerifyAesCmac+0x1e>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bbaa:	2302      	movs	r3, #2
 800bbac:	e01b      	b.n	800bbe6 <SecureElementVerifyAesCmac+0x56>
    }

    SecureElementStatus_t retval   = SECURE_ELEMENT_ERROR;
 800bbae:	2306      	movs	r3, #6
 800bbb0:	75fb      	strb	r3, [r7, #23]
#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint32_t              compCmac = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	613b      	str	r3, [r7, #16]
    retval                         = ComputeCmac( NULL, buffer, size, keyID, &compCmac );
 800bbb6:	7a79      	ldrb	r1, [r7, #9]
 800bbb8:	897a      	ldrh	r2, [r7, #10]
 800bbba:	f107 0310 	add.w	r3, r7, #16
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	460b      	mov	r3, r1
 800bbc2:	68f9      	ldr	r1, [r7, #12]
 800bbc4:	2000      	movs	r0, #0
 800bbc6:	f7ff fdf1 	bl	800b7ac <ComputeCmac>
 800bbca:	4603      	mov	r3, r0
 800bbcc:	75fb      	strb	r3, [r7, #23]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bbce:	7dfb      	ldrb	r3, [r7, #23]
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d001      	beq.n	800bbd8 <SecureElementVerifyAesCmac+0x48>
    {
        return retval;
 800bbd4:	7dfb      	ldrb	r3, [r7, #23]
 800bbd6:	e006      	b.n	800bbe6 <SecureElementVerifyAesCmac+0x56>
    }

    if( expectedCmac != compCmac )
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	687a      	ldr	r2, [r7, #4]
 800bbdc:	429a      	cmp	r2, r3
 800bbde:	d001      	beq.n	800bbe4 <SecureElementVerifyAesCmac+0x54>
    {
        retval = SECURE_ELEMENT_FAIL_CMAC;
 800bbe0:	2301      	movs	r3, #1
 800bbe2:	75fb      	strb	r3, [r7, #23]
        retval = SECURE_ELEMENT_ERROR;
    }

#endif /* LORAWAN_KMS */

    return retval;
 800bbe4:	7dfb      	ldrb	r3, [r7, #23]
}
 800bbe6:	4618      	mov	r0, r3
 800bbe8:	3718      	adds	r7, #24
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <SecureElementAesEncrypt>:

SecureElementStatus_t SecureElementAesEncrypt( uint8_t* buffer, uint16_t size, KeyIdentifier_t keyID,
                                               uint8_t* encBuffer )
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b0c2      	sub	sp, #264	@ 0x108
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	60f8      	str	r0, [r7, #12]
 800bbf6:	4608      	mov	r0, r1
 800bbf8:	4611      	mov	r1, r2
 800bbfa:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bbfe:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800bc02:	6013      	str	r3, [r2, #0]
 800bc04:	4603      	mov	r3, r0
 800bc06:	817b      	strh	r3, [r7, #10]
 800bc08:	460b      	mov	r3, r1
 800bc0a:	727b      	strb	r3, [r7, #9]
    if( buffer == NULL || encBuffer == NULL )
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d006      	beq.n	800bc20 <SecureElementAesEncrypt+0x32>
 800bc12:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 800bc16:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <SecureElementAesEncrypt+0x36>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bc20:	2302      	movs	r3, #2
 800bc22:	e046      	b.n	800bcb2 <SecureElementAesEncrypt+0xc4>
    }

    // Check if the size is divisible by 16,
    if( ( size % 16 ) != 0 )
 800bc24:	897b      	ldrh	r3, [r7, #10]
 800bc26:	f003 030f 	and.w	r3, r3, #15
 800bc2a:	b29b      	uxth	r3, r3
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d001      	beq.n	800bc34 <SecureElementAesEncrypt+0x46>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bc30:	2305      	movs	r3, #5
 800bc32:	e03e      	b.n	800bcb2 <SecureElementAesEncrypt+0xc4>
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    lorawan_aes_context aesContext;
    memset1( aesContext.ksch, '\0', 240 );
 800bc34:	f107 0314 	add.w	r3, r7, #20
 800bc38:	22f0      	movs	r2, #240	@ 0xf0
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	f00a ff49 	bl	8016ad4 <memset1>

    Key_t*                pItem;
    SecureElementStatus_t retval = GetKeyByID( keyID, &pItem );
 800bc42:	f107 0210 	add.w	r2, r7, #16
 800bc46:	7a7b      	ldrb	r3, [r7, #9]
 800bc48:	4611      	mov	r1, r2
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	f7ff fd7e 	bl	800b74c <GetKeyByID>
 800bc50:	4603      	mov	r3, r0
 800bc52:	f887 3106 	strb.w	r3, [r7, #262]	@ 0x106

    if( retval == SECURE_ELEMENT_SUCCESS )
 800bc56:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d127      	bne.n	800bcae <SecureElementAesEncrypt+0xc0>
    {
        lorawan_aes_set_key(pItem->KeyValue, 16, &aesContext);
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	3301      	adds	r3, #1
 800bc62:	f107 0214 	add.w	r2, r7, #20
 800bc66:	2110      	movs	r1, #16
 800bc68:	4618      	mov	r0, r3
 800bc6a:	f7ff fb65 	bl	800b338 <lorawan_aes_set_key>

        uint8_t block = 0;
 800bc6e:	2300      	movs	r3, #0
 800bc70:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107

        while( size != 0 )
 800bc74:	e018      	b.n	800bca8 <SecureElementAesEncrypt+0xba>
        {
            lorawan_aes_encrypt(&buffer[block], &encBuffer[block], &aesContext);
 800bc76:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bc7a:	68fa      	ldr	r2, [r7, #12]
 800bc7c:	18d0      	adds	r0, r2, r3
 800bc7e:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bc82:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 800bc86:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800bc8a:	6812      	ldr	r2, [r2, #0]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f107 0214 	add.w	r2, r7, #20
 800bc92:	4619      	mov	r1, r3
 800bc94:	f7ff fc2e 	bl	800b4f4 <lorawan_aes_encrypt>
            block = block + 16;
 800bc98:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 800bc9c:	3310      	adds	r3, #16
 800bc9e:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            size  = size - 16;
 800bca2:	897b      	ldrh	r3, [r7, #10]
 800bca4:	3b10      	subs	r3, #16
 800bca6:	817b      	strh	r3, [r7, #10]
        while( size != 0 )
 800bca8:	897b      	ldrh	r3, [r7, #10]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d1e3      	bne.n	800bc76 <SecureElementAesEncrypt+0x88>
    {
        retval = SECURE_ELEMENT_ERROR;
    }
#endif /* LORAWAN_KMS */

    return retval;
 800bcae:	f897 3106 	ldrb.w	r3, [r7, #262]	@ 0x106
}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <SecureElementDeriveAndStoreKey>:

SecureElementStatus_t SecureElementDeriveAndStoreKey( uint8_t* input, KeyIdentifier_t rootKeyID,
                                                      KeyIdentifier_t targetKeyID )
{
 800bcbc:	b580      	push	{r7, lr}
 800bcbe:	b088      	sub	sp, #32
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	6078      	str	r0, [r7, #4]
 800bcc4:	460b      	mov	r3, r1
 800bcc6:	70fb      	strb	r3, [r7, #3]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	70bb      	strb	r3, [r7, #2]
    if( input == NULL )
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <SecureElementDeriveAndStoreKey+0x1a>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bcd2:	2302      	movs	r3, #2
 800bcd4:	e02e      	b.n	800bd34 <SecureElementDeriveAndStoreKey+0x78>
    }

    SecureElementStatus_t retval  = SECURE_ELEMENT_ERROR;
 800bcd6:	2306      	movs	r3, #6
 800bcd8:	77fb      	strb	r3, [r7, #31]

    // In case of MC_KE_KEY, only McRootKey can be used as root key
    if( targetKeyID == MC_KE_KEY )
 800bcda:	78bb      	ldrb	r3, [r7, #2]
 800bcdc:	2b7f      	cmp	r3, #127	@ 0x7f
 800bcde:	d104      	bne.n	800bcea <SecureElementDeriveAndStoreKey+0x2e>
    {
        if( rootKeyID != MC_ROOT_KEY )
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	2b04      	cmp	r3, #4
 800bce4:	d001      	beq.n	800bcea <SecureElementDeriveAndStoreKey+0x2e>
        {
            return SECURE_ELEMENT_ERROR_INVALID_KEY_ID;
 800bce6:	2303      	movs	r3, #3
 800bce8:	e024      	b.n	800bd34 <SecureElementDeriveAndStoreKey+0x78>
        }
    }

#if (!defined (LORAWAN_KMS) || (LORAWAN_KMS == 0))
    uint8_t key[16] = { 0 };
 800bcea:	2300      	movs	r3, #0
 800bcec:	60fb      	str	r3, [r7, #12]
 800bcee:	f107 0310 	add.w	r3, r7, #16
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	601a      	str	r2, [r3, #0]
 800bcf6:	605a      	str	r2, [r3, #4]
 800bcf8:	609a      	str	r2, [r3, #8]
    // Derive key
    retval = SecureElementAesEncrypt( input, 16, rootKeyID, key );
 800bcfa:	f107 030c 	add.w	r3, r7, #12
 800bcfe:	78fa      	ldrb	r2, [r7, #3]
 800bd00:	2110      	movs	r1, #16
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff ff73 	bl	800bbee <SecureElementAesEncrypt>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd0c:	7ffb      	ldrb	r3, [r7, #31]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <SecureElementDeriveAndStoreKey+0x5a>
    {
        return retval;
 800bd12:	7ffb      	ldrb	r3, [r7, #31]
 800bd14:	e00e      	b.n	800bd34 <SecureElementDeriveAndStoreKey+0x78>
    }

    // Store key
    retval = SecureElementSetKey( targetKeyID, key );
 800bd16:	f107 020c 	add.w	r2, r7, #12
 800bd1a:	78bb      	ldrb	r3, [r7, #2]
 800bd1c:	4611      	mov	r1, r2
 800bd1e:	4618      	mov	r0, r3
 800bd20:	f7ff feba 	bl	800ba98 <SecureElementSetKey>
 800bd24:	4603      	mov	r3, r0
 800bd26:	77fb      	strb	r3, [r7, #31]
    if( retval != SECURE_ELEMENT_SUCCESS )
 800bd28:	7ffb      	ldrb	r3, [r7, #31]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d001      	beq.n	800bd32 <SecureElementDeriveAndStoreKey+0x76>
    {
        return retval;
 800bd2e:	7ffb      	ldrb	r3, [r7, #31]
 800bd30:	e000      	b.n	800bd34 <SecureElementDeriveAndStoreKey+0x78>
    }

    return SECURE_ELEMENT_SUCCESS;
 800bd32:	2300      	movs	r3, #0
    {
        retval = SECURE_ELEMENT_ERROR;
    }
    return retval;
#endif /* LORAWAN_KMS */
}
 800bd34:	4618      	mov	r0, r3
 800bd36:	3720      	adds	r7, #32
 800bd38:	46bd      	mov	sp, r7
 800bd3a:	bd80      	pop	{r7, pc}

0800bd3c <SecureElementProcessJoinAccept>:

SecureElementStatus_t SecureElementProcessJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEui,
                                                      uint16_t devNonce, uint8_t* encJoinAccept,
                                                      uint8_t encJoinAcceptSize, uint8_t* decJoinAccept,
                                                      uint8_t* versionMinor )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60b9      	str	r1, [r7, #8]
 800bd44:	607b      	str	r3, [r7, #4]
 800bd46:	4603      	mov	r3, r0
 800bd48:	73fb      	strb	r3, [r7, #15]
 800bd4a:	4613      	mov	r3, r2
 800bd4c:	81bb      	strh	r3, [r7, #12]
    if( ( encJoinAccept == NULL ) || ( decJoinAccept == NULL ) || ( versionMinor == NULL ) )
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d005      	beq.n	800bd60 <SecureElementProcessJoinAccept+0x24>
 800bd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d002      	beq.n	800bd60 <SecureElementProcessJoinAccept+0x24>
 800bd5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <SecureElementProcessJoinAccept+0x28>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800bd60:	2302      	movs	r3, #2
 800bd62:	e064      	b.n	800be2e <SecureElementProcessJoinAccept+0xf2>
    }

    // Check that frame size isn't bigger than a JoinAccept with CFList size
    if( encJoinAcceptSize > LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE )
 800bd64:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd68:	2b21      	cmp	r3, #33	@ 0x21
 800bd6a:	d901      	bls.n	800bd70 <SecureElementProcessJoinAccept+0x34>
    {
        return SECURE_ELEMENT_ERROR_BUF_SIZE;
 800bd6c:	2305      	movs	r3, #5
 800bd6e:	e05e      	b.n	800be2e <SecureElementProcessJoinAccept+0xf2>
    }

    // Determine decryption key
    KeyIdentifier_t encKeyID = NWK_KEY;
 800bd70:	2301      	movs	r3, #1
 800bd72:	75fb      	strb	r3, [r7, #23]
    {
        encKeyID = J_S_ENC_KEY;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    memcpy1( decJoinAccept, encJoinAccept, encJoinAcceptSize );
 800bd74:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	6879      	ldr	r1, [r7, #4]
 800bd7e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bd80:	f00a fe6d 	bl	8016a5e <memcpy1>

    // Decrypt JoinAccept, skip MHDR
    if( SecureElementAesEncrypt( encJoinAccept + LORAMAC_MHDR_FIELD_SIZE, encJoinAcceptSize - LORAMAC_MHDR_FIELD_SIZE,
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	1c58      	adds	r0, r3, #1
 800bd88:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bd8c:	b29b      	uxth	r3, r3
 800bd8e:	3b01      	subs	r3, #1
 800bd90:	b299      	uxth	r1, r3
 800bd92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd94:	3301      	adds	r3, #1
 800bd96:	7dfa      	ldrb	r2, [r7, #23]
 800bd98:	f7ff ff29 	bl	800bbee <SecureElementAesEncrypt>
 800bd9c:	4603      	mov	r3, r0
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d001      	beq.n	800bda6 <SecureElementProcessJoinAccept+0x6a>
                                 encKeyID, decJoinAccept + LORAMAC_MHDR_FIELD_SIZE ) != SECURE_ELEMENT_SUCCESS )
    {
        return SECURE_ELEMENT_FAIL_ENCRYPT;
 800bda2:	2307      	movs	r3, #7
 800bda4:	e043      	b.n	800be2e <SecureElementProcessJoinAccept+0xf2>
    }

    *versionMinor = ( ( decJoinAccept[11] & 0x80 ) == 0x80 ) ? 1 : 0;
 800bda6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda8:	330b      	adds	r3, #11
 800bdaa:	781b      	ldrb	r3, [r3, #0]
 800bdac:	09db      	lsrs	r3, r3, #7
 800bdae:	b2da      	uxtb	r2, r3
 800bdb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb2:	701a      	strb	r2, [r3, #0]

    uint32_t mic = 0;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	613b      	str	r3, [r7, #16]

    mic = ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE] << 0 );
 800bdb8:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdc0:	4413      	add	r3, r2
 800bdc2:	781b      	ldrb	r3, [r3, #0]
 800bdc4:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 1] << 8 );
 800bdc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdca:	3b03      	subs	r3, #3
 800bdcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdce:	4413      	add	r3, r2
 800bdd0:	781b      	ldrb	r3, [r3, #0]
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	693a      	ldr	r2, [r7, #16]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 2] << 16 );
 800bdda:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdde:	3b02      	subs	r3, #2
 800bde0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bde2:	4413      	add	r3, r2
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	041b      	lsls	r3, r3, #16
 800bde8:	693a      	ldr	r2, [r7, #16]
 800bdea:	4313      	orrs	r3, r2
 800bdec:	613b      	str	r3, [r7, #16]
    mic |= ( ( uint32_t ) decJoinAccept[encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE + 3] << 24 );
 800bdee:	f897 3020 	ldrb.w	r3, [r7, #32]
 800bdf2:	3b01      	subs	r3, #1
 800bdf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bdf6:	4413      	add	r3, r2
 800bdf8:	781b      	ldrb	r3, [r3, #0]
 800bdfa:	061b      	lsls	r3, r3, #24
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	4313      	orrs	r3, r2
 800be00:	613b      	str	r3, [r7, #16]
    //  - Header buffer to be used for MIC computation
    //        - LoRaWAN 1.0.x : micHeader = [MHDR(1)]
    //        - LoRaWAN 1.1.x : micHeader = [JoinReqType(1), JoinEUI(8), DevNonce(2), MHDR(1)]

    // Verify mic
    if( *versionMinor == 0 )
 800be02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be04:	781b      	ldrb	r3, [r3, #0]
 800be06:	2b00      	cmp	r3, #0
 800be08:	d10e      	bne.n	800be28 <SecureElementProcessJoinAccept+0xec>
    {
        // For LoRaWAN 1.0.x
        //   cmac = aes128_cmac(NwkKey, MHDR |  JoinNonce | NetID | DevAddr | DLSettings | RxDelay | CFList |
        //   CFListType)
        if( SecureElementVerifyAesCmac( decJoinAccept, ( encJoinAcceptSize - LORAMAC_MIC_FIELD_SIZE ), mic, NWK_KEY ) !=
 800be0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800be0e:	b29b      	uxth	r3, r3
 800be10:	3b04      	subs	r3, #4
 800be12:	b299      	uxth	r1, r3
 800be14:	2301      	movs	r3, #1
 800be16:	693a      	ldr	r2, [r7, #16]
 800be18:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800be1a:	f7ff feb9 	bl	800bb90 <SecureElementVerifyAesCmac>
 800be1e:	4603      	mov	r3, r0
 800be20:	2b00      	cmp	r3, #0
 800be22:	d003      	beq.n	800be2c <SecureElementProcessJoinAccept+0xf0>
            SECURE_ELEMENT_SUCCESS )
        {
            return SECURE_ELEMENT_FAIL_CMAC;
 800be24:	2301      	movs	r3, #1
 800be26:	e002      	b.n	800be2e <SecureElementProcessJoinAccept+0xf2>
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    else
    {
        return SECURE_ELEMENT_ERROR_INVALID_LORAWAM_SPEC_VERSION;
 800be28:	2304      	movs	r3, #4
 800be2a:	e000      	b.n	800be2e <SecureElementProcessJoinAccept+0xf2>
    }

    return SECURE_ELEMENT_SUCCESS;
 800be2c:	2300      	movs	r3, #0
}
 800be2e:	4618      	mov	r0, r3
 800be30:	3718      	adds	r7, #24
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}
	...

0800be38 <SecureElementSetDevEui>:
    return SECURE_ELEMENT_SUCCESS;
}
#endif /* LORAMAC_VERSION */

SecureElementStatus_t SecureElementSetDevEui( uint8_t* devEui )
{
 800be38:	b580      	push	{r7, lr}
 800be3a:	b082      	sub	sp, #8
 800be3c:	af00      	add	r7, sp, #0
 800be3e:	6078      	str	r0, [r7, #4]
    if( devEui == NULL )
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d101      	bne.n	800be4a <SecureElementSetDevEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be46:	2302      	movs	r3, #2
 800be48:	e007      	b.n	800be5a <SecureElementSetDevEui+0x22>
    }
    memcpy1( SeNvm->DevEui, devEui, SE_EUI_SIZE );
 800be4a:	4b06      	ldr	r3, [pc, #24]	@ (800be64 <SecureElementSetDevEui+0x2c>)
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	2208      	movs	r2, #8
 800be50:	6879      	ldr	r1, [r7, #4]
 800be52:	4618      	mov	r0, r3
 800be54:	f00a fe03 	bl	8016a5e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be58:	2300      	movs	r3, #0
}
 800be5a:	4618      	mov	r0, r3
 800be5c:	3708      	adds	r7, #8
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	bf00      	nop
 800be64:	200004b8 	.word	0x200004b8

0800be68 <SecureElementGetDevEui>:

uint8_t* SecureElementGetDevEui( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	af00      	add	r7, sp, #0
    return SeNvm->DevEui;
 800be6c:	4b02      	ldr	r3, [pc, #8]	@ (800be78 <SecureElementGetDevEui+0x10>)
 800be6e:	681b      	ldr	r3, [r3, #0]
}
 800be70:	4618      	mov	r0, r3
 800be72:	46bd      	mov	sp, r7
 800be74:	bc80      	pop	{r7}
 800be76:	4770      	bx	lr
 800be78:	200004b8 	.word	0x200004b8

0800be7c <SecureElementSetJoinEui>:

SecureElementStatus_t SecureElementSetJoinEui( uint8_t* joinEui )
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b082      	sub	sp, #8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
    if( joinEui == NULL )
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d101      	bne.n	800be8e <SecureElementSetJoinEui+0x12>
    {
        return SECURE_ELEMENT_ERROR_NPE;
 800be8a:	2302      	movs	r3, #2
 800be8c:	e008      	b.n	800bea0 <SecureElementSetJoinEui+0x24>
    }
    memcpy1( SeNvm->JoinEui, joinEui, SE_EUI_SIZE );
 800be8e:	4b06      	ldr	r3, [pc, #24]	@ (800bea8 <SecureElementSetJoinEui+0x2c>)
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	3308      	adds	r3, #8
 800be94:	2208      	movs	r2, #8
 800be96:	6879      	ldr	r1, [r7, #4]
 800be98:	4618      	mov	r0, r3
 800be9a:	f00a fde0 	bl	8016a5e <memcpy1>
    return SECURE_ELEMENT_SUCCESS;
 800be9e:	2300      	movs	r3, #0
}
 800bea0:	4618      	mov	r0, r3
 800bea2:	3708      	adds	r7, #8
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bd80      	pop	{r7, pc}
 800bea8:	200004b8 	.word	0x200004b8

0800beac <SecureElementGetJoinEui>:

uint8_t* SecureElementGetJoinEui( void )
{
 800beac:	b480      	push	{r7}
 800beae:	af00      	add	r7, sp, #0
    return SeNvm->JoinEui;
 800beb0:	4b03      	ldr	r3, [pc, #12]	@ (800bec0 <SecureElementGetJoinEui+0x14>)
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	3308      	adds	r3, #8
}
 800beb6:	4618      	mov	r0, r3
 800beb8:	46bd      	mov	sp, r7
 800beba:	bc80      	pop	{r7}
 800bebc:	4770      	bx	lr
 800bebe:	bf00      	nop
 800bec0:	200004b8 	.word	0x200004b8

0800bec4 <LmHandlerInit>:
 */
static bool LmHandlerPackageIsInitialized(uint8_t id);

/* Exported functions ---------------------------------------------------------*/
LmHandlerErrorStatus_t LmHandlerInit( LmHandlerCallbacks_t *handlerCallbacks, uint32_t fwVersion )
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	b082      	sub	sp, #8
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
 800becc:	6039      	str	r1, [r7, #0]
    LmHandlerCallbacks = handlerCallbacks;
 800bece:	4a23      	ldr	r2, [pc, #140]	@ (800bf5c <LmHandlerInit+0x98>)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	6013      	str	r3, [r2, #0]

    LoRaMacPrimitives.MacMcpsConfirm = McpsConfirm;
 800bed4:	4b22      	ldr	r3, [pc, #136]	@ (800bf60 <LmHandlerInit+0x9c>)
 800bed6:	4a23      	ldr	r2, [pc, #140]	@ (800bf64 <LmHandlerInit+0xa0>)
 800bed8:	601a      	str	r2, [r3, #0]
    LoRaMacPrimitives.MacMcpsIndication = McpsIndication;
 800beda:	4b21      	ldr	r3, [pc, #132]	@ (800bf60 <LmHandlerInit+0x9c>)
 800bedc:	4a22      	ldr	r2, [pc, #136]	@ (800bf68 <LmHandlerInit+0xa4>)
 800bede:	605a      	str	r2, [r3, #4]
    LoRaMacPrimitives.MacMlmeConfirm = MlmeConfirm;
 800bee0:	4b1f      	ldr	r3, [pc, #124]	@ (800bf60 <LmHandlerInit+0x9c>)
 800bee2:	4a22      	ldr	r2, [pc, #136]	@ (800bf6c <LmHandlerInit+0xa8>)
 800bee4:	609a      	str	r2, [r3, #8]
    LoRaMacPrimitives.MacMlmeIndication = MlmeIndication;
 800bee6:	4b1e      	ldr	r3, [pc, #120]	@ (800bf60 <LmHandlerInit+0x9c>)
 800bee8:	4a21      	ldr	r2, [pc, #132]	@ (800bf70 <LmHandlerInit+0xac>)
 800beea:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.GetBatteryLevel = LmHandlerCallbacks->GetBatteryLevel;
 800beec:	4b1b      	ldr	r3, [pc, #108]	@ (800bf5c <LmHandlerInit+0x98>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	4a20      	ldr	r2, [pc, #128]	@ (800bf74 <LmHandlerInit+0xb0>)
 800bef4:	6013      	str	r3, [r2, #0]
    LoRaMacCallbacks.GetTemperatureLevel = LmHandlerCallbacks->GetTemperature;
 800bef6:	4b19      	ldr	r3, [pc, #100]	@ (800bf5c <LmHandlerInit+0x98>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	685b      	ldr	r3, [r3, #4]
 800befc:	4a1d      	ldr	r2, [pc, #116]	@ (800bf74 <LmHandlerInit+0xb0>)
 800befe:	6053      	str	r3, [r2, #4]
    LoRaMacCallbacks.GetUniqueId = LmHandlerCallbacks->GetUniqueId;
 800bf00:	4b16      	ldr	r3, [pc, #88]	@ (800bf5c <LmHandlerInit+0x98>)
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	689b      	ldr	r3, [r3, #8]
 800bf06:	4a1b      	ldr	r2, [pc, #108]	@ (800bf74 <LmHandlerInit+0xb0>)
 800bf08:	6093      	str	r3, [r2, #8]
    LoRaMacCallbacks.NvmDataChange  = NvmDataMgmtEvent;
 800bf0a:	4b1a      	ldr	r3, [pc, #104]	@ (800bf74 <LmHandlerInit+0xb0>)
 800bf0c:	4a1a      	ldr	r2, [pc, #104]	@ (800bf78 <LmHandlerInit+0xb4>)
 800bf0e:	60da      	str	r2, [r3, #12]
    LoRaMacCallbacks.MacProcessNotify = LmHandlerCallbacks->OnMacProcess;
 800bf10:	4b12      	ldr	r3, [pc, #72]	@ (800bf5c <LmHandlerInit+0x98>)
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	699b      	ldr	r3, [r3, #24]
 800bf16:	4a17      	ldr	r2, [pc, #92]	@ (800bf74 <LmHandlerInit+0xb0>)
 800bf18:	6113      	str	r3, [r2, #16]

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LmhpComplianceParams.FwVersion.Value = fwVersion;
 800bf1a:	4a18      	ldr	r2, [pc, #96]	@ (800bf7c <LmHandlerInit+0xb8>)
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	6013      	str	r3, [r2, #0]
    LmhpComplianceParams.OnTxPeriodicityChanged = LmHandlerCallbacks->OnTxPeriodicityChanged;
 800bf20:	4b0e      	ldr	r3, [pc, #56]	@ (800bf5c <LmHandlerInit+0x98>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bf26:	4a15      	ldr	r2, [pc, #84]	@ (800bf7c <LmHandlerInit+0xb8>)
 800bf28:	6053      	str	r3, [r2, #4]
    LmhpComplianceParams.OnTxFrameCtrlChanged = LmHandlerCallbacks->OnTxFrameCtrlChanged;
 800bf2a:	4b0c      	ldr	r3, [pc, #48]	@ (800bf5c <LmHandlerInit+0x98>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bf30:	4a12      	ldr	r2, [pc, #72]	@ (800bf7c <LmHandlerInit+0xb8>)
 800bf32:	6093      	str	r3, [r2, #8]
    LmhpComplianceParams.OnPingSlotPeriodicityChanged = LmHandlerCallbacks->OnPingSlotPeriodicityChanged;
 800bf34:	4b09      	ldr	r3, [pc, #36]	@ (800bf5c <LmHandlerInit+0x98>)
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bf3a:	4a10      	ldr	r2, [pc, #64]	@ (800bf7c <LmHandlerInit+0xb8>)
 800bf3c:	60d3      	str	r3, [r2, #12]
#endif /* LORAMAC_VERSION */

    /*The LoRa-Alliance Compliance protocol package should always be initialized and activated.*/
    if (LmHandlerPackageRegister(PACKAGE_ID_COMPLIANCE, &LmhpComplianceParams) != LORAMAC_HANDLER_SUCCESS)
 800bf3e:	490f      	ldr	r1, [pc, #60]	@ (800bf7c <LmHandlerInit+0xb8>)
 800bf40:	2000      	movs	r0, #0
 800bf42:	f000 fd7f 	bl	800ca44 <LmHandlerPackageRegister>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d002      	beq.n	800bf52 <LmHandlerInit+0x8e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bf4c:	f04f 33ff 	mov.w	r3, #4294967295
 800bf50:	e000      	b.n	800bf54 <LmHandlerInit+0x90>
    if (LmhpPackagesRegistrationInit() != LORAMAC_HANDLER_SUCCESS)
    {
        return LORAMAC_HANDLER_ERROR;
    }
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
    return LORAMAC_HANDLER_SUCCESS;
 800bf52:	2300      	movs	r3, #0
}
 800bf54:	4618      	mov	r0, r3
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	200004f4 	.word	0x200004f4
 800bf60:	200004f8 	.word	0x200004f8
 800bf64:	0800c751 	.word	0x0800c751
 800bf68:	0800c7b9 	.word	0x0800c7b9
 800bf6c:	0800c885 	.word	0x0800c885
 800bf70:	0800c99d 	.word	0x0800c99d
 800bf74:	20000508 	.word	0x20000508
 800bf78:	0800ce15 	.word	0x0800ce15
 800bf7c:	200004bc 	.word	0x200004bc

0800bf80 <LmHandlerConfigure>:
        return LORAMAC_HANDLER_BUSY_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerConfigure( LmHandlerParams_t *handlerParams )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b094      	sub	sp, #80	@ 0x50
 800bf84:	af04      	add	r7, sp, #16
 800bf86:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    LoraInfo_t *loraInfo;

    UTIL_MEM_cpy_8((void *)&LmHandlerParams, (const void *)handlerParams, sizeof(LmHandlerParams_t));
 800bf88:	2214      	movs	r2, #20
 800bf8a:	6879      	ldr	r1, [r7, #4]
 800bf8c:	488d      	ldr	r0, [pc, #564]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800bf8e:	f00e f86b 	bl	801a068 <UTIL_MEM_cpy_8>

#if ( LORAMAC_CLASSB_ENABLED == 1 )
    IsClassBSwitchPending = false;
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    IsUplinkTxPending = false;
 800bf92:	4b8d      	ldr	r3, [pc, #564]	@ (800c1c8 <LmHandlerConfigure+0x248>)
 800bf94:	2200      	movs	r2, #0
 800bf96:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    loraInfo = LoraInfo_GetPtr();
 800bf98:	f7fe fb0c 	bl	800a5b4 <LoraInfo_GetPtr>
 800bf9c:	63f8      	str	r0, [r7, #60]	@ 0x3c

    if (0U == ((1 << (LmHandlerParams.ActiveRegion)) & (loraInfo->Region)))
 800bf9e:	4b89      	ldr	r3, [pc, #548]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	2301      	movs	r3, #1
 800bfa6:	4093      	lsls	r3, r2
 800bfa8:	461a      	mov	r2, r3
 800bfaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	4013      	ands	r3, r2
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d107      	bne.n	800bfc4 <LmHandlerConfigure+0x44>
    {
        MW_LOG(TS_ON, VLEVEL_ALWAYS, "error: Region is not defined in the MW: set lorawan_conf.h accordingly\r\n");
 800bfb4:	4b85      	ldr	r3, [pc, #532]	@ (800c1cc <LmHandlerConfigure+0x24c>)
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	2100      	movs	r1, #0
 800bfba:	2000      	movs	r0, #0
 800bfbc:	f00f f89e 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        while (1) {}  /* error: Region is not defined in the MW */
 800bfc0:	bf00      	nop
 800bfc2:	e7fd      	b.n	800bfc0 <LmHandlerConfigure+0x40>
    }

    if (LoRaMacInitialization(&LoRaMacPrimitives, &LoRaMacCallbacks, LmHandlerParams.ActiveRegion) != LORAMAC_STATUS_OK)
 800bfc4:	4b7f      	ldr	r3, [pc, #508]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800bfc6:	781b      	ldrb	r3, [r3, #0]
 800bfc8:	461a      	mov	r2, r3
 800bfca:	4981      	ldr	r1, [pc, #516]	@ (800c1d0 <LmHandlerConfigure+0x250>)
 800bfcc:	4881      	ldr	r0, [pc, #516]	@ (800c1d4 <LmHandlerConfigure+0x254>)
 800bfce:	f004 fe8d 	bl	8010cec <LoRaMacInitialization>
 800bfd2:	4603      	mov	r3, r0
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d002      	beq.n	800bfde <LmHandlerConfigure+0x5e>
    {
        return LORAMAC_HANDLER_ERROR;
 800bfd8:	f04f 33ff 	mov.w	r3, #4294967295
 800bfdc:	e0ee      	b.n	800c1bc <LmHandlerConfigure+0x23c>
    }

    // Try the restore context from the Backup RAM structure if data retention is available
    mibReq.Type = MIB_NVM_CTXS;
 800bfde:	2327      	movs	r3, #39	@ 0x27
 800bfe0:	763b      	strb	r3, [r7, #24]
    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800bfe2:	f107 0318 	add.w	r3, r7, #24
 800bfe6:	4618      	mov	r0, r3
 800bfe8:	f005 fbd0 	bl	801178c <LoRaMacMibSetRequestConfirm>
 800bfec:	4603      	mov	r3, r0
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d103      	bne.n	800bffa <LmHandlerConfigure+0x7a>
    {
        CtxRestoreDone = true;
 800bff2:	4b79      	ldr	r3, [pc, #484]	@ (800c1d8 <LmHandlerConfigure+0x258>)
 800bff4:	2201      	movs	r2, #1
 800bff6:	701a      	strb	r2, [r3, #0]
 800bff8:	e02a      	b.n	800c050 <LmHandlerConfigure+0xd0>
    }
    else
    {
        // Restore context data backup from user callback (stored in FLASH)
        mibReq.Type = MIB_NVM_BKP_CTXS;
 800bffa:	2328      	movs	r3, #40	@ 0x28
 800bffc:	763b      	strb	r3, [r7, #24]
        if (LmHandlerCallbacks->OnRestoreContextRequest != NULL)
 800bffe:	4b77      	ldr	r3, [pc, #476]	@ (800c1dc <LmHandlerConfigure+0x25c>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	691b      	ldr	r3, [r3, #16]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00c      	beq.n	800c022 <LmHandlerConfigure+0xa2>
        {
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c008:	f107 0318 	add.w	r3, r7, #24
 800c00c:	4618      	mov	r0, r3
 800c00e:	f005 fa17 	bl	8011440 <LoRaMacMibGetRequestConfirm>
            LmHandlerCallbacks->OnRestoreContextRequest(mibReq.Param.BackupContexts, sizeof(LoRaMacNvmData_t));
 800c012:	4b72      	ldr	r3, [pc, #456]	@ (800c1dc <LmHandlerConfigure+0x25c>)
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	691b      	ldr	r3, [r3, #16]
 800c018:	69fa      	ldr	r2, [r7, #28]
 800c01a:	f240 517c 	movw	r1, #1404	@ 0x57c
 800c01e:	4610      	mov	r0, r2
 800c020:	4798      	blx	r3
        }
        // Restore context data from backup to main nvm structure
        mibReq.Type = MIB_NVM_CTXS;
 800c022:	2327      	movs	r3, #39	@ 0x27
 800c024:	763b      	strb	r3, [r7, #24]
        if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c026:	f107 0318 	add.w	r3, r7, #24
 800c02a:	4618      	mov	r0, r3
 800c02c:	f005 fbae 	bl	801178c <LoRaMacMibSetRequestConfirm>
 800c030:	4603      	mov	r3, r0
 800c032:	2b00      	cmp	r3, #0
 800c034:	d10c      	bne.n	800c050 <LmHandlerConfigure+0xd0>
        {
            mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c036:	2301      	movs	r3, #1
 800c038:	763b      	strb	r3, [r7, #24]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c03a:	f107 0318 	add.w	r3, r7, #24
 800c03e:	4618      	mov	r0, r3
 800c040:	f005 f9fe 	bl	8011440 <LoRaMacMibGetRequestConfirm>
            if (mibReq.Param.NetworkActivation != ACTIVATION_TYPE_NONE)
 800c044:	7f3b      	ldrb	r3, [r7, #28]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d002      	beq.n	800c050 <LmHandlerConfigure+0xd0>
            {
                CtxRestoreDone = true;
 800c04a:	4b63      	ldr	r3, [pc, #396]	@ (800c1d8 <LmHandlerConfigure+0x258>)
 800c04c:	2201      	movs	r2, #1
 800c04e:	701a      	strb	r2, [r3, #0]
            }
        }
    }

    if (CtxRestoreDone == true)
 800c050:	4b61      	ldr	r3, [pc, #388]	@ (800c1d8 <LmHandlerConfigure+0x258>)
 800c052:	781b      	ldrb	r3, [r3, #0]
 800c054:	2b00      	cmp	r3, #0
 800c056:	d02a      	beq.n	800c0ae <LmHandlerConfigure+0x12e>
    {
        if ( LmHandlerCallbacks->OnNvmDataChange != NULL )
 800c058:	4b60      	ldr	r3, [pc, #384]	@ (800c1dc <LmHandlerConfigure+0x25c>)
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	69db      	ldr	r3, [r3, #28]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d004      	beq.n	800c06c <LmHandlerConfigure+0xec>
        {
            LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_RESTORE );
 800c062:	4b5e      	ldr	r3, [pc, #376]	@ (800c1dc <LmHandlerConfigure+0x25c>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	69db      	ldr	r3, [r3, #28]
 800c068:	2000      	movs	r0, #0
 800c06a:	4798      	blx	r3
        }

        mibReq.Type = MIB_DEV_ADDR;
 800c06c:	2306      	movs	r3, #6
 800c06e:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c070:	f107 0318 	add.w	r3, r7, #24
 800c074:	4618      	mov	r0, r3
 800c076:	f005 f9e3 	bl	8011440 <LoRaMacMibGetRequestConfirm>
        CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c07a:	69fb      	ldr	r3, [r7, #28]
 800c07c:	4a58      	ldr	r2, [pc, #352]	@ (800c1e0 <LmHandlerConfigure+0x260>)
 800c07e:	6153      	str	r3, [r2, #20]

        mibReq.Type = MIB_NVM_CTXS;
 800c080:	2327      	movs	r3, #39	@ 0x27
 800c082:	763b      	strb	r3, [r7, #24]
        LoRaMacMibGetRequestConfirm( &mibReq );
 800c084:	f107 0318 	add.w	r3, r7, #24
 800c088:	4618      	mov	r0, r3
 800c08a:	f005 f9d9 	bl	8011440 <LoRaMacMibGetRequestConfirm>

        LmHandlerParams.ActiveRegion = mibReq.Param.Contexts->MacGroup2.Region;
 800c08e:	69fb      	ldr	r3, [r7, #28]
 800c090:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800c094:	4b4b      	ldr	r3, [pc, #300]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c096:	701a      	strb	r2, [r3, #0]
        LmHandlerParams.DefaultClass = mibReq.Param.Contexts->MacGroup2.DeviceClass;
 800c098:	69fb      	ldr	r3, [r7, #28]
 800c09a:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 800c09e:	4b49      	ldr	r3, [pc, #292]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c0a0:	705a      	strb	r2, [r3, #1]
        LmHandlerParams.AdrEnable = mibReq.Param.Contexts->MacGroup2.AdrCtrlOn;
 800c0a2:	69fb      	ldr	r3, [r7, #28]
 800c0a4:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800c0a8:	4b46      	ldr	r3, [pc, #280]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c0aa:	709a      	strb	r2, [r3, #2]
 800c0ac:	e012      	b.n	800c0d4 <LmHandlerConfigure+0x154>
    }
    else
    {
        mibReq.Type = MIB_NET_ID;
 800c0ae:	2305      	movs	r3, #5
 800c0b0:	763b      	strb	r3, [r7, #24]
        mibReq.Param.NetID = LORAWAN_NETWORK_ID;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c0b6:	f107 0318 	add.w	r3, r7, #24
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f005 fb66 	bl	801178c <LoRaMacMibSetRequestConfirm>

#if ( STATIC_DEVICE_ADDRESS != 1 )
        CommissioningParams.DevAddr = LmHandlerCallbacks->GetDevAddr();
#endif /* STATIC_DEVICE_ADDRESS != 1 */

        mibReq.Type = MIB_DEV_ADDR;
 800c0c0:	2306      	movs	r3, #6
 800c0c2:	763b      	strb	r3, [r7, #24]
        mibReq.Param.DevAddr = CommissioningParams.DevAddr;
 800c0c4:	4b46      	ldr	r3, [pc, #280]	@ (800c1e0 <LmHandlerConfigure+0x260>)
 800c0c6:	695b      	ldr	r3, [r3, #20]
 800c0c8:	61fb      	str	r3, [r7, #28]
        LoRaMacMibSetRequestConfirm(&mibReq);
 800c0ca:	f107 0318 	add.w	r3, r7, #24
 800c0ce:	4618      	mov	r0, r3
 800c0d0:	f005 fb5c 	bl	801178c <LoRaMacMibSetRequestConfirm>
    }
    // Read secure-element DEV_EUI and JOIN_EUI values.
    mibReq.Type = MIB_DEV_EUI;
 800c0d4:	2302      	movs	r3, #2
 800c0d6:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c0d8:	f107 0318 	add.w	r3, r7, #24
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f005 f9af 	bl	8011440 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.DevEui, mibReq.Param.DevEui, 8 );
 800c0e2:	69fb      	ldr	r3, [r7, #28]
 800c0e4:	2208      	movs	r2, #8
 800c0e6:	4619      	mov	r1, r3
 800c0e8:	483d      	ldr	r0, [pc, #244]	@ (800c1e0 <LmHandlerConfigure+0x260>)
 800c0ea:	f00a fcb8 	bl	8016a5e <memcpy1>

    mibReq.Type = MIB_JOIN_EUI;
 800c0ee:	2303      	movs	r3, #3
 800c0f0:	763b      	strb	r3, [r7, #24]
    LoRaMacMibGetRequestConfirm( &mibReq );
 800c0f2:	f107 0318 	add.w	r3, r7, #24
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	f005 f9a2 	bl	8011440 <LoRaMacMibGetRequestConfirm>
    memcpy1( CommissioningParams.JoinEui, mibReq.Param.JoinEui, 8 );
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	2208      	movs	r2, #8
 800c100:	4619      	mov	r1, r3
 800c102:	4838      	ldr	r0, [pc, #224]	@ (800c1e4 <LmHandlerConfigure+0x264>)
 800c104:	f00a fcab 	bl	8016a5e <memcpy1>

    SecureElementPrintKeys();
 800c108:	f7ff fc26 	bl	800b958 <SecureElementPrintKeys>
    MW_LOG(TS_OFF, VLEVEL_M, "###### DevAddr:     %02X:%02X:%02X:%02X\r\n",
 800c10c:	4b36      	ldr	r3, [pc, #216]	@ (800c1e8 <LmHandlerConfigure+0x268>)
 800c10e:	781b      	ldrb	r3, [r3, #0]
 800c110:	461a      	mov	r2, r3
 800c112:	4b36      	ldr	r3, [pc, #216]	@ (800c1ec <LmHandlerConfigure+0x26c>)
 800c114:	781b      	ldrb	r3, [r3, #0]
 800c116:	4619      	mov	r1, r3
 800c118:	4b35      	ldr	r3, [pc, #212]	@ (800c1f0 <LmHandlerConfigure+0x270>)
 800c11a:	781b      	ldrb	r3, [r3, #0]
 800c11c:	4618      	mov	r0, r3
 800c11e:	4b35      	ldr	r3, [pc, #212]	@ (800c1f4 <LmHandlerConfigure+0x274>)
 800c120:	781b      	ldrb	r3, [r3, #0]
 800c122:	9303      	str	r3, [sp, #12]
 800c124:	9002      	str	r0, [sp, #8]
 800c126:	9101      	str	r1, [sp, #4]
 800c128:	9200      	str	r2, [sp, #0]
 800c12a:	4b33      	ldr	r3, [pc, #204]	@ (800c1f8 <LmHandlerConfigure+0x278>)
 800c12c:	2200      	movs	r2, #0
 800c12e:	2100      	movs	r1, #0
 800c130:	2002      	movs	r0, #2
 800c132:	f00e ffe3 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>

#if (defined (LORAWAN_KMS) && (LORAWAN_KMS == 1))
    MW_LOG(TS_OFF, VLEVEL_L, "###### KMS ENABLED \r\n");
#endif /* LORAWAN_KMS == 1 */

    mibReq.Type = MIB_PUBLIC_NETWORK;
 800c136:	230f      	movs	r3, #15
 800c138:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnablePublicNetwork = LORAWAN_PUBLIC_NETWORK;
 800c13a:	2301      	movs	r3, #1
 800c13c:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm(&mibReq);
 800c13e:	f107 0318 	add.w	r3, r7, #24
 800c142:	4618      	mov	r0, r3
 800c144:	f005 fb22 	bl	801178c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_REPEATER_SUPPORT;
 800c148:	2310      	movs	r3, #16
 800c14a:	763b      	strb	r3, [r7, #24]
    mibReq.Param.EnableRepeaterSupport = LORAWAN_REPEATER_SUPPORT;
 800c14c:	2300      	movs	r3, #0
 800c14e:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c150:	f107 0318 	add.w	r3, r7, #24
 800c154:	4618      	mov	r0, r3
 800c156:	f005 fb19 	bl	801178c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_ADR;
 800c15a:	2304      	movs	r3, #4
 800c15c:	763b      	strb	r3, [r7, #24]
    mibReq.Param.AdrEnable = LmHandlerParams.AdrEnable;
 800c15e:	4b19      	ldr	r3, [pc, #100]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c160:	789b      	ldrb	r3, [r3, #2]
 800c162:	773b      	strb	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c164:	f107 0318 	add.w	r3, r7, #24
 800c168:	4618      	mov	r0, r3
 800c16a:	f005 fb0f 	bl	801178c <LoRaMacMibSetRequestConfirm>

    mibReq.Type = MIB_RXB_C_TIMEOUT;
 800c16e:	2338      	movs	r3, #56	@ 0x38
 800c170:	763b      	strb	r3, [r7, #24]
    mibReq.Param.RxBCTimeout = LmHandlerParams.RxBCTimeout;
 800c172:	4b14      	ldr	r3, [pc, #80]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c174:	691b      	ldr	r3, [r3, #16]
 800c176:	61fb      	str	r3, [r7, #28]
    LoRaMacMibSetRequestConfirm( &mibReq );
 800c178:	f107 0318 	add.w	r3, r7, #24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f005 fb05 	bl	801178c <LoRaMacMibSetRequestConfirm>

    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    getPhy.Attribute = PHY_DUTY_CYCLE;
 800c182:	230f      	movs	r3, #15
 800c184:	743b      	strb	r3, [r7, #16]
    phyParam = RegionGetPhyParam( LmHandlerParams.ActiveRegion, &getPhy );
 800c186:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	f107 0210 	add.w	r2, r7, #16
 800c18e:	4611      	mov	r1, r2
 800c190:	4618      	mov	r0, r3
 800c192:	f008 f9b7 	bl	8014504 <RegionGetPhyParam>
 800c196:	4603      	mov	r3, r0
 800c198:	60fb      	str	r3, [r7, #12]
    LmHandlerParams.DutyCycleEnabled = (bool) phyParam.Value;
 800c19a:	68fb      	ldr	r3, [r7, #12]
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	bf14      	ite	ne
 800c1a0:	2301      	movne	r3, #1
 800c1a2:	2300      	moveq	r3, #0
 800c1a4:	b2da      	uxtb	r2, r3
 800c1a6:	4b07      	ldr	r3, [pc, #28]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c1a8:	719a      	strb	r2, [r3, #6]

    // Set system maximum tolerated rx error in milliseconds
    LmHandlerSetSystemMaxRxError( 20 );
 800c1aa:	2014      	movs	r0, #20
 800c1ac:	f000 fab8 	bl	800c720 <LmHandlerSetSystemMaxRxError>

    /* override previous value if reconfigure new region */
    LoRaMacTestSetDutyCycleOn( LmHandlerParams.DutyCycleEnabled );
 800c1b0:	4b04      	ldr	r3, [pc, #16]	@ (800c1c4 <LmHandlerConfigure+0x244>)
 800c1b2:	799b      	ldrb	r3, [r3, #6]
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	f006 f917 	bl	80123e8 <LoRaMacTestSetDutyCycleOn>

    return LORAMAC_HANDLER_SUCCESS;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3740      	adds	r7, #64	@ 0x40
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	200004e0 	.word	0x200004e0
 800c1c8:	20000520 	.word	0x20000520
 800c1cc:	0801be00 	.word	0x0801be00
 800c1d0:	20000508 	.word	0x20000508
 800c1d4:	200004f8 	.word	0x200004f8
 800c1d8:	20000616 	.word	0x20000616
 800c1dc:	200004f4 	.word	0x200004f4
 800c1e0:	20000090 	.word	0x20000090
 800c1e4:	20000098 	.word	0x20000098
 800c1e8:	200000a7 	.word	0x200000a7
 800c1ec:	200000a6 	.word	0x200000a6
 800c1f0:	200000a5 	.word	0x200000a5
 800c1f4:	200000a4 	.word	0x200000a4
 800c1f8:	0801be4c 	.word	0x0801be4c

0800c1fc <LmHandlerProcess>:

    return false;
}

void LmHandlerProcess( void )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
    /* Call at first the LoRaMAC process before to run all package process features */
    // Processes the LoRaMac events
    LoRaMacProcess( );
 800c202:	f002 fd45 	bl	800ec90 <LoRaMacProcess>

    // Call all packages process functions
    LmHandlerPackagesProcess( );
 800c206:	f000 fd3b 	bl	800cc80 <LmHandlerPackagesProcess>

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Check if a package transmission is pending.
    // If it is the case exit function earlier
    if( LmHandlerPackageIsTxPending( ) == true )
 800c20a:	f000 fd0f 	bl	800cc2c <LmHandlerPackageIsTxPending>
 800c20e:	4603      	mov	r3, r0
 800c210:	2b00      	cmp	r3, #0
 800c212:	d117      	bne.n	800c244 <LmHandlerProcess+0x48>
    {
        return;
    }

    // If a MAC layer scheduled uplink is still pending try to send it.
    if( IsUplinkTxPending == true )
 800c214:	4b0d      	ldr	r3, [pc, #52]	@ (800c24c <LmHandlerProcess+0x50>)
 800c216:	781b      	ldrb	r3, [r3, #0]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d014      	beq.n	800c246 <LmHandlerProcess+0x4a>
    {
        // Send an empty message
        LmHandlerAppData_t appData =
 800c21c:	2300      	movs	r3, #0
 800c21e:	703b      	strb	r3, [r7, #0]
 800c220:	2300      	movs	r3, #0
 800c222:	707b      	strb	r3, [r7, #1]
 800c224:	2300      	movs	r3, #0
 800c226:	607b      	str	r3, [r7, #4]
            .Buffer = NULL,
            .BufferSize = 0,
            .Port = 0,
        };

        if( LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false ) == LORAMAC_HANDLER_SUCCESS )
 800c228:	4b09      	ldr	r3, [pc, #36]	@ (800c250 <LmHandlerProcess+0x54>)
 800c22a:	78d9      	ldrb	r1, [r3, #3]
 800c22c:	463b      	mov	r3, r7
 800c22e:	2200      	movs	r2, #0
 800c230:	4618      	mov	r0, r3
 800c232:	f000 f8b7 	bl	800c3a4 <LmHandlerSend>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d104      	bne.n	800c246 <LmHandlerProcess+0x4a>
        {
            IsUplinkTxPending = false;
 800c23c:	4b03      	ldr	r3, [pc, #12]	@ (800c24c <LmHandlerProcess+0x50>)
 800c23e:	2200      	movs	r2, #0
 800c240:	701a      	strb	r2, [r3, #0]
 800c242:	e000      	b.n	800c246 <LmHandlerProcess+0x4a>
        return;
 800c244:	bf00      	nop
        }
    }
#endif /* LORAMAC_VERSION */
}
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}
 800c24c:	20000520 	.word	0x20000520
 800c250:	200004e0 	.word	0x200004e0

0800c254 <LmHandlerGetDutyCycleWaitTime>:

TimerTime_t LmHandlerGetDutyCycleWaitTime( void )
{
 800c254:	b480      	push	{r7}
 800c256:	af00      	add	r7, sp, #0
    return DutyCycleWaitTime;
 800c258:	4b02      	ldr	r3, [pc, #8]	@ (800c264 <LmHandlerGetDutyCycleWaitTime+0x10>)
 800c25a:	681b      	ldr	r3, [r3, #0]
}
 800c25c:	4618      	mov	r0, r3
 800c25e:	46bd      	mov	sp, r7
 800c260:	bc80      	pop	{r7}
 800c262:	4770      	bx	lr
 800c264:	2000051c 	.word	0x2000051c

0800c268 <LmHandlerJoin>:

void LmHandlerJoin( ActivationType_t mode, bool forceRejoin )
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b090      	sub	sp, #64	@ 0x40
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	4603      	mov	r3, r0
 800c270:	460a      	mov	r2, r1
 800c272:	71fb      	strb	r3, [r7, #7]
 800c274:	4613      	mov	r3, r2
 800c276:	71bb      	strb	r3, [r7, #6]
#endif /* ACTIVATION_BY_PERSONALIZATION */
#endif /* LORAWAN_KMS */

    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_JOIN;
 800c278:	2301      	movs	r3, #1
 800c27a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    mlmeReq.Req.Join.Datarate = LmHandlerParams.TxDatarate;
 800c27e:	4b36      	ldr	r3, [pc, #216]	@ (800c358 <LmHandlerJoin+0xf0>)
 800c280:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c284:	b2db      	uxtb	r3, r3
 800c286:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

    if ( mode == ACTIVATION_TYPE_OTAA )
 800c28a:	79fb      	ldrb	r3, [r7, #7]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d10b      	bne.n	800c2a8 <LmHandlerJoin+0x40>
    {
        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800c290:	2302      	movs	r3, #2
 800c292:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_OTAA;
 800c296:	4b31      	ldr	r3, [pc, #196]	@ (800c35c <LmHandlerJoin+0xf4>)
 800c298:	2202      	movs	r2, #2
 800c29a:	719a      	strb	r2, [r3, #6]
        JoinParams.forceRejoin = forceRejoin;
 800c29c:	4a2f      	ldr	r2, [pc, #188]	@ (800c35c <LmHandlerJoin+0xf4>)
 800c29e:	79bb      	ldrb	r3, [r7, #6]
 800c2a0:	71d3      	strb	r3, [r2, #7]
        LoRaMacStart();
 800c2a2:	f004 ffdb 	bl	801125c <LoRaMacStart>
 800c2a6:	e041      	b.n	800c32c <LmHandlerJoin+0xc4>
    }
    else
    {
        MibRequestConfirm_t mibReq;

        mlmeReq.Req.Join.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c2a8:	2301      	movs	r3, #1
 800c2aa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
        JoinParams.Mode = ACTIVATION_TYPE_ABP;
 800c2ae:	4b2b      	ldr	r3, [pc, #172]	@ (800c35c <LmHandlerJoin+0xf4>)
 800c2b0:	2201      	movs	r2, #1
 800c2b2:	719a      	strb	r2, [r3, #6]
        JoinParams.Datarate = LmHandlerParams.TxDatarate;
 800c2b4:	4b28      	ldr	r3, [pc, #160]	@ (800c358 <LmHandlerJoin+0xf0>)
 800c2b6:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c2ba:	4b28      	ldr	r3, [pc, #160]	@ (800c35c <LmHandlerJoin+0xf4>)
 800c2bc:	711a      	strb	r2, [r3, #4]
        JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c2be:	4b27      	ldr	r3, [pc, #156]	@ (800c35c <LmHandlerJoin+0xf4>)
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	715a      	strb	r2, [r3, #5]
        JoinParams.forceRejoin = forceRejoin;
 800c2c4:	4a25      	ldr	r2, [pc, #148]	@ (800c35c <LmHandlerJoin+0xf4>)
 800c2c6:	79bb      	ldrb	r3, [r7, #6]
 800c2c8:	71d3      	strb	r3, [r2, #7]

        if (CtxRestoreDone == false)
 800c2ca:	4b25      	ldr	r3, [pc, #148]	@ (800c360 <LmHandlerJoin+0xf8>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	f083 0301 	eor.w	r3, r3, #1
 800c2d2:	b2db      	uxtb	r3, r3
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d01e      	beq.n	800c316 <LmHandlerJoin+0xae>
        {
            // Configure the default datarate
            mibReq.Type = MIB_CHANNELS_DEFAULT_DATARATE;
 800c2d8:	231f      	movs	r3, #31
 800c2da:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDefaultDatarate = LmHandlerParams.TxDatarate;
 800c2dc:	4b1e      	ldr	r3, [pc, #120]	@ (800c358 <LmHandlerJoin+0xf0>)
 800c2de:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c2e2:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c2e4:	f107 0308 	add.w	r3, r7, #8
 800c2e8:	4618      	mov	r0, r3
 800c2ea:	f005 fa4f 	bl	801178c <LoRaMacMibSetRequestConfirm>

            mibReq.Type = MIB_CHANNELS_DATARATE;
 800c2ee:	2320      	movs	r3, #32
 800c2f0:	723b      	strb	r3, [r7, #8]
            mibReq.Param.ChannelsDatarate = LmHandlerParams.TxDatarate;
 800c2f2:	4b19      	ldr	r3, [pc, #100]	@ (800c358 <LmHandlerJoin+0xf0>)
 800c2f4:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c2f8:	733b      	strb	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm( &mibReq );
 800c2fa:	f107 0308 	add.w	r3, r7, #8
 800c2fe:	4618      	mov	r0, r3
 800c300:	f005 fa44 	bl	801178c <LoRaMacMibSetRequestConfirm>

            /* Tell the MAC layer which network server version are we connecting too. */
            mibReq.Type = MIB_ABP_LORAWAN_VERSION;
 800c304:	2329      	movs	r3, #41	@ 0x29
 800c306:	723b      	strb	r3, [r7, #8]
            mibReq.Param.AbpLrWanVersion.Value = ABP_ACTIVATION_LRWAN_VERSION;
 800c308:	4b16      	ldr	r3, [pc, #88]	@ (800c364 <LmHandlerJoin+0xfc>)
 800c30a:	60fb      	str	r3, [r7, #12]
            LoRaMacMibSetRequestConfirm(&mibReq);
 800c30c:	f107 0308 	add.w	r3, r7, #8
 800c310:	4618      	mov	r0, r3
 800c312:	f005 fa3b 	bl	801178c <LoRaMacMibSetRequestConfirm>
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            SecureElementSetObjHandler(APP_S_KEY, KMS_APP_S_KEY_OBJECT_HANDLE);
#endif  /* LORAWAN_KMS == 1 */
        }

        LoRaMacStart();
 800c316:	f004 ffa1 	bl	801125c <LoRaMacStart>
        mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c31a:	2301      	movs	r3, #1
 800c31c:	723b      	strb	r3, [r7, #8]
        mibReq.Param.NetworkActivation = ACTIVATION_TYPE_ABP;
 800c31e:	2301      	movs	r3, #1
 800c320:	733b      	strb	r3, [r7, #12]
        LoRaMacMibSetRequestConfirm( &mibReq );
 800c322:	f107 0308 	add.w	r3, r7, #8
 800c326:	4618      	mov	r0, r3
 800c328:	f005 fa30 	bl	801178c <LoRaMacMibSetRequestConfirm>
        LmHandlerRequestClass(LmHandlerParams.DefaultClass);
#endif
    }

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ((CtxRestoreDone == false) || (forceRejoin == true))
 800c32c:	4b0c      	ldr	r3, [pc, #48]	@ (800c360 <LmHandlerJoin+0xf8>)
 800c32e:	781b      	ldrb	r3, [r3, #0]
 800c330:	f083 0301 	eor.w	r3, r3, #1
 800c334:	b2db      	uxtb	r3, r3
 800c336:	2b00      	cmp	r3, #0
 800c338:	d102      	bne.n	800c340 <LmHandlerJoin+0xd8>
 800c33a:	79bb      	ldrb	r3, [r7, #6]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d004      	beq.n	800c34a <LmHandlerJoin+0xe2>
    {
        // Starts the join procedure
        LoRaMacMlmeRequest( &mlmeReq );
 800c340:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800c344:	4618      	mov	r0, r3
 800c346:	f005 fd91 	bl	8011e6c <LoRaMacMlmeRequest>
    }
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c34a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c34c:	4a06      	ldr	r2, [pc, #24]	@ (800c368 <LmHandlerJoin+0x100>)
 800c34e:	6013      	str	r3, [r2, #0]
#endif /* LORAMAC_VERSION */
}
 800c350:	bf00      	nop
 800c352:	3740      	adds	r7, #64	@ 0x40
 800c354:	46bd      	mov	sp, r7
 800c356:	bd80      	pop	{r7, pc}
 800c358:	200004e0 	.word	0x200004e0
 800c35c:	200000a8 	.word	0x200000a8
 800c360:	20000616 	.word	0x20000616
 800c364:	01000400 	.word	0x01000400
 800c368:	2000051c 	.word	0x2000051c

0800c36c <LmHandlerJoinStatus>:

LmHandlerFlagStatus_t LmHandlerJoinStatus( void )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b08a      	sub	sp, #40	@ 0x28
 800c370:	af00      	add	r7, sp, #0
    MibRequestConfirm_t mibReq;
    LoRaMacStatus_t status;

    mibReq.Type = MIB_NETWORK_ACTIVATION;
 800c372:	2301      	movs	r3, #1
 800c374:	703b      	strb	r3, [r7, #0]
    status = LoRaMacMibGetRequestConfirm( &mibReq );
 800c376:	463b      	mov	r3, r7
 800c378:	4618      	mov	r0, r3
 800c37a:	f005 f861 	bl	8011440 <LoRaMacMibGetRequestConfirm>
 800c37e:	4603      	mov	r3, r0
 800c380:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    if( status == LORAMAC_STATUS_OK )
 800c384:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d106      	bne.n	800c39a <LmHandlerJoinStatus+0x2e>
    {
        if( mibReq.Param.NetworkActivation == ACTIVATION_TYPE_NONE )
 800c38c:	793b      	ldrb	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <LmHandlerJoinStatus+0x2a>
        {
            return LORAMAC_HANDLER_RESET;
 800c392:	2300      	movs	r3, #0
 800c394:	e002      	b.n	800c39c <LmHandlerJoinStatus+0x30>
        }
        else
        {
            return LORAMAC_HANDLER_SET;
 800c396:	2301      	movs	r3, #1
 800c398:	e000      	b.n	800c39c <LmHandlerJoinStatus+0x30>
        }
    }
    else
    {
        return LORAMAC_HANDLER_RESET;
 800c39a:	2300      	movs	r3, #0
    }
}
 800c39c:	4618      	mov	r0, r3
 800c39e:	3728      	adds	r7, #40	@ 0x28
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	bd80      	pop	{r7, pc}

0800c3a4 <LmHandlerSend>:

LmHandlerErrorStatus_t LmHandlerSend( LmHandlerAppData_t *appData, LmHandlerMsgTypes_t isTxConfirmed, bool allowDelayedTx )
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b08a      	sub	sp, #40	@ 0x28
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	6078      	str	r0, [r7, #4]
 800c3ac:	460b      	mov	r3, r1
 800c3ae:	70fb      	strb	r3, [r7, #3]
 800c3b0:	4613      	mov	r3, r2
 800c3b2:	70bb      	strb	r3, [r7, #2]
    LoRaMacStatus_t status;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800c3b4:	23ff      	movs	r3, #255	@ 0xff
 800c3b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    McpsReq_t mcpsReq;
    LoRaMacTxInfo_t txInfo;

    if (LoRaMacIsBusy() == true)
 800c3ba:	f002 f9c9 	bl	800e750 <LoRaMacIsBusy>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d002      	beq.n	800c3ca <LmHandlerSend+0x26>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c3c4:	f06f 0301 	mvn.w	r3, #1
 800c3c8:	e0a3      	b.n	800c512 <LmHandlerSend+0x16e>
    }

    if( LmHandlerJoinStatus( ) != LORAMAC_HANDLER_SET )
 800c3ca:	f7ff ffcf 	bl	800c36c <LmHandlerJoinStatus>
 800c3ce:	4603      	mov	r3, r0
 800c3d0:	2b01      	cmp	r3, #1
 800c3d2:	d00a      	beq.n	800c3ea <LmHandlerSend+0x46>
    {
        // The network isn't joined, try again.
        LmHandlerJoin( JoinParams.Mode, JoinParams.forceRejoin );
 800c3d4:	4b51      	ldr	r3, [pc, #324]	@ (800c51c <LmHandlerSend+0x178>)
 800c3d6:	799b      	ldrb	r3, [r3, #6]
 800c3d8:	4a50      	ldr	r2, [pc, #320]	@ (800c51c <LmHandlerSend+0x178>)
 800c3da:	79d2      	ldrb	r2, [r2, #7]
 800c3dc:	4611      	mov	r1, r2
 800c3de:	4618      	mov	r0, r3
 800c3e0:	f7ff ff42 	bl	800c268 <LmHandlerJoin>
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c3e4:	f06f 0302 	mvn.w	r3, #2
 800c3e8:	e093      	b.n	800c512 <LmHandlerSend+0x16e>
    {
        return LORAMAC_HANDLER_COMPLIANCE_RUNNING;
    }
#endif /* LORAMAC_VERSION */

    TxParams.MsgType = isTxConfirmed;
 800c3ea:	4a4d      	ldr	r2, [pc, #308]	@ (800c520 <LmHandlerSend+0x17c>)
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	7213      	strb	r3, [r2, #8]
    mcpsReq.Type = ( isTxConfirmed == LORAMAC_HANDLER_UNCONFIRMED_MSG ) ? MCPS_UNCONFIRMED : MCPS_CONFIRMED;
 800c3f0:	78fb      	ldrb	r3, [r7, #3]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	bf14      	ite	ne
 800c3f6:	2301      	movne	r3, #1
 800c3f8:	2300      	moveq	r3, #0
 800c3fa:	b2db      	uxtb	r3, r3
 800c3fc:	743b      	strb	r3, [r7, #16]
    mcpsReq.Req.Unconfirmed.Datarate = LmHandlerParams.TxDatarate;
 800c3fe:	4b49      	ldr	r3, [pc, #292]	@ (800c524 <LmHandlerSend+0x180>)
 800c400:	f993 3004 	ldrsb.w	r3, [r3, #4]
 800c404:	77bb      	strb	r3, [r7, #30]
    if( LoRaMacQueryTxPossible( appData->BufferSize, &txInfo ) != LORAMAC_STATUS_OK )
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	785b      	ldrb	r3, [r3, #1]
 800c40a:	f107 020c 	add.w	r2, r7, #12
 800c40e:	4611      	mov	r1, r2
 800c410:	4618      	mov	r0, r3
 800c412:	f004 ff85 	bl	8011320 <LoRaMacQueryTxPossible>
 800c416:	4603      	mov	r3, r0
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d009      	beq.n	800c430 <LmHandlerSend+0x8c>
    {
        // Send empty frame in order to flush MAC commands
        mcpsReq.Type = MCPS_UNCONFIRMED;
 800c41c:	2300      	movs	r3, #0
 800c41e:	743b      	strb	r3, [r7, #16]
        mcpsReq.Req.Unconfirmed.fBuffer = NULL;
 800c420:	2300      	movs	r3, #0
 800c422:	61bb      	str	r3, [r7, #24]
        mcpsReq.Req.Unconfirmed.fBufferSize = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	83bb      	strh	r3, [r7, #28]
        lmhStatus = LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED;
 800c428:	23f9      	movs	r3, #249	@ 0xf9
 800c42a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800c42e:	e008      	b.n	800c442 <LmHandlerSend+0x9e>
    }
    else
    {
        mcpsReq.Req.Unconfirmed.fPort = appData->Port;
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	781b      	ldrb	r3, [r3, #0]
 800c434:	753b      	strb	r3, [r7, #20]
        mcpsReq.Req.Unconfirmed.fBufferSize = appData->BufferSize;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	785b      	ldrb	r3, [r3, #1]
 800c43a:	83bb      	strh	r3, [r7, #28]
        mcpsReq.Req.Unconfirmed.fBuffer = appData->Buffer;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	685b      	ldr	r3, [r3, #4]
 800c440:	61bb      	str	r3, [r7, #24]
    }

    TxParams.AppData = *appData;
 800c442:	4b37      	ldr	r3, [pc, #220]	@ (800c520 <LmHandlerSend+0x17c>)
 800c444:	687a      	ldr	r2, [r7, #4]
 800c446:	3310      	adds	r3, #16
 800c448:	e892 0003 	ldmia.w	r2, {r0, r1}
 800c44c:	e883 0003 	stmia.w	r3, {r0, r1}
    TxParams.Datarate = LmHandlerParams.TxDatarate;
 800c450:	4b34      	ldr	r3, [pc, #208]	@ (800c524 <LmHandlerSend+0x180>)
 800c452:	f993 2004 	ldrsb.w	r2, [r3, #4]
 800c456:	4b32      	ldr	r3, [pc, #200]	@ (800c520 <LmHandlerSend+0x17c>)
 800c458:	729a      	strb	r2, [r3, #10]

    status = LoRaMacMcpsRequest(&mcpsReq, allowDelayedTx);
 800c45a:	78ba      	ldrb	r2, [r7, #2]
 800c45c:	f107 0310 	add.w	r3, r7, #16
 800c460:	4611      	mov	r1, r2
 800c462:	4618      	mov	r0, r3
 800c464:	f005 fe88 	bl	8012178 <LoRaMacMcpsRequest>
 800c468:	4603      	mov	r3, r0
 800c46a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
    DutyCycleWaitTime = mcpsReq.ReqReturn.DutyCycleWaitTime;
 800c46e:	6a3b      	ldr	r3, [r7, #32]
 800c470:	4a2d      	ldr	r2, [pc, #180]	@ (800c528 <LmHandlerSend+0x184>)
 800c472:	6013      	str	r3, [r2, #0]

    switch (status)
 800c474:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c478:	2b11      	cmp	r3, #17
 800c47a:	d843      	bhi.n	800c504 <LmHandlerSend+0x160>
 800c47c:	a201      	add	r2, pc, #4	@ (adr r2, 800c484 <LmHandlerSend+0xe0>)
 800c47e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c482:	bf00      	nop
 800c484:	0800c4cd 	.word	0x0800c4cd
 800c488:	0800c4e5 	.word	0x0800c4e5
 800c48c:	0800c505 	.word	0x0800c505
 800c490:	0800c505 	.word	0x0800c505
 800c494:	0800c505 	.word	0x0800c505
 800c498:	0800c505 	.word	0x0800c505
 800c49c:	0800c505 	.word	0x0800c505
 800c4a0:	0800c4ed 	.word	0x0800c4ed
 800c4a4:	0800c505 	.word	0x0800c505
 800c4a8:	0800c505 	.word	0x0800c505
 800c4ac:	0800c505 	.word	0x0800c505
 800c4b0:	0800c4fd 	.word	0x0800c4fd
 800c4b4:	0800c505 	.word	0x0800c505
 800c4b8:	0800c505 	.word	0x0800c505
 800c4bc:	0800c4e5 	.word	0x0800c4e5
 800c4c0:	0800c4e5 	.word	0x0800c4e5
 800c4c4:	0800c4e5 	.word	0x0800c4e5
 800c4c8:	0800c4f5 	.word	0x0800c4f5
    {
        case LORAMAC_STATUS_OK:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            IsUplinkTxPending = false;
 800c4cc:	4b17      	ldr	r3, [pc, #92]	@ (800c52c <LmHandlerSend+0x188>)
 800c4ce:	2200      	movs	r2, #0
 800c4d0:	701a      	strb	r2, [r3, #0]
#endif /* LORAMAC_VERSION */
            if (lmhStatus != LORAMAC_HANDLER_PAYLOAD_LENGTH_RESTRICTED)
 800c4d2:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800c4d6:	f113 0f07 	cmn.w	r3, #7
 800c4da:	d017      	beq.n	800c50c <LmHandlerSend+0x168>
            {
                lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800c4dc:	2300      	movs	r3, #0
 800c4de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 800c4e2:	e013      	b.n	800c50c <LmHandlerSend+0x168>
        case LORAMAC_STATUS_BUSY:
        case LORAMAC_STATUS_BUSY_UPLINK_COLLISION:
        case LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME:
        case LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME:
            lmhStatus = LORAMAC_HANDLER_BUSY_ERROR;
 800c4e4:	23fe      	movs	r3, #254	@ 0xfe
 800c4e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c4ea:	e010      	b.n	800c50e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_NO_NETWORK_JOINED:
            lmhStatus = LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c4ec:	23fd      	movs	r3, #253	@ 0xfd
 800c4ee:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c4f2:	e00c      	b.n	800c50e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_CRYPTO_ERROR:
            lmhStatus = LORAMAC_HANDLER_CRYPTO_ERROR;
 800c4f4:	23fb      	movs	r3, #251	@ 0xfb
 800c4f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c4fa:	e008      	b.n	800c50e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_DUTYCYCLE_RESTRICTED:
            lmhStatus = LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED;
 800c4fc:	23fa      	movs	r3, #250	@ 0xfa
 800c4fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c502:	e004      	b.n	800c50e <LmHandlerSend+0x16a>
        case LORAMAC_STATUS_REGION_NOT_SUPPORTED:
        case LORAMAC_STATUS_NO_FREE_CHANNEL_FOUND:
        case LORAMAC_STATUS_NO_CHANNEL_FOUND:
        case LORAMAC_STATUS_LENGTH_ERROR:
        default:
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800c504:	23ff      	movs	r3, #255	@ 0xff
 800c506:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 800c50a:	e000      	b.n	800c50e <LmHandlerSend+0x16a>
            break;
 800c50c:	bf00      	nop
    }

    return lmhStatus;
 800c50e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
}
 800c512:	4618      	mov	r0, r3
 800c514:	3728      	adds	r7, #40	@ 0x28
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	200000a8 	.word	0x200000a8
 800c520:	200000b0 	.word	0x200000b0
 800c524:	200004e0 	.word	0x200004e0
 800c528:	2000051c 	.word	0x2000051c
 800c52c:	20000520 	.word	0x20000520

0800c530 <LmHandlerDeviceTimeReq>:

LmHandlerErrorStatus_t LmHandlerDeviceTimeReq( void )
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b086      	sub	sp, #24
 800c534:	af00      	add	r7, sp, #0
    LoRaMacStatus_t status;
    MlmeReq_t mlmeReq;

    mlmeReq.Type = MLME_DEVICE_TIME;
 800c536:	2309      	movs	r3, #9
 800c538:	703b      	strb	r3, [r7, #0]

    status = LoRaMacMlmeRequest( &mlmeReq );
 800c53a:	463b      	mov	r3, r7
 800c53c:	4618      	mov	r0, r3
 800c53e:	f005 fc95 	bl	8011e6c <LoRaMacMlmeRequest>
 800c542:	4603      	mov	r3, r0
 800c544:	75fb      	strb	r3, [r7, #23]
    DutyCycleWaitTime = mlmeReq.ReqReturn.DutyCycleWaitTime;
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	4a06      	ldr	r2, [pc, #24]	@ (800c564 <LmHandlerDeviceTimeReq+0x34>)
 800c54a:	6013      	str	r3, [r2, #0]

    if( status == LORAMAC_STATUS_OK )
 800c54c:	7dfb      	ldrb	r3, [r7, #23]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d101      	bne.n	800c556 <LmHandlerDeviceTimeReq+0x26>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800c552:	2300      	movs	r3, #0
 800c554:	e001      	b.n	800c55a <LmHandlerDeviceTimeReq+0x2a>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800c556:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c55a:	4618      	mov	r0, r3
 800c55c:	3718      	adds	r7, #24
 800c55e:	46bd      	mov	sp, r7
 800c560:	bd80      	pop	{r7, pc}
 800c562:	bf00      	nop
 800c564:	2000051c 	.word	0x2000051c

0800c568 <LmHandlerPingSlotReq>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED == 1 */

LmHandlerErrorStatus_t LmHandlerPingSlotReq( uint8_t periodicity )
{
 800c568:	b480      	push	{r7}
 800c56a:	b083      	sub	sp, #12
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	4603      	mov	r3, r0
 800c570:	71fb      	strb	r3, [r7, #7]
        return LmHandlerSend( &appData, LmHandlerParams.IsTxConfirmed, false );
    }
    else
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
    {
        return LORAMAC_HANDLER_ERROR;
 800c572:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800c576:	4618      	mov	r0, r3
 800c578:	370c      	adds	r7, #12
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bc80      	pop	{r7}
 800c57e:	4770      	bx	lr

0800c580 <LmHandlerRequestClass>:

LmHandlerErrorStatus_t LmHandlerRequestClass( DeviceClass_t newClass )
{
 800c580:	b580      	push	{r7, lr}
 800c582:	b08c      	sub	sp, #48	@ 0x30
 800c584:	af00      	add	r7, sp, #0
 800c586:	4603      	mov	r3, r0
 800c588:	71fb      	strb	r3, [r7, #7]
    MibRequestConfirm_t mibReq;
    DeviceClass_t currentClass;
    LmHandlerErrorStatus_t errorStatus = LORAMAC_HANDLER_SUCCESS;
 800c58a:	2300      	movs	r3, #0
 800c58c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    if (LoRaMacIsBusy() == true)
 800c590:	f002 f8de 	bl	800e750 <LoRaMacIsBusy>
 800c594:	4603      	mov	r3, r0
 800c596:	2b00      	cmp	r3, #0
 800c598:	d002      	beq.n	800c5a0 <LmHandlerRequestClass+0x20>
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800c59a:	f06f 0301 	mvn.w	r3, #1
 800c59e:	e071      	b.n	800c684 <LmHandlerRequestClass+0x104>
    }

    if (LmHandlerJoinStatus() != LORAMAC_HANDLER_SET)
 800c5a0:	f7ff fee4 	bl	800c36c <LmHandlerJoinStatus>
 800c5a4:	4603      	mov	r3, r0
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d002      	beq.n	800c5b0 <LmHandlerRequestClass+0x30>
    {
        return LORAMAC_HANDLER_NO_NETWORK_JOINED;
 800c5aa:	f06f 0302 	mvn.w	r3, #2
 800c5ae:	e069      	b.n	800c684 <LmHandlerRequestClass+0x104>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	723b      	strb	r3, [r7, #8]
    if ( LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c5b4:	f107 0308 	add.w	r3, r7, #8
 800c5b8:	4618      	mov	r0, r3
 800c5ba:	f004 ff41 	bl	8011440 <LoRaMacMibGetRequestConfirm>
 800c5be:	4603      	mov	r3, r0
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d002      	beq.n	800c5ca <LmHandlerRequestClass+0x4a>
    {
        return LORAMAC_HANDLER_ERROR;
 800c5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c8:	e05c      	b.n	800c684 <LmHandlerRequestClass+0x104>
    }
    currentClass = mibReq.Param.Class;
 800c5ca:	7b3b      	ldrb	r3, [r7, #12]
 800c5cc:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

    // Attempt to switch only if class update
    if( currentClass != newClass )
 800c5d0:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 800c5d4:	79fb      	ldrb	r3, [r7, #7]
 800c5d6:	429a      	cmp	r2, r3
 800c5d8:	d052      	beq.n	800c680 <LmHandlerRequestClass+0x100>
    {
        switch( newClass )
 800c5da:	79fb      	ldrb	r3, [r7, #7]
 800c5dc:	2b02      	cmp	r3, #2
 800c5de:	d028      	beq.n	800c632 <LmHandlerRequestClass+0xb2>
 800c5e0:	2b02      	cmp	r3, #2
 800c5e2:	dc48      	bgt.n	800c676 <LmHandlerRequestClass+0xf6>
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d002      	beq.n	800c5ee <LmHandlerRequestClass+0x6e>
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	d01e      	beq.n	800c62a <LmHandlerRequestClass+0xaa>
                    }
                }
            }
            break;
        default:
            break;
 800c5ec:	e043      	b.n	800c676 <LmHandlerRequestClass+0xf6>
                if( currentClass != CLASS_A )
 800c5ee:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d041      	beq.n	800c67a <LmHandlerRequestClass+0xfa>
                    mibReq.Param.Class = newClass;
 800c5f6:	79fb      	ldrb	r3, [r7, #7]
 800c5f8:	733b      	strb	r3, [r7, #12]
                    if( LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK )
 800c5fa:	f107 0308 	add.w	r3, r7, #8
 800c5fe:	4618      	mov	r0, r3
 800c600:	f005 f8c4 	bl	801178c <LoRaMacMibSetRequestConfirm>
 800c604:	4603      	mov	r3, r0
 800c606:	2b00      	cmp	r3, #0
 800c608:	d10b      	bne.n	800c622 <LmHandlerRequestClass+0xa2>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c60a:	4b20      	ldr	r3, [pc, #128]	@ (800c68c <LmHandlerRequestClass+0x10c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c610:	2b00      	cmp	r3, #0
 800c612:	d032      	beq.n	800c67a <LmHandlerRequestClass+0xfa>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c614:	4b1d      	ldr	r3, [pc, #116]	@ (800c68c <LmHandlerRequestClass+0x10c>)
 800c616:	681b      	ldr	r3, [r3, #0]
 800c618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c61a:	79fa      	ldrb	r2, [r7, #7]
 800c61c:	4610      	mov	r0, r2
 800c61e:	4798      	blx	r3
            break;
 800c620:	e02b      	b.n	800c67a <LmHandlerRequestClass+0xfa>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c622:	23ff      	movs	r3, #255	@ 0xff
 800c624:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c628:	e027      	b.n	800c67a <LmHandlerRequestClass+0xfa>
                errorStatus = LORAMAC_HANDLER_ERROR;
 800c62a:	23ff      	movs	r3, #255	@ 0xff
 800c62c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c630:	e026      	b.n	800c680 <LmHandlerRequestClass+0x100>
                if( currentClass != CLASS_A )
 800c632:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800c636:	2b00      	cmp	r3, #0
 800c638:	d003      	beq.n	800c642 <LmHandlerRequestClass+0xc2>
                    errorStatus = LORAMAC_HANDLER_ERROR;
 800c63a:	23ff      	movs	r3, #255	@ 0xff
 800c63c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c640:	e01d      	b.n	800c67e <LmHandlerRequestClass+0xfe>
                    mibReq.Param.Class = newClass;
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	733b      	strb	r3, [r7, #12]
                    if (LoRaMacMibSetRequestConfirm( &mibReq ) == LORAMAC_STATUS_OK)
 800c646:	f107 0308 	add.w	r3, r7, #8
 800c64a:	4618      	mov	r0, r3
 800c64c:	f005 f89e 	bl	801178c <LoRaMacMibSetRequestConfirm>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10b      	bne.n	800c66e <LmHandlerRequestClass+0xee>
                        if (LmHandlerCallbacks->OnClassChange != NULL)
 800c656:	4b0d      	ldr	r3, [pc, #52]	@ (800c68c <LmHandlerRequestClass+0x10c>)
 800c658:	681b      	ldr	r3, [r3, #0]
 800c65a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c65c:	2b00      	cmp	r3, #0
 800c65e:	d00e      	beq.n	800c67e <LmHandlerRequestClass+0xfe>
                            LmHandlerCallbacks->OnClassChange( newClass );
 800c660:	4b0a      	ldr	r3, [pc, #40]	@ (800c68c <LmHandlerRequestClass+0x10c>)
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c666:	79fa      	ldrb	r2, [r7, #7]
 800c668:	4610      	mov	r0, r2
 800c66a:	4798      	blx	r3
            break;
 800c66c:	e007      	b.n	800c67e <LmHandlerRequestClass+0xfe>
                        errorStatus = LORAMAC_HANDLER_ERROR;
 800c66e:	23ff      	movs	r3, #255	@ 0xff
 800c670:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            break;
 800c674:	e003      	b.n	800c67e <LmHandlerRequestClass+0xfe>
            break;
 800c676:	bf00      	nop
 800c678:	e002      	b.n	800c680 <LmHandlerRequestClass+0x100>
            break;
 800c67a:	bf00      	nop
 800c67c:	e000      	b.n	800c680 <LmHandlerRequestClass+0x100>
            break;
 800c67e:	bf00      	nop
        }
    }
    return errorStatus;
 800c680:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
}
 800c684:	4618      	mov	r0, r3
 800c686:	3730      	adds	r7, #48	@ 0x30
 800c688:	46bd      	mov	sp, r7
 800c68a:	bd80      	pop	{r7, pc}
 800c68c:	200004f4 	.word	0x200004f4

0800c690 <LmHandlerGetCurrentClass>:

LmHandlerErrorStatus_t LmHandlerGetCurrentClass( DeviceClass_t *deviceClass )
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b08c      	sub	sp, #48	@ 0x30
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;
    if (deviceClass == NULL)
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d102      	bne.n	800c6a4 <LmHandlerGetCurrentClass+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c69e:	f04f 33ff 	mov.w	r3, #4294967295
 800c6a2:	e010      	b.n	800c6c6 <LmHandlerGetCurrentClass+0x36>
    }

    mibReq.Type = MIB_DEVICE_CLASS;
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK)
 800c6a8:	f107 030c 	add.w	r3, r7, #12
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f004 fec7 	bl	8011440 <LoRaMacMibGetRequestConfirm>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	2b00      	cmp	r3, #0
 800c6b6:	d002      	beq.n	800c6be <LmHandlerGetCurrentClass+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6b8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6bc:	e003      	b.n	800c6c6 <LmHandlerGetCurrentClass+0x36>
    }

    *deviceClass = mibReq.Param.Class;
 800c6be:	7c3a      	ldrb	r2, [r7, #16]
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	701a      	strb	r2, [r3, #0]
    return LORAMAC_HANDLER_SUCCESS;
 800c6c4:	2300      	movs	r3, #0
}
 800c6c6:	4618      	mov	r0, r3
 800c6c8:	3730      	adds	r7, #48	@ 0x30
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	bd80      	pop	{r7, pc}
	...

0800c6d0 <LmHandlerGetTxDatarate>:

LmHandlerErrorStatus_t LmHandlerGetTxDatarate( int8_t *txDatarate )
{
 800c6d0:	b580      	push	{r7, lr}
 800c6d2:	b08c      	sub	sp, #48	@ 0x30
 800c6d4:	af00      	add	r7, sp, #0
 800c6d6:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibGet;
    if (txDatarate == NULL)
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d102      	bne.n	800c6e4 <LmHandlerGetTxDatarate+0x14>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6de:	f04f 33ff 	mov.w	r3, #4294967295
 800c6e2:	e016      	b.n	800c712 <LmHandlerGetTxDatarate+0x42>
    }

    mibGet.Type = MIB_CHANNELS_DATARATE;
 800c6e4:	2320      	movs	r3, #32
 800c6e6:	733b      	strb	r3, [r7, #12]
    if (LoRaMacMibGetRequestConfirm( &mibGet ) != LORAMAC_STATUS_OK)
 800c6e8:	f107 030c 	add.w	r3, r7, #12
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	f004 fea7 	bl	8011440 <LoRaMacMibGetRequestConfirm>
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d002      	beq.n	800c6fe <LmHandlerGetTxDatarate+0x2e>
    {
        return LORAMAC_HANDLER_ERROR;
 800c6f8:	f04f 33ff 	mov.w	r3, #4294967295
 800c6fc:	e009      	b.n	800c712 <LmHandlerGetTxDatarate+0x42>
    }

    *txDatarate = mibGet.Param.ChannelsDatarate;
 800c6fe:	f997 2010 	ldrsb.w	r2, [r7, #16]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	701a      	strb	r2, [r3, #0]
    LmHandlerParams.TxDatarate = *txDatarate;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	f993 2000 	ldrsb.w	r2, [r3]
 800c70c:	4b03      	ldr	r3, [pc, #12]	@ (800c71c <LmHandlerGetTxDatarate+0x4c>)
 800c70e:	711a      	strb	r2, [r3, #4]
    return LORAMAC_HANDLER_SUCCESS;
 800c710:	2300      	movs	r3, #0
}
 800c712:	4618      	mov	r0, r3
 800c714:	3730      	adds	r7, #48	@ 0x30
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}
 800c71a:	bf00      	nop
 800c71c:	200004e0 	.word	0x200004e0

0800c720 <LmHandlerSetSystemMaxRxError>:
    *region = LmHandlerParams.ActiveRegion;
    return LORAMAC_HANDLER_SUCCESS;
}

LmHandlerErrorStatus_t LmHandlerSetSystemMaxRxError( uint32_t maxErrorInMs )
{
 800c720:	b580      	push	{r7, lr}
 800c722:	b08c      	sub	sp, #48	@ 0x30
 800c724:	af00      	add	r7, sp, #0
 800c726:	6078      	str	r0, [r7, #4]
    MibRequestConfirm_t mibReq;

    mibReq.Type = MIB_SYSTEM_MAX_RX_ERROR;
 800c728:	2323      	movs	r3, #35	@ 0x23
 800c72a:	733b      	strb	r3, [r7, #12]
    mibReq.Param.SystemMaxRxError = maxErrorInMs;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	613b      	str	r3, [r7, #16]
    if( LoRaMacMibSetRequestConfirm( &mibReq ) != LORAMAC_STATUS_OK )
 800c730:	f107 030c 	add.w	r3, r7, #12
 800c734:	4618      	mov	r0, r3
 800c736:	f005 f829 	bl	801178c <LoRaMacMibSetRequestConfirm>
 800c73a:	4603      	mov	r3, r0
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d002      	beq.n	800c746 <LmHandlerSetSystemMaxRxError+0x26>
    {
        return LORAMAC_HANDLER_ERROR;
 800c740:	f04f 33ff 	mov.w	r3, #4294967295
 800c744:	e000      	b.n	800c748 <LmHandlerSetSystemMaxRxError+0x28>
    }
    return LORAMAC_HANDLER_SUCCESS;
 800c746:	2300      	movs	r3, #0
}
 800c748:	4618      	mov	r0, r3
 800c74a:	3730      	adds	r7, #48	@ 0x30
 800c74c:	46bd      	mov	sp, r7
 800c74e:	bd80      	pop	{r7, pc}

0800c750 <McpsConfirm>:
 * LORAMAC NOTIFICATIONS HANDLING
 *=============================================================================
 */

static void McpsConfirm( McpsConfirm_t *mcpsConfirm )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b082      	sub	sp, #8
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 1;
 800c758:	4b15      	ldr	r3, [pc, #84]	@ (800c7b0 <McpsConfirm+0x60>)
 800c75a:	2201      	movs	r2, #1
 800c75c:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mcpsConfirm->Status;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	785a      	ldrb	r2, [r3, #1]
 800c762:	4b13      	ldr	r3, [pc, #76]	@ (800c7b0 <McpsConfirm+0x60>)
 800c764:	705a      	strb	r2, [r3, #1]
    TxParams.Datarate = mcpsConfirm->Datarate;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	789b      	ldrb	r3, [r3, #2]
 800c76a:	b25a      	sxtb	r2, r3
 800c76c:	4b10      	ldr	r3, [pc, #64]	@ (800c7b0 <McpsConfirm+0x60>)
 800c76e:	729a      	strb	r2, [r3, #10]
    TxParams.UplinkCounter = mcpsConfirm->UpLinkCounter;
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	68db      	ldr	r3, [r3, #12]
 800c774:	4a0e      	ldr	r2, [pc, #56]	@ (800c7b0 <McpsConfirm+0x60>)
 800c776:	60d3      	str	r3, [r2, #12]
    TxParams.TxPower = mcpsConfirm->TxPower;
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f993 2003 	ldrsb.w	r2, [r3, #3]
 800c77e:	4b0c      	ldr	r3, [pc, #48]	@ (800c7b0 <McpsConfirm+0x60>)
 800c780:	761a      	strb	r2, [r3, #24]
    TxParams.Channel = mcpsConfirm->Channel;
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	691b      	ldr	r3, [r3, #16]
 800c786:	b2da      	uxtb	r2, r3
 800c788:	4b09      	ldr	r3, [pc, #36]	@ (800c7b0 <McpsConfirm+0x60>)
 800c78a:	765a      	strb	r2, [r3, #25]
    TxParams.AckReceived = mcpsConfirm->AckReceived;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	791b      	ldrb	r3, [r3, #4]
 800c790:	461a      	mov	r2, r3
 800c792:	4b07      	ldr	r3, [pc, #28]	@ (800c7b0 <McpsConfirm+0x60>)
 800c794:	725a      	strb	r2, [r3, #9]

    LmHandlerCallbacks->OnTxData( &TxParams );
 800c796:	4b07      	ldr	r3, [pc, #28]	@ (800c7b4 <McpsConfirm+0x64>)
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c79c:	4804      	ldr	r0, [pc, #16]	@ (800c7b0 <McpsConfirm+0x60>)
 800c79e:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MCPS_CONFIRM, mcpsConfirm );
 800c7a0:	6879      	ldr	r1, [r7, #4]
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	f000 f9c6 	bl	800cb34 <LmHandlerPackagesNotify>
}
 800c7a8:	bf00      	nop
 800c7aa:	3708      	adds	r7, #8
 800c7ac:	46bd      	mov	sp, r7
 800c7ae:	bd80      	pop	{r7, pc}
 800c7b0:	200000b0 	.word	0x200000b0
 800c7b4:	200004f4 	.word	0x200004f4

0800c7b8 <McpsIndication>:

static void McpsIndication( McpsIndication_t *mcpsIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c7b8:	b580      	push	{r7, lr}
 800c7ba:	b086      	sub	sp, #24
 800c7bc:	af00      	add	r7, sp, #0
 800c7be:	6078      	str	r0, [r7, #4]
 800c7c0:	6039      	str	r1, [r7, #0]
    LmHandlerAppData_t appData;
    DeviceClass_t deviceClass = CLASS_A;
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	73fb      	strb	r3, [r7, #15]
    RxParams.IsMcpsIndication = 1;
 800c7c6:	4b2c      	ldr	r3, [pc, #176]	@ (800c878 <McpsIndication+0xc0>)
 800c7c8:	2201      	movs	r2, #1
 800c7ca:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mcpsIndication->Status;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	785a      	ldrb	r2, [r3, #1]
 800c7d0:	4b29      	ldr	r3, [pc, #164]	@ (800c878 <McpsIndication+0xc0>)
 800c7d2:	705a      	strb	r2, [r3, #1]

    if( RxParams.Status != LORAMAC_EVENT_INFO_STATUS_OK )
 800c7d4:	4b28      	ldr	r3, [pc, #160]	@ (800c878 <McpsIndication+0xc0>)
 800c7d6:	785b      	ldrb	r3, [r3, #1]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d149      	bne.n	800c870 <McpsIndication+0xb8>
    {
        return;
    }

    RxParams.Datarate = mcpsIndication->RxDatarate;
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	791b      	ldrb	r3, [r3, #4]
 800c7e0:	b25a      	sxtb	r2, r3
 800c7e2:	4b25      	ldr	r3, [pc, #148]	@ (800c878 <McpsIndication+0xc0>)
 800c7e4:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c7e6:	683b      	ldr	r3, [r7, #0]
 800c7e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c7ec:	b25a      	sxtb	r2, r3
 800c7ee:	4b22      	ldr	r3, [pc, #136]	@ (800c878 <McpsIndication+0xc0>)
 800c7f0:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c7f8:	4b1f      	ldr	r3, [pc, #124]	@ (800c878 <McpsIndication+0xc0>)
 800c7fa:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	78da      	ldrb	r2, [r3, #3]
 800c800:	4b1d      	ldr	r3, [pc, #116]	@ (800c878 <McpsIndication+0xc0>)
 800c802:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mcpsIndication->DownLinkCounter;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	691b      	ldr	r3, [r3, #16]
 800c808:	4a1b      	ldr	r2, [pc, #108]	@ (800c878 <McpsIndication+0xc0>)
 800c80a:	60d3      	str	r3, [r2, #12]

    appData.Port = mcpsIndication->Port;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	78db      	ldrb	r3, [r3, #3]
 800c810:	743b      	strb	r3, [r7, #16]
    appData.BufferSize = mcpsIndication->BufferSize;
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	7b1b      	ldrb	r3, [r3, #12]
 800c816:	747b      	strb	r3, [r7, #17]
    appData.Buffer = mcpsIndication->Buffer;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	689b      	ldr	r3, [r3, #8]
 800c81c:	617b      	str	r3, [r7, #20]

    LmHandlerCallbacks->OnRxData( &appData, &RxParams );
 800c81e:	4b17      	ldr	r3, [pc, #92]	@ (800c87c <McpsIndication+0xc4>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c824:	f107 0210 	add.w	r2, r7, #16
 800c828:	4913      	ldr	r1, [pc, #76]	@ (800c878 <McpsIndication+0xc0>)
 800c82a:	4610      	mov	r0, r2
 800c82c:	4798      	blx	r3

    if ((LmHandlerCallbacks->OnSysTimeUpdate != NULL) && (mcpsIndication->DeviceTimeAnsReceived == true))
 800c82e:	4b13      	ldr	r3, [pc, #76]	@ (800c87c <McpsIndication+0xc4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c834:	2b00      	cmp	r3, #0
 800c836:	d007      	beq.n	800c848 <McpsIndication+0x90>
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	7e1b      	ldrb	r3, [r3, #24]
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d003      	beq.n	800c848 <McpsIndication+0x90>
    {
        LmHandlerCallbacks->OnSysTimeUpdate( );
 800c840:	4b0e      	ldr	r3, [pc, #56]	@ (800c87c <McpsIndication+0xc4>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c846:	4798      	blx	r3
    }
    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MCPS_INDICATION, mcpsIndication );
 800c848:	6879      	ldr	r1, [r7, #4]
 800c84a:	2001      	movs	r0, #1
 800c84c:	f000 f972 	bl	800cb34 <LmHandlerPackagesNotify>

    LmHandlerGetCurrentClass( &deviceClass );
 800c850:	f107 030f 	add.w	r3, r7, #15
 800c854:	4618      	mov	r0, r3
 800c856:	f7ff ff1b 	bl	800c690 <LmHandlerGetCurrentClass>
            .Port = 0
        };
        LmHandlerSend(&appData, LORAMAC_HANDLER_UNCONFIRMED_MSG, true);
    }
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if ( ( mcpsIndication->FramePending == true ) && ( deviceClass == CLASS_A ) )
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	795b      	ldrb	r3, [r3, #5]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d107      	bne.n	800c872 <McpsIndication+0xba>
 800c862:	7bfb      	ldrb	r3, [r7, #15]
 800c864:	2b00      	cmp	r3, #0
 800c866:	d104      	bne.n	800c872 <McpsIndication+0xba>
    {
        // The server signals that it has pending data to be sent.
        // We schedule an uplink as soon as possible to flush the server.
        IsUplinkTxPending = true;
 800c868:	4b05      	ldr	r3, [pc, #20]	@ (800c880 <McpsIndication+0xc8>)
 800c86a:	2201      	movs	r2, #1
 800c86c:	701a      	strb	r2, [r3, #0]
 800c86e:	e000      	b.n	800c872 <McpsIndication+0xba>
        return;
 800c870:	bf00      	nop
    }
#endif /* LORAMAC_VERSION */
}
 800c872:	3718      	adds	r7, #24
 800c874:	46bd      	mov	sp, r7
 800c876:	bd80      	pop	{r7, pc}
 800c878:	200000cc 	.word	0x200000cc
 800c87c:	200004f4 	.word	0x200004f4
 800c880:	20000520 	.word	0x20000520

0800c884 <MlmeConfirm>:

static void MlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b08c      	sub	sp, #48	@ 0x30
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
    TxParams.IsMcpsConfirm = 0;
 800c88c:	4b3c      	ldr	r3, [pc, #240]	@ (800c980 <MlmeConfirm+0xfc>)
 800c88e:	2200      	movs	r2, #0
 800c890:	701a      	strb	r2, [r3, #0]
    TxParams.Status = mlmeConfirm->Status;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	785a      	ldrb	r2, [r3, #1]
 800c896:	4b3a      	ldr	r3, [pc, #232]	@ (800c980 <MlmeConfirm+0xfc>)
 800c898:	705a      	strb	r2, [r3, #1]
    LmHandlerCallbacks->OnTxData( &TxParams );
 800c89a:	4b3a      	ldr	r3, [pc, #232]	@ (800c984 <MlmeConfirm+0x100>)
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c8a0:	4837      	ldr	r0, [pc, #220]	@ (800c980 <MlmeConfirm+0xfc>)
 800c8a2:	4798      	blx	r3

    LmHandlerPackagesNotify( PACKAGE_MLME_CONFIRM, mlmeConfirm );
 800c8a4:	6879      	ldr	r1, [r7, #4]
 800c8a6:	2002      	movs	r0, #2
 800c8a8:	f000 f944 	bl	800cb34 <LmHandlerPackagesNotify>

    switch( mlmeConfirm->MlmeRequest )
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	3b01      	subs	r3, #1
 800c8b2:	2b0b      	cmp	r3, #11
 800c8b4:	d85c      	bhi.n	800c970 <MlmeConfirm+0xec>
 800c8b6:	a201      	add	r2, pc, #4	@ (adr r2, 800c8bc <MlmeConfirm+0x38>)
 800c8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8bc:	0800c8ed 	.word	0x0800c8ed
 800c8c0:	0800c971 	.word	0x0800c971
 800c8c4:	0800c971 	.word	0x0800c971
 800c8c8:	0800c93f 	.word	0x0800c93f
 800c8cc:	0800c971 	.word	0x0800c971
 800c8d0:	0800c971 	.word	0x0800c971
 800c8d4:	0800c971 	.word	0x0800c971
 800c8d8:	0800c971 	.word	0x0800c971
 800c8dc:	0800c971 	.word	0x0800c971
 800c8e0:	0800c971 	.word	0x0800c971
 800c8e4:	0800c957 	.word	0x0800c957
 800c8e8:	0800c971 	.word	0x0800c971
    {
    case MLME_JOIN:
        {
            MibRequestConfirm_t mibReq;
            mibReq.Type = MIB_DEV_ADDR;
 800c8ec:	2306      	movs	r3, #6
 800c8ee:	733b      	strb	r3, [r7, #12]
            LoRaMacMibGetRequestConfirm( &mibReq );
 800c8f0:	f107 030c 	add.w	r3, r7, #12
 800c8f4:	4618      	mov	r0, r3
 800c8f6:	f004 fda3 	bl	8011440 <LoRaMacMibGetRequestConfirm>
            CommissioningParams.DevAddr = mibReq.Param.DevAddr;
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	4a22      	ldr	r2, [pc, #136]	@ (800c988 <MlmeConfirm+0x104>)
 800c8fe:	6153      	str	r3, [r2, #20]
            LmHandlerGetTxDatarate( &JoinParams.Datarate );
 800c900:	4822      	ldr	r0, [pc, #136]	@ (800c98c <MlmeConfirm+0x108>)
 800c902:	f7ff fee5 	bl	800c6d0 <LmHandlerGetTxDatarate>

            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	785b      	ldrb	r3, [r3, #1]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d108      	bne.n	800c920 <MlmeConfirm+0x9c>
            {
                // Status is OK, node has joined the network
                JoinParams.Status = LORAMAC_HANDLER_SUCCESS;
 800c90e:	4b20      	ldr	r3, [pc, #128]	@ (800c990 <MlmeConfirm+0x10c>)
 800c910:	2200      	movs	r2, #0
 800c912:	715a      	strb	r2, [r3, #5]
                LmHandlerRequestClass(LmHandlerParams.DefaultClass);
 800c914:	4b1f      	ldr	r3, [pc, #124]	@ (800c994 <MlmeConfirm+0x110>)
 800c916:	785b      	ldrb	r3, [r3, #1]
 800c918:	4618      	mov	r0, r3
 800c91a:	f7ff fe31 	bl	800c580 <LmHandlerRequestClass>
 800c91e:	e002      	b.n	800c926 <MlmeConfirm+0xa2>
            }
            else
            {
                // Join was not successful. Try to join again
                JoinParams.Status = LORAMAC_HANDLER_ERROR;
 800c920:	4b1b      	ldr	r3, [pc, #108]	@ (800c990 <MlmeConfirm+0x10c>)
 800c922:	22ff      	movs	r2, #255	@ 0xff
 800c924:	715a      	strb	r2, [r3, #5]
            }
            // Notify upper layer
            LmHandlerCallbacks->OnJoinRequest( &JoinParams );
 800c926:	4b17      	ldr	r3, [pc, #92]	@ (800c984 <MlmeConfirm+0x100>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c92c:	4818      	ldr	r0, [pc, #96]	@ (800c990 <MlmeConfirm+0x10c>)
 800c92e:	4798      	blx	r3
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	785b      	ldrb	r3, [r3, #1]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d11d      	bne.n	800c974 <MlmeConfirm+0xf0>
            {
                SecureElementPrintSessionKeys();
 800c938:	f7ff f89c 	bl	800ba74 <SecureElementPrintSessionKeys>
            }
        }
        break;
 800c93c:	e01a      	b.n	800c974 <MlmeConfirm+0xf0>
    case MLME_LINK_CHECK:
        {
            RxParams.LinkCheck = true;
 800c93e:	4b16      	ldr	r3, [pc, #88]	@ (800c998 <MlmeConfirm+0x114>)
 800c940:	2201      	movs	r2, #1
 800c942:	745a      	strb	r2, [r3, #17]
            RxParams.DemodMargin = mlmeConfirm->DemodMargin;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	7a1a      	ldrb	r2, [r3, #8]
 800c948:	4b13      	ldr	r3, [pc, #76]	@ (800c998 <MlmeConfirm+0x114>)
 800c94a:	749a      	strb	r2, [r3, #18]
            RxParams.NbGateways = mlmeConfirm->NbGateways;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	7a5a      	ldrb	r2, [r3, #9]
 800c950:	4b11      	ldr	r3, [pc, #68]	@ (800c998 <MlmeConfirm+0x114>)
 800c952:	74da      	strb	r2, [r3, #19]
        }
        break;
 800c954:	e00f      	b.n	800c976 <MlmeConfirm+0xf2>
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    case MLME_BEACON_ACQUISITION:
        {
            if( mlmeConfirm->Status == LORAMAC_EVENT_INFO_STATUS_OK )
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	785b      	ldrb	r3, [r3, #1]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d105      	bne.n	800c96a <MlmeConfirm+0xe6>
            {
                // Beacon has been acquired
                // Request server for ping slot
                LmHandlerPingSlotReq( LmHandlerParams.PingSlotPeriodicity );
 800c95e:	4b0d      	ldr	r3, [pc, #52]	@ (800c994 <MlmeConfirm+0x110>)
 800c960:	7b1b      	ldrb	r3, [r3, #12]
 800c962:	4618      	mov	r0, r3
 800c964:	f7ff fe00 	bl	800c568 <LmHandlerPingSlotReq>
                // Beacon not acquired
                // Request Device Time again.
                LmHandlerDeviceTimeReq( );
            }
        }
        break;
 800c968:	e005      	b.n	800c976 <MlmeConfirm+0xf2>
                LmHandlerDeviceTimeReq( );
 800c96a:	f7ff fde1 	bl	800c530 <LmHandlerDeviceTimeReq>
        break;
 800c96e:	e002      	b.n	800c976 <MlmeConfirm+0xf2>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800c970:	bf00      	nop
 800c972:	e000      	b.n	800c976 <MlmeConfirm+0xf2>
        break;
 800c974:	bf00      	nop
    }
}
 800c976:	bf00      	nop
 800c978:	3730      	adds	r7, #48	@ 0x30
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	200000b0 	.word	0x200000b0
 800c984:	200004f4 	.word	0x200004f4
 800c988:	20000090 	.word	0x20000090
 800c98c:	200000ac 	.word	0x200000ac
 800c990:	200000a8 	.word	0x200000a8
 800c994:	200004e0 	.word	0x200004e0
 800c998:	200000cc 	.word	0x200000cc

0800c99c <MlmeIndication>:

static void MlmeIndication( MlmeIndication_t *mlmeIndication, LoRaMacRxStatus_t *rxStatus )
{
 800c99c:	b580      	push	{r7, lr}
 800c99e:	b082      	sub	sp, #8
 800c9a0:	af00      	add	r7, sp, #0
 800c9a2:	6078      	str	r0, [r7, #4]
 800c9a4:	6039      	str	r1, [r7, #0]
    RxParams.IsMcpsIndication = 0;
 800c9a6:	4b24      	ldr	r3, [pc, #144]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	701a      	strb	r2, [r3, #0]
    RxParams.Status = mlmeIndication->Status;
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	785a      	ldrb	r2, [r3, #1]
 800c9b0:	4b21      	ldr	r3, [pc, #132]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9b2:	705a      	strb	r2, [r3, #1]
    RxParams.Datarate = mlmeIndication->RxDatarate;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	789b      	ldrb	r3, [r3, #2]
 800c9b8:	b25a      	sxtb	r2, r3
 800c9ba:	4b1f      	ldr	r3, [pc, #124]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9bc:	721a      	strb	r2, [r3, #8]
    RxParams.Rssi = rxStatus->Rssi;
 800c9be:	683b      	ldr	r3, [r7, #0]
 800c9c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 800c9c4:	b25a      	sxtb	r2, r3
 800c9c6:	4b1c      	ldr	r3, [pc, #112]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9c8:	725a      	strb	r2, [r3, #9]
    RxParams.Snr = rxStatus->Snr;
 800c9ca:	683b      	ldr	r3, [r7, #0]
 800c9cc:	f993 2002 	ldrsb.w	r2, [r3, #2]
 800c9d0:	4b19      	ldr	r3, [pc, #100]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9d2:	729a      	strb	r2, [r3, #10]
    RxParams.RxSlot = rxStatus->RxSlot;
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	78da      	ldrb	r2, [r3, #3]
 800c9d8:	4b17      	ldr	r3, [pc, #92]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9da:	741a      	strb	r2, [r3, #16]
    RxParams.DownlinkCounter = mlmeIndication->DownLinkCounter;
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	4a15      	ldr	r2, [pc, #84]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9e2:	60d3      	str	r3, [r2, #12]
    if ((mlmeIndication->MlmeIndication != MLME_BEACON) && (mlmeIndication->MlmeIndication != MLME_BEACON_LOST))
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	781b      	ldrb	r3, [r3, #0]
 800c9e8:	2b0a      	cmp	r3, #10
 800c9ea:	d009      	beq.n	800ca00 <MlmeIndication+0x64>
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	781b      	ldrb	r3, [r3, #0]
 800c9f0:	2b0e      	cmp	r3, #14
 800c9f2:	d005      	beq.n	800ca00 <MlmeIndication+0x64>
    {
        LmHandlerCallbacks->OnRxData( NULL, &RxParams );
 800c9f4:	4b11      	ldr	r3, [pc, #68]	@ (800ca3c <MlmeIndication+0xa0>)
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c9fa:	490f      	ldr	r1, [pc, #60]	@ (800ca38 <MlmeIndication+0x9c>)
 800c9fc:	2000      	movs	r0, #0
 800c9fe:	4798      	blx	r3
    }

    // Call packages RxProcess function
    LmHandlerPackagesNotify( PACKAGE_MLME_INDICATION, mlmeIndication );
 800ca00:	6879      	ldr	r1, [r7, #4]
 800ca02:	2003      	movs	r0, #3
 800ca04:	f000 f896 	bl	800cb34 <LmHandlerPackagesNotify>

    switch( mlmeIndication->MlmeIndication )
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	781b      	ldrb	r3, [r3, #0]
 800ca0c:	2b0e      	cmp	r3, #14
 800ca0e:	d00a      	beq.n	800ca26 <MlmeIndication+0x8a>
 800ca10:	2b0e      	cmp	r3, #14
 800ca12:	dc0a      	bgt.n	800ca2a <MlmeIndication+0x8e>
 800ca14:	2b06      	cmp	r3, #6
 800ca16:	d002      	beq.n	800ca1e <MlmeIndication+0x82>
 800ca18:	2b0a      	cmp	r3, #10
 800ca1a:	d008      	beq.n	800ca2e <MlmeIndication+0x92>
            }
#endif /* LORAMAC_CLASSB_ENABLED == 1 */
        }
        break;
    default:
        break;
 800ca1c:	e005      	b.n	800ca2a <MlmeIndication+0x8e>
            IsUplinkTxPending = true;
 800ca1e:	4b08      	ldr	r3, [pc, #32]	@ (800ca40 <MlmeIndication+0xa4>)
 800ca20:	2201      	movs	r2, #1
 800ca22:	701a      	strb	r2, [r3, #0]
        break;
 800ca24:	e004      	b.n	800ca30 <MlmeIndication+0x94>
        break;
 800ca26:	bf00      	nop
 800ca28:	e002      	b.n	800ca30 <MlmeIndication+0x94>
        break;
 800ca2a:	bf00      	nop
 800ca2c:	e000      	b.n	800ca30 <MlmeIndication+0x94>
        break;
 800ca2e:	bf00      	nop
    }
}
 800ca30:	bf00      	nop
 800ca32:	3708      	adds	r7, #8
 800ca34:	46bd      	mov	sp, r7
 800ca36:	bd80      	pop	{r7, pc}
 800ca38:	200000cc 	.word	0x200000cc
 800ca3c:	200004f4 	.word	0x200004f4
 800ca40:	20000520 	.word	0x20000520

0800ca44 <LmHandlerPackageRegister>:
 * PACKAGES HANDLING
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerPackageRegister( uint8_t id, void *params )
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	6039      	str	r1, [r7, #0]
 800ca4e:	71fb      	strb	r3, [r7, #7]
    LmhPackage_t *package = NULL;
 800ca50:	2300      	movs	r3, #0
 800ca52:	60fb      	str	r3, [r7, #12]
    switch( id )
 800ca54:	79fb      	ldrb	r3, [r7, #7]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d103      	bne.n	800ca62 <LmHandlerPackageRegister+0x1e>
    {
        case PACKAGE_ID_COMPLIANCE:
        {
            package = LmhpCompliancePackageFactory( );
 800ca5a:	f000 fa1d 	bl	800ce98 <LmhpCompliancePackageFactory>
 800ca5e:	60f8      	str	r0, [r7, #12]
            break;
 800ca60:	e000      	b.n	800ca64 <LmHandlerPackageRegister+0x20>
        {
#if (!defined (LORAWAN_DATA_DISTRIB_MGT) || (LORAWAN_DATA_DISTRIB_MGT == 0))
#else /*LORAWAN_DATA_DISTRIB_MGT == 1*/
            LmhpPackagesRegister( id, &package );
#endif /*LORAWAN_DATA_DISTRIB_MGT*/
            break;
 800ca62:	bf00      	nop
        }
    }
    if( package != NULL )
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d035      	beq.n	800cad6 <LmHandlerPackageRegister+0x92>
    {
        LmHandlerPackages[id] = package;
 800ca6a:	79fb      	ldrb	r3, [r7, #7]
 800ca6c:	491d      	ldr	r1, [pc, #116]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        LmHandlerPackages[id]->OnJoinRequest = LmHandlerJoin;
 800ca74:	79fb      	ldrb	r3, [r7, #7]
 800ca76:	4a1b      	ldr	r2, [pc, #108]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800ca78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca7c:	4a1a      	ldr	r2, [pc, #104]	@ (800cae8 <LmHandlerPackageRegister+0xa4>)
 800ca7e:	629a      	str	r2, [r3, #40]	@ 0x28
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        LmHandlerPackages[id]->OnSendRequest = LmHandlerSend;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        LmHandlerPackages[id]->OnSysTimeUpdate = LmHandlerCallbacks->OnSysTimeUpdate;
 800ca80:	4b1a      	ldr	r3, [pc, #104]	@ (800caec <LmHandlerPackageRegister+0xa8>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	79fb      	ldrb	r3, [r7, #7]
 800ca86:	4917      	ldr	r1, [pc, #92]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800ca88:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca8c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800ca8e:	631a      	str	r2, [r3, #48]	@ 0x30
        LmHandlerPackages[id]->OnSystemReset = LmHandlerCallbacks->OnSystemReset;
 800ca90:	4b16      	ldr	r3, [pc, #88]	@ (800caec <LmHandlerPackageRegister+0xa8>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	79fb      	ldrb	r3, [r7, #7]
 800ca96:	4913      	ldr	r1, [pc, #76]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800ca98:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ca9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800ca9e:	635a      	str	r2, [r3, #52]	@ 0x34
#endif /* LORAMAC_VERSION */
        LmHandlerPackages[id]->OnDeviceTimeRequest = LmHandlerDeviceTimeReq;
 800caa0:	79fb      	ldrb	r3, [r7, #7]
 800caa2:	4a10      	ldr	r2, [pc, #64]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800caa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800caa8:	4a11      	ldr	r2, [pc, #68]	@ (800caf0 <LmHandlerPackageRegister+0xac>)
 800caaa:	62da      	str	r2, [r3, #44]	@ 0x2c
        LmHandlerPackages[id]->OnPackageProcessEvent = LmHandlerCallbacks->OnMacProcess;
 800caac:	4b0f      	ldr	r3, [pc, #60]	@ (800caec <LmHandlerPackageRegister+0xa8>)
 800caae:	681a      	ldr	r2, [r3, #0]
 800cab0:	79fb      	ldrb	r3, [r7, #7]
 800cab2:	490c      	ldr	r1, [pc, #48]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800cab4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800cab8:	6992      	ldr	r2, [r2, #24]
 800caba:	615a      	str	r2, [r3, #20]
        LmHandlerPackages[id]->Init( params, AppData.Buffer, AppData.BufferSize );
 800cabc:	79fb      	ldrb	r3, [r7, #7]
 800cabe:	4a09      	ldr	r2, [pc, #36]	@ (800cae4 <LmHandlerPackageRegister+0xa0>)
 800cac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	4a0b      	ldr	r2, [pc, #44]	@ (800caf4 <LmHandlerPackageRegister+0xb0>)
 800cac8:	6851      	ldr	r1, [r2, #4]
 800caca:	4a0a      	ldr	r2, [pc, #40]	@ (800caf4 <LmHandlerPackageRegister+0xb0>)
 800cacc:	7852      	ldrb	r2, [r2, #1]
 800cace:	6838      	ldr	r0, [r7, #0]
 800cad0:	4798      	blx	r3

        return LORAMAC_HANDLER_SUCCESS;
 800cad2:	2300      	movs	r3, #0
 800cad4:	e001      	b.n	800cada <LmHandlerPackageRegister+0x96>
    }
    else
    {
        return LORAMAC_HANDLER_ERROR;
 800cad6:	f04f 33ff 	mov.w	r3, #4294967295
    }
}
 800cada:	4618      	mov	r0, r3
 800cadc:	3710      	adds	r7, #16
 800cade:	46bd      	mov	sp, r7
 800cae0:	bd80      	pop	{r7, pc}
 800cae2:	bf00      	nop
 800cae4:	200004cc 	.word	0x200004cc
 800cae8:	0800c269 	.word	0x0800c269
 800caec:	200004f4 	.word	0x200004f4
 800caf0:	0800c531 	.word	0x0800c531
 800caf4:	200000e0 	.word	0x200000e0

0800caf8 <LmHandlerPackageIsInitialized>:

static bool LmHandlerPackageIsInitialized( uint8_t id )
{
 800caf8:	b580      	push	{r7, lr}
 800cafa:	b082      	sub	sp, #8
 800cafc:	af00      	add	r7, sp, #0
 800cafe:	4603      	mov	r3, r0
 800cb00:	71fb      	strb	r3, [r7, #7]
    if( ( id < PKG_MAX_NUMBER ) && ( LmHandlerPackages[id]->IsInitialized != NULL ) )
 800cb02:	79fb      	ldrb	r3, [r7, #7]
 800cb04:	2b04      	cmp	r3, #4
 800cb06:	d80e      	bhi.n	800cb26 <LmHandlerPackageIsInitialized+0x2e>
 800cb08:	79fb      	ldrb	r3, [r7, #7]
 800cb0a:	4a09      	ldr	r2, [pc, #36]	@ (800cb30 <LmHandlerPackageIsInitialized+0x38>)
 800cb0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb10:	689b      	ldr	r3, [r3, #8]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d007      	beq.n	800cb26 <LmHandlerPackageIsInitialized+0x2e>
    {
        return LmHandlerPackages[id]->IsInitialized( );
 800cb16:	79fb      	ldrb	r3, [r7, #7]
 800cb18:	4a05      	ldr	r2, [pc, #20]	@ (800cb30 <LmHandlerPackageIsInitialized+0x38>)
 800cb1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb1e:	689b      	ldr	r3, [r3, #8]
 800cb20:	4798      	blx	r3
 800cb22:	4603      	mov	r3, r0
 800cb24:	e000      	b.n	800cb28 <LmHandlerPackageIsInitialized+0x30>
    }
    else
    {
        return false;
 800cb26:	2300      	movs	r3, #0
    }
}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3708      	adds	r7, #8
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}
 800cb30:	200004cc 	.word	0x200004cc

0800cb34 <LmHandlerPackagesNotify>:

static void LmHandlerPackagesNotify( PackageNotifyTypes_t notifyType, void *params )
{
 800cb34:	b580      	push	{r7, lr}
 800cb36:	b084      	sub	sp, #16
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	6039      	str	r1, [r7, #0]
 800cb3e:	71fb      	strb	r3, [r7, #7]
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cb40:	2300      	movs	r3, #0
 800cb42:	73fb      	strb	r3, [r7, #15]
 800cb44:	e067      	b.n	800cc16 <LmHandlerPackagesNotify+0xe2>
    {
        if( LmHandlerPackages[i] != NULL )
 800cb46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb4a:	4a37      	ldr	r2, [pc, #220]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cb4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d05a      	beq.n	800cc0a <LmHandlerPackagesNotify+0xd6>
        {
            switch( notifyType )
 800cb54:	79fb      	ldrb	r3, [r7, #7]
 800cb56:	2b03      	cmp	r3, #3
 800cb58:	d84e      	bhi.n	800cbf8 <LmHandlerPackagesNotify+0xc4>
 800cb5a:	a201      	add	r2, pc, #4	@ (adr r2, 800cb60 <LmHandlerPackagesNotify+0x2c>)
 800cb5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb60:	0800cb71 	.word	0x0800cb71
 800cb64:	0800cb93 	.word	0x0800cb93
 800cb68:	0800cbb5 	.word	0x0800cbb5
 800cb6c:	0800cbd7 	.word	0x0800cbd7
            {
                case PACKAGE_MCPS_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMcpsConfirmProcess != NULL )
 800cb70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb74:	4a2c      	ldr	r2, [pc, #176]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cb76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb7a:	699b      	ldr	r3, [r3, #24]
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d03d      	beq.n	800cbfc <LmHandlerPackagesNotify+0xc8>
                    {
                        LmHandlerPackages[i]->OnMcpsConfirmProcess( ( McpsConfirm_t* ) params );
 800cb80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb84:	4a28      	ldr	r2, [pc, #160]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cb86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	6838      	ldr	r0, [r7, #0]
 800cb8e:	4798      	blx	r3
                    }
                    break;
 800cb90:	e034      	b.n	800cbfc <LmHandlerPackagesNotify+0xc8>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                    if( ( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL ) &&
                        ( ( LmHandlerPackages[i]->Port == ((McpsIndication_t* )params)->Port ) ||
                          ( ( i == PACKAGE_ID_COMPLIANCE ) && ( LmHandlerPackages[PACKAGE_ID_COMPLIANCE]->IsRunning() ))))
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    if( LmHandlerPackages[i]->OnMcpsIndicationProcess != NULL )
 800cb92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cb96:	4a24      	ldr	r2, [pc, #144]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cb98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb9c:	69db      	ldr	r3, [r3, #28]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d02e      	beq.n	800cc00 <LmHandlerPackagesNotify+0xcc>
#endif /* LORAMAC_VERSION */
                    {
                        LmHandlerPackages[i]->OnMcpsIndicationProcess( ( McpsIndication_t* )params );
 800cba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cba6:	4a20      	ldr	r2, [pc, #128]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cba8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbac:	69db      	ldr	r3, [r3, #28]
 800cbae:	6838      	ldr	r0, [r7, #0]
 800cbb0:	4798      	blx	r3
                    }
                    break;
 800cbb2:	e025      	b.n	800cc00 <LmHandlerPackagesNotify+0xcc>
                }
                case PACKAGE_MLME_CONFIRM:
                {
                    if( LmHandlerPackages[i]->OnMlmeConfirmProcess != NULL )
 800cbb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbb8:	4a1b      	ldr	r2, [pc, #108]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cbba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbbe:	6a1b      	ldr	r3, [r3, #32]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d01f      	beq.n	800cc04 <LmHandlerPackagesNotify+0xd0>
                    {
                        LmHandlerPackages[i]->OnMlmeConfirmProcess( ( MlmeConfirm_t* )params );
 800cbc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbc8:	4a17      	ldr	r2, [pc, #92]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cbca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbce:	6a1b      	ldr	r3, [r3, #32]
 800cbd0:	6838      	ldr	r0, [r7, #0]
 800cbd2:	4798      	blx	r3
                    }
                    break;
 800cbd4:	e016      	b.n	800cc04 <LmHandlerPackagesNotify+0xd0>
                }
                case PACKAGE_MLME_INDICATION:
                {
                    if( LmHandlerPackages[i]->OnMlmeIndicationProcess != NULL )
 800cbd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbda:	4a13      	ldr	r2, [pc, #76]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cbdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d010      	beq.n	800cc08 <LmHandlerPackagesNotify+0xd4>
                    {
                        LmHandlerPackages[i]->OnMlmeIndicationProcess( params );
 800cbe6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cbea:	4a0f      	ldr	r2, [pc, #60]	@ (800cc28 <LmHandlerPackagesNotify+0xf4>)
 800cbec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cbf2:	6838      	ldr	r0, [r7, #0]
 800cbf4:	4798      	blx	r3
                    }
                    break;
 800cbf6:	e007      	b.n	800cc08 <LmHandlerPackagesNotify+0xd4>
                }
                default:
                {
                    break;
 800cbf8:	bf00      	nop
 800cbfa:	e006      	b.n	800cc0a <LmHandlerPackagesNotify+0xd6>
                    break;
 800cbfc:	bf00      	nop
 800cbfe:	e004      	b.n	800cc0a <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc00:	bf00      	nop
 800cc02:	e002      	b.n	800cc0a <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc04:	bf00      	nop
 800cc06:	e000      	b.n	800cc0a <LmHandlerPackagesNotify+0xd6>
                    break;
 800cc08:	bf00      	nop
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc0e:	b2db      	uxtb	r3, r3
 800cc10:	3301      	adds	r3, #1
 800cc12:	b2db      	uxtb	r3, r3
 800cc14:	73fb      	strb	r3, [r7, #15]
 800cc16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cc1a:	2b04      	cmp	r3, #4
 800cc1c:	dd93      	ble.n	800cb46 <LmHandlerPackagesNotify+0x12>
                }
            }
        }
    }
}
 800cc1e:	bf00      	nop
 800cc20:	bf00      	nop
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	200004cc 	.word	0x200004cc

0800cc2c <LmHandlerPackageIsTxPending>:

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LmHandlerPackageIsTxPending( void )
{
 800cc2c:	b580      	push	{r7, lr}
 800cc2e:	b082      	sub	sp, #8
 800cc30:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc32:	2300      	movs	r3, #0
 800cc34:	71fb      	strb	r3, [r7, #7]
 800cc36:	e018      	b.n	800cc6a <LmHandlerPackageIsTxPending+0x3e>
    {
        if( LmHandlerPackages[i] != NULL )
 800cc38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc3c:	4a0f      	ldr	r2, [pc, #60]	@ (800cc7c <LmHandlerPackageIsTxPending+0x50>)
 800cc3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc42:	2b00      	cmp	r3, #0
 800cc44:	d00b      	beq.n	800cc5e <LmHandlerPackageIsTxPending+0x32>
        {
            if( LmHandlerPackages[i]->IsTxPending( ) == true )
 800cc46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc4a:	4a0c      	ldr	r2, [pc, #48]	@ (800cc7c <LmHandlerPackageIsTxPending+0x50>)
 800cc4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc50:	68db      	ldr	r3, [r3, #12]
 800cc52:	4798      	blx	r3
 800cc54:	4603      	mov	r3, r0
 800cc56:	2b00      	cmp	r3, #0
 800cc58:	d001      	beq.n	800cc5e <LmHandlerPackageIsTxPending+0x32>
            {
                return true;
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	e00a      	b.n	800cc74 <LmHandlerPackageIsTxPending+0x48>
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc62:	b2db      	uxtb	r3, r3
 800cc64:	3301      	adds	r3, #1
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	71fb      	strb	r3, [r7, #7]
 800cc6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc6e:	2b04      	cmp	r3, #4
 800cc70:	dde2      	ble.n	800cc38 <LmHandlerPackageIsTxPending+0xc>
            }
        }
    }
    return false;
 800cc72:	2300      	movs	r3, #0
}
 800cc74:	4618      	mov	r0, r3
 800cc76:	3708      	adds	r7, #8
 800cc78:	46bd      	mov	sp, r7
 800cc7a:	bd80      	pop	{r7, pc}
 800cc7c:	200004cc 	.word	0x200004cc

0800cc80 <LmHandlerPackagesProcess>:
#endif /* LORAMAC_VERSION */

static void LmHandlerPackagesProcess( void )
{
 800cc80:	b580      	push	{r7, lr}
 800cc82:	b082      	sub	sp, #8
 800cc84:	af00      	add	r7, sp, #0
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800cc86:	2300      	movs	r3, #0
 800cc88:	71fb      	strb	r3, [r7, #7]
 800cc8a:	e022      	b.n	800ccd2 <LmHandlerPackagesProcess+0x52>
    {
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cc8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc90:	4a14      	ldr	r2, [pc, #80]	@ (800cce4 <LmHandlerPackagesProcess+0x64>)
 800cc92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d015      	beq.n	800ccc6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800cc9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800cc9e:	4a11      	ldr	r2, [pc, #68]	@ (800cce4 <LmHandlerPackagesProcess+0x64>)
 800cca0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cca4:	691b      	ldr	r3, [r3, #16]
        if( ( LmHandlerPackages[i] != NULL ) &&
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d00d      	beq.n	800ccc6 <LmHandlerPackagesProcess+0x46>
            ( LmHandlerPackageIsInitialized( i ) != false ) )
 800ccaa:	79fb      	ldrb	r3, [r7, #7]
 800ccac:	4618      	mov	r0, r3
 800ccae:	f7ff ff23 	bl	800caf8 <LmHandlerPackageIsInitialized>
 800ccb2:	4603      	mov	r3, r0
            ( LmHandlerPackages[i]->Process != NULL ) &&
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d006      	beq.n	800ccc6 <LmHandlerPackagesProcess+0x46>
        {
            LmHandlerPackages[i]->Process( );
 800ccb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccbc:	4a09      	ldr	r2, [pc, #36]	@ (800cce4 <LmHandlerPackagesProcess+0x64>)
 800ccbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccc2:	691b      	ldr	r3, [r3, #16]
 800ccc4:	4798      	blx	r3
    for( int8_t i = 0; i < PKG_MAX_NUMBER; i++ )
 800ccc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccca:	b2db      	uxtb	r3, r3
 800cccc:	3301      	adds	r3, #1
 800ccce:	b2db      	uxtb	r3, r3
 800ccd0:	71fb      	strb	r3, [r7, #7]
 800ccd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ccd6:	2b04      	cmp	r3, #4
 800ccd8:	ddd8      	ble.n	800cc8c <LmHandlerPackagesProcess+0xc>
        }
    }
}
 800ccda:	bf00      	nop
 800ccdc:	bf00      	nop
 800ccde:	3708      	adds	r7, #8
 800cce0:	46bd      	mov	sp, r7
 800cce2:	bd80      	pop	{r7, pc}
 800cce4:	200004cc 	.word	0x200004cc

0800cce8 <LmHandlerGetVersion>:
 * ST ADDITIONAL FUNCTIONS
 *=============================================================================
 */

LmHandlerErrorStatus_t LmHandlerGetVersion(LmHandlerVersionType_t lmhType, uint32_t *featureVersion)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b083      	sub	sp, #12
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	4603      	mov	r3, r0
 800ccf0:	6039      	str	r1, [r7, #0]
 800ccf2:	71fb      	strb	r3, [r7, #7]
    if (featureVersion == NULL)
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d102      	bne.n	800cd00 <LmHandlerGetVersion+0x18>
    {
        return LORAMAC_HANDLER_ERROR;
 800ccfa:	f04f 33ff 	mov.w	r3, #4294967295
 800ccfe:	e00e      	b.n	800cd1e <LmHandlerGetVersion+0x36>
    }

    switch(lmhType)
 800cd00:	79fb      	ldrb	r3, [r7, #7]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d002      	beq.n	800cd0c <LmHandlerGetVersion+0x24>
 800cd06:	2b01      	cmp	r3, #1
 800cd08:	d004      	beq.n	800cd14 <LmHandlerGetVersion+0x2c>
            break;
        case LORAMAC_HANDLER_REGION_VERSION:
            *featureVersion = REGION_VERSION;
            break;
        default:
          break;
 800cd0a:	e007      	b.n	800cd1c <LmHandlerGetVersion+0x34>
            *featureVersion = LORAMAC_VERSION;
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	4a06      	ldr	r2, [pc, #24]	@ (800cd28 <LmHandlerGetVersion+0x40>)
 800cd10:	601a      	str	r2, [r3, #0]
            break;
 800cd12:	e003      	b.n	800cd1c <LmHandlerGetVersion+0x34>
            *featureVersion = REGION_VERSION;
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	4a05      	ldr	r2, [pc, #20]	@ (800cd2c <LmHandlerGetVersion+0x44>)
 800cd18:	601a      	str	r2, [r3, #0]
            break;
 800cd1a:	bf00      	nop
    }

    return LORAMAC_HANDLER_SUCCESS;
 800cd1c:	2300      	movs	r3, #0
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	370c      	adds	r7, #12
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bc80      	pop	{r7}
 800cd26:	4770      	bx	lr
 800cd28:	01000400 	.word	0x01000400
 800cd2c:	02010001 	.word	0x02010001

0800cd30 <LmHandlerStop>:

LmHandlerErrorStatus_t LmHandlerStop(void)
{
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
    if (LoRaMacDeInitialization() == LORAMAC_STATUS_OK)
 800cd34:	f005 fb76 	bl	8012424 <LoRaMacDeInitialization>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d101      	bne.n	800cd42 <LmHandlerStop+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cd3e:	2300      	movs	r3, #0
 800cd40:	e001      	b.n	800cd46 <LmHandlerStop+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd42:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cd46:	4618      	mov	r0, r3
 800cd48:	bd80      	pop	{r7, pc}

0800cd4a <LmHandlerHalt>:

LmHandlerErrorStatus_t LmHandlerHalt(void)
{
 800cd4a:	b580      	push	{r7, lr}
 800cd4c:	af00      	add	r7, sp, #0
    if (LoRaMacHalt() == LORAMAC_STATUS_OK)
 800cd4e:	f004 faaf 	bl	80112b0 <LoRaMacHalt>
 800cd52:	4603      	mov	r3, r0
 800cd54:	2b00      	cmp	r3, #0
 800cd56:	d101      	bne.n	800cd5c <LmHandlerHalt+0x12>
    {
        return LORAMAC_HANDLER_SUCCESS;
 800cd58:	2300      	movs	r3, #0
 800cd5a:	e001      	b.n	800cd60 <LmHandlerHalt+0x16>
    }
    else
    {
        return LORAMAC_HANDLER_BUSY_ERROR;
 800cd5c:	f06f 0301 	mvn.w	r3, #1
    }
}
 800cd60:	4618      	mov	r0, r3
 800cd62:	bd80      	pop	{r7, pc}

0800cd64 <LmHandlerNvmDataStore>:
        return LORAMAC_HANDLER_ERROR;
    }
}

LmHandlerErrorStatus_t LmHandlerNvmDataStore( void )
{
 800cd64:	b580      	push	{r7, lr}
 800cd66:	b08e      	sub	sp, #56	@ 0x38
 800cd68:	af00      	add	r7, sp, #0
    LoRaMacNvmData_t *nvm;
    uint32_t nvm_size;
    LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_SUCCESS;
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    int32_t status = NVM_DATA_OK;
 800cd70:	2300      	movs	r3, #0
 800cd72:	633b      	str	r3, [r7, #48]	@ 0x30

    lmhStatus = LmHandlerHalt();
 800cd74:	f7ff ffe9 	bl	800cd4a <LmHandlerHalt>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if (lmhStatus == LORAMAC_HANDLER_SUCCESS)
 800cd7e:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d12f      	bne.n	800cde6 <LmHandlerNvmDataStore+0x82>
    {
        status = NvmDataMgmtStoreBegin();
 800cd86:	f000 f859 	bl	800ce3c <NvmDataMgmtStoreBegin>
 800cd8a:	6338      	str	r0, [r7, #48]	@ 0x30

        if (status == NVM_DATA_NO_UPDATED_DATA)
 800cd8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd8e:	f113 0f02 	cmn.w	r3, #2
 800cd92:	d103      	bne.n	800cd9c <LmHandlerNvmDataStore+0x38>
        {
            lmhStatus = LORAMAC_HANDLER_NVM_DATA_UP_TO_DATE;
 800cd94:	23f8      	movs	r3, #248	@ 0xf8
 800cd96:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cd9a:	e01c      	b.n	800cdd6 <LmHandlerNvmDataStore+0x72>
        }
        else if (( status != NVM_DATA_OK ) || (LmHandlerCallbacks->OnStoreContextRequest == NULL))
 800cd9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d104      	bne.n	800cdac <LmHandlerNvmDataStore+0x48>
 800cda2:	4b1b      	ldr	r3, [pc, #108]	@ (800ce10 <LmHandlerNvmDataStore+0xac>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	695b      	ldr	r3, [r3, #20]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d103      	bne.n	800cdb4 <LmHandlerNvmDataStore+0x50>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cdac:	23ff      	movs	r3, #255	@ 0xff
 800cdae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800cdb2:	e010      	b.n	800cdd6 <LmHandlerNvmDataStore+0x72>
        }
        else
        {
          MibRequestConfirm_t mibReq;
          mibReq.Type = MIB_NVM_CTXS;
 800cdb4:	2327      	movs	r3, #39	@ 0x27
 800cdb6:	713b      	strb	r3, [r7, #4]
          LoRaMacMibGetRequestConfirm( &mibReq );
 800cdb8:	1d3b      	adds	r3, r7, #4
 800cdba:	4618      	mov	r0, r3
 800cdbc:	f004 fb40 	bl	8011440 <LoRaMacMibGetRequestConfirm>
          nvm = mibReq.Param.Contexts;
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
          nvm_size = ((sizeof(LoRaMacNvmData_t) + 7) & ~0x07);
 800cdc4:	f44f 63b0 	mov.w	r3, #1408	@ 0x580
 800cdc8:	62bb      	str	r3, [r7, #40]	@ 0x28
          LmHandlerCallbacks->OnStoreContextRequest(nvm, nvm_size);
 800cdca:	4b11      	ldr	r3, [pc, #68]	@ (800ce10 <LmHandlerNvmDataStore+0xac>)
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	695b      	ldr	r3, [r3, #20]
 800cdd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cdd2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800cdd4:	4798      	blx	r3
        }

        if ( NvmDataMgmtStoreEnd() != NVM_DATA_OK )
 800cdd6:	f000 f847 	bl	800ce68 <NvmDataMgmtStoreEnd>
 800cdda:	4603      	mov	r3, r0
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <LmHandlerNvmDataStore+0x82>
        {
            lmhStatus = LORAMAC_HANDLER_ERROR;
 800cde0:	23ff      	movs	r3, #255	@ 0xff
 800cde2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if ((lmhStatus == LORAMAC_HANDLER_SUCCESS) && (LmHandlerCallbacks->OnNvmDataChange != NULL ))
 800cde6:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d109      	bne.n	800ce02 <LmHandlerNvmDataStore+0x9e>
 800cdee:	4b08      	ldr	r3, [pc, #32]	@ (800ce10 <LmHandlerNvmDataStore+0xac>)
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	69db      	ldr	r3, [r3, #28]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d004      	beq.n	800ce02 <LmHandlerNvmDataStore+0x9e>
    {
        LmHandlerCallbacks->OnNvmDataChange( LORAMAC_HANDLER_NVM_STORE );
 800cdf8:	4b05      	ldr	r3, [pc, #20]	@ (800ce10 <LmHandlerNvmDataStore+0xac>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	69db      	ldr	r3, [r3, #28]
 800cdfe:	2001      	movs	r0, #1
 800ce00:	4798      	blx	r3
    }

    return lmhStatus;
 800ce02:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
}
 800ce06:	4618      	mov	r0, r3
 800ce08:	3738      	adds	r7, #56	@ 0x38
 800ce0a:	46bd      	mov	sp, r7
 800ce0c:	bd80      	pop	{r7, pc}
 800ce0e:	bf00      	nop
 800ce10:	200004f4 	.word	0x200004f4

0800ce14 <NvmDataMgmtEvent>:
static uint16_t NvmNotifyFlags = 0;

#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */

void NvmDataMgmtEvent( uint16_t notifyFlags )
{
 800ce14:	b480      	push	{r7}
 800ce16:	b083      	sub	sp, #12
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	4603      	mov	r3, r0
 800ce1c:	80fb      	strh	r3, [r7, #6]
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    NvmNotifyFlags |= notifyFlags;
 800ce1e:	4b06      	ldr	r3, [pc, #24]	@ (800ce38 <NvmDataMgmtEvent+0x24>)
 800ce20:	881a      	ldrh	r2, [r3, #0]
 800ce22:	88fb      	ldrh	r3, [r7, #6]
 800ce24:	4313      	orrs	r3, r2
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	4b03      	ldr	r3, [pc, #12]	@ (800ce38 <NvmDataMgmtEvent+0x24>)
 800ce2a:	801a      	strh	r2, [r3, #0]
#endif /* CONTEXT_MANAGEMENT_ENABLED == 1 */
}
 800ce2c:	bf00      	nop
 800ce2e:	370c      	adds	r7, #12
 800ce30:	46bd      	mov	sp, r7
 800ce32:	bc80      	pop	{r7}
 800ce34:	4770      	bx	lr
 800ce36:	bf00      	nop
 800ce38:	20000618 	.word	0x20000618

0800ce3c <NvmDataMgmtStoreBegin>:

int32_t NvmDataMgmtStoreBegin( void )
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Input checks
    if( NvmNotifyFlags == LORAMAC_NVM_NOTIFY_FLAG_NONE )
 800ce40:	4b08      	ldr	r3, [pc, #32]	@ (800ce64 <NvmDataMgmtStoreBegin+0x28>)
 800ce42:	881b      	ldrh	r3, [r3, #0]
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d102      	bne.n	800ce4e <NvmDataMgmtStoreBegin+0x12>
    {
        // There was no update.
        return NVM_DATA_NO_UPDATED_DATA;
 800ce48:	f06f 0301 	mvn.w	r3, #1
 800ce4c:	e008      	b.n	800ce60 <NvmDataMgmtStoreBegin+0x24>
    }
    if( LoRaMacStop( ) != LORAMAC_STATUS_OK )
 800ce4e:	f004 fa13 	bl	8011278 <LoRaMacStop>
 800ce52:	4603      	mov	r3, r0
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d002      	beq.n	800ce5e <NvmDataMgmtStoreBegin+0x22>
    {
        return NVM_DATA_NOT_AVAILABLE;
 800ce58:	f06f 0302 	mvn.w	r3, #2
 800ce5c:	e000      	b.n	800ce60 <NvmDataMgmtStoreBegin+0x24>
    }
    return NVM_DATA_OK;
 800ce5e:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ce60:	4618      	mov	r0, r3
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	20000618 	.word	0x20000618

0800ce68 <NvmDataMgmtStoreEnd>:

int32_t NvmDataMgmtStoreEnd( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	af00      	add	r7, sp, #0
#if( CONTEXT_MANAGEMENT_ENABLED == 1 )
    // Reset notification flags
    NvmNotifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800ce6c:	4b03      	ldr	r3, [pc, #12]	@ (800ce7c <NvmDataMgmtStoreEnd+0x14>)
 800ce6e:	2200      	movs	r2, #0
 800ce70:	801a      	strh	r2, [r3, #0]

    // Resume LoRaMac
    LoRaMacStart( );
 800ce72:	f004 f9f3 	bl	801125c <LoRaMacStart>
    return NVM_DATA_OK;
 800ce76:	2300      	movs	r3, #0
#else
    return NVM_DATA_DISABLED;
#endif /* CONTEXT_MANAGEMENT_ENABLED */
}
 800ce78:	4618      	mov	r0, r3
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	20000618 	.word	0x20000618

0800ce80 <ClassBStatusReset>:

/*!
 * Reset Beacon status structure
 */
static inline void ClassBStatusReset( void )
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	af00      	add	r7, sp, #0
    memset1( ( uint8_t* ) &ComplianceTestState.ClassBStatus, 0, sizeof( ClassBStatus_t ) / sizeof( uint8_t ) );
 800ce84:	2220      	movs	r2, #32
 800ce86:	2100      	movs	r1, #0
 800ce88:	4802      	ldr	r0, [pc, #8]	@ (800ce94 <ClassBStatusReset+0x14>)
 800ce8a:	f009 fe23 	bl	8016ad4 <memset1>
}
 800ce8e:	bf00      	nop
 800ce90:	bd80      	pop	{r7, pc}
 800ce92:	bf00      	nop
 800ce94:	20000630 	.word	0x20000630

0800ce98 <LmhpCompliancePackageFactory>:
    .OnSysTimeUpdate         = NULL,  // To be initialized by LmHandler
    .OnSystemReset           = NULL,  // To be initialized by LmHandler
};

LmhPackage_t *LmhpCompliancePackageFactory( void )
{
 800ce98:	b480      	push	{r7}
 800ce9a:	af00      	add	r7, sp, #0
    return &CompliancePackage;
 800ce9c:	4b02      	ldr	r3, [pc, #8]	@ (800cea8 <LmhpCompliancePackageFactory+0x10>)
}
 800ce9e:	4618      	mov	r0, r3
 800cea0:	46bd      	mov	sp, r7
 800cea2:	bc80      	pop	{r7}
 800cea4:	4770      	bx	lr
 800cea6:	bf00      	nop
 800cea8:	200000e8 	.word	0x200000e8

0800ceac <LmhpComplianceInit>:

static void LmhpComplianceInit( void* params, uint8_t* dataBuffer, uint8_t dataBufferMaxSize )
{
 800ceac:	b580      	push	{r7, lr}
 800ceae:	b086      	sub	sp, #24
 800ceb0:	af02      	add	r7, sp, #8
 800ceb2:	60f8      	str	r0, [r7, #12]
 800ceb4:	60b9      	str	r1, [r7, #8]
 800ceb6:	4613      	mov	r3, r2
 800ceb8:	71fb      	strb	r3, [r7, #7]
    if( ( params != NULL ) && ( dataBuffer != NULL ) )
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d018      	beq.n	800cef2 <LmhpComplianceInit+0x46>
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d015      	beq.n	800cef2 <LmhpComplianceInit+0x46>
    {
        ComplianceParams                      = ( LmhpComplianceParams_t* ) params;
 800cec6:	4a19      	ldr	r2, [pc, #100]	@ (800cf2c <LmhpComplianceInit+0x80>)
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	6013      	str	r3, [r2, #0]
        ComplianceTestState.DataBuffer        = dataBuffer;
 800cecc:	4a18      	ldr	r2, [pc, #96]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	60d3      	str	r3, [r2, #12]
        ComplianceTestState.DataBufferMaxSize = dataBufferMaxSize;
 800ced2:	4a17      	ldr	r2, [pc, #92]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800ced4:	79fb      	ldrb	r3, [r7, #7]
 800ced6:	7253      	strb	r3, [r2, #9]
        ComplianceTestState.Initialized       = true;
 800ced8:	4b15      	ldr	r3, [pc, #84]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800ceda:	2201      	movs	r2, #1
 800cedc:	701a      	strb	r2, [r3, #0]
        TimerInit( &ProcessTimer, OnProcessTimer );
 800cede:	2300      	movs	r3, #0
 800cee0:	9300      	str	r3, [sp, #0]
 800cee2:	4b14      	ldr	r3, [pc, #80]	@ (800cf34 <LmhpComplianceInit+0x88>)
 800cee4:	2200      	movs	r2, #0
 800cee6:	f04f 31ff 	mov.w	r1, #4294967295
 800ceea:	4813      	ldr	r0, [pc, #76]	@ (800cf38 <LmhpComplianceInit+0x8c>)
 800ceec:	f00d fe58 	bl	801aba0 <UTIL_TIMER_Create>
 800cef0:	e005      	b.n	800cefe <LmhpComplianceInit+0x52>
    }
    else
    {
        ComplianceParams                = NULL;
 800cef2:	4b0e      	ldr	r3, [pc, #56]	@ (800cf2c <LmhpComplianceInit+0x80>)
 800cef4:	2200      	movs	r2, #0
 800cef6:	601a      	str	r2, [r3, #0]
        ComplianceTestState.Initialized = false;
 800cef8:	4b0d      	ldr	r3, [pc, #52]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cefa:	2200      	movs	r2, #0
 800cefc:	701a      	strb	r2, [r3, #0]
    }
    ComplianceTestState.RxAppCnt = 0;
 800cefe:	4b0c      	ldr	r3, [pc, #48]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	821a      	strh	r2, [r3, #16]
    ClassBStatusReset( );
 800cf04:	f7ff ffbc 	bl	800ce80 <ClassBStatusReset>
    ComplianceTestState.IsTxPending = false;
 800cf08:	4b09      	ldr	r3, [pc, #36]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	705a      	strb	r2, [r3, #1]
    ComplianceTestState.IsBeaconRxStatusIndOn = false;
 800cf0e:	4b08      	ldr	r3, [pc, #32]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cf10:	2200      	movs	r2, #0
 800cf12:	749a      	strb	r2, [r3, #18]
    ComplianceTestState.IsResetCmdPending = false;
 800cf14:	4b06      	ldr	r3, [pc, #24]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cf16:	2200      	movs	r2, #0
 800cf18:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    ComplianceTestState.IsClassReqCmdPending = false;
 800cf1c:	4b04      	ldr	r3, [pc, #16]	@ (800cf30 <LmhpComplianceInit+0x84>)
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
}
 800cf24:	bf00      	nop
 800cf26:	3710      	adds	r7, #16
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	20000654 	.word	0x20000654
 800cf30:	2000061c 	.word	0x2000061c
 800cf34:	0800d821 	.word	0x0800d821
 800cf38:	20000658 	.word	0x20000658

0800cf3c <LmhpComplianceIsInitialized>:

static bool LmhpComplianceIsInitialized( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	af00      	add	r7, sp, #0
    return ComplianceTestState.Initialized;
 800cf40:	4b02      	ldr	r3, [pc, #8]	@ (800cf4c <LmhpComplianceIsInitialized+0x10>)
 800cf42:	781b      	ldrb	r3, [r3, #0]
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	46bd      	mov	sp, r7
 800cf48:	bc80      	pop	{r7}
 800cf4a:	4770      	bx	lr
 800cf4c:	2000061c 	.word	0x2000061c

0800cf50 <LmhpComplianceIsTxPending>:

static bool LmhpComplianceIsTxPending( void )
{
 800cf50:	b480      	push	{r7}
 800cf52:	af00      	add	r7, sp, #0
    return ComplianceTestState.IsTxPending;
 800cf54:	4b02      	ldr	r3, [pc, #8]	@ (800cf60 <LmhpComplianceIsTxPending+0x10>)
 800cf56:	785b      	ldrb	r3, [r3, #1]
}
 800cf58:	4618      	mov	r0, r3
 800cf5a:	46bd      	mov	sp, r7
 800cf5c:	bc80      	pop	{r7}
 800cf5e:	4770      	bx	lr
 800cf60:	2000061c 	.word	0x2000061c

0800cf64 <LmhpComplianceProcess>:

static void LmhpComplianceProcess( void )
{
 800cf64:	b590      	push	{r4, r7, lr}
 800cf66:	b085      	sub	sp, #20
 800cf68:	af00      	add	r7, sp, #0
    if( ComplianceTestState.IsTxPending == true )
 800cf6a:	4b33      	ldr	r3, [pc, #204]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cf6c:	785b      	ldrb	r3, [r3, #1]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d03f      	beq.n	800cff2 <LmhpComplianceProcess+0x8e>
    {
        TimerTime_t now = TimerGetCurrentTime( );
 800cf72:	f00d ffd3 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 800cf76:	60f8      	str	r0, [r7, #12]
        if( now > ( ComplianceTestState.TxPendingTimestamp + LmHandlerGetDutyCycleWaitTime( ) ) )
 800cf78:	4b2f      	ldr	r3, [pc, #188]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cf7a:	685c      	ldr	r4, [r3, #4]
 800cf7c:	f7ff f96a 	bl	800c254 <LmHandlerGetDutyCycleWaitTime>
 800cf80:	4603      	mov	r3, r0
 800cf82:	4423      	add	r3, r4
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d942      	bls.n	800d010 <LmhpComplianceProcess+0xac>
        {
            if( ComplianceTestState.DataBufferSize != 0 )
 800cf8a:	4b2b      	ldr	r3, [pc, #172]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cf8c:	7a9b      	ldrb	r3, [r3, #10]
 800cf8e:	2b00      	cmp	r3, #0
 800cf90:	d03e      	beq.n	800d010 <LmhpComplianceProcess+0xac>
            {
                // Answer commands
                LmHandlerAppData_t appData = {
 800cf92:	23e0      	movs	r3, #224	@ 0xe0
 800cf94:	703b      	strb	r3, [r7, #0]
                    .Buffer     = ComplianceTestState.DataBuffer,
                    .BufferSize = ComplianceTestState.DataBufferSize,
 800cf96:	4b28      	ldr	r3, [pc, #160]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cf98:	7a9b      	ldrb	r3, [r3, #10]
                LmHandlerAppData_t appData = {
 800cf9a:	707b      	strb	r3, [r7, #1]
                    .Buffer     = ComplianceTestState.DataBuffer,
 800cf9c:	4b26      	ldr	r3, [pc, #152]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cf9e:	68db      	ldr	r3, [r3, #12]
                LmHandlerAppData_t appData = {
 800cfa0:	607b      	str	r3, [r7, #4]
                    .Port       = COMPLIANCE_PORT,
                };
                LmHandlerErrorStatus_t lmhStatus = LORAMAC_HANDLER_ERROR;
 800cfa2:	23ff      	movs	r3, #255	@ 0xff
 800cfa4:	72fb      	strb	r3, [r7, #11]
                lmhStatus = LmHandlerSend( &appData, ComplianceTestState.IsTxConfirmed, true );
 800cfa6:	4b24      	ldr	r3, [pc, #144]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cfa8:	7a19      	ldrb	r1, [r3, #8]
 800cfaa:	463b      	mov	r3, r7
 800cfac:	2201      	movs	r2, #1
 800cfae:	4618      	mov	r0, r3
 800cfb0:	f7ff f9f8 	bl	800c3a4 <LmHandlerSend>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	72fb      	strb	r3, [r7, #11]
                if ((lmhStatus == LORAMAC_HANDLER_BUSY_ERROR) || (lmhStatus == LORAMAC_HANDLER_DUTYCYCLE_RESTRICTED))
 800cfb8:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfbc:	f113 0f02 	cmn.w	r3, #2
 800cfc0:	d004      	beq.n	800cfcc <LmhpComplianceProcess+0x68>
 800cfc2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800cfc6:	f113 0f06 	cmn.w	r3, #6
 800cfca:	d108      	bne.n	800cfde <LmhpComplianceProcess+0x7a>
                {
                    // try to send the message again
                    TimerSetValue( &ProcessTimer, 1000 );
 800cfcc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800cfd0:	481a      	ldr	r0, [pc, #104]	@ (800d03c <LmhpComplianceProcess+0xd8>)
 800cfd2:	f00d fef9 	bl	801adc8 <UTIL_TIMER_SetPeriod>
                    TimerStart(&ProcessTimer);
 800cfd6:	4819      	ldr	r0, [pc, #100]	@ (800d03c <LmhpComplianceProcess+0xd8>)
 800cfd8:	f00d fe18 	bl	801ac0c <UTIL_TIMER_Start>
 800cfdc:	e005      	b.n	800cfea <LmhpComplianceProcess+0x86>
                }
                else
                {
                    ComplianceTestState.IsTxPending = false;
 800cfde:	4b16      	ldr	r3, [pc, #88]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	705a      	strb	r2, [r3, #1]
                    ComplianceTestState.DataBufferSize = 0;
 800cfe4:	4b14      	ldr	r3, [pc, #80]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cfe6:	2200      	movs	r2, #0
 800cfe8:	729a      	strb	r2, [r3, #10]
                }
                ComplianceTestState.TxPendingTimestamp = now;
 800cfea:	4a13      	ldr	r2, [pc, #76]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	6053      	str	r3, [r2, #4]
 800cff0:	e00e      	b.n	800d010 <LmhpComplianceProcess+0xac>
            }
        }
    }
    else
    { // If no Tx is pending process other commands
        if( ComplianceTestState.IsClassReqCmdPending == true )
 800cff2:	4b11      	ldr	r3, [pc, #68]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cff4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d009      	beq.n	800d010 <LmhpComplianceProcess+0xac>
        {
            ComplianceTestState.IsClassReqCmdPending = false;
 800cffc:	4b0e      	ldr	r3, [pc, #56]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800cffe:	2200      	movs	r2, #0
 800d000:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
            LmHandlerRequestClass( ComplianceTestState.NewClass );
 800d004:	4b0c      	ldr	r3, [pc, #48]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800d006:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff fab8 	bl	800c580 <LmHandlerRequestClass>
        }
    }

    if( ComplianceTestState.IsResetCmdPending == true )
 800d010:	4b09      	ldr	r3, [pc, #36]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800d012:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00a      	beq.n	800d030 <LmhpComplianceProcess+0xcc>
    {
        ComplianceTestState.IsResetCmdPending = false;
 800d01a:	4b07      	ldr	r3, [pc, #28]	@ (800d038 <LmhpComplianceProcess+0xd4>)
 800d01c:	2200      	movs	r2, #0
 800d01e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        // Call platform MCU reset API
        if (CompliancePackage.OnSystemReset != NULL)
 800d022:	4b07      	ldr	r3, [pc, #28]	@ (800d040 <LmhpComplianceProcess+0xdc>)
 800d024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d026:	2b00      	cmp	r3, #0
 800d028:	d002      	beq.n	800d030 <LmhpComplianceProcess+0xcc>
        {
            CompliancePackage.OnSystemReset( );
 800d02a:	4b05      	ldr	r3, [pc, #20]	@ (800d040 <LmhpComplianceProcess+0xdc>)
 800d02c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d02e:	4798      	blx	r3
        }
    }
}
 800d030:	bf00      	nop
 800d032:	3714      	adds	r7, #20
 800d034:	46bd      	mov	sp, r7
 800d036:	bd90      	pop	{r4, r7, pc}
 800d038:	2000061c 	.word	0x2000061c
 800d03c:	20000658 	.word	0x20000658
 800d040:	200000e8 	.word	0x200000e8

0800d044 <LmhpComplianceOnMcpsIndication>:

static void LmhpComplianceOnMcpsIndication( McpsIndication_t* mcpsIndication )
{
 800d044:	b5b0      	push	{r4, r5, r7, lr}
 800d046:	b0a4      	sub	sp, #144	@ 0x90
 800d048:	af00      	add	r7, sp, #0
 800d04a:	6078      	str	r0, [r7, #4]
    uint8_t cmdIndex        = 0;
 800d04c:	2300      	movs	r3, #0
 800d04e:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    MibRequestConfirm_t mibReq;

    if( ComplianceTestState.Initialized == false )
 800d052:	4bce      	ldr	r3, [pc, #824]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d054:	781b      	ldrb	r3, [r3, #0]
 800d056:	f083 0301 	eor.w	r3, r3, #1
 800d05a:	b2db      	uxtb	r3, r3
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	f040 83b5 	bne.w	800d7cc <LmhpComplianceOnMcpsIndication+0x788>
        return;
    }

    // Increment the compliance certification protocol downlink counter
    // Not counting downlinks on FPort 0
    if( ( mcpsIndication->Port > 0 ) || ( mcpsIndication->AckReceived == true ) )
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	78db      	ldrb	r3, [r3, #3]
 800d066:	2b00      	cmp	r3, #0
 800d068:	d103      	bne.n	800d072 <LmhpComplianceOnMcpsIndication+0x2e>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	7b9b      	ldrb	r3, [r3, #14]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d005      	beq.n	800d07e <LmhpComplianceOnMcpsIndication+0x3a>
    {
        ComplianceTestState.RxAppCnt++;
 800d072:	4bc6      	ldr	r3, [pc, #792]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d074:	8a1b      	ldrh	r3, [r3, #16]
 800d076:	3301      	adds	r3, #1
 800d078:	b29a      	uxth	r2, r3
 800d07a:	4bc4      	ldr	r3, [pc, #784]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d07c:	821a      	strh	r2, [r3, #16]
    }

    if( mcpsIndication->RxData == false )
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	7b5b      	ldrb	r3, [r3, #13]
 800d082:	f083 0301 	eor.w	r3, r3, #1
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b00      	cmp	r3, #0
 800d08a:	f040 83a1 	bne.w	800d7d0 <LmhpComplianceOnMcpsIndication+0x78c>
    {
        return;
    }

    if( mcpsIndication->Port != COMPLIANCE_PORT )
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	78db      	ldrb	r3, [r3, #3]
 800d092:	2be0      	cmp	r3, #224	@ 0xe0
 800d094:	f040 839e 	bne.w	800d7d4 <LmhpComplianceOnMcpsIndication+0x790>
    {
        return;
    }

    ComplianceTestState.DataBufferSize = 0;
 800d098:	4bbc      	ldr	r3, [pc, #752]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d09a:	2200      	movs	r2, #0
 800d09c:	729a      	strb	r2, [r3, #10]

    switch( mcpsIndication->Buffer[cmdIndex++] )
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	689a      	ldr	r2, [r3, #8]
 800d0a2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d0a6:	1c59      	adds	r1, r3, #1
 800d0a8:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d0ac:	4413      	add	r3, r2
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2b7f      	cmp	r3, #127	@ 0x7f
 800d0b2:	f200 836e 	bhi.w	800d792 <LmhpComplianceOnMcpsIndication+0x74e>
 800d0b6:	a201      	add	r2, pc, #4	@ (adr r2, 800d0bc <LmhpComplianceOnMcpsIndication+0x78>)
 800d0b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0bc:	0800d2bd 	.word	0x0800d2bd
 800d0c0:	0800d301 	.word	0x0800d301
 800d0c4:	0800d30b 	.word	0x0800d30b
 800d0c8:	0800d317 	.word	0x0800d317
 800d0cc:	0800d339 	.word	0x0800d339
 800d0d0:	0800d367 	.word	0x0800d367
 800d0d4:	0800d395 	.word	0x0800d395
 800d0d8:	0800d3f3 	.word	0x0800d3f3
 800d0dc:	0800d44b 	.word	0x0800d44b
 800d0e0:	0800d4b7 	.word	0x0800d4b7
 800d0e4:	0800d507 	.word	0x0800d507
 800d0e8:	0800d793 	.word	0x0800d793
 800d0ec:	0800d793 	.word	0x0800d793
 800d0f0:	0800d793 	.word	0x0800d793
 800d0f4:	0800d793 	.word	0x0800d793
 800d0f8:	0800d793 	.word	0x0800d793
 800d0fc:	0800d793 	.word	0x0800d793
 800d100:	0800d793 	.word	0x0800d793
 800d104:	0800d793 	.word	0x0800d793
 800d108:	0800d793 	.word	0x0800d793
 800d10c:	0800d793 	.word	0x0800d793
 800d110:	0800d793 	.word	0x0800d793
 800d114:	0800d793 	.word	0x0800d793
 800d118:	0800d793 	.word	0x0800d793
 800d11c:	0800d793 	.word	0x0800d793
 800d120:	0800d793 	.word	0x0800d793
 800d124:	0800d793 	.word	0x0800d793
 800d128:	0800d793 	.word	0x0800d793
 800d12c:	0800d793 	.word	0x0800d793
 800d130:	0800d793 	.word	0x0800d793
 800d134:	0800d793 	.word	0x0800d793
 800d138:	0800d793 	.word	0x0800d793
 800d13c:	0800d50f 	.word	0x0800d50f
 800d140:	0800d521 	.word	0x0800d521
 800d144:	0800d529 	.word	0x0800d529
 800d148:	0800d793 	.word	0x0800d793
 800d14c:	0800d793 	.word	0x0800d793
 800d150:	0800d793 	.word	0x0800d793
 800d154:	0800d793 	.word	0x0800d793
 800d158:	0800d793 	.word	0x0800d793
 800d15c:	0800d793 	.word	0x0800d793
 800d160:	0800d793 	.word	0x0800d793
 800d164:	0800d793 	.word	0x0800d793
 800d168:	0800d793 	.word	0x0800d793
 800d16c:	0800d793 	.word	0x0800d793
 800d170:	0800d793 	.word	0x0800d793
 800d174:	0800d793 	.word	0x0800d793
 800d178:	0800d793 	.word	0x0800d793
 800d17c:	0800d793 	.word	0x0800d793
 800d180:	0800d793 	.word	0x0800d793
 800d184:	0800d793 	.word	0x0800d793
 800d188:	0800d793 	.word	0x0800d793
 800d18c:	0800d793 	.word	0x0800d793
 800d190:	0800d793 	.word	0x0800d793
 800d194:	0800d793 	.word	0x0800d793
 800d198:	0800d793 	.word	0x0800d793
 800d19c:	0800d793 	.word	0x0800d793
 800d1a0:	0800d793 	.word	0x0800d793
 800d1a4:	0800d793 	.word	0x0800d793
 800d1a8:	0800d793 	.word	0x0800d793
 800d1ac:	0800d793 	.word	0x0800d793
 800d1b0:	0800d793 	.word	0x0800d793
 800d1b4:	0800d793 	.word	0x0800d793
 800d1b8:	0800d793 	.word	0x0800d793
 800d1bc:	0800d793 	.word	0x0800d793
 800d1c0:	0800d793 	.word	0x0800d793
 800d1c4:	0800d793 	.word	0x0800d793
 800d1c8:	0800d793 	.word	0x0800d793
 800d1cc:	0800d793 	.word	0x0800d793
 800d1d0:	0800d793 	.word	0x0800d793
 800d1d4:	0800d793 	.word	0x0800d793
 800d1d8:	0800d793 	.word	0x0800d793
 800d1dc:	0800d793 	.word	0x0800d793
 800d1e0:	0800d793 	.word	0x0800d793
 800d1e4:	0800d793 	.word	0x0800d793
 800d1e8:	0800d793 	.word	0x0800d793
 800d1ec:	0800d793 	.word	0x0800d793
 800d1f0:	0800d793 	.word	0x0800d793
 800d1f4:	0800d793 	.word	0x0800d793
 800d1f8:	0800d793 	.word	0x0800d793
 800d1fc:	0800d793 	.word	0x0800d793
 800d200:	0800d793 	.word	0x0800d793
 800d204:	0800d793 	.word	0x0800d793
 800d208:	0800d793 	.word	0x0800d793
 800d20c:	0800d793 	.word	0x0800d793
 800d210:	0800d793 	.word	0x0800d793
 800d214:	0800d793 	.word	0x0800d793
 800d218:	0800d793 	.word	0x0800d793
 800d21c:	0800d793 	.word	0x0800d793
 800d220:	0800d793 	.word	0x0800d793
 800d224:	0800d793 	.word	0x0800d793
 800d228:	0800d793 	.word	0x0800d793
 800d22c:	0800d793 	.word	0x0800d793
 800d230:	0800d793 	.word	0x0800d793
 800d234:	0800d793 	.word	0x0800d793
 800d238:	0800d793 	.word	0x0800d793
 800d23c:	0800d793 	.word	0x0800d793
 800d240:	0800d793 	.word	0x0800d793
 800d244:	0800d793 	.word	0x0800d793
 800d248:	0800d793 	.word	0x0800d793
 800d24c:	0800d793 	.word	0x0800d793
 800d250:	0800d793 	.word	0x0800d793
 800d254:	0800d793 	.word	0x0800d793
 800d258:	0800d793 	.word	0x0800d793
 800d25c:	0800d793 	.word	0x0800d793
 800d260:	0800d793 	.word	0x0800d793
 800d264:	0800d793 	.word	0x0800d793
 800d268:	0800d793 	.word	0x0800d793
 800d26c:	0800d793 	.word	0x0800d793
 800d270:	0800d793 	.word	0x0800d793
 800d274:	0800d793 	.word	0x0800d793
 800d278:	0800d793 	.word	0x0800d793
 800d27c:	0800d793 	.word	0x0800d793
 800d280:	0800d793 	.word	0x0800d793
 800d284:	0800d793 	.word	0x0800d793
 800d288:	0800d793 	.word	0x0800d793
 800d28c:	0800d793 	.word	0x0800d793
 800d290:	0800d793 	.word	0x0800d793
 800d294:	0800d793 	.word	0x0800d793
 800d298:	0800d793 	.word	0x0800d793
 800d29c:	0800d793 	.word	0x0800d793
 800d2a0:	0800d793 	.word	0x0800d793
 800d2a4:	0800d793 	.word	0x0800d793
 800d2a8:	0800d793 	.word	0x0800d793
 800d2ac:	0800d793 	.word	0x0800d793
 800d2b0:	0800d55b 	.word	0x0800d55b
 800d2b4:	0800d60b 	.word	0x0800d60b
 800d2b8:	0800d63d 	.word	0x0800d63d
    {
    case COMPLIANCE_PKG_VERSION_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_PKG_VERSION_ANS;
 800d2bc:	4b33      	ldr	r3, [pc, #204]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2be:	68da      	ldr	r2, [r3, #12]
 800d2c0:	4b32      	ldr	r3, [pc, #200]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2c2:	7a9b      	ldrb	r3, [r3, #10]
 800d2c4:	1c59      	adds	r1, r3, #1
 800d2c6:	b2c8      	uxtb	r0, r1
 800d2c8:	4930      	ldr	r1, [pc, #192]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2ca:	7288      	strb	r0, [r1, #10]
 800d2cc:	4413      	add	r3, r2
 800d2ce:	2200      	movs	r2, #0
 800d2d0:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ID;
 800d2d2:	4b2e      	ldr	r3, [pc, #184]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2d4:	68da      	ldr	r2, [r3, #12]
 800d2d6:	4b2d      	ldr	r3, [pc, #180]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2d8:	7a9b      	ldrb	r3, [r3, #10]
 800d2da:	1c59      	adds	r1, r3, #1
 800d2dc:	b2c8      	uxtb	r0, r1
 800d2de:	492b      	ldr	r1, [pc, #172]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2e0:	7288      	strb	r0, [r1, #10]
 800d2e2:	4413      	add	r3, r2
 800d2e4:	2206      	movs	r2, #6
 800d2e6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_VERSION;
 800d2e8:	4b28      	ldr	r3, [pc, #160]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2ea:	68da      	ldr	r2, [r3, #12]
 800d2ec:	4b27      	ldr	r3, [pc, #156]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2ee:	7a9b      	ldrb	r3, [r3, #10]
 800d2f0:	1c59      	adds	r1, r3, #1
 800d2f2:	b2c8      	uxtb	r0, r1
 800d2f4:	4925      	ldr	r1, [pc, #148]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d2f6:	7288      	strb	r0, [r1, #10]
 800d2f8:	4413      	add	r3, r2
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	701a      	strb	r2, [r3, #0]
        break;
 800d2fe:	e251      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_RESET_REQ:
    {
        ComplianceTestState.IsResetCmdPending = true;
 800d300:	4b22      	ldr	r3, [pc, #136]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d302:	2201      	movs	r2, #1
 800d304:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d308:	e24c      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DUT_JOIN_REQ:
    {
        CompliancePackage.OnJoinRequest( ACTIVATION_TYPE_OTAA, true );
 800d30a:	4b21      	ldr	r3, [pc, #132]	@ (800d390 <LmhpComplianceOnMcpsIndication+0x34c>)
 800d30c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d30e:	2101      	movs	r1, #1
 800d310:	2002      	movs	r0, #2
 800d312:	4798      	blx	r3
        break;
 800d314:	e246      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_SWITCH_CLASS_REQ:
    {
        // CLASS_A = 0, CLASS_B = 1, CLASS_C = 2
        ComplianceTestState.NewClass = ( DeviceClass_t ) mcpsIndication->Buffer[cmdIndex++];
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	689a      	ldr	r2, [r3, #8]
 800d31a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d31e:	1c59      	adds	r1, r3, #1
 800d320:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d324:	4413      	add	r3, r2
 800d326:	781a      	ldrb	r2, [r3, #0]
 800d328:	4b18      	ldr	r3, [pc, #96]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d32a:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
        ComplianceTestState.IsClassReqCmdPending = true;
 800d32e:	4b17      	ldr	r3, [pc, #92]	@ (800d38c <LmhpComplianceOnMcpsIndication+0x348>)
 800d330:	2201      	movs	r2, #1
 800d332:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        break;
 800d336:	e235      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_ADR_BIT_CHANGE_REQ:
    {
        MibRequestConfirm_t mibReq;
        mibReq.Type            = MIB_ADR;
 800d338:	2304      	movs	r3, #4
 800d33a:	733b      	strb	r3, [r7, #12]
        mibReq.Param.AdrEnable = mcpsIndication->Buffer[cmdIndex++];
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	689a      	ldr	r2, [r3, #8]
 800d340:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d344:	1c59      	adds	r1, r3, #1
 800d346:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d34a:	4413      	add	r3, r2
 800d34c:	781b      	ldrb	r3, [r3, #0]
 800d34e:	2b00      	cmp	r3, #0
 800d350:	bf14      	ite	ne
 800d352:	2301      	movne	r3, #1
 800d354:	2300      	moveq	r3, #0
 800d356:	b2db      	uxtb	r3, r3
 800d358:	743b      	strb	r3, [r7, #16]

        LoRaMacMibSetRequestConfirm( &mibReq );
 800d35a:	f107 030c 	add.w	r3, r7, #12
 800d35e:	4618      	mov	r0, r3
 800d360:	f004 fa14 	bl	801178c <LoRaMacMibSetRequestConfirm>
        break;
 800d364:	e21e      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_REGIONAL_DUTY_CYCLE_CTRL_REQ:
    {
        LoRaMacTestSetDutyCycleOn( mcpsIndication->Buffer[cmdIndex++] );
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	689a      	ldr	r2, [r3, #8]
 800d36a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d36e:	1c59      	adds	r1, r3, #1
 800d370:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d374:	4413      	add	r3, r2
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	bf14      	ite	ne
 800d37c:	2301      	movne	r3, #1
 800d37e:	2300      	moveq	r3, #0
 800d380:	b2db      	uxtb	r3, r3
 800d382:	4618      	mov	r0, r3
 800d384:	f005 f830 	bl	80123e8 <LoRaMacTestSetDutyCycleOn>
        break;
 800d388:	e20c      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
 800d38a:	bf00      	nop
 800d38c:	2000061c 	.word	0x2000061c
 800d390:	200000e8 	.word	0x200000e8
    }
    case COMPLIANCE_TX_PERIODICITY_CHANGE_REQ:
    {
        // Periodicity in milli-seconds
        uint32_t periodicity[] = { 0, 5000, 10000, 20000, 30000, 40000, 50000, 60000, 120000, 240000, 480000 };
 800d394:	4ba5      	ldr	r3, [pc, #660]	@ (800d62c <LmhpComplianceOnMcpsIndication+0x5e8>)
 800d396:	f107 040c 	add.w	r4, r7, #12
 800d39a:	461d      	mov	r5, r3
 800d39c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d39e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d3a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d3a4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800d3a8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uint8_t  index         = mcpsIndication->Buffer[cmdIndex++];
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	689a      	ldr	r2, [r3, #8]
 800d3b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3b4:	1c59      	adds	r1, r3, #1
 800d3b6:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d3ba:	4413      	add	r3, r2
 800d3bc:	781b      	ldrb	r3, [r3, #0]
 800d3be:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

        if( index < ( sizeof( periodicity ) / sizeof( uint32_t ) ) )
 800d3c2:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d3c6:	2b0a      	cmp	r3, #10
 800d3c8:	f200 81e5 	bhi.w	800d796 <LmhpComplianceOnMcpsIndication+0x752>
        {
            if( ComplianceParams->OnTxPeriodicityChanged != NULL )
 800d3cc:	4b98      	ldr	r3, [pc, #608]	@ (800d630 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d3ce:	681b      	ldr	r3, [r3, #0]
 800d3d0:	685b      	ldr	r3, [r3, #4]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	f000 81df 	beq.w	800d796 <LmhpComplianceOnMcpsIndication+0x752>
            {
                ComplianceParams->OnTxPeriodicityChanged( periodicity[index] );
 800d3d8:	4b95      	ldr	r3, [pc, #596]	@ (800d630 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	685a      	ldr	r2, [r3, #4]
 800d3de:	f897 308c 	ldrb.w	r3, [r7, #140]	@ 0x8c
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	3390      	adds	r3, #144	@ 0x90
 800d3e6:	443b      	add	r3, r7
 800d3e8:	f853 3c84 	ldr.w	r3, [r3, #-132]
 800d3ec:	4618      	mov	r0, r3
 800d3ee:	4790      	blx	r2
            }
        }
        break;
 800d3f0:	e1d1      	b.n	800d796 <LmhpComplianceOnMcpsIndication+0x752>
    }
    case COMPLIANCE_TX_FRAMES_CTRL_REQ:
    {
        uint8_t frameType = mcpsIndication->Buffer[cmdIndex++];
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	689a      	ldr	r2, [r3, #8]
 800d3f6:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d3fa:	1c59      	adds	r1, r3, #1
 800d3fc:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d400:	4413      	add	r3, r2
 800d402:	781b      	ldrb	r3, [r3, #0]
 800d404:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

        if( ( frameType == 1 ) || ( frameType == 2 ) )
 800d408:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	d004      	beq.n	800d41a <LmhpComplianceOnMcpsIndication+0x3d6>
 800d410:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d414:	2b02      	cmp	r3, #2
 800d416:	f040 81c0 	bne.w	800d79a <LmhpComplianceOnMcpsIndication+0x756>
        {
            ComplianceTestState.IsTxConfirmed = ( frameType != 1 ) ? LORAMAC_HANDLER_CONFIRMED_MSG : LORAMAC_HANDLER_UNCONFIRMED_MSG;
 800d41a:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 800d41e:	2b01      	cmp	r3, #1
 800d420:	bf14      	ite	ne
 800d422:	2301      	movne	r3, #1
 800d424:	2300      	moveq	r3, #0
 800d426:	b2db      	uxtb	r3, r3
 800d428:	461a      	mov	r2, r3
 800d42a:	4b82      	ldr	r3, [pc, #520]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d42c:	721a      	strb	r2, [r3, #8]

            if( ComplianceParams->OnTxFrameCtrlChanged != NULL )
 800d42e:	4b80      	ldr	r3, [pc, #512]	@ (800d630 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	689b      	ldr	r3, [r3, #8]
 800d434:	2b00      	cmp	r3, #0
 800d436:	f000 81b0 	beq.w	800d79a <LmhpComplianceOnMcpsIndication+0x756>
            {
                ComplianceParams->OnTxFrameCtrlChanged( ComplianceTestState.IsTxConfirmed );
 800d43a:	4b7d      	ldr	r3, [pc, #500]	@ (800d630 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	689b      	ldr	r3, [r3, #8]
 800d440:	4a7c      	ldr	r2, [pc, #496]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d442:	7a12      	ldrb	r2, [r2, #8]
 800d444:	4610      	mov	r0, r2
 800d446:	4798      	blx	r3
            }
        }
        break;
 800d448:	e1a7      	b.n	800d79a <LmhpComplianceOnMcpsIndication+0x756>
    }
    case COMPLIANCE_ECHO_PAYLOAD_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_ECHO_PAYLOAD_ANS;
 800d44a:	4b7a      	ldr	r3, [pc, #488]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d44c:	68da      	ldr	r2, [r3, #12]
 800d44e:	4b79      	ldr	r3, [pc, #484]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d450:	7a9b      	ldrb	r3, [r3, #10]
 800d452:	1c59      	adds	r1, r3, #1
 800d454:	b2c8      	uxtb	r0, r1
 800d456:	4977      	ldr	r1, [pc, #476]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d458:	7288      	strb	r0, [r1, #10]
 800d45a:	4413      	add	r3, r2
 800d45c:	2208      	movs	r2, #8
 800d45e:	701a      	strb	r2, [r3, #0]

        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d460:	2301      	movs	r3, #1
 800d462:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
 800d466:	e019      	b.n	800d49c <LmhpComplianceOnMcpsIndication+0x458>
             i++ )
        {
            ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = mcpsIndication->Buffer[cmdIndex++] + 1;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d470:	1c59      	adds	r1, r3, #1
 800d472:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d476:	4413      	add	r3, r2
 800d478:	781a      	ldrb	r2, [r3, #0]
 800d47a:	4b6e      	ldr	r3, [pc, #440]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d47c:	68d9      	ldr	r1, [r3, #12]
 800d47e:	4b6d      	ldr	r3, [pc, #436]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d480:	7a9b      	ldrb	r3, [r3, #10]
 800d482:	1c58      	adds	r0, r3, #1
 800d484:	b2c4      	uxtb	r4, r0
 800d486:	486b      	ldr	r0, [pc, #428]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d488:	7284      	strb	r4, [r0, #10]
 800d48a:	440b      	add	r3, r1
 800d48c:	3201      	adds	r2, #1
 800d48e:	b2d2      	uxtb	r2, r2
 800d490:	701a      	strb	r2, [r3, #0]
             i++ )
 800d492:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 800d496:	3301      	adds	r3, #1
 800d498:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
        for( uint8_t i = 1; i < MIN( mcpsIndication->BufferSize, ComplianceTestState.DataBufferMaxSize );
 800d49c:	4b65      	ldr	r3, [pc, #404]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d49e:	7a5a      	ldrb	r2, [r3, #9]
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	7b1b      	ldrb	r3, [r3, #12]
 800d4a4:	4293      	cmp	r3, r2
 800d4a6:	bf28      	it	cs
 800d4a8:	4613      	movcs	r3, r2
 800d4aa:	b2db      	uxtb	r3, r3
 800d4ac:	f897 208e 	ldrb.w	r2, [r7, #142]	@ 0x8e
 800d4b0:	429a      	cmp	r2, r3
 800d4b2:	d3d9      	bcc.n	800d468 <LmhpComplianceOnMcpsIndication+0x424>
        }
        break;
 800d4b4:	e176      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_REQ:
    {
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_RX_APP_CNT_ANS;
 800d4b6:	4b5f      	ldr	r3, [pc, #380]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4b8:	68da      	ldr	r2, [r3, #12]
 800d4ba:	4b5e      	ldr	r3, [pc, #376]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4bc:	7a9b      	ldrb	r3, [r3, #10]
 800d4be:	1c59      	adds	r1, r3, #1
 800d4c0:	b2c8      	uxtb	r0, r1
 800d4c2:	495c      	ldr	r1, [pc, #368]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4c4:	7288      	strb	r0, [r1, #10]
 800d4c6:	4413      	add	r3, r2
 800d4c8:	2209      	movs	r2, #9
 800d4ca:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt;
 800d4cc:	4b59      	ldr	r3, [pc, #356]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4ce:	8a18      	ldrh	r0, [r3, #16]
 800d4d0:	4b58      	ldr	r3, [pc, #352]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4d2:	68da      	ldr	r2, [r3, #12]
 800d4d4:	4b57      	ldr	r3, [pc, #348]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4d6:	7a9b      	ldrb	r3, [r3, #10]
 800d4d8:	1c59      	adds	r1, r3, #1
 800d4da:	b2cc      	uxtb	r4, r1
 800d4dc:	4955      	ldr	r1, [pc, #340]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4de:	728c      	strb	r4, [r1, #10]
 800d4e0:	4413      	add	r3, r2
 800d4e2:	b2c2      	uxtb	r2, r0
 800d4e4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceTestState.RxAppCnt >> 8;
 800d4e6:	4b53      	ldr	r3, [pc, #332]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4e8:	8a1b      	ldrh	r3, [r3, #16]
 800d4ea:	0a1b      	lsrs	r3, r3, #8
 800d4ec:	b298      	uxth	r0, r3
 800d4ee:	4b51      	ldr	r3, [pc, #324]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4f0:	68da      	ldr	r2, [r3, #12]
 800d4f2:	4b50      	ldr	r3, [pc, #320]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4f4:	7a9b      	ldrb	r3, [r3, #10]
 800d4f6:	1c59      	adds	r1, r3, #1
 800d4f8:	b2cc      	uxtb	r4, r1
 800d4fa:	494e      	ldr	r1, [pc, #312]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d4fc:	728c      	strb	r4, [r1, #10]
 800d4fe:	4413      	add	r3, r2
 800d500:	b2c2      	uxtb	r2, r0
 800d502:	701a      	strb	r2, [r3, #0]
        break;
 800d504:	e14e      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_RX_APP_CNT_RESET_REQ:
    {
        ComplianceTestState.RxAppCnt = 0;
 800d506:	4b4b      	ldr	r3, [pc, #300]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d508:	2200      	movs	r2, #0
 800d50a:	821a      	strh	r2, [r3, #16]
        break;
 800d50c:	e14a      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_LINK_CHECK_REQ:
    {
        MlmeReq_t mlmeReq;
        mlmeReq.Type = MLME_LINK_CHECK;
 800d50e:	2304      	movs	r3, #4
 800d510:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54

        LoRaMacMlmeRequest( &mlmeReq );
 800d514:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800d518:	4618      	mov	r0, r3
 800d51a:	f004 fca7 	bl	8011e6c <LoRaMacMlmeRequest>
        break;
 800d51e:	e141      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_DEVICE_TIME_REQ:
    {
        CompliancePackage.OnDeviceTimeRequest( );
 800d520:	4b45      	ldr	r3, [pc, #276]	@ (800d638 <LmhpComplianceOnMcpsIndication+0x5f4>)
 800d522:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d524:	4798      	blx	r3
        break;
 800d526:	e13d      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    case COMPLIANCE_PING_SLOT_INFO_REQ:
    {
        ComplianceTestState.ClassBStatus.PingSlotPeriodicity = mcpsIndication->Buffer[cmdIndex++];
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	689a      	ldr	r2, [r3, #8]
 800d52c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d530:	1c59      	adds	r1, r3, #1
 800d532:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d536:	4413      	add	r3, r2
 800d538:	781a      	ldrb	r2, [r3, #0]
 800d53a:	4b3e      	ldr	r3, [pc, #248]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d53c:	755a      	strb	r2, [r3, #21]
        if( ComplianceParams->OnPingSlotPeriodicityChanged != NULL )
 800d53e:	4b3c      	ldr	r3, [pc, #240]	@ (800d630 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	68db      	ldr	r3, [r3, #12]
 800d544:	2b00      	cmp	r3, #0
 800d546:	f000 812a 	beq.w	800d79e <LmhpComplianceOnMcpsIndication+0x75a>
        {
        ComplianceParams->OnPingSlotPeriodicityChanged( ComplianceTestState.ClassBStatus.PingSlotPeriodicity );
 800d54a:	4b39      	ldr	r3, [pc, #228]	@ (800d630 <LmhpComplianceOnMcpsIndication+0x5ec>)
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	68db      	ldr	r3, [r3, #12]
 800d550:	4a38      	ldr	r2, [pc, #224]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d552:	7d52      	ldrb	r2, [r2, #21]
 800d554:	4610      	mov	r0, r2
 800d556:	4798      	blx	r3
        }
        break;
 800d558:	e121      	b.n	800d79e <LmhpComplianceOnMcpsIndication+0x75a>
#endif
    /* ST_WORKAROUND_END */
    case COMPLIANCE_TX_CW_REQ:
    {
        MlmeReq_t mlmeReq;
        if( mcpsIndication->BufferSize == 7 )
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	7b1b      	ldrb	r3, [r3, #12]
 800d55e:	2b07      	cmp	r3, #7
 800d560:	f040 811f 	bne.w	800d7a2 <LmhpComplianceOnMcpsIndication+0x75e>
        {
            mlmeReq.Type = MLME_TXCW;
 800d564:	2305      	movs	r3, #5
 800d566:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            mlmeReq.Req.TxCw.Timeout =
                ( uint16_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) );
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	689a      	ldr	r2, [r3, #8]
 800d56e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d572:	4413      	add	r3, r2
 800d574:	781b      	ldrb	r3, [r3, #0]
 800d576:	b21a      	sxth	r2, r3
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	6899      	ldr	r1, [r3, #8]
 800d57c:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d580:	3301      	adds	r3, #1
 800d582:	440b      	add	r3, r1
 800d584:	781b      	ldrb	r3, [r3, #0]
 800d586:	021b      	lsls	r3, r3, #8
 800d588:	b21b      	sxth	r3, r3
 800d58a:	4313      	orrs	r3, r2
 800d58c:	b21b      	sxth	r3, r3
 800d58e:	b29b      	uxth	r3, r3
            mlmeReq.Req.TxCw.Timeout =
 800d590:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            cmdIndex += 2;
 800d594:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d598:	3302      	adds	r3, #2
 800d59a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Frequency =
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	689a      	ldr	r2, [r3, #8]
 800d5a2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5a6:	4413      	add	r3, r2
 800d5a8:	781b      	ldrb	r3, [r3, #0]
 800d5aa:	4619      	mov	r1, r3
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	689a      	ldr	r2, [r3, #8]
 800d5b0:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5b4:	3301      	adds	r3, #1
 800d5b6:	4413      	add	r3, r2
 800d5b8:	781b      	ldrb	r3, [r3, #0]
 800d5ba:	021b      	lsls	r3, r3, #8
 800d5bc:	ea41 0203 	orr.w	r2, r1, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	6899      	ldr	r1, [r3, #8]
 800d5c4:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5c8:	3302      	adds	r3, #2
 800d5ca:	440b      	add	r3, r1
 800d5cc:	781b      	ldrb	r3, [r3, #0]
 800d5ce:	041b      	lsls	r3, r3, #16
                ( uint32_t )( mcpsIndication->Buffer[cmdIndex] | ( mcpsIndication->Buffer[cmdIndex + 1] << 8 ) |
 800d5d0:	4313      	orrs	r3, r2
 800d5d2:	461a      	mov	r2, r3
                               ( mcpsIndication->Buffer[cmdIndex + 2] << 16 ) ) *
 800d5d4:	2364      	movs	r3, #100	@ 0x64
 800d5d6:	fb02 f303 	mul.w	r3, r2, r3
            mlmeReq.Req.TxCw.Frequency =
 800d5da:	64bb      	str	r3, [r7, #72]	@ 0x48
                100;
            cmdIndex += 3;
 800d5dc:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5e0:	3303      	adds	r3, #3
 800d5e2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
            mlmeReq.Req.TxCw.Power = mcpsIndication->Buffer[cmdIndex++];
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	689a      	ldr	r2, [r3, #8]
 800d5ea:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 800d5ee:	1c59      	adds	r1, r3, #1
 800d5f0:	f887 108f 	strb.w	r1, [r7, #143]	@ 0x8f
 800d5f4:	4413      	add	r3, r2
 800d5f6:	781b      	ldrb	r3, [r3, #0]
 800d5f8:	b25b      	sxtb	r3, r3
 800d5fa:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

            LoRaMacMlmeRequest( &mlmeReq );
 800d5fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800d602:	4618      	mov	r0, r3
 800d604:	f004 fc32 	bl	8011e6c <LoRaMacMlmeRequest>
        }
        break;
 800d608:	e0cb      	b.n	800d7a2 <LmhpComplianceOnMcpsIndication+0x75e>
    }
    case COMPLIANCE_DUT_FPORT_224_DISABLE_REQ:
    {
        mibReq.Type = MIB_IS_CERT_FPORT_ON;
 800d60a:	2339      	movs	r3, #57	@ 0x39
 800d60c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
        mibReq.Param.IsCertPortOn = false;
 800d610:	2300      	movs	r3, #0
 800d612:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
        LoRaMacMibSetRequestConfirm( &mibReq );
 800d616:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800d61a:	4618      	mov	r0, r3
 800d61c:	f004 f8b6 	bl	801178c <LoRaMacMibSetRequestConfirm>

        ComplianceTestState.IsResetCmdPending = true;
 800d620:	4b04      	ldr	r3, [pc, #16]	@ (800d634 <LmhpComplianceOnMcpsIndication+0x5f0>)
 800d622:	2201      	movs	r2, #1
 800d624:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        break;
 800d628:	e0bc      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
 800d62a:	bf00      	nop
 800d62c:	0801be78 	.word	0x0801be78
 800d630:	20000654 	.word	0x20000654
 800d634:	2000061c 	.word	0x2000061c
 800d638:	200000e8 	.word	0x200000e8
    {
        Version_t           lrwanVersion;
        Version_t           lrwanRpVersion;
        MibRequestConfirm_t mibReq;

        mibReq.Type = MIB_LORAWAN_VERSION;
 800d63c:	232a      	movs	r3, #42	@ 0x2a
 800d63e:	733b      	strb	r3, [r7, #12]

        LoRaMacMibGetRequestConfirm( &mibReq );
 800d640:	f107 030c 	add.w	r3, r7, #12
 800d644:	4618      	mov	r0, r3
 800d646:	f003 fefb 	bl	8011440 <LoRaMacMibGetRequestConfirm>
        lrwanVersion   = mibReq.Param.LrWanVersion.LoRaWan;
 800d64a:	693b      	ldr	r3, [r7, #16]
 800d64c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        lrwanRpVersion = mibReq.Param.LrWanVersion.LoRaWanRegion;
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	63bb      	str	r3, [r7, #56]	@ 0x38

        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = COMPLIANCE_DUT_VERSION_ANS;
 800d652:	4b62      	ldr	r3, [pc, #392]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d654:	68da      	ldr	r2, [r3, #12]
 800d656:	4b61      	ldr	r3, [pc, #388]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d658:	7a9b      	ldrb	r3, [r3, #10]
 800d65a:	1c59      	adds	r1, r3, #1
 800d65c:	b2c8      	uxtb	r0, r1
 800d65e:	495f      	ldr	r1, [pc, #380]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d660:	7288      	strb	r0, [r1, #10]
 800d662:	4413      	add	r3, r2
 800d664:	227f      	movs	r2, #127	@ 0x7f
 800d666:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Major;
 800d668:	4b5d      	ldr	r3, [pc, #372]	@ (800d7e0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d66a:	681a      	ldr	r2, [r3, #0]
 800d66c:	4b5b      	ldr	r3, [pc, #364]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d66e:	68d9      	ldr	r1, [r3, #12]
 800d670:	4b5a      	ldr	r3, [pc, #360]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d672:	7a9b      	ldrb	r3, [r3, #10]
 800d674:	1c58      	adds	r0, r3, #1
 800d676:	b2c4      	uxtb	r4, r0
 800d678:	4858      	ldr	r0, [pc, #352]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d67a:	7284      	strb	r4, [r0, #10]
 800d67c:	440b      	add	r3, r1
 800d67e:	78d2      	ldrb	r2, [r2, #3]
 800d680:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Minor;
 800d682:	4b57      	ldr	r3, [pc, #348]	@ (800d7e0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d684:	681a      	ldr	r2, [r3, #0]
 800d686:	4b55      	ldr	r3, [pc, #340]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d688:	68d9      	ldr	r1, [r3, #12]
 800d68a:	4b54      	ldr	r3, [pc, #336]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d68c:	7a9b      	ldrb	r3, [r3, #10]
 800d68e:	1c58      	adds	r0, r3, #1
 800d690:	b2c4      	uxtb	r4, r0
 800d692:	4852      	ldr	r0, [pc, #328]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d694:	7284      	strb	r4, [r0, #10]
 800d696:	440b      	add	r3, r1
 800d698:	7892      	ldrb	r2, [r2, #2]
 800d69a:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Patch;
 800d69c:	4b50      	ldr	r3, [pc, #320]	@ (800d7e0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d69e:	681a      	ldr	r2, [r3, #0]
 800d6a0:	4b4e      	ldr	r3, [pc, #312]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6a2:	68d9      	ldr	r1, [r3, #12]
 800d6a4:	4b4d      	ldr	r3, [pc, #308]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6a6:	7a9b      	ldrb	r3, [r3, #10]
 800d6a8:	1c58      	adds	r0, r3, #1
 800d6aa:	b2c4      	uxtb	r4, r0
 800d6ac:	484b      	ldr	r0, [pc, #300]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ae:	7284      	strb	r4, [r0, #10]
 800d6b0:	440b      	add	r3, r1
 800d6b2:	7852      	ldrb	r2, [r2, #1]
 800d6b4:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = ComplianceParams->FwVersion.Fields.Revision;
 800d6b6:	4b4a      	ldr	r3, [pc, #296]	@ (800d7e0 <LmhpComplianceOnMcpsIndication+0x79c>)
 800d6b8:	681a      	ldr	r2, [r3, #0]
 800d6ba:	4b48      	ldr	r3, [pc, #288]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6bc:	68d9      	ldr	r1, [r3, #12]
 800d6be:	4b47      	ldr	r3, [pc, #284]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6c0:	7a9b      	ldrb	r3, [r3, #10]
 800d6c2:	1c58      	adds	r0, r3, #1
 800d6c4:	b2c4      	uxtb	r4, r0
 800d6c6:	4845      	ldr	r0, [pc, #276]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6c8:	7284      	strb	r4, [r0, #10]
 800d6ca:	440b      	add	r3, r1
 800d6cc:	7812      	ldrb	r2, [r2, #0]
 800d6ce:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Major;
 800d6d0:	4b42      	ldr	r3, [pc, #264]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6d2:	68da      	ldr	r2, [r3, #12]
 800d6d4:	4b41      	ldr	r3, [pc, #260]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6d6:	7a9b      	ldrb	r3, [r3, #10]
 800d6d8:	1c59      	adds	r1, r3, #1
 800d6da:	b2c8      	uxtb	r0, r1
 800d6dc:	493f      	ldr	r1, [pc, #252]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6de:	7288      	strb	r0, [r1, #10]
 800d6e0:	4413      	add	r3, r2
 800d6e2:	f897 203f 	ldrb.w	r2, [r7, #63]	@ 0x3f
 800d6e6:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Minor;
 800d6e8:	4b3c      	ldr	r3, [pc, #240]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ea:	68da      	ldr	r2, [r3, #12]
 800d6ec:	4b3b      	ldr	r3, [pc, #236]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6ee:	7a9b      	ldrb	r3, [r3, #10]
 800d6f0:	1c59      	adds	r1, r3, #1
 800d6f2:	b2c8      	uxtb	r0, r1
 800d6f4:	4939      	ldr	r1, [pc, #228]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d6f6:	7288      	strb	r0, [r1, #10]
 800d6f8:	4413      	add	r3, r2
 800d6fa:	f897 203e 	ldrb.w	r2, [r7, #62]	@ 0x3e
 800d6fe:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Patch;
 800d700:	4b36      	ldr	r3, [pc, #216]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d702:	68da      	ldr	r2, [r3, #12]
 800d704:	4b35      	ldr	r3, [pc, #212]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d706:	7a9b      	ldrb	r3, [r3, #10]
 800d708:	1c59      	adds	r1, r3, #1
 800d70a:	b2c8      	uxtb	r0, r1
 800d70c:	4933      	ldr	r1, [pc, #204]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d70e:	7288      	strb	r0, [r1, #10]
 800d710:	4413      	add	r3, r2
 800d712:	f897 203d 	ldrb.w	r2, [r7, #61]	@ 0x3d
 800d716:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanVersion.Fields.Revision;
 800d718:	4b30      	ldr	r3, [pc, #192]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d71a:	68da      	ldr	r2, [r3, #12]
 800d71c:	4b2f      	ldr	r3, [pc, #188]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d71e:	7a9b      	ldrb	r3, [r3, #10]
 800d720:	1c59      	adds	r1, r3, #1
 800d722:	b2c8      	uxtb	r0, r1
 800d724:	492d      	ldr	r1, [pc, #180]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d726:	7288      	strb	r0, [r1, #10]
 800d728:	4413      	add	r3, r2
 800d72a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 800d72e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Major;
 800d730:	4b2a      	ldr	r3, [pc, #168]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d732:	68da      	ldr	r2, [r3, #12]
 800d734:	4b29      	ldr	r3, [pc, #164]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d736:	7a9b      	ldrb	r3, [r3, #10]
 800d738:	1c59      	adds	r1, r3, #1
 800d73a:	b2c8      	uxtb	r0, r1
 800d73c:	4927      	ldr	r1, [pc, #156]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d73e:	7288      	strb	r0, [r1, #10]
 800d740:	4413      	add	r3, r2
 800d742:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800d746:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Minor;
 800d748:	4b24      	ldr	r3, [pc, #144]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d74a:	68da      	ldr	r2, [r3, #12]
 800d74c:	4b23      	ldr	r3, [pc, #140]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d74e:	7a9b      	ldrb	r3, [r3, #10]
 800d750:	1c59      	adds	r1, r3, #1
 800d752:	b2c8      	uxtb	r0, r1
 800d754:	4921      	ldr	r1, [pc, #132]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d756:	7288      	strb	r0, [r1, #10]
 800d758:	4413      	add	r3, r2
 800d75a:	f897 203a 	ldrb.w	r2, [r7, #58]	@ 0x3a
 800d75e:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Patch;
 800d760:	4b1e      	ldr	r3, [pc, #120]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d762:	68da      	ldr	r2, [r3, #12]
 800d764:	4b1d      	ldr	r3, [pc, #116]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d766:	7a9b      	ldrb	r3, [r3, #10]
 800d768:	1c59      	adds	r1, r3, #1
 800d76a:	b2c8      	uxtb	r0, r1
 800d76c:	491b      	ldr	r1, [pc, #108]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d76e:	7288      	strb	r0, [r1, #10]
 800d770:	4413      	add	r3, r2
 800d772:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800d776:	701a      	strb	r2, [r3, #0]
        ComplianceTestState.DataBuffer[ComplianceTestState.DataBufferSize++] = lrwanRpVersion.Fields.Revision;
 800d778:	4b18      	ldr	r3, [pc, #96]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d77a:	68da      	ldr	r2, [r3, #12]
 800d77c:	4b17      	ldr	r3, [pc, #92]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d77e:	7a9b      	ldrb	r3, [r3, #10]
 800d780:	1c59      	adds	r1, r3, #1
 800d782:	b2c8      	uxtb	r0, r1
 800d784:	4915      	ldr	r1, [pc, #84]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d786:	7288      	strb	r0, [r1, #10]
 800d788:	4413      	add	r3, r2
 800d78a:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800d78e:	701a      	strb	r2, [r3, #0]
        break;
 800d790:	e008      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
    }
    default:
    {
        break;
 800d792:	bf00      	nop
 800d794:	e006      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d796:	bf00      	nop
 800d798:	e004      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d79a:	bf00      	nop
 800d79c:	e002      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d79e:	bf00      	nop
 800d7a0:	e000      	b.n	800d7a4 <LmhpComplianceOnMcpsIndication+0x760>
        break;
 800d7a2:	bf00      	nop
    }
    }

    if( ComplianceTestState.DataBufferSize != 0 )
 800d7a4:	4b0d      	ldr	r3, [pc, #52]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7a6:	7a9b      	ldrb	r3, [r3, #10]
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d008      	beq.n	800d7be <LmhpComplianceOnMcpsIndication+0x77a>
    {
        TimerSetValue( &ProcessTimer, 1000 );
 800d7ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800d7b0:	480c      	ldr	r0, [pc, #48]	@ (800d7e4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7b2:	f00d fb09 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart(&ProcessTimer);
 800d7b6:	480b      	ldr	r0, [pc, #44]	@ (800d7e4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7b8:	f00d fa28 	bl	801ac0c <UTIL_TIMER_Start>
 800d7bc:	e00b      	b.n	800d7d6 <LmhpComplianceOnMcpsIndication+0x792>
    }
    else
    {
        // Abort any pending Tx as a new command has been processed
        TimerStop(&ProcessTimer);
 800d7be:	4809      	ldr	r0, [pc, #36]	@ (800d7e4 <LmhpComplianceOnMcpsIndication+0x7a0>)
 800d7c0:	f00d fa92 	bl	801ace8 <UTIL_TIMER_Stop>
        ComplianceTestState.IsTxPending = false;
 800d7c4:	4b05      	ldr	r3, [pc, #20]	@ (800d7dc <LmhpComplianceOnMcpsIndication+0x798>)
 800d7c6:	2200      	movs	r2, #0
 800d7c8:	705a      	strb	r2, [r3, #1]
 800d7ca:	e004      	b.n	800d7d6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7cc:	bf00      	nop
 800d7ce:	e002      	b.n	800d7d6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7d0:	bf00      	nop
 800d7d2:	e000      	b.n	800d7d6 <LmhpComplianceOnMcpsIndication+0x792>
        return;
 800d7d4:	bf00      	nop
    }
}
 800d7d6:	3790      	adds	r7, #144	@ 0x90
 800d7d8:	46bd      	mov	sp, r7
 800d7da:	bdb0      	pop	{r4, r5, r7, pc}
 800d7dc:	2000061c 	.word	0x2000061c
 800d7e0:	20000654 	.word	0x20000654
 800d7e4:	20000658 	.word	0x20000658

0800d7e8 <LmhpComplianceOnMlmeConfirm>:

static void LmhpComplianceOnMlmeConfirm( MlmeConfirm_t *mlmeConfirm )
{
 800d7e8:	b480      	push	{r7}
 800d7ea:	b083      	sub	sp, #12
 800d7ec:	af00      	add	r7, sp, #0
 800d7ee:	6078      	str	r0, [r7, #4]
        break;
    }
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
 800d7f0:	bf00      	nop
    }
}
 800d7f2:	bf00      	nop
 800d7f4:	370c      	adds	r7, #12
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bc80      	pop	{r7}
 800d7fa:	4770      	bx	lr

0800d7fc <LmhpComplianceOnMlmeIndication>:

static void LmhpComplianceOnMlmeIndication( MlmeIndication_t* mlmeIndication )
{
 800d7fc:	b480      	push	{r7}
 800d7fe:	b083      	sub	sp, #12
 800d800:	af00      	add	r7, sp, #0
 800d802:	6078      	str	r0, [r7, #4]
    if( ComplianceTestState.Initialized == false )
 800d804:	4b05      	ldr	r3, [pc, #20]	@ (800d81c <LmhpComplianceOnMlmeIndication+0x20>)
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	f083 0301 	eor.w	r3, r3, #1
 800d80c:	b2db      	uxtb	r3, r3
 800d80e:	2b00      	cmp	r3, #0
    {
        return;
 800d810:	bf00      	nop
#endif
    /* ST_WORKAROUND_END */
    default:
        break;
    }
}
 800d812:	370c      	adds	r7, #12
 800d814:	46bd      	mov	sp, r7
 800d816:	bc80      	pop	{r7}
 800d818:	4770      	bx	lr
 800d81a:	bf00      	nop
 800d81c:	2000061c 	.word	0x2000061c

0800d820 <OnProcessTimer>:
}
#endif
/* ST_WORKAROUND_END */

static void OnProcessTimer( void *context )
{
 800d820:	b580      	push	{r7, lr}
 800d822:	b082      	sub	sp, #8
 800d824:	af00      	add	r7, sp, #0
 800d826:	6078      	str	r0, [r7, #4]
    ComplianceTestState.IsTxPending = true;
 800d828:	4b04      	ldr	r3, [pc, #16]	@ (800d83c <OnProcessTimer+0x1c>)
 800d82a:	2201      	movs	r2, #1
 800d82c:	705a      	strb	r2, [r3, #1]
    CompliancePackage.OnPackageProcessEvent();
 800d82e:	4b04      	ldr	r3, [pc, #16]	@ (800d840 <OnProcessTimer+0x20>)
 800d830:	695b      	ldr	r3, [r3, #20]
 800d832:	4798      	blx	r3
}
 800d834:	bf00      	nop
 800d836:	3708      	adds	r7, #8
 800d838:	46bd      	mov	sp, r7
 800d83a:	bd80      	pop	{r7, pc}
 800d83c:	2000061c 	.word	0x2000061c
 800d840:	200000e8 	.word	0x200000e8

0800d844 <OnRadioTxDone>:
    int16_t Rssi;
    int8_t Snr;
}RxDoneParams;

static void OnRadioTxDone( void )
{
 800d844:	b590      	push	{r4, r7, lr}
 800d846:	b083      	sub	sp, #12
 800d848:	af00      	add	r7, sp, #0
    TxDoneParams.CurTime = TimerGetCurrentTime( );
 800d84a:	f00d fb67 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 800d84e:	4603      	mov	r3, r0
 800d850:	4a16      	ldr	r2, [pc, #88]	@ (800d8ac <OnRadioTxDone+0x68>)
 800d852:	6013      	str	r3, [r2, #0]
    MacCtx.LastTxSysTime = SysTimeGet( );
 800d854:	4c16      	ldr	r4, [pc, #88]	@ (800d8b0 <OnRadioTxDone+0x6c>)
 800d856:	463b      	mov	r3, r7
 800d858:	4618      	mov	r0, r3
 800d85a:	f00c fcdf 	bl	801a21c <SysTimeGet>
 800d85e:	f504 734e 	add.w	r3, r4, #824	@ 0x338
 800d862:	463a      	mov	r2, r7
 800d864:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d868:	e883 0003 	stmia.w	r3, {r0, r1}

    LoRaMacRadioEvents.Events.TxDone = 1;
 800d86c:	4a11      	ldr	r2, [pc, #68]	@ (800d8b4 <OnRadioTxDone+0x70>)
 800d86e:	7813      	ldrb	r3, [r2, #0]
 800d870:	f043 0320 	orr.w	r3, r3, #32
 800d874:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d876:	4b0e      	ldr	r3, [pc, #56]	@ (800d8b0 <OnRadioTxDone+0x6c>)
 800d878:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d00a      	beq.n	800d896 <OnRadioTxDone+0x52>
 800d880:	4b0b      	ldr	r3, [pc, #44]	@ (800d8b0 <OnRadioTxDone+0x6c>)
 800d882:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d886:	691b      	ldr	r3, [r3, #16]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d004      	beq.n	800d896 <OnRadioTxDone+0x52>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d88c:	4b08      	ldr	r3, [pc, #32]	@ (800d8b0 <OnRadioTxDone+0x6c>)
 800d88e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d892:	691b      	ldr	r3, [r3, #16]
 800d894:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txDone\r\n" );
 800d896:	4b08      	ldr	r3, [pc, #32]	@ (800d8b8 <OnRadioTxDone+0x74>)
 800d898:	2201      	movs	r2, #1
 800d89a:	2100      	movs	r1, #0
 800d89c:	2002      	movs	r0, #2
 800d89e:	f00d fc2d 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800d8a2:	bf00      	nop
 800d8a4:	370c      	adds	r7, #12
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	bd90      	pop	{r4, r7, pc}
 800d8aa:	bf00      	nop
 800d8ac:	2000171c 	.word	0x2000171c
 800d8b0:	20000670 	.word	0x20000670
 800d8b4:	20001718 	.word	0x20001718
 800d8b8:	0801bea4 	.word	0x0801bea4

0800d8bc <OnRadioRxDone>:

static void OnRadioRxDone( uint8_t *payload, uint16_t size, int16_t rssi, int8_t snr )
{
 800d8bc:	b580      	push	{r7, lr}
 800d8be:	b084      	sub	sp, #16
 800d8c0:	af00      	add	r7, sp, #0
 800d8c2:	60f8      	str	r0, [r7, #12]
 800d8c4:	4608      	mov	r0, r1
 800d8c6:	4611      	mov	r1, r2
 800d8c8:	461a      	mov	r2, r3
 800d8ca:	4603      	mov	r3, r0
 800d8cc:	817b      	strh	r3, [r7, #10]
 800d8ce:	460b      	mov	r3, r1
 800d8d0:	813b      	strh	r3, [r7, #8]
 800d8d2:	4613      	mov	r3, r2
 800d8d4:	71fb      	strb	r3, [r7, #7]
    RxDoneParams.LastRxDone = TimerGetCurrentTime( );
 800d8d6:	f00d fb21 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 800d8da:	4603      	mov	r3, r0
 800d8dc:	4a18      	ldr	r2, [pc, #96]	@ (800d940 <OnRadioRxDone+0x84>)
 800d8de:	6013      	str	r3, [r2, #0]
    RxDoneParams.Payload = payload;
 800d8e0:	4a17      	ldr	r2, [pc, #92]	@ (800d940 <OnRadioRxDone+0x84>)
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	6053      	str	r3, [r2, #4]
    RxDoneParams.Size = size;
 800d8e6:	4a16      	ldr	r2, [pc, #88]	@ (800d940 <OnRadioRxDone+0x84>)
 800d8e8:	897b      	ldrh	r3, [r7, #10]
 800d8ea:	8113      	strh	r3, [r2, #8]
    RxDoneParams.Rssi = rssi;
 800d8ec:	4a14      	ldr	r2, [pc, #80]	@ (800d940 <OnRadioRxDone+0x84>)
 800d8ee:	893b      	ldrh	r3, [r7, #8]
 800d8f0:	8153      	strh	r3, [r2, #10]
    RxDoneParams.Snr = snr;
 800d8f2:	4a13      	ldr	r2, [pc, #76]	@ (800d940 <OnRadioRxDone+0x84>)
 800d8f4:	79fb      	ldrb	r3, [r7, #7]
 800d8f6:	7313      	strb	r3, [r2, #12]

    LoRaMacRadioEvents.Events.RxDone = 1;
 800d8f8:	4a12      	ldr	r2, [pc, #72]	@ (800d944 <OnRadioRxDone+0x88>)
 800d8fa:	7813      	ldrb	r3, [r2, #0]
 800d8fc:	f043 0310 	orr.w	r3, r3, #16
 800d900:	7013      	strb	r3, [r2, #0]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 1;
 800d902:	4a10      	ldr	r2, [pc, #64]	@ (800d944 <OnRadioRxDone+0x88>)
 800d904:	7813      	ldrb	r3, [r2, #0]
 800d906:	f043 0301 	orr.w	r3, r3, #1
 800d90a:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d90c:	4b0e      	ldr	r3, [pc, #56]	@ (800d948 <OnRadioRxDone+0x8c>)
 800d90e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d912:	2b00      	cmp	r3, #0
 800d914:	d00a      	beq.n	800d92c <OnRadioRxDone+0x70>
 800d916:	4b0c      	ldr	r3, [pc, #48]	@ (800d948 <OnRadioRxDone+0x8c>)
 800d918:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d91c:	691b      	ldr	r3, [r3, #16]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d004      	beq.n	800d92c <OnRadioRxDone+0x70>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d922:	4b09      	ldr	r3, [pc, #36]	@ (800d948 <OnRadioRxDone+0x8c>)
 800d924:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d928:	691b      	ldr	r3, [r3, #16]
 800d92a:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxDone\r\n" );
 800d92c:	4b07      	ldr	r3, [pc, #28]	@ (800d94c <OnRadioRxDone+0x90>)
 800d92e:	2201      	movs	r2, #1
 800d930:	2100      	movs	r1, #0
 800d932:	2002      	movs	r0, #2
 800d934:	f00d fbe2 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800d938:	bf00      	nop
 800d93a:	3710      	adds	r7, #16
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	20001720 	.word	0x20001720
 800d944:	20001718 	.word	0x20001718
 800d948:	20000670 	.word	0x20000670
 800d94c:	0801beb4 	.word	0x0801beb4

0800d950 <OnRadioTxTimeout>:

static void OnRadioTxTimeout( void )
{
 800d950:	b580      	push	{r7, lr}
 800d952:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.TxTimeout = 1;
 800d954:	4a0e      	ldr	r2, [pc, #56]	@ (800d990 <OnRadioTxTimeout+0x40>)
 800d956:	7813      	ldrb	r3, [r2, #0]
 800d958:	f043 0308 	orr.w	r3, r3, #8
 800d95c:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d95e:	4b0d      	ldr	r3, [pc, #52]	@ (800d994 <OnRadioTxTimeout+0x44>)
 800d960:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d964:	2b00      	cmp	r3, #0
 800d966:	d00a      	beq.n	800d97e <OnRadioTxTimeout+0x2e>
 800d968:	4b0a      	ldr	r3, [pc, #40]	@ (800d994 <OnRadioTxTimeout+0x44>)
 800d96a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d96e:	691b      	ldr	r3, [r3, #16]
 800d970:	2b00      	cmp	r3, #0
 800d972:	d004      	beq.n	800d97e <OnRadioTxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d974:	4b07      	ldr	r3, [pc, #28]	@ (800d994 <OnRadioTxTimeout+0x44>)
 800d976:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d97a:	691b      	ldr	r3, [r3, #16]
 800d97c:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC txTimeOut\r\n" );
 800d97e:	4b06      	ldr	r3, [pc, #24]	@ (800d998 <OnRadioTxTimeout+0x48>)
 800d980:	2201      	movs	r2, #1
 800d982:	2100      	movs	r1, #0
 800d984:	2002      	movs	r0, #2
 800d986:	f00d fbb9 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800d98a:	bf00      	nop
 800d98c:	bd80      	pop	{r7, pc}
 800d98e:	bf00      	nop
 800d990:	20001718 	.word	0x20001718
 800d994:	20000670 	.word	0x20000670
 800d998:	0801bec4 	.word	0x0801bec4

0800d99c <OnRadioRxError>:

static void OnRadioRxError( void )
{
 800d99c:	b580      	push	{r7, lr}
 800d99e:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxError = 1;
 800d9a0:	4a0b      	ldr	r2, [pc, #44]	@ (800d9d0 <OnRadioRxError+0x34>)
 800d9a2:	7813      	ldrb	r3, [r2, #0]
 800d9a4:	f043 0304 	orr.w	r3, r3, #4
 800d9a8:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d9aa:	4b0a      	ldr	r3, [pc, #40]	@ (800d9d4 <OnRadioRxError+0x38>)
 800d9ac:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9b0:	2b00      	cmp	r3, #0
 800d9b2:	d00a      	beq.n	800d9ca <OnRadioRxError+0x2e>
 800d9b4:	4b07      	ldr	r3, [pc, #28]	@ (800d9d4 <OnRadioRxError+0x38>)
 800d9b6:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9ba:	691b      	ldr	r3, [r3, #16]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d004      	beq.n	800d9ca <OnRadioRxError+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9c0:	4b04      	ldr	r3, [pc, #16]	@ (800d9d4 <OnRadioRxError+0x38>)
 800d9c2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9c6:	691b      	ldr	r3, [r3, #16]
 800d9c8:	4798      	blx	r3
    }
}
 800d9ca:	bf00      	nop
 800d9cc:	bd80      	pop	{r7, pc}
 800d9ce:	bf00      	nop
 800d9d0:	20001718 	.word	0x20001718
 800d9d4:	20000670 	.word	0x20000670

0800d9d8 <OnRadioRxTimeout>:

static void OnRadioRxTimeout( void )
{
 800d9d8:	b580      	push	{r7, lr}
 800d9da:	af00      	add	r7, sp, #0
    LoRaMacRadioEvents.Events.RxTimeout = 1;
 800d9dc:	4a0e      	ldr	r2, [pc, #56]	@ (800da18 <OnRadioRxTimeout+0x40>)
 800d9de:	7813      	ldrb	r3, [r2, #0]
 800d9e0:	f043 0302 	orr.w	r3, r3, #2
 800d9e4:	7013      	strb	r3, [r2, #0]

    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800d9e6:	4b0d      	ldr	r3, [pc, #52]	@ (800da1c <OnRadioRxTimeout+0x44>)
 800d9e8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9ec:	2b00      	cmp	r3, #0
 800d9ee:	d00a      	beq.n	800da06 <OnRadioRxTimeout+0x2e>
 800d9f0:	4b0a      	ldr	r3, [pc, #40]	@ (800da1c <OnRadioRxTimeout+0x44>)
 800d9f2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800d9f6:	691b      	ldr	r3, [r3, #16]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d004      	beq.n	800da06 <OnRadioRxTimeout+0x2e>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800d9fc:	4b07      	ldr	r3, [pc, #28]	@ (800da1c <OnRadioRxTimeout+0x44>)
 800d9fe:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800da02:	691b      	ldr	r3, [r3, #16]
 800da04:	4798      	blx	r3
    }
    MW_LOG(TS_ON, VLEVEL_M, "MAC rxTimeOut\r\n" );
 800da06:	4b06      	ldr	r3, [pc, #24]	@ (800da20 <OnRadioRxTimeout+0x48>)
 800da08:	2201      	movs	r2, #1
 800da0a:	2100      	movs	r1, #0
 800da0c:	2002      	movs	r0, #2
 800da0e:	f00d fb75 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 800da12:	bf00      	nop
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	20001718 	.word	0x20001718
 800da1c:	20000670 	.word	0x20000670
 800da20:	0801bed4 	.word	0x0801bed4

0800da24 <UpdateRxSlotIdleState>:

static void UpdateRxSlotIdleState( void )
{
 800da24:	b480      	push	{r7}
 800da26:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da28:	4b08      	ldr	r3, [pc, #32]	@ (800da4c <UpdateRxSlotIdleState+0x28>)
 800da2a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800da2e:	2b02      	cmp	r3, #2
 800da30:	d004      	beq.n	800da3c <UpdateRxSlotIdleState+0x18>
    {
        MacCtx.RxSlot = RX_SLOT_NONE;
 800da32:	4b07      	ldr	r3, [pc, #28]	@ (800da50 <UpdateRxSlotIdleState+0x2c>)
 800da34:	2206      	movs	r2, #6
 800da36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
    else
    {
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
    }
}
 800da3a:	e003      	b.n	800da44 <UpdateRxSlotIdleState+0x20>
        MacCtx.RxSlot = RX_SLOT_WIN_CLASS_C;
 800da3c:	4b04      	ldr	r3, [pc, #16]	@ (800da50 <UpdateRxSlotIdleState+0x2c>)
 800da3e:	2202      	movs	r2, #2
 800da40:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
}
 800da44:	bf00      	nop
 800da46:	46bd      	mov	sp, r7
 800da48:	bc80      	pop	{r7}
 800da4a:	4770      	bx	lr
 800da4c:	20000b90 	.word	0x20000b90
 800da50:	20000670 	.word	0x20000670

0800da54 <ProcessRadioTxDone>:

static void ProcessRadioTxDone( void )
{
 800da54:	b580      	push	{r7, lr}
 800da56:	b08e      	sub	sp, #56	@ 0x38
 800da58:	af02      	add	r7, sp, #8
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    SetBandTxDoneParams_t txDone;

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800da5a:	4b3e      	ldr	r3, [pc, #248]	@ (800db54 <ProcessRadioTxDone+0x100>)
 800da5c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800da60:	2b02      	cmp	r3, #2
 800da62:	d002      	beq.n	800da6a <ProcessRadioTxDone+0x16>
    {
        Radio.Sleep( );
 800da64:	4b3c      	ldr	r3, [pc, #240]	@ (800db58 <ProcessRadioTxDone+0x104>)
 800da66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800da68:	4798      	blx	r3
    }
#if ( !defined(DISABLE_LORAWAN_RX_WINDOW) || (DISABLE_LORAWAN_RX_WINDOW == 0) )
    // Setup timers
    TimerSetValue( &MacCtx.RxWindowTimer1, MacCtx.RxWindow1Delay );
 800da6a:	4b3c      	ldr	r3, [pc, #240]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800da6c:	f8d3 33b0 	ldr.w	r3, [r3, #944]	@ 0x3b0
 800da70:	4619      	mov	r1, r3
 800da72:	483b      	ldr	r0, [pc, #236]	@ (800db60 <ProcessRadioTxDone+0x10c>)
 800da74:	f00d f9a8 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer1 );
 800da78:	4839      	ldr	r0, [pc, #228]	@ (800db60 <ProcessRadioTxDone+0x10c>)
 800da7a:	f00d f8c7 	bl	801ac0c <UTIL_TIMER_Start>
    TimerSetValue( &MacCtx.RxWindowTimer2, MacCtx.RxWindow2Delay );
 800da7e:	4b37      	ldr	r3, [pc, #220]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800da80:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800da84:	4619      	mov	r1, r3
 800da86:	4837      	ldr	r0, [pc, #220]	@ (800db64 <ProcessRadioTxDone+0x110>)
 800da88:	f00d f99e 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &MacCtx.RxWindowTimer2 );
 800da8c:	4835      	ldr	r0, [pc, #212]	@ (800db64 <ProcessRadioTxDone+0x110>)
 800da8e:	f00d f8bd 	bl	801ac0c <UTIL_TIMER_Start>
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
        TimerSetValue( &MacCtx.AckTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
        TimerStart( &MacCtx.AckTimeoutTimer );
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.NodeAckRequested == true )
 800da92:	4b32      	ldr	r3, [pc, #200]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800da94:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800da98:	2b00      	cmp	r3, #0
 800da9a:	d01a      	beq.n	800dad2 <ProcessRadioTxDone+0x7e>
    {
        getPhy.Attribute = PHY_RETRANSMIT_TIMEOUT;
 800da9c:	2315      	movs	r3, #21
 800da9e:	f887 3020 	strb.w	r3, [r7, #32]
        phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800daa2:	4b2c      	ldr	r3, [pc, #176]	@ (800db54 <ProcessRadioTxDone+0x100>)
 800daa4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800daa8:	f107 0220 	add.w	r2, r7, #32
 800daac:	4611      	mov	r1, r2
 800daae:	4618      	mov	r0, r3
 800dab0:	f006 fd28 	bl	8014504 <RegionGetPhyParam>
 800dab4:	4603      	mov	r3, r0
 800dab6:	61fb      	str	r3, [r7, #28]
        TimerSetValue( &MacCtx.RetransmitTimeoutTimer, MacCtx.RxWindow2Delay + phyParam.Value );
 800dab8:	4b28      	ldr	r3, [pc, #160]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800daba:	f8d3 23b4 	ldr.w	r2, [r3, #948]	@ 0x3b4
 800dabe:	69fb      	ldr	r3, [r7, #28]
 800dac0:	4413      	add	r3, r2
 800dac2:	4619      	mov	r1, r3
 800dac4:	4828      	ldr	r0, [pc, #160]	@ (800db68 <ProcessRadioTxDone+0x114>)
 800dac6:	f00d f97f 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &MacCtx.RetransmitTimeoutTimer );
 800daca:	4827      	ldr	r0, [pc, #156]	@ (800db68 <ProcessRadioTxDone+0x114>)
 800dacc:	f00d f89e 	bl	801ac0c <UTIL_TIMER_Start>
 800dad0:	e003      	b.n	800dada <ProcessRadioTxDone+0x86>
    }
    else
    {
        // Transmission successful, setup status directly
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800dad2:	4b22      	ldr	r3, [pc, #136]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800dad4:	2200      	movs	r2, #0
 800dad6:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    }
#endif /* LORAMAC_VERSION */

    // Update Aggregated last tx done time
    Nvm.MacGroup1.LastTxDoneTime = TxDoneParams.CurTime;
 800dada:	4b24      	ldr	r3, [pc, #144]	@ (800db6c <ProcessRadioTxDone+0x118>)
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a1d      	ldr	r2, [pc, #116]	@ (800db54 <ProcessRadioTxDone+0x100>)
 800dae0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    // Update last tx done time for the current channel
    txDone.Channel = MacCtx.Channel;
 800dae2:	4b1e      	ldr	r3, [pc, #120]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800dae4:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800dae8:	723b      	strb	r3, [r7, #8]
    txDone.LastTxDoneTime = TxDoneParams.CurTime;
 800daea:	4b20      	ldr	r3, [pc, #128]	@ (800db6c <ProcessRadioTxDone+0x118>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	60fb      	str	r3, [r7, #12]
    txDone.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 800daf0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800daf4:	4618      	mov	r0, r3
 800daf6:	f00c fbc9 	bl	801a28c <SysTimeGetMcuTime>
 800dafa:	4638      	mov	r0, r7
 800dafc:	4b15      	ldr	r3, [pc, #84]	@ (800db54 <ProcessRadioTxDone+0x100>)
 800dafe:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 800db02:	9200      	str	r2, [sp, #0]
 800db04:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 800db08:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 800db0c:	ca06      	ldmia	r2, {r1, r2}
 800db0e:	f00c fb1e 	bl	801a14e <SysTimeSub>
 800db12:	f107 0314 	add.w	r3, r7, #20
 800db16:	463a      	mov	r2, r7
 800db18:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db1c:	e883 0003 	stmia.w	r3, {r0, r1}
    txDone.LastTxAirTime = MacCtx.TxTimeOnAir;
 800db20:	4b0e      	ldr	r3, [pc, #56]	@ (800db5c <ProcessRadioTxDone+0x108>)
 800db22:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 800db26:	613b      	str	r3, [r7, #16]
    txDone.Joined  = true;
 800db28:	2301      	movs	r3, #1
 800db2a:	727b      	strb	r3, [r7, #9]
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800db2c:	4b09      	ldr	r3, [pc, #36]	@ (800db54 <ProcessRadioTxDone+0x100>)
 800db2e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800db32:	2b00      	cmp	r3, #0
 800db34:	d101      	bne.n	800db3a <ProcessRadioTxDone+0xe6>
    {
        txDone.Joined  = false;
 800db36:	2300      	movs	r3, #0
 800db38:	727b      	strb	r3, [r7, #9]
    }

    RegionSetBandTxDone( Nvm.MacGroup2.Region, &txDone );
 800db3a:	4b06      	ldr	r3, [pc, #24]	@ (800db54 <ProcessRadioTxDone+0x100>)
 800db3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800db40:	f107 0208 	add.w	r2, r7, #8
 800db44:	4611      	mov	r1, r2
 800db46:	4618      	mov	r0, r3
 800db48:	f006 fcf4 	bl	8014534 <RegionSetBandTxDone>
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
    }
#endif /* LORAMAC_VERSION */
}
 800db4c:	bf00      	nop
 800db4e:	3730      	adds	r7, #48	@ 0x30
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20000b90 	.word	0x20000b90
 800db58:	0801c500 	.word	0x0801c500
 800db5c:	20000670 	.word	0x20000670
 800db60:	200009f0 	.word	0x200009f0
 800db64:	20000a08 	.word	0x20000a08
 800db68:	20000a74 	.word	0x20000a74
 800db6c:	2000171c 	.word	0x2000171c

0800db70 <PrepareRxDoneAbort>:

static void PrepareRxDoneAbort( void )
{
 800db70:	b580      	push	{r7, lr}
 800db72:	af00      	add	r7, sp, #0
    MacCtx.MacState |= LORAMAC_RX_ABORT;
 800db74:	4b10      	ldr	r3, [pc, #64]	@ (800dbb8 <PrepareRxDoneAbort+0x48>)
 800db76:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800db7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800db7e:	4a0e      	ldr	r2, [pc, #56]	@ (800dbb8 <PrepareRxDoneAbort+0x48>)
 800db80:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    if( MacCtx.NodeAckRequested == true )
 800db84:	4b0c      	ldr	r3, [pc, #48]	@ (800dbb8 <PrepareRxDoneAbort+0x48>)
 800db86:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d002      	beq.n	800db94 <PrepareRxDoneAbort+0x24>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        OnAckTimeoutTimerEvent( NULL );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        OnRetransmitTimeoutTimerEvent( NULL );
 800db8e:	2000      	movs	r0, #0
 800db90:	f001 f99c 	bl	800eecc <OnRetransmitTimeoutTimerEvent>
#endif /* LORAMAC_VERSION */
    }

    MacCtx.MacFlags.Bits.McpsInd = 1;
 800db94:	4a08      	ldr	r2, [pc, #32]	@ (800dbb8 <PrepareRxDoneAbort+0x48>)
 800db96:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800db9a:	f043 0302 	orr.w	r3, r3, #2
 800db9e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    MacCtx.MacFlags.Bits.MacDone = 1;
 800dba2:	4a05      	ldr	r2, [pc, #20]	@ (800dbb8 <PrepareRxDoneAbort+0x48>)
 800dba4:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800dba8:	f043 0320 	orr.w	r3, r3, #32
 800dbac:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

    UpdateRxSlotIdleState( );
 800dbb0:	f7ff ff38 	bl	800da24 <UpdateRxSlotIdleState>
}
 800dbb4:	bf00      	nop
 800dbb6:	bd80      	pop	{r7, pc}
 800dbb8:	20000670 	.word	0x20000670

0800dbbc <ProcessRadioRxDone>:

static void ProcessRadioRxDone( void )
{
 800dbbc:	b590      	push	{r4, r7, lr}
 800dbbe:	b0a7      	sub	sp, #156	@ 0x9c
 800dbc0:	af02      	add	r7, sp, #8
    LoRaMacHeader_t macHdr;
    ApplyCFListParams_t applyCFList;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 800dbc2:	2312      	movs	r3, #18
 800dbc4:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

    LoRaMacMessageData_t macMsgData;
    LoRaMacMessageJoinAccept_t macMsgJoinAccept;
    uint8_t *payload = RxDoneParams.Payload;
 800dbc8:	4bbd      	ldr	r3, [pc, #756]	@ (800dec0 <ProcessRadioRxDone+0x304>)
 800dbca:	685b      	ldr	r3, [r3, #4]
 800dbcc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    uint16_t size = RxDoneParams.Size;
 800dbd0:	4bbb      	ldr	r3, [pc, #748]	@ (800dec0 <ProcessRadioRxDone+0x304>)
 800dbd2:	891b      	ldrh	r3, [r3, #8]
 800dbd4:	f8a7 3082 	strh.w	r3, [r7, #130]	@ 0x82
    int16_t rssi = RxDoneParams.Rssi;
 800dbd8:	4bb9      	ldr	r3, [pc, #740]	@ (800dec0 <ProcessRadioRxDone+0x304>)
 800dbda:	895b      	ldrh	r3, [r3, #10]
 800dbdc:	f8a7 3080 	strh.w	r3, [r7, #128]	@ 0x80
    int8_t snr = RxDoneParams.Snr;
 800dbe0:	4bb7      	ldr	r3, [pc, #732]	@ (800dec0 <ProcessRadioRxDone+0x304>)
 800dbe2:	7b1b      	ldrb	r3, [r3, #12]
 800dbe4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f

    uint8_t pktHeaderLen = 0;
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e

    uint32_t downLinkCounter = 0;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	60bb      	str	r3, [r7, #8]
    uint32_t address = Nvm.MacGroup2.DevAddr;
 800dbf2:	4bb4      	ldr	r3, [pc, #720]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800dbf4:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800dbf8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    uint8_t multicast = 0;
 800dbfc:	2300      	movs	r3, #0
 800dbfe:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
    AddressIdentifier_t addrID = UNICAST_DEV_ADDR;
 800dc02:	2301      	movs	r3, #1
 800dc04:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
    FCntIdentifier_t fCntID;

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacRadioEvents.Events.RxProcessPending = 0;
 800dc08:	4aaf      	ldr	r2, [pc, #700]	@ (800dec8 <ProcessRadioRxDone+0x30c>)
 800dc0a:	7813      	ldrb	r3, [r2, #0]
 800dc0c:	f36f 0300 	bfc	r3, #0, #1
 800dc10:	7013      	strb	r3, [r2, #0]
#endif /* LORAMAC_VERSION */

    MacCtx.McpsConfirm.AckReceived = false;
 800dc12:	4bae      	ldr	r3, [pc, #696]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc14:	2200      	movs	r2, #0
 800dc16:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
    MacCtx.RxStatus.Rssi = rssi;
 800dc1a:	4aac      	ldr	r2, [pc, #688]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc1c:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800dc20:	f8a2 3490 	strh.w	r3, [r2, #1168]	@ 0x490
    MacCtx.RxStatus.Snr = snr;
 800dc24:	4aa9      	ldr	r2, [pc, #676]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc26:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800dc2a:	f882 3492 	strb.w	r3, [r2, #1170]	@ 0x492
    MacCtx.RxStatus.RxSlot = MacCtx.RxSlot;
 800dc2e:	4ba7      	ldr	r3, [pc, #668]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc30:	f893 2494 	ldrb.w	r2, [r3, #1172]	@ 0x494
 800dc34:	4ba5      	ldr	r3, [pc, #660]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc36:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
    MacCtx.McpsIndication.Port = 0;
 800dc3a:	4ba4      	ldr	r3, [pc, #656]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
    MacCtx.McpsIndication.Multicast = 0;
 800dc42:	4ba2      	ldr	r3, [pc, #648]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc44:	2200      	movs	r2, #0
 800dc46:	f883 2426 	strb.w	r2, [r3, #1062]	@ 0x426
    MacCtx.McpsIndication.FramePending = 0;
 800dc4a:	4ba0      	ldr	r3, [pc, #640]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc4c:	2200      	movs	r2, #0
 800dc4e:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
    MacCtx.McpsIndication.Buffer = NULL;
 800dc52:	4b9e      	ldr	r3, [pc, #632]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc54:	2200      	movs	r2, #0
 800dc56:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
    MacCtx.McpsIndication.BufferSize = 0;
 800dc5a:	4b9c      	ldr	r3, [pc, #624]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc5c:	2200      	movs	r2, #0
 800dc5e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
    MacCtx.McpsIndication.RxData = false;
 800dc62:	4b9a      	ldr	r3, [pc, #616]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc64:	2200      	movs	r2, #0
 800dc66:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
    MacCtx.McpsIndication.AckReceived = false;
 800dc6a:	4b98      	ldr	r3, [pc, #608]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc6c:	2200      	movs	r2, #0
 800dc6e:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432
    MacCtx.McpsIndication.DownLinkCounter = 0;
 800dc72:	4b96      	ldr	r3, [pc, #600]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	f8c3 2434 	str.w	r2, [r3, #1076]	@ 0x434
    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800dc7a:	4b94      	ldr	r3, [pc, #592]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc7c:	2200      	movs	r2, #0
 800dc7e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
    MacCtx.McpsIndication.DevAddress = 0;
 800dc82:	4b92      	ldr	r3, [pc, #584]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc84:	2200      	movs	r2, #0
 800dc86:	f8c3 2438 	str.w	r2, [r3, #1080]	@ 0x438
    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800dc8a:	4b90      	ldr	r3, [pc, #576]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc8c:	2200      	movs	r2, #0
 800dc8e:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.McpsIndication.ResponseTimeout = 0;
 800dc92:	4b8e      	ldr	r3, [pc, #568]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dc94:	2200      	movs	r2, #0
 800dc96:	f8c3 2440 	str.w	r2, [r3, #1088]	@ 0x440
#endif /* LORAMAC_VERSION */

    Radio.Sleep( );
 800dc9a:	4b8d      	ldr	r3, [pc, #564]	@ (800ded0 <ProcessRadioRxDone+0x314>)
 800dc9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc9e:	4798      	blx	r3

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.RxWindowTimer2 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 )
 800dca0:	4b8a      	ldr	r3, [pc, #552]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dca2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800dca6:	2b00      	cmp	r3, #0
 800dca8:	d102      	bne.n	800dcb0 <ProcessRadioRxDone+0xf4>
    {
        TimerStop( &MacCtx.RxWindowTimer2 );
 800dcaa:	488a      	ldr	r0, [pc, #552]	@ (800ded4 <ProcessRadioRxDone+0x318>)
 800dcac:	f00d f81c 	bl	801ace8 <UTIL_TIMER_Stop>
    }
#endif /* LORAMAC_VERSION */

    // This function must be called even if we are not in class b mode yet.
    if( LoRaMacClassBRxBeacon( payload, size ) == true )
 800dcb0:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dcb4:	4619      	mov	r1, r3
 800dcb6:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 800dcba:	f004 fcdb 	bl	8012674 <LoRaMacClassBRxBeacon>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d00b      	beq.n	800dcdc <ProcessRadioRxDone+0x120>
    {
        MacCtx.MlmeIndication.BeaconInfo.Rssi = rssi;
 800dcc4:	4a81      	ldr	r2, [pc, #516]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dcc6:	f8b7 3080 	ldrh.w	r3, [r7, #128]	@ 0x80
 800dcca:	f8a2 3482 	strh.w	r3, [r2, #1154]	@ 0x482
        MacCtx.MlmeIndication.BeaconInfo.Snr = snr;
 800dcce:	4a7f      	ldr	r2, [pc, #508]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dcd0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 800dcd4:	f882 3484 	strb.w	r3, [r2, #1156]	@ 0x484
        return;
 800dcd8:	f000 bc22 	b.w	800e520 <ProcessRadioRxDone+0x964>
    }
    // Check if we expect a ping or a multicast slot.
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dcdc:	4b79      	ldr	r3, [pc, #484]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800dcde:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dce2:	2b01      	cmp	r3, #1
 800dce4:	d11e      	bne.n	800dd24 <ProcessRadioRxDone+0x168>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800dce6:	f004 fcd8 	bl	801269a <LoRaMacClassBIsPingExpected>
 800dcea:	4603      	mov	r3, r0
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d00a      	beq.n	800dd06 <ProcessRadioRxDone+0x14a>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dcf0:	2000      	movs	r0, #0
 800dcf2:	f004 fc89 	bl	8012608 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800dcf6:	2000      	movs	r0, #0
 800dcf8:	f004 fcaa 	bl	8012650 <LoRaMacClassBPingSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dcfc:	4b73      	ldr	r3, [pc, #460]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dcfe:	2204      	movs	r2, #4
 800dd00:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
 800dd04:	e00e      	b.n	800dd24 <ProcessRadioRxDone+0x168>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dd06:	f004 fccf 	bl	80126a8 <LoRaMacClassBIsMulticastExpected>
 800dd0a:	4603      	mov	r3, r0
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d009      	beq.n	800dd24 <ProcessRadioRxDone+0x168>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dd10:	2000      	movs	r0, #0
 800dd12:	f004 fc83 	bl	801261c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dd16:	2000      	movs	r0, #0
 800dd18:	f004 fca3 	bl	8012662 <LoRaMacClassBMulticastSlotTimerEvent>
            MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800dd1c:	4b6b      	ldr	r3, [pc, #428]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dd1e:	2205      	movs	r2, #5
 800dd20:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
        }
    }

    macHdr.Value = payload[pktHeaderLen++];
 800dd24:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800dd28:	1c5a      	adds	r2, r3, #1
 800dd2a:	f887 207e 	strb.w	r2, [r7, #126]	@ 0x7e
 800dd2e:	461a      	mov	r2, r3
 800dd30:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd34:	4413      	add	r3, r2
 800dd36:	781b      	ldrb	r3, [r3, #0]
 800dd38:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c

    switch( macHdr.Bits.MType )
 800dd3c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800dd40:	f3c3 1342 	ubfx	r3, r3, #5, #3
 800dd44:	b2db      	uxtb	r3, r3
 800dd46:	3b01      	subs	r3, #1
 800dd48:	2b06      	cmp	r3, #6
 800dd4a:	f200 83bd 	bhi.w	800e4c8 <ProcessRadioRxDone+0x90c>
 800dd4e:	a201      	add	r2, pc, #4	@ (adr r2, 800dd54 <ProcessRadioRxDone+0x198>)
 800dd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd54:	0800dd71 	.word	0x0800dd71
 800dd58:	0800e4c9 	.word	0x0800e4c9
 800dd5c:	0800df05 	.word	0x0800df05
 800dd60:	0800e4c9 	.word	0x0800e4c9
 800dd64:	0800defd 	.word	0x0800defd
 800dd68:	0800e4c9 	.word	0x0800e4c9
 800dd6c:	0800e45b 	.word	0x0800e45b
    {
        case FRAME_TYPE_JOIN_ACCEPT:
            // Check if the received frame size is valid
            if( size < LORAMAC_JOIN_ACCEPT_FRAME_MIN_SIZE )
 800dd70:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dd74:	2b10      	cmp	r3, #16
 800dd76:	d806      	bhi.n	800dd86 <ProcessRadioRxDone+0x1ca>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd78:	4b54      	ldr	r3, [pc, #336]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dd80:	f7ff fef6 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800dd84:	e3cc      	b.n	800e520 <ProcessRadioRxDone+0x964>
            }
            macMsgJoinAccept.Buffer = payload;
 800dd86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800dd8a:	60fb      	str	r3, [r7, #12]
            macMsgJoinAccept.BufSize = size;
 800dd8c:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800dd90:	b2db      	uxtb	r3, r3
 800dd92:	743b      	strb	r3, [r7, #16]

            // Abort in case if the device isn't joined yet and no rejoin request is ongoing.
            if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800dd94:	4b4b      	ldr	r3, [pc, #300]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800dd96:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d006      	beq.n	800ddac <ProcessRadioRxDone+0x1f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800dd9e:	4b4b      	ldr	r3, [pc, #300]	@ (800decc <ProcessRadioRxDone+0x310>)
 800dda0:	2201      	movs	r2, #1
 800dda2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dda6:	f7ff fee3 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800ddaa:	e3b9      	b.n	800e520 <ProcessRadioRxDone+0x964>
            }
            macCryptoStatus = LoRaMacCryptoHandleJoinAccept( JOIN_REQ, SecureElementGetJoinEui( ), &macMsgJoinAccept );
 800ddac:	f7fe f87e 	bl	800beac <SecureElementGetJoinEui>
 800ddb0:	4601      	mov	r1, r0
 800ddb2:	f107 030c 	add.w	r3, r7, #12
 800ddb6:	461a      	mov	r2, r3
 800ddb8:	20ff      	movs	r0, #255	@ 0xff
 800ddba:	f005 fe2d 	bl	8013a18 <LoRaMacCryptoHandleJoinAccept>
 800ddbe:	4603      	mov	r3, r0
 800ddc0:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88

            if( LORAMAC_CRYPTO_SUCCESS == macCryptoStatus )
 800ddc4:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	f040 8085 	bne.w	800ded8 <ProcessRadioRxDone+0x31c>
            {
                // Network ID
                Nvm.MacGroup2.NetID = ( uint32_t ) macMsgJoinAccept.NetID[0];
 800ddce:	7d7b      	ldrb	r3, [r7, #21]
 800ddd0:	461a      	mov	r2, r3
 800ddd2:	4b3c      	ldr	r3, [pc, #240]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800ddd4:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[1] << 8 );
 800ddd8:	4b3a      	ldr	r3, [pc, #232]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800ddda:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800ddde:	7dbb      	ldrb	r3, [r7, #22]
 800dde0:	021b      	lsls	r3, r3, #8
 800dde2:	4313      	orrs	r3, r2
 800dde4:	4a37      	ldr	r2, [pc, #220]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800dde6:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
                Nvm.MacGroup2.NetID |= ( ( uint32_t ) macMsgJoinAccept.NetID[2] << 16 );
 800ddea:	4b36      	ldr	r3, [pc, #216]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800ddec:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 800ddf0:	7dfb      	ldrb	r3, [r7, #23]
 800ddf2:	041b      	lsls	r3, r3, #16
 800ddf4:	4313      	orrs	r3, r2
 800ddf6:	4a33      	ldr	r2, [pc, #204]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800ddf8:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0

                // Device Address
                Nvm.MacGroup2.DevAddr = macMsgJoinAccept.DevAddr;
 800ddfc:	69bb      	ldr	r3, [r7, #24]
 800ddfe:	4a31      	ldr	r2, [pc, #196]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de00:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

                // DLSettings
                Nvm.MacGroup2.MacParams.Rx1DrOffset = macMsgJoinAccept.DLSettings.Bits.RX1DRoffset;
 800de04:	7f3b      	ldrb	r3, [r7, #28]
 800de06:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800de0a:	b2db      	uxtb	r3, r3
 800de0c:	461a      	mov	r2, r3
 800de0e:	4b2d      	ldr	r3, [pc, #180]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de10:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de14:	7f3b      	ldrb	r3, [r7, #28]
 800de16:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de1a:	b2db      	uxtb	r3, r3
 800de1c:	461a      	mov	r2, r3
 800de1e:	4b29      	ldr	r3, [pc, #164]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de20:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                Nvm.MacGroup2.MacParams.RxCChannel.Datarate = macMsgJoinAccept.DLSettings.Bits.RX2DataRate;
 800de24:	7f3b      	ldrb	r3, [r7, #28]
 800de26:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800de2a:	b2db      	uxtb	r3, r3
 800de2c:	461a      	mov	r2, r3
 800de2e:	4b25      	ldr	r3, [pc, #148]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de30:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                // RxDelay
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = macMsgJoinAccept.RxDelay;
 800de34:	7f7b      	ldrb	r3, [r7, #29]
 800de36:	461a      	mov	r2, r3
 800de38:	4b22      	ldr	r3, [pc, #136]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de3a:	651a      	str	r2, [r3, #80]	@ 0x50
                if( Nvm.MacGroup2.MacParams.ReceiveDelay1 == 0 )
 800de3c:	4b21      	ldr	r3, [pc, #132]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de40:	2b00      	cmp	r3, #0
 800de42:	d102      	bne.n	800de4a <ProcessRadioRxDone+0x28e>
                {
                    Nvm.MacGroup2.MacParams.ReceiveDelay1 = 1;
 800de44:	4b1f      	ldr	r3, [pc, #124]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de46:	2201      	movs	r2, #1
 800de48:	651a      	str	r2, [r3, #80]	@ 0x50
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 *= 1000;
 800de4a:	4b1e      	ldr	r3, [pc, #120]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de4e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800de52:	fb02 f303 	mul.w	r3, r2, r3
 800de56:	4a1b      	ldr	r2, [pc, #108]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de58:	6513      	str	r3, [r2, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800de5a:	4b1a      	ldr	r3, [pc, #104]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de5e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800de62:	4a18      	ldr	r2, [pc, #96]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de64:	6553      	str	r3, [r2, #84]	@ 0x54

                Nvm.MacGroup2.Version.Fields.Minor = 0;
 800de66:	4b17      	ldr	r3, [pc, #92]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de68:	2200      	movs	r2, #0
 800de6a:	f883 211a 	strb.w	r2, [r3, #282]	@ 0x11a

                // Apply CF list
                applyCFList.Payload = macMsgJoinAccept.CFList;
 800de6e:	f107 030c 	add.w	r3, r7, #12
 800de72:	3312      	adds	r3, #18
 800de74:	677b      	str	r3, [r7, #116]	@ 0x74
                // Size of the regular payload is 12. Plus 1 byte MHDR and 4 bytes MIC
                applyCFList.Size = size - 17;
 800de76:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800de7a:	b2db      	uxtb	r3, r3
 800de7c:	3b11      	subs	r3, #17
 800de7e:	b2db      	uxtb	r3, r3
 800de80:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                // Apply the last tx channel
                applyCFList.JoinChannel = MacCtx.Channel;
 800de84:	4b11      	ldr	r3, [pc, #68]	@ (800decc <ProcessRadioRxDone+0x310>)
 800de86:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 800de8a:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
#endif /* LORAMAC_VERSION */

                RegionApplyCFList( Nvm.MacGroup2.Region, &applyCFList );
 800de8e:	4b0d      	ldr	r3, [pc, #52]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800de90:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800de94:	f107 0270 	add.w	r2, r7, #112	@ 0x70
 800de98:	4611      	mov	r1, r2
 800de9a:	4618      	mov	r0, r3
 800de9c:	f006 fb84 	bl	80145a8 <RegionApplyCFList>

                Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_OTAA;
 800dea0:	4b08      	ldr	r3, [pc, #32]	@ (800dec4 <ProcessRadioRxDone+0x308>)
 800dea2:	2202      	movs	r2, #2
 800dea4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800dea8:	2001      	movs	r0, #1
 800deaa:	f005 f8dd 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800deae:	4603      	mov	r3, r0
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d01b      	beq.n	800deec <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_JOIN );
 800deb4:	2101      	movs	r1, #1
 800deb6:	2000      	movs	r0, #0
 800deb8:	f005 f84a 	bl	8012f50 <LoRaMacConfirmQueueSetStatus>
 800debc:	e016      	b.n	800deec <ProcessRadioRxDone+0x330>
 800debe:	bf00      	nop
 800dec0:	20001720 	.word	0x20001720
 800dec4:	20000b90 	.word	0x20000b90
 800dec8:	20001718 	.word	0x20001718
 800decc:	20000670 	.word	0x20000670
 800ded0:	0801c500 	.word	0x0801c500
 800ded4:	20000a08 	.word	0x20000a08
                }
            }
            else
            {
                // MLME handling
                if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800ded8:	2001      	movs	r0, #1
 800deda:	f005 f8c5 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800dede:	4603      	mov	r3, r0
 800dee0:	2b00      	cmp	r3, #0
 800dee2:	d003      	beq.n	800deec <ProcessRadioRxDone+0x330>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL, MLME_JOIN );
 800dee4:	2101      	movs	r1, #1
 800dee6:	2007      	movs	r0, #7
 800dee8:	f005 f832 	bl	8012f50 <LoRaMacConfirmQueueSetStatus>
                }
            }
            MacCtx.MacFlags.Bits.MlmeInd = 1;
 800deec:	4ab9      	ldr	r2, [pc, #740]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800deee:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800def2:	f043 0308 	orr.w	r3, r3, #8
 800def6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800defa:	e2ec      	b.n	800e4d6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_DATA_CONFIRMED_DOWN:
            MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800defc:	4bb5      	ldr	r3, [pc, #724]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800defe:	2201      	movs	r2, #1
 800df00:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_DOWN:
            // Check if the received payload size is valid
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800df04:	4bb4      	ldr	r3, [pc, #720]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800df06:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 800df0a:	f887 306a 	strb.w	r3, [r7, #106]	@ 0x6a
            getPhy.Datarate = MacCtx.McpsIndication.RxDatarate;
 800df0e:	4bb1      	ldr	r3, [pc, #708]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800df10:	f893 3428 	ldrb.w	r3, [r3, #1064]	@ 0x428
 800df14:	b25b      	sxtb	r3, r3
 800df16:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            getPhy.Attribute = PHY_MAX_PAYLOAD;
 800df1a:	230d      	movs	r3, #13
 800df1c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68

            /* ST_WORKAROUND_BEGIN: Keep repeater feature */
            // Get the maximum payload length
            if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800df20:	4bad      	ldr	r3, [pc, #692]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800df22:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800df26:	2b00      	cmp	r3, #0
 800df28:	d002      	beq.n	800df30 <ProcessRadioRxDone+0x374>
            {
                getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800df2a:	230e      	movs	r3, #14
 800df2c:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            }
            /* ST_WORKAROUND_END */

            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800df30:	4ba9      	ldr	r3, [pc, #676]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800df32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800df36:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800df3a:	4611      	mov	r1, r2
 800df3c:	4618      	mov	r0, r3
 800df3e:	f006 fae1 	bl	8014504 <RegionGetPhyParam>
 800df42:	4603      	mov	r3, r0
 800df44:	667b      	str	r3, [r7, #100]	@ 0x64
            if( ( MAX( 0, ( int16_t )( ( int16_t ) size - ( int16_t ) LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE ) ) > ( int16_t )phyParam.Value ) ||
 800df46:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800df4a:	3b0d      	subs	r3, #13
 800df4c:	b29b      	uxth	r3, r3
 800df4e:	b21b      	sxth	r3, r3
 800df50:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800df54:	b21a      	sxth	r2, r3
 800df56:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800df58:	b21b      	sxth	r3, r3
 800df5a:	429a      	cmp	r2, r3
 800df5c:	dc03      	bgt.n	800df66 <ProcessRadioRxDone+0x3aa>
 800df5e:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800df62:	2b0b      	cmp	r3, #11
 800df64:	d806      	bhi.n	800df74 <ProcessRadioRxDone+0x3b8>
                ( size < LORAMAC_FRAME_PAYLOAD_MIN_SIZE ) )
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df66:	4b9b      	ldr	r3, [pc, #620]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800df68:	2201      	movs	r2, #1
 800df6a:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800df6e:	f7ff fdff 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800df72:	e2d5      	b.n	800e520 <ProcessRadioRxDone+0x964>
            }
            macMsgData.Buffer = payload;
 800df74:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800df78:	637b      	str	r3, [r7, #52]	@ 0x34
            macMsgData.BufSize = size;
 800df7a:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800df7e:	b2db      	uxtb	r3, r3
 800df80:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macMsgData.FRMPayload = MacCtx.RxPayload;
 800df84:	4b95      	ldr	r3, [pc, #596]	@ (800e1dc <ProcessRadioRxDone+0x620>)
 800df86:	65bb      	str	r3, [r7, #88]	@ 0x58
            macMsgData.FRMPayloadSize = LORAMAC_PHY_MAXPAYLOAD;
 800df88:	23ff      	movs	r3, #255	@ 0xff
 800df8a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

            if( LORAMAC_PARSER_SUCCESS != LoRaMacParserData( &macMsgData ) )
 800df8e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800df92:	4618      	mov	r0, r3
 800df94:	f006 f83d 	bl	8014012 <LoRaMacParserData>
 800df98:	4603      	mov	r3, r0
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d006      	beq.n	800dfac <ProcessRadioRxDone+0x3f0>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800df9e:	4b8d      	ldr	r3, [pc, #564]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800dfa0:	2201      	movs	r2, #1
 800dfa2:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800dfa6:	f7ff fde3 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800dfaa:	e2b9      	b.n	800e520 <ProcessRadioRxDone+0x964>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Handle Class B
            // Check if we expect a ping or a multicast slot.
            if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800dfac:	4b8a      	ldr	r3, [pc, #552]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800dfae:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800dfb2:	2b01      	cmp	r3, #1
 800dfb4:	d132      	bne.n	800e01c <ProcessRadioRxDone+0x460>
            {
                if( LoRaMacClassBIsPingExpected( ) == true )
 800dfb6:	f004 fb70 	bl	801269a <LoRaMacClassBIsPingExpected>
 800dfba:	4603      	mov	r3, r0
 800dfbc:	2b00      	cmp	r3, #0
 800dfbe:	d014      	beq.n	800dfea <ProcessRadioRxDone+0x42e>
                {
                    LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	f004 fb21 	bl	8012608 <LoRaMacClassBSetPingSlotState>
                    LoRaMacClassBPingSlotTimerEvent( NULL );
 800dfc6:	2000      	movs	r0, #0
 800dfc8:	f004 fb42 	bl	8012650 <LoRaMacClassBPingSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_PING_SLOT;
 800dfcc:	4b81      	ldr	r3, [pc, #516]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800dfce:	2204      	movs	r2, #4
 800dfd0:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800dfd4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dfd6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800dfda:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800dfde:	b2db      	uxtb	r3, r3
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	4610      	mov	r0, r2
 800dfe4:	f004 fbe2 	bl	80127ac <LoRaMacClassBSetFPendingBit>
 800dfe8:	e018      	b.n	800e01c <ProcessRadioRxDone+0x460>
                }
                else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800dfea:	f004 fb5d 	bl	80126a8 <LoRaMacClassBIsMulticastExpected>
 800dfee:	4603      	mov	r3, r0
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d013      	beq.n	800e01c <ProcessRadioRxDone+0x460>
                {
                    LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800dff4:	2000      	movs	r0, #0
 800dff6:	f004 fb11 	bl	801261c <LoRaMacClassBSetMulticastSlotState>
                    LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800dffa:	2000      	movs	r0, #0
 800dffc:	f004 fb31 	bl	8012662 <LoRaMacClassBMulticastSlotTimerEvent>
                    MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT;
 800e000:	4b74      	ldr	r3, [pc, #464]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e002:	2205      	movs	r2, #5
 800e004:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    LoRaMacClassBSetFPendingBit( macMsgData.FHDR.DevAddr, ( uint8_t ) macMsgData.FHDR.FCtrl.Bits.FPending );
 800e008:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800e00a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e00e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e012:	b2db      	uxtb	r3, r3
 800e014:	4619      	mov	r1, r3
 800e016:	4610      	mov	r0, r2
 800e018:	f004 fbc8 	bl	80127ac <LoRaMacClassBSetFPendingBit>
                }
            }
#endif /* LORAMAC_VERSION */

            // Store device address
            MacCtx.McpsIndication.DevAddress = macMsgData.FHDR.DevAddr;
 800e01c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e01e:	4a6d      	ldr	r2, [pc, #436]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e020:	f8c2 3438 	str.w	r3, [r2, #1080]	@ 0x438

            FType_t fType;
            if( LORAMAC_STATUS_OK != DetermineFrameType( &macMsgData, &fType ) )
 800e024:	1dba      	adds	r2, r7, #6
 800e026:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e02a:	4611      	mov	r1, r2
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 fd1f 	bl	8010a70 <DetermineFrameType>
 800e032:	4603      	mov	r3, r0
 800e034:	2b00      	cmp	r3, #0
 800e036:	d006      	beq.n	800e046 <ProcessRadioRxDone+0x48a>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e038:	4b66      	ldr	r3, [pc, #408]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e03a:	2201      	movs	r2, #1
 800e03c:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e040:	f7ff fd96 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800e044:	e26c      	b.n	800e520 <ProcessRadioRxDone+0x964>
            }

            //Check if it is a multicast message
            multicast = 0;
 800e046:	2300      	movs	r3, #0
 800e048:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
            downLinkCounter = 0;
 800e04c:	2300      	movs	r3, #0
 800e04e:	60bb      	str	r3, [r7, #8]
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e050:	2300      	movs	r3, #0
 800e052:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e056:	e049      	b.n	800e0ec <ProcessRadioRxDone+0x530>
            {
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e058:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e05c:	4a5e      	ldr	r2, [pc, #376]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e05e:	212c      	movs	r1, #44	@ 0x2c
 800e060:	fb01 f303 	mul.w	r3, r1, r3
 800e064:	4413      	add	r3, r2
 800e066:	33dc      	adds	r3, #220	@ 0xdc
 800e068:	681a      	ldr	r2, [r3, #0]
 800e06a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d138      	bne.n	800e0e2 <ProcessRadioRxDone+0x526>
                    ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true ) )
 800e070:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e074:	4a58      	ldr	r2, [pc, #352]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e076:	212c      	movs	r1, #44	@ 0x2c
 800e078:	fb01 f303 	mul.w	r3, r1, r3
 800e07c:	4413      	add	r3, r2
 800e07e:	33da      	adds	r3, #218	@ 0xda
 800e080:	781b      	ldrb	r3, [r3, #0]
                if( ( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address == macMsgData.FHDR.DevAddr ) &&
 800e082:	2b00      	cmp	r3, #0
 800e084:	d02d      	beq.n	800e0e2 <ProcessRadioRxDone+0x526>
                {
                    multicast = 1;
 800e086:	2301      	movs	r3, #1
 800e088:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
                    addrID = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.GroupID;
 800e08c:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e090:	4a51      	ldr	r2, [pc, #324]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e092:	212c      	movs	r1, #44	@ 0x2c
 800e094:	fb01 f303 	mul.w	r3, r1, r3
 800e098:	4413      	add	r3, r2
 800e09a:	33db      	adds	r3, #219	@ 0xdb
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
                    downLinkCounter = *( Nvm.MacGroup2.MulticastChannelList[i].DownLinkCounter );
 800e0a2:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0a6:	4a4c      	ldr	r2, [pc, #304]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e0a8:	212c      	movs	r1, #44	@ 0x2c
 800e0aa:	fb01 f303 	mul.w	r3, r1, r3
 800e0ae:	4413      	add	r3, r2
 800e0b0:	33f8      	adds	r3, #248	@ 0xf8
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	60bb      	str	r3, [r7, #8]
                    address = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.Address;
 800e0b8:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0bc:	4a46      	ldr	r2, [pc, #280]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e0be:	212c      	movs	r1, #44	@ 0x2c
 800e0c0:	fb01 f303 	mul.w	r3, r1, r3
 800e0c4:	4413      	add	r3, r2
 800e0c6:	33dc      	adds	r3, #220	@ 0xdc
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                    if( Nvm.MacGroup2.DeviceClass == CLASS_C )
 800e0ce:	4b42      	ldr	r3, [pc, #264]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e0d0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e0d4:	2b02      	cmp	r3, #2
 800e0d6:	d10e      	bne.n	800e0f6 <ProcessRadioRxDone+0x53a>
                    {
                        MacCtx.RxStatus.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800e0d8:	4b3e      	ldr	r3, [pc, #248]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e0da:	2203      	movs	r2, #3
 800e0dc:	f883 2493 	strb.w	r2, [r3, #1171]	@ 0x493
                    }
                    break;
 800e0e0:	e009      	b.n	800e0f6 <ProcessRadioRxDone+0x53a>
            for( uint8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800e0e2:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0e6:	3301      	adds	r3, #1
 800e0e8:	f887 3089 	strb.w	r3, [r7, #137]	@ 0x89
 800e0ec:	f897 3089 	ldrb.w	r3, [r7, #137]	@ 0x89
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d0b1      	beq.n	800e058 <ProcessRadioRxDone+0x49c>
 800e0f4:	e000      	b.n	800e0f8 <ProcessRadioRxDone+0x53c>
                    break;
 800e0f6:	bf00      	nop
                }
            }

            // Filter messages according to multicast downlink exceptions
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e0f8:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e0fc:	2b01      	cmp	r3, #1
 800e0fe:	d117      	bne.n	800e130 <ProcessRadioRxDone+0x574>
 800e100:	79bb      	ldrb	r3, [r7, #6]
 800e102:	2b03      	cmp	r3, #3
 800e104:	d10d      	bne.n	800e122 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e106:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e10a:	f003 0320 	and.w	r3, r3, #32
 800e10e:	b2db      	uxtb	r3, r3
            if( ( multicast == 1 ) && ( ( fType != FRAME_TYPE_D ) ||
 800e110:	2b00      	cmp	r3, #0
 800e112:	d106      	bne.n	800e122 <ProcessRadioRxDone+0x566>
                                        ( macMsgData.FHDR.FCtrl.Bits.AdrAckReq != 0 ) ) )
 800e114:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e11c:	b2db      	uxtb	r3, r3
                                        ( macMsgData.FHDR.FCtrl.Bits.Ack != 0 ) ||
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d006      	beq.n	800e130 <ProcessRadioRxDone+0x574>
            {
                MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e122:	4b2c      	ldr	r3, [pc, #176]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e124:	2201      	movs	r2, #1
 800e126:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                PrepareRxDoneAbort( );
 800e12a:	f7ff fd21 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800e12e:	e1f7      	b.n	800e520 <ProcessRadioRxDone+0x964>
                PrepareRxDoneAbort( );
                return;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            // Get downlink frame counter value
            macCryptoStatus = GetFCntDown( addrID, fType, &macMsgData, Nvm.MacGroup2.Version, &fCntID, &downLinkCounter );
 800e130:	79b9      	ldrb	r1, [r7, #6]
 800e132:	4c29      	ldr	r4, [pc, #164]	@ (800e1d8 <ProcessRadioRxDone+0x61c>)
 800e134:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e138:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e13c:	f107 0308 	add.w	r3, r7, #8
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	1dfb      	adds	r3, r7, #7
 800e144:	9300      	str	r3, [sp, #0]
 800e146:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
 800e14a:	f000 fee7 	bl	800ef1c <GetFCntDown>
 800e14e:	4603      	mov	r3, r0
 800e150:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e154:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d017      	beq.n	800e18c <ProcessRadioRxDone+0x5d0>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED )
 800e15c:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e160:	2b07      	cmp	r3, #7
 800e162:	d104      	bne.n	800e16e <ProcessRadioRxDone+0x5b2>
                {
                    // Catch the case of repeated downlink frame counter
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_DOWNLINK_REPEATED;
 800e164:	4b1b      	ldr	r3, [pc, #108]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e166:	2208      	movs	r2, #8
 800e168:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e16c:	e003      	b.n	800e176 <ProcessRadioRxDone+0x5ba>
                }
                else
                {
                    // Other errors
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e16e:	4b19      	ldr	r3, [pc, #100]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e170:	2201      	movs	r2, #1
 800e172:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e176:	68bb      	ldr	r3, [r7, #8]
 800e178:	4a16      	ldr	r2, [pc, #88]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e17a:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
                MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e17e:	68bb      	ldr	r3, [r7, #8]
 800e180:	4a14      	ldr	r2, [pc, #80]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e182:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
                PrepareRxDoneAbort( );
 800e186:	f7ff fcf3 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800e18a:	e1c9      	b.n	800e520 <ProcessRadioRxDone+0x964>
            }

            macCryptoStatus = LoRaMacCryptoUnsecureMessage( addrID, address, fCntID, downLinkCounter, &macMsgData );
 800e18c:	79fa      	ldrb	r2, [r7, #7]
 800e18e:	68b9      	ldr	r1, [r7, #8]
 800e190:	f897 008a 	ldrb.w	r0, [r7, #138]	@ 0x8a
 800e194:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800e198:	9300      	str	r3, [sp, #0]
 800e19a:	460b      	mov	r3, r1
 800e19c:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 800e1a0:	f005 fd86 	bl	8013cb0 <LoRaMacCryptoUnsecureMessage>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	f887 3088 	strb.w	r3, [r7, #136]	@ 0x88
            if( macCryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 800e1aa:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d016      	beq.n	800e1e0 <ProcessRadioRxDone+0x624>
            {
                if( macCryptoStatus == LORAMAC_CRYPTO_FAIL_ADDRESS )
 800e1b2:	f897 3088 	ldrb.w	r3, [r7, #136]	@ 0x88
 800e1b6:	2b02      	cmp	r3, #2
 800e1b8:	d104      	bne.n	800e1c4 <ProcessRadioRxDone+0x608>
                {
                    // We are not the destination of this frame.
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ADDRESS_FAIL;
 800e1ba:	4b06      	ldr	r3, [pc, #24]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e1bc:	220a      	movs	r2, #10
 800e1be:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
 800e1c2:	e003      	b.n	800e1cc <ProcessRadioRxDone+0x610>
                }
                else
                {
                    // MIC calculation fail
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_MIC_FAIL;
 800e1c4:	4b03      	ldr	r3, [pc, #12]	@ (800e1d4 <ProcessRadioRxDone+0x618>)
 800e1c6:	220b      	movs	r2, #11
 800e1c8:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                }
                PrepareRxDoneAbort( );
 800e1cc:	f7ff fcd0 	bl	800db70 <PrepareRxDoneAbort>
                return;
 800e1d0:	e1a6      	b.n	800e520 <ProcessRadioRxDone+0x964>
 800e1d2:	bf00      	nop
 800e1d4:	20000670 	.word	0x20000670
 800e1d8:	20000b90 	.word	0x20000b90
 800e1dc:	200008a8 	.word	0x200008a8
            }
#endif /* LORAMAC_VERSION */

            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e1e0:	4bb5      	ldr	r3, [pc, #724]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Multicast = multicast;
 800e1e8:	4ab3      	ldr	r2, [pc, #716]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e1ea:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e1ee:	f882 3426 	strb.w	r3, [r2, #1062]	@ 0x426
            MacCtx.McpsIndication.FramePending = macMsgData.FHDR.FCtrl.Bits.FPending;
 800e1f2:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e1f6:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800e1fa:	b2db      	uxtb	r3, r3
 800e1fc:	461a      	mov	r2, r3
 800e1fe:	4bae      	ldr	r3, [pc, #696]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e200:	f883 2429 	strb.w	r2, [r3, #1065]	@ 0x429
            MacCtx.McpsIndication.Buffer = NULL;
 800e204:	4bac      	ldr	r3, [pc, #688]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e206:	2200      	movs	r2, #0
 800e208:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = 0;
 800e20c:	4baa      	ldr	r3, [pc, #680]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e20e:	2200      	movs	r2, #0
 800e210:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
            MacCtx.McpsIndication.DownLinkCounter = downLinkCounter;
 800e214:	68bb      	ldr	r3, [r7, #8]
 800e216:	4aa8      	ldr	r2, [pc, #672]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e218:	f8c2 3434 	str.w	r3, [r2, #1076]	@ 0x434
            MacCtx.MlmeIndication.DownLinkCounter = downLinkCounter;
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	4aa6      	ldr	r2, [pc, #664]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e220:	f8c2 3470 	str.w	r3, [r2, #1136]	@ 0x470
            MacCtx.McpsIndication.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e224:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e228:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e22c:	b2db      	uxtb	r3, r3
 800e22e:	2b00      	cmp	r3, #0
 800e230:	bf14      	ite	ne
 800e232:	2301      	movne	r3, #1
 800e234:	2300      	moveq	r3, #0
 800e236:	b2da      	uxtb	r2, r3
 800e238:	4b9f      	ldr	r3, [pc, #636]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e23a:	f883 2432 	strb.w	r2, [r3, #1074]	@ 0x432

            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e23e:	4b9e      	ldr	r3, [pc, #632]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            MacCtx.McpsConfirm.AckReceived = macMsgData.FHDR.FCtrl.Bits.Ack;
 800e246:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e24a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800e24e:	b2db      	uxtb	r3, r3
 800e250:	2b00      	cmp	r3, #0
 800e252:	bf14      	ite	ne
 800e254:	2301      	movne	r3, #1
 800e256:	2300      	moveq	r3, #0
 800e258:	b2da      	uxtb	r2, r3
 800e25a:	4b97      	ldr	r3, [pc, #604]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e25c:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448

            // Reset ADR ACK Counter only, when RX1 or RX2 slot
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e260:	4b95      	ldr	r3, [pc, #596]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e262:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e266:	2b00      	cmp	r3, #0
 800e268:	d004      	beq.n	800e274 <ProcessRadioRxDone+0x6b8>
                ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e26a:	4b93      	ldr	r3, [pc, #588]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e26c:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
            if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e270:	2b01      	cmp	r3, #1
 800e272:	d106      	bne.n	800e282 <ProcessRadioRxDone+0x6c6>
            {
                Nvm.MacGroup1.AdrAckCounter = 0;
 800e274:	4b91      	ldr	r3, [pc, #580]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e276:	2200      	movs	r2, #0
 800e278:	629a      	str	r2, [r3, #40]	@ 0x28
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                Nvm.MacGroup2.DownlinkReceived = true;
 800e27a:	4b90      	ldr	r3, [pc, #576]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e27c:	2201      	movs	r2, #1
 800e27e:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */
            }

            // MCPS Indication and ack requested handling
            if( multicast == 1 )
 800e282:	f897 308b 	ldrb.w	r3, [r7, #139]	@ 0x8b
 800e286:	2b01      	cmp	r3, #1
 800e288:	d104      	bne.n	800e294 <ProcessRadioRxDone+0x6d8>
            {
                MacCtx.McpsIndication.McpsIndication = MCPS_MULTICAST;
 800e28a:	4b8b      	ldr	r3, [pc, #556]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e28c:	2202      	movs	r2, #2
 800e28e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
 800e292:	e034      	b.n	800e2fe <ProcessRadioRxDone+0x742>
            }
            else
            {
                if( macHdr.Bits.MType == FRAME_TYPE_DATA_CONFIRMED_DOWN )
 800e294:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800e298:	f023 031f 	bic.w	r3, r3, #31
 800e29c:	b2db      	uxtb	r3, r3
 800e29e:	2ba0      	cmp	r3, #160	@ 0xa0
 800e2a0:	d125      	bne.n	800e2ee <ProcessRadioRxDone+0x732>
                {
                    Nvm.MacGroup1.SrvAckRequested = true;
 800e2a2:	4b86      	ldr	r3, [pc, #536]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e2a4:	2201      	movs	r2, #1
 800e2a6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    if( Nvm.MacGroup2.Version.Fields.Minor == 0 )
 800e2aa:	4b84      	ldr	r3, [pc, #528]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e2ac:	f893 311a 	ldrb.w	r3, [r3, #282]	@ 0x11a
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d102      	bne.n	800e2ba <ProcessRadioRxDone+0x6fe>
                    {
                        Nvm.MacGroup1.LastRxMic = macMsgData.MIC;
 800e2b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2b6:	4a81      	ldr	r2, [pc, #516]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e2b8:	6353      	str	r3, [r2, #52]	@ 0x34
                    }
                    MacCtx.McpsIndication.McpsIndication = MCPS_CONFIRMED;
 800e2ba:	4b7f      	ldr	r3, [pc, #508]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e2bc:	2201      	movs	r2, #1
 800e2be:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // Handle response timeout for class c and class b downlinks
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e2c2:	4b7d      	ldr	r3, [pc, #500]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e2c4:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d018      	beq.n	800e2fe <ProcessRadioRxDone+0x742>
                        ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) )
 800e2cc:	4b7a      	ldr	r3, [pc, #488]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e2ce:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
                    if( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 800e2d2:	2b01      	cmp	r3, #1
 800e2d4:	d013      	beq.n	800e2fe <ProcessRadioRxDone+0x742>
                    {
                        // Calculate timeout
                        MacCtx.McpsIndication.ResponseTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 800e2d6:	4b79      	ldr	r3, [pc, #484]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e2d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800e2dc:	4a76      	ldr	r2, [pc, #472]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e2de:	f8c2 3440 	str.w	r3, [r2, #1088]	@ 0x440
                        MacCtx.ResponseTimeoutStartTime = RxDoneParams.LastRxDone;
 800e2e2:	4b77      	ldr	r3, [pc, #476]	@ (800e4c0 <ProcessRadioRxDone+0x904>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	4a74      	ldr	r2, [pc, #464]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e2e8:	f8c2 349c 	str.w	r3, [r2, #1180]	@ 0x49c
 800e2ec:	e007      	b.n	800e2fe <ProcessRadioRxDone+0x742>
                    }
#endif /* LORAMAC_VERSION */
                }
                else
                {
                    Nvm.MacGroup1.SrvAckRequested = false;
 800e2ee:	4b73      	ldr	r3, [pc, #460]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e2f0:	2200      	movs	r2, #0
 800e2f2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                    MacCtx.McpsIndication.McpsIndication = MCPS_UNCONFIRMED;
 800e2f6:	4b70      	ldr	r3, [pc, #448]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
                }
            }

            RemoveMacCommands( MacCtx.RxStatus.RxSlot, macMsgData.FHDR.FCtrl, MacCtx.McpsConfirm.McpsRequest );
 800e2fe:	4b6e      	ldr	r3, [pc, #440]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e300:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e304:	4a6c      	ldr	r2, [pc, #432]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e306:	f892 2444 	ldrb.w	r2, [r2, #1092]	@ 0x444
 800e30a:	f897 1040 	ldrb.w	r1, [r7, #64]	@ 0x40
 800e30e:	4618      	mov	r0, r3
 800e310:	f001 ff96 	bl	8010240 <RemoveMacCommands>

            switch( fType )
 800e314:	79bb      	ldrb	r3, [r7, #6]
 800e316:	2b03      	cmp	r3, #3
 800e318:	d873      	bhi.n	800e402 <ProcessRadioRxDone+0x846>
 800e31a:	a201      	add	r2, pc, #4	@ (adr r2, 800e320 <ProcessRadioRxDone+0x764>)
 800e31c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e320:	0800e331 	.word	0x0800e331
 800e324:	0800e381 	.word	0x0800e381
 800e328:	0800e3b7 	.word	0x0800e3b7
 800e32c:	0800e3dd 	.word	0x0800e3dd
                    * |    > 0   |   X  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e330:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e334:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e338:	b2db      	uxtb	r3, r3
 800e33a:	461c      	mov	r4, r3
 800e33c:	4b5e      	ldr	r3, [pc, #376]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e33e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e342:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e346:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e34a:	f102 0010 	add.w	r0, r2, #16
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	460b      	mov	r3, r1
 800e352:	4622      	mov	r2, r4
 800e354:	2100      	movs	r1, #0
 800e356:	f000 ff45 	bl	800f1e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e35a:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e35e:	4b56      	ldr	r3, [pc, #344]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e360:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e364:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e366:	4a54      	ldr	r2, [pc, #336]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e368:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e36c:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e370:	4b51      	ldr	r3, [pc, #324]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e372:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e376:	4b50      	ldr	r3, [pc, #320]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e378:	2201      	movs	r2, #1
 800e37a:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e37e:	e047      	b.n	800e410 <ProcessRadioRxDone+0x854>
                    * |    > 0   |   X  |   -   |       -      |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FOpts field
                    ProcessMacCommands( macMsgData.FHDR.FOpts, 0, macMsgData.FHDR.FCtrl.Bits.FOptsLen, snr, MacCtx.RxStatus.RxSlot );
 800e380:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 800e384:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800e388:	b2db      	uxtb	r3, r3
 800e38a:	461c      	mov	r4, r3
 800e38c:	4b4a      	ldr	r3, [pc, #296]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e38e:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e392:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e396:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e39a:	f102 0010 	add.w	r0, r2, #16
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	4622      	mov	r2, r4
 800e3a4:	2100      	movs	r1, #0
 800e3a6:	f000 ff1d 	bl	800f1e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3aa:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e3ae:	4b42      	ldr	r3, [pc, #264]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3b0:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e3b4:	e02c      	b.n	800e410 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  = 0  | MAC commands |
                    * +----------+------+-------+--------------+
                    */

                    // Decode MAC commands in FRMPayload
                    ProcessMacCommands( macMsgData.FRMPayload, 0, macMsgData.FRMPayloadSize, snr, MacCtx.RxStatus.RxSlot );
 800e3b6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e3b8:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e3bc:	4b3e      	ldr	r3, [pc, #248]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3be:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e3c2:	f997 107f 	ldrsb.w	r1, [r7, #127]	@ 0x7f
 800e3c6:	9300      	str	r3, [sp, #0]
 800e3c8:	460b      	mov	r3, r1
 800e3ca:	2100      	movs	r1, #0
 800e3cc:	f000 ff0a 	bl	800f1e4 <ProcessMacCommands>
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3d0:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e3d4:	4b38      	ldr	r3, [pc, #224]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3d6:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    break;
 800e3da:	e019      	b.n	800e410 <ProcessRadioRxDone+0x854>
                    * |    = 0   |   -  |  > 0  |       X      |
                    * +----------+------+-------+--------------+
                    */

                    // No MAC commands just application payload
                    MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e3dc:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e3e0:	4b35      	ldr	r3, [pc, #212]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3e2:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                    MacCtx.McpsIndication.Buffer = macMsgData.FRMPayload;
 800e3e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3e8:	4a33      	ldr	r2, [pc, #204]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3ea:	f8c2 342c 	str.w	r3, [r2, #1068]	@ 0x42c
                    MacCtx.McpsIndication.BufferSize = macMsgData.FRMPayloadSize;
 800e3ee:	f897 205c 	ldrb.w	r2, [r7, #92]	@ 0x5c
 800e3f2:	4b31      	ldr	r3, [pc, #196]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3f4:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                    MacCtx.McpsIndication.RxData = true;
 800e3f8:	4b2f      	ldr	r3, [pc, #188]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e3fa:	2201      	movs	r2, #1
 800e3fc:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
                    break;
 800e400:	e006      	b.n	800e410 <ProcessRadioRxDone+0x854>
                }
                default:
                    MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e402:	4b2d      	ldr	r3, [pc, #180]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e404:	2201      	movs	r2, #1
 800e406:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
                    PrepareRxDoneAbort( );
 800e40a:	f7ff fbb1 	bl	800db70 <PrepareRxDoneAbort>
                    break;
 800e40e:	bf00      	nop
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( ( macMsgData.FPort == LORAMAC_CERT_FPORT ) && ( Nvm.MacGroup2.IsCertPortOn == false ) )
 800e410:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800e414:	2be0      	cmp	r3, #224	@ 0xe0
 800e416:	d118      	bne.n	800e44a <ProcessRadioRxDone+0x88e>
 800e418:	4b28      	ldr	r3, [pc, #160]	@ (800e4bc <ProcessRadioRxDone+0x900>)
 800e41a:	f893 310b 	ldrb.w	r3, [r3, #267]	@ 0x10b
 800e41e:	f083 0301 	eor.w	r3, r3, #1
 800e422:	b2db      	uxtb	r3, r3
 800e424:	2b00      	cmp	r3, #0
 800e426:	d010      	beq.n	800e44a <ProcessRadioRxDone+0x88e>
            { // Do not notify the upper layer of data reception on FPort LORAMAC_CERT_FPORT if the port
              // handling is disabled.
                MacCtx.McpsIndication.Port = macMsgData.FPort;
 800e428:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800e42c:	4b22      	ldr	r3, [pc, #136]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e42e:	f883 2427 	strb.w	r2, [r3, #1063]	@ 0x427
                MacCtx.McpsIndication.Buffer = NULL;
 800e432:	4b21      	ldr	r3, [pc, #132]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e434:	2200      	movs	r2, #0
 800e436:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
                MacCtx.McpsIndication.BufferSize = 0;
 800e43a:	4b1f      	ldr	r3, [pc, #124]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e43c:	2200      	movs	r2, #0
 800e43e:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430
                MacCtx.McpsIndication.RxData = false;
 800e442:	4b1d      	ldr	r3, [pc, #116]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e444:	2200      	movs	r2, #0
 800e446:	f883 2431 	strb.w	r2, [r3, #1073]	@ 0x431
            }
#endif /* LORAMAC_VERSION */

            // Provide always an indication, skip the callback to the user application,
            // in case of a confirmed downlink retransmission.
            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e44a:	4a1b      	ldr	r2, [pc, #108]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e44c:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e450:	f043 0302 	orr.w	r3, r3, #2
 800e454:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495

            break;
 800e458:	e03d      	b.n	800e4d6 <ProcessRadioRxDone+0x91a>
        case FRAME_TYPE_PROPRIETARY:
            memcpy1( MacCtx.RxPayload, &payload[pktHeaderLen], size - pktHeaderLen );
 800e45a:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e45e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800e462:	18d1      	adds	r1, r2, r3
 800e464:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e468:	b29b      	uxth	r3, r3
 800e46a:	f8b7 2082 	ldrh.w	r2, [r7, #130]	@ 0x82
 800e46e:	1ad3      	subs	r3, r2, r3
 800e470:	b29b      	uxth	r3, r3
 800e472:	461a      	mov	r2, r3
 800e474:	4813      	ldr	r0, [pc, #76]	@ (800e4c4 <ProcessRadioRxDone+0x908>)
 800e476:	f008 faf2 	bl	8016a5e <memcpy1>

            MacCtx.McpsIndication.McpsIndication = MCPS_PROPRIETARY;
 800e47a:	4b0f      	ldr	r3, [pc, #60]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e47c:	2203      	movs	r2, #3
 800e47e:	f883 2424 	strb.w	r2, [r3, #1060]	@ 0x424
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 800e482:	4b0d      	ldr	r3, [pc, #52]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e484:	2200      	movs	r2, #0
 800e486:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            MacCtx.McpsIndication.Buffer = MacCtx.RxPayload;
 800e48a:	4b0b      	ldr	r3, [pc, #44]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e48c:	4a0d      	ldr	r2, [pc, #52]	@ (800e4c4 <ProcessRadioRxDone+0x908>)
 800e48e:	f8c3 242c 	str.w	r2, [r3, #1068]	@ 0x42c
            MacCtx.McpsIndication.BufferSize = size - pktHeaderLen;
 800e492:	f8b7 3082 	ldrh.w	r3, [r7, #130]	@ 0x82
 800e496:	b2da      	uxtb	r2, r3
 800e498:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800e49c:	1ad3      	subs	r3, r2, r3
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	4b05      	ldr	r3, [pc, #20]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e4a2:	f883 2430 	strb.w	r2, [r3, #1072]	@ 0x430

            MacCtx.MacFlags.Bits.McpsInd = 1;
 800e4a6:	4a04      	ldr	r2, [pc, #16]	@ (800e4b8 <ProcessRadioRxDone+0x8fc>)
 800e4a8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e4ac:	f043 0302 	orr.w	r3, r3, #2
 800e4b0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            break;
 800e4b4:	e00f      	b.n	800e4d6 <ProcessRadioRxDone+0x91a>
 800e4b6:	bf00      	nop
 800e4b8:	20000670 	.word	0x20000670
 800e4bc:	20000b90 	.word	0x20000b90
 800e4c0:	20001720 	.word	0x20001720
 800e4c4:	200008a8 	.word	0x200008a8
        default:
            MacCtx.McpsIndication.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 800e4c8:	4b17      	ldr	r3, [pc, #92]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2425 	strb.w	r2, [r3, #1061]	@ 0x425
            PrepareRxDoneAbort( );
 800e4d0:	f7ff fb4e 	bl	800db70 <PrepareRxDoneAbort>
            break;
 800e4d4:	bf00      	nop
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Verify if we need to disable the RetransmitTimeoutTimer
    // Only aplies if downlink is received on Rx1 or Rx2 windows.
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e4d6:	4b14      	ldr	r3, [pc, #80]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e4d8:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d004      	beq.n	800e4ea <ProcessRadioRxDone+0x92e>
        ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 800e4e0:	4b11      	ldr	r3, [pc, #68]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e4e2:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 800e4e6:	2b01      	cmp	r3, #1
 800e4e8:	d10c      	bne.n	800e504 <ProcessRadioRxDone+0x948>
    {
        if( MacCtx.NodeAckRequested == true )
 800e4ea:	4b0f      	ldr	r3, [pc, #60]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e4ec:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	d007      	beq.n	800e504 <ProcessRadioRxDone+0x948>
        {
            if( MacCtx.McpsConfirm.AckReceived == true )
 800e4f4:	4b0c      	ldr	r3, [pc, #48]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e4f6:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <ProcessRadioRxDone+0x948>
            {
                OnRetransmitTimeoutTimerEvent( NULL );
 800e4fe:	2000      	movs	r0, #0
 800e500:	f000 fce4 	bl	800eecc <OnRetransmitTimeoutTimerEvent>
            }
        }
    }

    if( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_CLASS_C )
 800e504:	4b08      	ldr	r3, [pc, #32]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e506:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 800e50a:	2b02      	cmp	r3, #2
 800e50c:	d006      	beq.n	800e51c <ProcessRadioRxDone+0x960>
    {
        MacCtx.MacFlags.Bits.MacDone = 1;
 800e50e:	4a06      	ldr	r2, [pc, #24]	@ (800e528 <ProcessRadioRxDone+0x96c>)
 800e510:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e514:	f043 0320 	orr.w	r3, r3, #32
 800e518:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */

    UpdateRxSlotIdleState( );
 800e51c:	f7ff fa82 	bl	800da24 <UpdateRxSlotIdleState>
}
 800e520:	3794      	adds	r7, #148	@ 0x94
 800e522:	46bd      	mov	sp, r7
 800e524:	bd90      	pop	{r4, r7, pc}
 800e526:	bf00      	nop
 800e528:	20000670 	.word	0x20000670

0800e52c <ProcessRadioTxTimeout>:

static void ProcessRadioTxTimeout( void )
{
 800e52c:	b580      	push	{r7, lr}
 800e52e:	af00      	add	r7, sp, #0
    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e530:	4b11      	ldr	r3, [pc, #68]	@ (800e578 <ProcessRadioTxTimeout+0x4c>)
 800e532:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e536:	2b02      	cmp	r3, #2
 800e538:	d002      	beq.n	800e540 <ProcessRadioTxTimeout+0x14>
    {
        Radio.Sleep( );
 800e53a:	4b10      	ldr	r3, [pc, #64]	@ (800e57c <ProcessRadioTxTimeout+0x50>)
 800e53c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e53e:	4798      	blx	r3
    }
    UpdateRxSlotIdleState( );
 800e540:	f7ff fa70 	bl	800da24 <UpdateRxSlotIdleState>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT;
 800e544:	4b0e      	ldr	r3, [pc, #56]	@ (800e580 <ProcessRadioTxTimeout+0x54>)
 800e546:	2202      	movs	r2, #2
 800e548:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_TIMEOUT );
 800e54c:	2002      	movs	r0, #2
 800e54e:	f004 fd57 	bl	8013000 <LoRaMacConfirmQueueSetStatusCmn>
    if( MacCtx.NodeAckRequested == true )
 800e552:	4b0b      	ldr	r3, [pc, #44]	@ (800e580 <ProcessRadioTxTimeout+0x54>)
 800e554:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d003      	beq.n	800e564 <ProcessRadioTxTimeout+0x38>
    {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        MacCtx.AckTimeoutRetry = true;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        MacCtx.RetransmitTimeoutRetry = true;
 800e55c:	4b08      	ldr	r3, [pc, #32]	@ (800e580 <ProcessRadioTxTimeout+0x54>)
 800e55e:	2201      	movs	r2, #1
 800e560:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    }
    MacCtx.MacFlags.Bits.MacDone = 1;
 800e564:	4a06      	ldr	r2, [pc, #24]	@ (800e580 <ProcessRadioTxTimeout+0x54>)
 800e566:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e56a:	f043 0320 	orr.w	r3, r3, #32
 800e56e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
}
 800e572:	bf00      	nop
 800e574:	bd80      	pop	{r7, pc}
 800e576:	bf00      	nop
 800e578:	20000b90 	.word	0x20000b90
 800e57c:	0801c500 	.word	0x0801c500
 800e580:	20000670 	.word	0x20000670

0800e584 <HandleRadioRxErrorTimeout>:

static void HandleRadioRxErrorTimeout( LoRaMacEventInfoStatus_t rx1EventInfoStatus, LoRaMacEventInfoStatus_t rx2EventInfoStatus )
{
 800e584:	b580      	push	{r7, lr}
 800e586:	b084      	sub	sp, #16
 800e588:	af00      	add	r7, sp, #0
 800e58a:	4603      	mov	r3, r0
 800e58c:	460a      	mov	r2, r1
 800e58e:	71fb      	strb	r3, [r7, #7]
 800e590:	4613      	mov	r3, r2
 800e592:	71bb      	strb	r3, [r7, #6]
    bool classBRx = false;
 800e594:	2300      	movs	r3, #0
 800e596:	73fb      	strb	r3, [r7, #15]

    if( Nvm.MacGroup2.DeviceClass != CLASS_C )
 800e598:	4b3d      	ldr	r3, [pc, #244]	@ (800e690 <HandleRadioRxErrorTimeout+0x10c>)
 800e59a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e59e:	2b02      	cmp	r3, #2
 800e5a0:	d002      	beq.n	800e5a8 <HandleRadioRxErrorTimeout+0x24>
    {
        Radio.Sleep( );
 800e5a2:	4b3c      	ldr	r3, [pc, #240]	@ (800e694 <HandleRadioRxErrorTimeout+0x110>)
 800e5a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5a6:	4798      	blx	r3
    }

    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800e5a8:	f004 f870 	bl	801268c <LoRaMacClassBIsBeaconExpected>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d007      	beq.n	800e5c2 <HandleRadioRxErrorTimeout+0x3e>
    {
        LoRaMacClassBSetBeaconState( BEACON_STATE_TIMEOUT );
 800e5b2:	2002      	movs	r0, #2
 800e5b4:	f004 f81e 	bl	80125f4 <LoRaMacClassBSetBeaconState>
        LoRaMacClassBBeaconTimerEvent( NULL );
 800e5b8:	2000      	movs	r0, #0
 800e5ba:	f004 f840 	bl	801263e <LoRaMacClassBBeaconTimerEvent>
        classBRx = true;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	73fb      	strb	r3, [r7, #15]
    }
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800e5c2:	4b33      	ldr	r3, [pc, #204]	@ (800e690 <HandleRadioRxErrorTimeout+0x10c>)
 800e5c4:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800e5c8:	2b01      	cmp	r3, #1
 800e5ca:	d119      	bne.n	800e600 <HandleRadioRxErrorTimeout+0x7c>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800e5cc:	f004 f865 	bl	801269a <LoRaMacClassBIsPingExpected>
 800e5d0:	4603      	mov	r3, r0
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d007      	beq.n	800e5e6 <HandleRadioRxErrorTimeout+0x62>
        {
            LoRaMacClassBSetPingSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e5d6:	2000      	movs	r0, #0
 800e5d8:	f004 f816 	bl	8012608 <LoRaMacClassBSetPingSlotState>
            LoRaMacClassBPingSlotTimerEvent( NULL );
 800e5dc:	2000      	movs	r0, #0
 800e5de:	f004 f837 	bl	8012650 <LoRaMacClassBPingSlotTimerEvent>
            classBRx = true;
 800e5e2:	2301      	movs	r3, #1
 800e5e4:	73fb      	strb	r3, [r7, #15]
        }
        if( LoRaMacClassBIsMulticastExpected( ) == true )
 800e5e6:	f004 f85f 	bl	80126a8 <LoRaMacClassBIsMulticastExpected>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	2b00      	cmp	r3, #0
 800e5ee:	d007      	beq.n	800e600 <HandleRadioRxErrorTimeout+0x7c>
        {
            LoRaMacClassBSetMulticastSlotState( PINGSLOT_STATE_CALC_PING_OFFSET );
 800e5f0:	2000      	movs	r0, #0
 800e5f2:	f004 f813 	bl	801261c <LoRaMacClassBSetMulticastSlotState>
            LoRaMacClassBMulticastSlotTimerEvent( NULL );
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	f004 f833 	bl	8012662 <LoRaMacClassBMulticastSlotTimerEvent>
            classBRx = true;
 800e5fc:	2301      	movs	r3, #1
 800e5fe:	73fb      	strb	r3, [r7, #15]
        }
    }

    if( classBRx == false )
 800e600:	7bfb      	ldrb	r3, [r7, #15]
 800e602:	f083 0301 	eor.w	r3, r3, #1
 800e606:	b2db      	uxtb	r3, r3
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d03b      	beq.n	800e684 <HandleRadioRxErrorTimeout+0x100>
    {
        if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800e60c:	4b22      	ldr	r3, [pc, #136]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e60e:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800e612:	2b00      	cmp	r3, #0
 800e614:	d122      	bne.n	800e65c <HandleRadioRxErrorTimeout+0xd8>
        {
            if( MacCtx.NodeAckRequested == true )
 800e616:	4b20      	ldr	r3, [pc, #128]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e618:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d003      	beq.n	800e628 <HandleRadioRxErrorTimeout+0xa4>
            {
                MacCtx.McpsConfirm.Status = rx1EventInfoStatus;
 800e620:	4a1d      	ldr	r2, [pc, #116]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e622:	79fb      	ldrb	r3, [r7, #7]
 800e624:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx1EventInfoStatus );
 800e628:	79fb      	ldrb	r3, [r7, #7]
 800e62a:	4618      	mov	r0, r3
 800e62c:	f004 fce8 	bl	8013000 <LoRaMacConfirmQueueSetStatusCmn>

            if( TimerGetElapsedTime( Nvm.MacGroup1.LastTxDoneTime ) >= MacCtx.RxWindow2Delay )
 800e630:	4b17      	ldr	r3, [pc, #92]	@ (800e690 <HandleRadioRxErrorTimeout+0x10c>)
 800e632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e634:	4618      	mov	r0, r3
 800e636:	f00c fc83 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 800e63a:	4602      	mov	r2, r0
 800e63c:	4b16      	ldr	r3, [pc, #88]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e63e:	f8d3 33b4 	ldr.w	r3, [r3, #948]	@ 0x3b4
 800e642:	429a      	cmp	r2, r3
 800e644:	d31e      	bcc.n	800e684 <HandleRadioRxErrorTimeout+0x100>
            {
                TimerStop( &MacCtx.RxWindowTimer2 );
 800e646:	4815      	ldr	r0, [pc, #84]	@ (800e69c <HandleRadioRxErrorTimeout+0x118>)
 800e648:	f00c fb4e 	bl	801ace8 <UTIL_TIMER_Stop>
                MacCtx.MacFlags.Bits.MacDone = 1;
 800e64c:	4a12      	ldr	r2, [pc, #72]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e64e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e652:	f043 0320 	orr.w	r3, r3, #32
 800e656:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 800e65a:	e013      	b.n	800e684 <HandleRadioRxErrorTimeout+0x100>
            }
        }
        else
        {
            if( MacCtx.NodeAckRequested == true )
 800e65c:	4b0e      	ldr	r3, [pc, #56]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e65e:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800e662:	2b00      	cmp	r3, #0
 800e664:	d003      	beq.n	800e66e <HandleRadioRxErrorTimeout+0xea>
            {
                MacCtx.McpsConfirm.Status = rx2EventInfoStatus;
 800e666:	4a0c      	ldr	r2, [pc, #48]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e668:	79bb      	ldrb	r3, [r7, #6]
 800e66a:	f882 3445 	strb.w	r3, [r2, #1093]	@ 0x445
            }
            LoRaMacConfirmQueueSetStatusCmn( rx2EventInfoStatus );
 800e66e:	79bb      	ldrb	r3, [r7, #6]
 800e670:	4618      	mov	r0, r3
 800e672:	f004 fcc5 	bl	8013000 <LoRaMacConfirmQueueSetStatusCmn>
            if( Nvm.MacGroup2.DeviceClass != CLASS_C )
            {
                MacCtx.MacFlags.Bits.MacDone = 1;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.MacFlags.Bits.MacDone = 1;
 800e676:	4a08      	ldr	r2, [pc, #32]	@ (800e698 <HandleRadioRxErrorTimeout+0x114>)
 800e678:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e67c:	f043 0320 	orr.w	r3, r3, #32
 800e680:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
#endif /* LORAMAC_VERSION */
        }
    }

    UpdateRxSlotIdleState( );
 800e684:	f7ff f9ce 	bl	800da24 <UpdateRxSlotIdleState>
}
 800e688:	bf00      	nop
 800e68a:	3710      	adds	r7, #16
 800e68c:	46bd      	mov	sp, r7
 800e68e:	bd80      	pop	{r7, pc}
 800e690:	20000b90 	.word	0x20000b90
 800e694:	0801c500 	.word	0x0801c500
 800e698:	20000670 	.word	0x20000670
 800e69c:	20000a08 	.word	0x20000a08

0800e6a0 <ProcessRadioRxError>:

static void ProcessRadioRxError( void )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_ERROR, LORAMAC_EVENT_INFO_STATUS_RX2_ERROR );
 800e6a4:	2106      	movs	r1, #6
 800e6a6:	2005      	movs	r0, #5
 800e6a8:	f7ff ff6c 	bl	800e584 <HandleRadioRxErrorTimeout>
}
 800e6ac:	bf00      	nop
 800e6ae:	bd80      	pop	{r7, pc}

0800e6b0 <ProcessRadioRxTimeout>:

static void ProcessRadioRxTimeout( void )
{
 800e6b0:	b580      	push	{r7, lr}
 800e6b2:	af00      	add	r7, sp, #0
    HandleRadioRxErrorTimeout( LORAMAC_EVENT_INFO_STATUS_RX1_TIMEOUT, LORAMAC_EVENT_INFO_STATUS_RX2_TIMEOUT );
 800e6b4:	2104      	movs	r1, #4
 800e6b6:	2003      	movs	r0, #3
 800e6b8:	f7ff ff64 	bl	800e584 <HandleRadioRxErrorTimeout>
}
 800e6bc:	bf00      	nop
 800e6be:	bd80      	pop	{r7, pc}

0800e6c0 <LoRaMacHandleIrqEvents>:

static void LoRaMacHandleIrqEvents( void )
{
 800e6c0:	b580      	push	{r7, lr}
 800e6c2:	b084      	sub	sp, #16
 800e6c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e6c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e6ca:	607b      	str	r3, [r7, #4]
  return(result);
 800e6cc:	687b      	ldr	r3, [r7, #4]
    LoRaMacRadioEvents_t events;

    CRITICAL_SECTION_BEGIN( );
 800e6ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800e6d0:	b672      	cpsid	i
}
 800e6d2:	bf00      	nop
    events = LoRaMacRadioEvents;
 800e6d4:	4b1d      	ldr	r3, [pc, #116]	@ (800e74c <LoRaMacHandleIrqEvents+0x8c>)
 800e6d6:	681b      	ldr	r3, [r3, #0]
 800e6d8:	603b      	str	r3, [r7, #0]
    LoRaMacRadioEvents.Value = 0;
 800e6da:	4b1c      	ldr	r3, [pc, #112]	@ (800e74c <LoRaMacHandleIrqEvents+0x8c>)
 800e6dc:	2200      	movs	r2, #0
 800e6de:	601a      	str	r2, [r3, #0]
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	f383 8810 	msr	PRIMASK, r3
}
 800e6ea:	bf00      	nop
    CRITICAL_SECTION_END( );

    if( events.Value != 0 )
 800e6ec:	683b      	ldr	r3, [r7, #0]
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	d027      	beq.n	800e742 <LoRaMacHandleIrqEvents+0x82>
    {
        if( events.Events.TxDone == 1 )
 800e6f2:	783b      	ldrb	r3, [r7, #0]
 800e6f4:	f003 0320 	and.w	r3, r3, #32
 800e6f8:	b2db      	uxtb	r3, r3
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <LoRaMacHandleIrqEvents+0x42>
        {
            ProcessRadioTxDone( );
 800e6fe:	f7ff f9a9 	bl	800da54 <ProcessRadioTxDone>
        }
        if( events.Events.RxDone == 1 )
 800e702:	783b      	ldrb	r3, [r7, #0]
 800e704:	f003 0310 	and.w	r3, r3, #16
 800e708:	b2db      	uxtb	r3, r3
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d001      	beq.n	800e712 <LoRaMacHandleIrqEvents+0x52>
        {
            ProcessRadioRxDone( );
 800e70e:	f7ff fa55 	bl	800dbbc <ProcessRadioRxDone>
        }
        if( events.Events.TxTimeout == 1 )
 800e712:	783b      	ldrb	r3, [r7, #0]
 800e714:	f003 0308 	and.w	r3, r3, #8
 800e718:	b2db      	uxtb	r3, r3
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <LoRaMacHandleIrqEvents+0x62>
        {
            ProcessRadioTxTimeout( );
 800e71e:	f7ff ff05 	bl	800e52c <ProcessRadioTxTimeout>
        }
        if( events.Events.RxError == 1 )
 800e722:	783b      	ldrb	r3, [r7, #0]
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d001      	beq.n	800e732 <LoRaMacHandleIrqEvents+0x72>
        {
            ProcessRadioRxError( );
 800e72e:	f7ff ffb7 	bl	800e6a0 <ProcessRadioRxError>
        }
        if( events.Events.RxTimeout == 1 )
 800e732:	783b      	ldrb	r3, [r7, #0]
 800e734:	f003 0302 	and.w	r3, r3, #2
 800e738:	b2db      	uxtb	r3, r3
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d001      	beq.n	800e742 <LoRaMacHandleIrqEvents+0x82>
        {
            ProcessRadioRxTimeout( );
 800e73e:	f7ff ffb7 	bl	800e6b0 <ProcessRadioRxTimeout>
        }
    }
}
 800e742:	bf00      	nop
 800e744:	3710      	adds	r7, #16
 800e746:	46bd      	mov	sp, r7
 800e748:	bd80      	pop	{r7, pc}
 800e74a:	bf00      	nop
 800e74c:	20001718 	.word	0x20001718

0800e750 <LoRaMacIsBusy>:

bool LoRaMacIsBusy( void )
{
 800e750:	b480      	push	{r7}
 800e752:	af00      	add	r7, sp, #0
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacRadioEvents.Events.RxProcessPending == 1 )
 800e754:	4b0c      	ldr	r3, [pc, #48]	@ (800e788 <LoRaMacIsBusy+0x38>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	f003 0301 	and.w	r3, r3, #1
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d001      	beq.n	800e766 <LoRaMacIsBusy+0x16>
    {
        return true;
 800e762:	2301      	movs	r3, #1
 800e764:	e00c      	b.n	800e780 <LoRaMacIsBusy+0x30>
    }
#endif /* LORAMAC_VERSION */

    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e766:	4b09      	ldr	r3, [pc, #36]	@ (800e78c <LoRaMacIsBusy+0x3c>)
 800e768:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	d106      	bne.n	800e77e <LoRaMacIsBusy+0x2e>
        ( MacCtx.AllowRequests == LORAMAC_REQUEST_HANDLING_ON ) )
 800e770:	4b06      	ldr	r3, [pc, #24]	@ (800e78c <LoRaMacIsBusy+0x3c>)
 800e772:	f893 3496 	ldrb.w	r3, [r3, #1174]	@ 0x496
    if( ( MacCtx.MacState == LORAMAC_IDLE ) &&
 800e776:	2b01      	cmp	r3, #1
 800e778:	d101      	bne.n	800e77e <LoRaMacIsBusy+0x2e>
    {
        return false;
 800e77a:	2300      	movs	r3, #0
 800e77c:	e000      	b.n	800e780 <LoRaMacIsBusy+0x30>
    }
    return true;
 800e77e:	2301      	movs	r3, #1
}
 800e780:	4618      	mov	r0, r3
 800e782:	46bd      	mov	sp, r7
 800e784:	bc80      	pop	{r7}
 800e786:	4770      	bx	lr
 800e788:	20001718 	.word	0x20001718
 800e78c:	20000670 	.word	0x20000670

0800e790 <LoRaMacEnableRequests>:

static void LoRaMacEnableRequests( LoRaMacRequestHandling_t requestState )
{
 800e790:	b480      	push	{r7}
 800e792:	b083      	sub	sp, #12
 800e794:	af00      	add	r7, sp, #0
 800e796:	4603      	mov	r3, r0
 800e798:	71fb      	strb	r3, [r7, #7]
    MacCtx.AllowRequests = requestState;
 800e79a:	4a04      	ldr	r2, [pc, #16]	@ (800e7ac <LoRaMacEnableRequests+0x1c>)
 800e79c:	79fb      	ldrb	r3, [r7, #7]
 800e79e:	f882 3496 	strb.w	r3, [r2, #1174]	@ 0x496
}
 800e7a2:	bf00      	nop
 800e7a4:	370c      	adds	r7, #12
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bc80      	pop	{r7}
 800e7aa:	4770      	bx	lr
 800e7ac:	20000670 	.word	0x20000670

0800e7b0 <LoRaMacHandleRequestEvents>:

static void LoRaMacHandleRequestEvents( void )
{
 800e7b0:	b580      	push	{r7, lr}
 800e7b2:	b082      	sub	sp, #8
 800e7b4:	af00      	add	r7, sp, #0
    // Handle events
    LoRaMacFlags_t reqEvents = MacCtx.MacFlags;
 800e7b6:	4b2c      	ldr	r3, [pc, #176]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e7b8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e7bc:	713b      	strb	r3, [r7, #4]

    if( MacCtx.MacState == LORAMAC_IDLE )
 800e7be:	4b2a      	ldr	r3, [pc, #168]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e7c0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d14a      	bne.n	800e85e <LoRaMacHandleRequestEvents+0xae>
    {
        // Update event bits
        if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e7c8:	4b27      	ldr	r3, [pc, #156]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e7ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e7ce:	f003 0301 	and.w	r3, r3, #1
 800e7d2:	b2db      	uxtb	r3, r3
 800e7d4:	2b00      	cmp	r3, #0
 800e7d6:	d006      	beq.n	800e7e6 <LoRaMacHandleRequestEvents+0x36>
        {
            MacCtx.MacFlags.Bits.McpsReq = 0;
 800e7d8:	4a23      	ldr	r2, [pc, #140]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e7da:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e7de:	f36f 0300 	bfc	r3, #0, #1
 800e7e2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e7e6:	4b20      	ldr	r3, [pc, #128]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e7e8:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e7ec:	f003 0304 	and.w	r3, r3, #4
 800e7f0:	b2db      	uxtb	r3, r3
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d006      	beq.n	800e804 <LoRaMacHandleRequestEvents+0x54>
        {
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 800e7f6:	4a1c      	ldr	r2, [pc, #112]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e7f8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e7fc:	f36f 0382 	bfc	r3, #2, #1
 800e800:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        }

        // Allow requests again
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800e804:	2001      	movs	r0, #1
 800e806:	f7ff ffc3 	bl	800e790 <LoRaMacEnableRequests>

        // Handle callbacks
        if( reqEvents.Bits.McpsReq == 1 )
 800e80a:	793b      	ldrb	r3, [r7, #4]
 800e80c:	f003 0301 	and.w	r3, r3, #1
 800e810:	b2db      	uxtb	r3, r3
 800e812:	2b00      	cmp	r3, #0
 800e814:	d005      	beq.n	800e822 <LoRaMacHandleRequestEvents+0x72>
        {
            MacCtx.MacPrimitives->MacMcpsConfirm( &MacCtx.McpsConfirm );
 800e816:	4b14      	ldr	r3, [pc, #80]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e818:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e81c:	681b      	ldr	r3, [r3, #0]
 800e81e:	4813      	ldr	r0, [pc, #76]	@ (800e86c <LoRaMacHandleRequestEvents+0xbc>)
 800e820:	4798      	blx	r3
        }

        if( reqEvents.Bits.MlmeReq == 1 )
 800e822:	793b      	ldrb	r3, [r7, #4]
 800e824:	f003 0304 	and.w	r3, r3, #4
 800e828:	b2db      	uxtb	r3, r3
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d00e      	beq.n	800e84c <LoRaMacHandleRequestEvents+0x9c>
        {
            LoRaMacConfirmQueueHandleCb( &MacCtx.MlmeConfirm );
 800e82e:	4810      	ldr	r0, [pc, #64]	@ (800e870 <LoRaMacHandleRequestEvents+0xc0>)
 800e830:	f004 fc34 	bl	801309c <LoRaMacConfirmQueueHandleCb>
            if( LoRaMacConfirmQueueGetCnt( ) > 0 )
 800e834:	f004 fc7e 	bl	8013134 <LoRaMacConfirmQueueGetCnt>
 800e838:	4603      	mov	r3, r0
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	d006      	beq.n	800e84c <LoRaMacHandleRequestEvents+0x9c>
            {
                MacCtx.MacFlags.Bits.MlmeReq = 1;
 800e83e:	4a0a      	ldr	r2, [pc, #40]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e840:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e844:	f043 0304 	orr.w	r3, r3, #4
 800e848:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            }
        }

        // Start beaconing again
        LoRaMacClassBResumeBeaconing( );
 800e84c:	f003 ff4a 	bl	80126e4 <LoRaMacClassBResumeBeaconing>

        // Procedure done. Reset variables.
        MacCtx.MacFlags.Bits.MacDone = 0;
 800e850:	4a05      	ldr	r2, [pc, #20]	@ (800e868 <LoRaMacHandleRequestEvents+0xb8>)
 800e852:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e856:	f36f 1345 	bfc	r3, #5, #1
 800e85a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
}
 800e85e:	bf00      	nop
 800e860:	3708      	adds	r7, #8
 800e862:	46bd      	mov	sp, r7
 800e864:	bd80      	pop	{r7, pc}
 800e866:	bf00      	nop
 800e868:	20000670 	.word	0x20000670
 800e86c:	20000ab4 	.word	0x20000ab4
 800e870:	20000ac8 	.word	0x20000ac8

0800e874 <LoRaMacHandleScheduleUplinkEvent>:

static void LoRaMacHandleScheduleUplinkEvent( void )
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
    // Handle events
    if( MacCtx.MacState == LORAMAC_IDLE )
 800e87a:	4b07      	ldr	r3, [pc, #28]	@ (800e898 <LoRaMacHandleScheduleUplinkEvent+0x24>)
 800e87c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e880:	2b00      	cmp	r3, #0
 800e882:	d105      	bne.n	800e890 <LoRaMacHandleScheduleUplinkEvent+0x1c>
    {
        // Verify if sticky MAC commands are pending or not
        bool isStickyMacCommandPending = false;
 800e884:	2300      	movs	r3, #0
 800e886:	71fb      	strb	r3, [r7, #7]
        LoRaMacCommandsStickyCmdsPending( &isStickyMacCommandPending );
 800e888:	1dfb      	adds	r3, r7, #7
 800e88a:	4618      	mov	r0, r3
 800e88c:	f004 f9ec 	bl	8012c68 <LoRaMacCommandsStickyCmdsPending>
        {// Setup MLME indication
            /* ST_WORKAROUND: remove unnecessary mlme operation to prevent uplinks burst */
            //SetMlmeScheduleUplinkIndication( );
        }
    }
}
 800e890:	bf00      	nop
 800e892:	3708      	adds	r7, #8
 800e894:	46bd      	mov	sp, r7
 800e896:	bd80      	pop	{r7, pc}
 800e898:	20000670 	.word	0x20000670

0800e89c <LoRaMacHandleIndicationEvents>:

static void LoRaMacHandleIndicationEvents( void )
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	af00      	add	r7, sp, #0
    // Handle MLME indication
    if( MacCtx.MacFlags.Bits.MlmeInd == 1 )
 800e8a0:	4b16      	ldr	r3, [pc, #88]	@ (800e8fc <LoRaMacHandleIndicationEvents+0x60>)
 800e8a2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e8a6:	f003 0308 	and.w	r3, r3, #8
 800e8aa:	b2db      	uxtb	r3, r3
 800e8ac:	2b00      	cmp	r3, #0
 800e8ae:	d00d      	beq.n	800e8cc <LoRaMacHandleIndicationEvents+0x30>
    {
        MacCtx.MacFlags.Bits.MlmeInd = 0;
 800e8b0:	4a12      	ldr	r2, [pc, #72]	@ (800e8fc <LoRaMacHandleIndicationEvents+0x60>)
 800e8b2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e8b6:	f36f 03c3 	bfc	r3, #3, #1
 800e8ba:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMlmeIndication( &MacCtx.MlmeIndication, &MacCtx.RxStatus );
 800e8be:	4b0f      	ldr	r3, [pc, #60]	@ (800e8fc <LoRaMacHandleIndicationEvents+0x60>)
 800e8c0:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e8c4:	68db      	ldr	r3, [r3, #12]
 800e8c6:	490e      	ldr	r1, [pc, #56]	@ (800e900 <LoRaMacHandleIndicationEvents+0x64>)
 800e8c8:	480e      	ldr	r0, [pc, #56]	@ (800e904 <LoRaMacHandleIndicationEvents+0x68>)
 800e8ca:	4798      	blx	r3
    }
    */
    /*ST_WORKAROUND_END */

    // Handle MCPS indication
    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 800e8cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e8fc <LoRaMacHandleIndicationEvents+0x60>)
 800e8ce:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e8d2:	f003 0302 	and.w	r3, r3, #2
 800e8d6:	b2db      	uxtb	r3, r3
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d00d      	beq.n	800e8f8 <LoRaMacHandleIndicationEvents+0x5c>
    {
        MacCtx.MacFlags.Bits.McpsInd = 0;
 800e8dc:	4a07      	ldr	r2, [pc, #28]	@ (800e8fc <LoRaMacHandleIndicationEvents+0x60>)
 800e8de:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e8e2:	f36f 0341 	bfc	r3, #1, #1
 800e8e6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        MacCtx.MacPrimitives->MacMcpsIndication( &MacCtx.McpsIndication, &MacCtx.RxStatus );
 800e8ea:	4b04      	ldr	r3, [pc, #16]	@ (800e8fc <LoRaMacHandleIndicationEvents+0x60>)
 800e8ec:	f8d3 3344 	ldr.w	r3, [r3, #836]	@ 0x344
 800e8f0:	685b      	ldr	r3, [r3, #4]
 800e8f2:	4903      	ldr	r1, [pc, #12]	@ (800e900 <LoRaMacHandleIndicationEvents+0x64>)
 800e8f4:	4804      	ldr	r0, [pc, #16]	@ (800e908 <LoRaMacHandleIndicationEvents+0x6c>)
 800e8f6:	4798      	blx	r3
    }
}
 800e8f8:	bf00      	nop
 800e8fa:	bd80      	pop	{r7, pc}
 800e8fc:	20000670 	.word	0x20000670
 800e900:	20000b00 	.word	0x20000b00
 800e904:	20000adc 	.word	0x20000adc
 800e908:	20000a94 	.word	0x20000a94

0800e90c <LoRaMacHandleMcpsRequest>:

static void LoRaMacHandleMcpsRequest( void )
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b082      	sub	sp, #8
 800e910:	af00      	add	r7, sp, #0
    // Handle MCPS uplinks
    if( MacCtx.MacFlags.Bits.McpsReq == 1 )
 800e912:	4b2a      	ldr	r3, [pc, #168]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e914:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e918:	f003 0301 	and.w	r3, r3, #1
 800e91c:	b2db      	uxtb	r3, r3
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d048      	beq.n	800e9b4 <LoRaMacHandleMcpsRequest+0xa8>
    {
        bool stopRetransmission = false;
 800e922:	2300      	movs	r3, #0
 800e924:	71fb      	strb	r3, [r7, #7]
        bool waitForRetransmission = false;
 800e926:	2300      	movs	r3, #0
 800e928:	71bb      	strb	r3, [r7, #6]

        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e92a:	4b24      	ldr	r3, [pc, #144]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e92c:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e930:	2b00      	cmp	r3, #0
 800e932:	d004      	beq.n	800e93e <LoRaMacHandleMcpsRequest+0x32>
            ( MacCtx.McpsConfirm.McpsRequest == MCPS_PROPRIETARY ) )
 800e934:	4b21      	ldr	r3, [pc, #132]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e936:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
        if( ( MacCtx.McpsConfirm.McpsRequest == MCPS_UNCONFIRMED ) ||
 800e93a:	2b03      	cmp	r3, #3
 800e93c:	d104      	bne.n	800e948 <LoRaMacHandleMcpsRequest+0x3c>
        {
            stopRetransmission = CheckRetransUnconfirmedUplink( );
 800e93e:	f002 f8f9 	bl	8010b34 <CheckRetransUnconfirmedUplink>
 800e942:	4603      	mov	r3, r0
 800e944:	71fb      	strb	r3, [r7, #7]
 800e946:	e010      	b.n	800e96a <LoRaMacHandleMcpsRequest+0x5e>
        }
        else if( MacCtx.McpsConfirm.McpsRequest == MCPS_CONFIRMED )
 800e948:	4b1c      	ldr	r3, [pc, #112]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e94a:	f893 3444 	ldrb.w	r3, [r3, #1092]	@ 0x444
 800e94e:	2b01      	cmp	r3, #1
 800e950:	d10b      	bne.n	800e96a <LoRaMacHandleMcpsRequest+0x5e>
            else
            {
                waitForRetransmission = true;
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.RetransmitTimeoutRetry == true )
 800e952:	4b1a      	ldr	r3, [pc, #104]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e954:	f893 341d 	ldrb.w	r3, [r3, #1053]	@ 0x41d
 800e958:	2b00      	cmp	r3, #0
 800e95a:	d004      	beq.n	800e966 <LoRaMacHandleMcpsRequest+0x5a>
            {
                stopRetransmission = CheckRetransConfirmedUplink( );
 800e95c:	f002 f916 	bl	8010b8c <CheckRetransConfirmedUplink>
 800e960:	4603      	mov	r3, r0
 800e962:	71fb      	strb	r3, [r7, #7]
 800e964:	e001      	b.n	800e96a <LoRaMacHandleMcpsRequest+0x5e>
            }
            else
            {
                waitForRetransmission = true;
 800e966:	2301      	movs	r3, #1
 800e968:	71bb      	strb	r3, [r7, #6]
            }
#endif /* LORAMAC_VERSION */
        }

        if( stopRetransmission == true )
 800e96a:	79fb      	ldrb	r3, [r7, #7]
 800e96c:	2b00      	cmp	r3, #0
 800e96e:	d00d      	beq.n	800e98c <LoRaMacHandleMcpsRequest+0x80>
        {// Stop retransmission
            TimerStop( &MacCtx.TxDelayedTimer );
 800e970:	4813      	ldr	r0, [pc, #76]	@ (800e9c0 <LoRaMacHandleMcpsRequest+0xb4>)
 800e972:	f00c f9b9 	bl	801ace8 <UTIL_TIMER_Stop>
            MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800e976:	4b11      	ldr	r3, [pc, #68]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e978:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e97c:	f023 0320 	bic.w	r3, r3, #32
 800e980:	4a0e      	ldr	r2, [pc, #56]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e982:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            StopRetransmission( );
 800e986:	f002 f93b 	bl	8010c00 <StopRetransmission>
#endif /* LORAMAC_VERSION */
            // Sends the same frame again
            OnTxDelayedTimerEvent( NULL );
        }
    }
}
 800e98a:	e013      	b.n	800e9b4 <LoRaMacHandleMcpsRequest+0xa8>
        else if( waitForRetransmission == false )
 800e98c:	79bb      	ldrb	r3, [r7, #6]
 800e98e:	f083 0301 	eor.w	r3, r3, #1
 800e992:	b2db      	uxtb	r3, r3
 800e994:	2b00      	cmp	r3, #0
 800e996:	d00d      	beq.n	800e9b4 <LoRaMacHandleMcpsRequest+0xa8>
            MacCtx.MacFlags.Bits.MacDone = 0;
 800e998:	4a08      	ldr	r2, [pc, #32]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e99a:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800e99e:	f36f 1345 	bfc	r3, #5, #1
 800e9a2:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
            MacCtx.RetransmitTimeoutRetry = false;
 800e9a6:	4b05      	ldr	r3, [pc, #20]	@ (800e9bc <LoRaMacHandleMcpsRequest+0xb0>)
 800e9a8:	2200      	movs	r2, #0
 800e9aa:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
            OnTxDelayedTimerEvent( NULL );
 800e9ae:	2000      	movs	r0, #0
 800e9b0:	f000 f9c8 	bl	800ed44 <OnTxDelayedTimerEvent>
}
 800e9b4:	bf00      	nop
 800e9b6:	3708      	adds	r7, #8
 800e9b8:	46bd      	mov	sp, r7
 800e9ba:	bd80      	pop	{r7, pc}
 800e9bc:	20000670 	.word	0x20000670
 800e9c0:	200009d8 	.word	0x200009d8

0800e9c4 <LoRaMacHandleMlmeRequest>:

static void LoRaMacHandleMlmeRequest( void )
{
 800e9c4:	b580      	push	{r7, lr}
 800e9c6:	af00      	add	r7, sp, #0
    // Handle join request
    if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800e9c8:	4b18      	ldr	r3, [pc, #96]	@ (800ea2c <LoRaMacHandleMlmeRequest+0x68>)
 800e9ca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800e9ce:	f003 0304 	and.w	r3, r3, #4
 800e9d2:	b2db      	uxtb	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d026      	beq.n	800ea26 <LoRaMacHandleMlmeRequest+0x62>
    {
        if( LoRaMacConfirmQueueIsCmdActive( MLME_JOIN ) == true )
 800e9d8:	2001      	movs	r0, #1
 800e9da:	f004 fb45 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800e9de:	4603      	mov	r3, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	d012      	beq.n	800ea0a <LoRaMacHandleMlmeRequest+0x46>
        {
            if( LoRaMacConfirmQueueGetStatus( MLME_JOIN ) == LORAMAC_EVENT_INFO_STATUS_OK )
 800e9e4:	2001      	movs	r0, #1
 800e9e6:	f004 fae1 	bl	8012fac <LoRaMacConfirmQueueGetStatus>
 800e9ea:	4603      	mov	r3, r0
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d103      	bne.n	800e9f8 <LoRaMacHandleMlmeRequest+0x34>
            {// Node joined successfully
                MacCtx.ChannelsNbTransCounter = 0;
 800e9f0:	4b0e      	ldr	r3, [pc, #56]	@ (800ea2c <LoRaMacHandleMlmeRequest+0x68>)
 800e9f2:	2200      	movs	r2, #0
 800e9f4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
            }
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800e9f8:	4b0c      	ldr	r3, [pc, #48]	@ (800ea2c <LoRaMacHandleMlmeRequest+0x68>)
 800e9fa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800e9fe:	f023 0302 	bic.w	r3, r3, #2
 800ea02:	4a0a      	ldr	r2, [pc, #40]	@ (800ea2c <LoRaMacHandleMlmeRequest+0x68>)
 800ea04:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
        }
#endif /* LORAMAC_VERSION */
    }
}
 800ea08:	e00d      	b.n	800ea26 <LoRaMacHandleMlmeRequest+0x62>
        else if( LoRaMacConfirmQueueIsCmdActive( MLME_TXCW ) == true )
 800ea0a:	2005      	movs	r0, #5
 800ea0c:	f004 fb2c 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800ea10:	4603      	mov	r3, r0
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	d007      	beq.n	800ea26 <LoRaMacHandleMlmeRequest+0x62>
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea16:	4b05      	ldr	r3, [pc, #20]	@ (800ea2c <LoRaMacHandleMlmeRequest+0x68>)
 800ea18:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea1c:	f023 0302 	bic.w	r3, r3, #2
 800ea20:	4a02      	ldr	r2, [pc, #8]	@ (800ea2c <LoRaMacHandleMlmeRequest+0x68>)
 800ea22:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
}
 800ea26:	bf00      	nop
 800ea28:	bd80      	pop	{r7, pc}
 800ea2a:	bf00      	nop
 800ea2c:	20000670 	.word	0x20000670

0800ea30 <LoRaMacCheckForBeaconAcquisition>:

static uint8_t LoRaMacCheckForBeaconAcquisition( void )
{
 800ea30:	b580      	push	{r7, lr}
 800ea32:	af00      	add	r7, sp, #0
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ea34:	200b      	movs	r0, #11
 800ea36:	f004 fb17 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d019      	beq.n	800ea74 <LoRaMacCheckForBeaconAcquisition+0x44>
        ( MacCtx.MacFlags.Bits.McpsReq == 0 ) )
 800ea40:	4b0e      	ldr	r3, [pc, #56]	@ (800ea7c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea42:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ea46:	f003 0301 	and.w	r3, r3, #1
 800ea4a:	b2db      	uxtb	r3, r3
    if( ( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_ACQUISITION ) == true ) &&
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d111      	bne.n	800ea74 <LoRaMacCheckForBeaconAcquisition+0x44>
    {
        if( MacCtx.MacFlags.Bits.MlmeReq == 1 )
 800ea50:	4b0a      	ldr	r3, [pc, #40]	@ (800ea7c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea52:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ea56:	f003 0304 	and.w	r3, r3, #4
 800ea5a:	b2db      	uxtb	r3, r3
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d009      	beq.n	800ea74 <LoRaMacCheckForBeaconAcquisition+0x44>
        {
            MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800ea60:	4b06      	ldr	r3, [pc, #24]	@ (800ea7c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea62:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ea66:	f023 0302 	bic.w	r3, r3, #2
 800ea6a:	4a04      	ldr	r2, [pc, #16]	@ (800ea7c <LoRaMacCheckForBeaconAcquisition+0x4c>)
 800ea6c:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
            return 0x01;
 800ea70:	2301      	movs	r3, #1
 800ea72:	e000      	b.n	800ea76 <LoRaMacCheckForBeaconAcquisition+0x46>
        }
    }
    return 0x00;
 800ea74:	2300      	movs	r3, #0
}
 800ea76:	4618      	mov	r0, r3
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	20000670 	.word	0x20000670

0800ea80 <CheckForMinimumAbpDatarate>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckForMinimumAbpDatarate( bool adr, ActivationType_t activation, bool datarateChanged )
{
 800ea80:	b480      	push	{r7}
 800ea82:	b083      	sub	sp, #12
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	4603      	mov	r3, r0
 800ea88:	71fb      	strb	r3, [r7, #7]
 800ea8a:	460b      	mov	r3, r1
 800ea8c:	71bb      	strb	r3, [r7, #6]
 800ea8e:	4613      	mov	r3, r2
 800ea90:	717b      	strb	r3, [r7, #5]
    if( ( adr == true ) &&
 800ea92:	79fb      	ldrb	r3, [r7, #7]
 800ea94:	2b00      	cmp	r3, #0
 800ea96:	d00a      	beq.n	800eaae <CheckForMinimumAbpDatarate+0x2e>
 800ea98:	79bb      	ldrb	r3, [r7, #6]
 800ea9a:	2b01      	cmp	r3, #1
 800ea9c:	d107      	bne.n	800eaae <CheckForMinimumAbpDatarate+0x2e>
        ( activation == ACTIVATION_TYPE_ABP ) &&
        ( datarateChanged == false ) )
 800ea9e:	797b      	ldrb	r3, [r7, #5]
 800eaa0:	f083 0301 	eor.w	r3, r3, #1
 800eaa4:	b2db      	uxtb	r3, r3
        ( activation == ACTIVATION_TYPE_ABP ) &&
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d001      	beq.n	800eaae <CheckForMinimumAbpDatarate+0x2e>
    {
        return true;
 800eaaa:	2301      	movs	r3, #1
 800eaac:	e000      	b.n	800eab0 <CheckForMinimumAbpDatarate+0x30>
    }
    return false;
 800eaae:	2300      	movs	r3, #0
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	370c      	adds	r7, #12
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bc80      	pop	{r7}
 800eab8:	4770      	bx	lr
	...

0800eabc <LoRaMacCheckForRxAbort>:
#endif /* LORAMAC_VERSION */

static void LoRaMacCheckForRxAbort( void )
{
 800eabc:	b480      	push	{r7}
 800eabe:	af00      	add	r7, sp, #0
    // A error occurs during receiving
    if( ( MacCtx.MacState & LORAMAC_RX_ABORT ) == LORAMAC_RX_ABORT )
 800eac0:	4b0d      	ldr	r3, [pc, #52]	@ (800eaf8 <LoRaMacCheckForRxAbort+0x3c>)
 800eac2:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00f      	beq.n	800eaee <LoRaMacCheckForRxAbort+0x32>
    {
        MacCtx.MacState &= ~LORAMAC_RX_ABORT;
 800eace:	4b0a      	ldr	r3, [pc, #40]	@ (800eaf8 <LoRaMacCheckForRxAbort+0x3c>)
 800ead0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ead4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ead8:	4a07      	ldr	r2, [pc, #28]	@ (800eaf8 <LoRaMacCheckForRxAbort+0x3c>)
 800eada:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
        MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 800eade:	4b06      	ldr	r3, [pc, #24]	@ (800eaf8 <LoRaMacCheckForRxAbort+0x3c>)
 800eae0:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eae4:	f023 0302 	bic.w	r3, r3, #2
 800eae8:	4a03      	ldr	r2, [pc, #12]	@ (800eaf8 <LoRaMacCheckForRxAbort+0x3c>)
 800eaea:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    }
}
 800eaee:	bf00      	nop
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	bc80      	pop	{r7}
 800eaf4:	4770      	bx	lr
 800eaf6:	bf00      	nop
 800eaf8:	20000670 	.word	0x20000670

0800eafc <LoRaMacHandleNvm>:

static void LoRaMacHandleNvm( LoRaMacNvmData_t* nvmData )
{
 800eafc:	b580      	push	{r7, lr}
 800eafe:	b084      	sub	sp, #16
 800eb00:	af00      	add	r7, sp, #0
 800eb02:	6078      	str	r0, [r7, #4]
    uint32_t crc = 0;
 800eb04:	2300      	movs	r3, #0
 800eb06:	60bb      	str	r3, [r7, #8]
    uint16_t notifyFlags = LORAMAC_NVM_NOTIFY_FLAG_NONE;
 800eb08:	2300      	movs	r3, #0
 800eb0a:	81fb      	strh	r3, [r7, #14]

    if( MacCtx.MacState != LORAMAC_IDLE )
 800eb0c:	4b50      	ldr	r3, [pc, #320]	@ (800ec50 <LoRaMacHandleNvm+0x154>)
 800eb0e:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	f040 8098 	bne.w	800ec48 <LoRaMacHandleNvm+0x14c>
    {
        return;
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &nvmData->Crypto, sizeof( nvmData->Crypto ) -
 800eb18:	687b      	ldr	r3, [r7, #4]
 800eb1a:	2124      	movs	r1, #36	@ 0x24
 800eb1c:	4618      	mov	r0, r3
 800eb1e:	f007 fff3 	bl	8016b08 <Crc32>
 800eb22:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->Crypto.Crc32 ) );
    if( crc != nvmData->Crypto.Crc32 )
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb28:	68ba      	ldr	r2, [r7, #8]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d006      	beq.n	800eb3c <LoRaMacHandleNvm+0x40>
    {
        nvmData->Crypto.Crc32 = crc;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	68ba      	ldr	r2, [r7, #8]
 800eb32:	625a      	str	r2, [r3, #36]	@ 0x24
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CRYPTO;
 800eb34:	89fb      	ldrh	r3, [r7, #14]
 800eb36:	f043 0301 	orr.w	r3, r3, #1
 800eb3a:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup1, sizeof( nvmData->MacGroup1 ) -
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	3328      	adds	r3, #40	@ 0x28
 800eb40:	2114      	movs	r1, #20
 800eb42:	4618      	mov	r0, r3
 800eb44:	f007 ffe0 	bl	8016b08 <Crc32>
 800eb48:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup1.Crc32 ) );
    if( crc != nvmData->MacGroup1.Crc32 )
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eb4e:	68ba      	ldr	r2, [r7, #8]
 800eb50:	429a      	cmp	r2, r3
 800eb52:	d006      	beq.n	800eb62 <LoRaMacHandleNvm+0x66>
    {
        nvmData->MacGroup1.Crc32 = crc;
 800eb54:	687b      	ldr	r3, [r7, #4]
 800eb56:	68ba      	ldr	r2, [r7, #8]
 800eb58:	63da      	str	r2, [r3, #60]	@ 0x3c
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP1;
 800eb5a:	89fb      	ldrh	r3, [r7, #14]
 800eb5c:	f043 0302 	orr.w	r3, r3, #2
 800eb60:	81fb      	strh	r3, [r7, #14]
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &nvmData->MacGroup2, sizeof( nvmData->MacGroup2 ) -
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	3340      	adds	r3, #64	@ 0x40
 800eb66:	21e0      	movs	r1, #224	@ 0xe0
 800eb68:	4618      	mov	r0, r3
 800eb6a:	f007 ffcd 	bl	8016b08 <Crc32>
 800eb6e:	60b8      	str	r0, [r7, #8]
                                                   sizeof( nvmData->MacGroup2.Crc32 ) );
    if( crc != nvmData->MacGroup2.Crc32 )
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	429a      	cmp	r2, r3
 800eb7a:	d007      	beq.n	800eb8c <LoRaMacHandleNvm+0x90>
    {
        nvmData->MacGroup2.Crc32 = crc;
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	68ba      	ldr	r2, [r7, #8]
 800eb80:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_MAC_GROUP2;
 800eb84:	89fb      	ldrh	r3, [r7, #14]
 800eb86:	f043 0304 	orr.w	r3, r3, #4
 800eb8a:	81fb      	strh	r3, [r7, #14]
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &nvmData->SecureElement, sizeof( nvmData->SecureElement ) -
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	f503 7392 	add.w	r3, r3, #292	@ 0x124
 800eb92:	21bc      	movs	r1, #188	@ 0xbc
 800eb94:	4618      	mov	r0, r3
 800eb96:	f007 ffb7 	bl	8016b08 <Crc32>
 800eb9a:	60b8      	str	r0, [r7, #8]
                                                       sizeof( nvmData->SecureElement.Crc32 ) );
    if( crc != nvmData->SecureElement.Crc32 )
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d007      	beq.n	800ebb8 <LoRaMacHandleNvm+0xbc>
    {
        nvmData->SecureElement.Crc32 = crc;
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	68ba      	ldr	r2, [r7, #8]
 800ebac:	f8c3 21e0 	str.w	r2, [r3, #480]	@ 0x1e0
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_SECURE_ELEMENT;
 800ebb0:	89fb      	ldrh	r3, [r7, #14]
 800ebb2:	f043 0308 	orr.w	r3, r3, #8
 800ebb6:	81fb      	strh	r3, [r7, #14]
    }

    // Region
    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup1, sizeof( nvmData->RegionGroup1 ) -
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800ebbe:	2100      	movs	r1, #0
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f007 ffa1 	bl	8016b08 <Crc32>
 800ebc6:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup1.Crc32 ) );
    if( crc != nvmData->RegionGroup1.Crc32 )
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 800ebce:	68ba      	ldr	r2, [r7, #8]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d007      	beq.n	800ebe4 <LoRaMacHandleNvm+0xe8>
    {
        nvmData->RegionGroup1.Crc32 = crc;
 800ebd4:	687b      	ldr	r3, [r7, #4]
 800ebd6:	68ba      	ldr	r2, [r7, #8]
 800ebd8:	f8c3 21e4 	str.w	r2, [r3, #484]	@ 0x1e4
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP1;
 800ebdc:	89fb      	ldrh	r3, [r7, #14]
 800ebde:	f043 0310 	orr.w	r3, r3, #16
 800ebe2:	81fb      	strh	r3, [r7, #14]
    }

    crc = Crc32( ( uint8_t* ) &nvmData->RegionGroup2, sizeof( nvmData->RegionGroup2 ) -
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800ebea:	f44f 715e 	mov.w	r1, #888	@ 0x378
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f007 ff8a 	bl	8016b08 <Crc32>
 800ebf4:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->RegionGroup2.Crc32 ) );
    if( crc != nvmData->RegionGroup2.Crc32 )
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	f8d3 3560 	ldr.w	r3, [r3, #1376]	@ 0x560
 800ebfc:	68ba      	ldr	r2, [r7, #8]
 800ebfe:	429a      	cmp	r2, r3
 800ec00:	d007      	beq.n	800ec12 <LoRaMacHandleNvm+0x116>
    {
        nvmData->RegionGroup2.Crc32 = crc;
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	f8c3 2560 	str.w	r2, [r3, #1376]	@ 0x560
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_REGION_GROUP2;
 800ec0a:	89fb      	ldrh	r3, [r7, #14]
 800ec0c:	f043 0320 	orr.w	r3, r3, #32
 800ec10:	81fb      	strh	r3, [r7, #14]
    }

    // ClassB
    crc = Crc32( ( uint8_t* ) &nvmData->ClassB, sizeof( nvmData->ClassB ) -
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	f203 5364 	addw	r3, r3, #1380	@ 0x564
 800ec18:	2114      	movs	r1, #20
 800ec1a:	4618      	mov	r0, r3
 800ec1c:	f007 ff74 	bl	8016b08 <Crc32>
 800ec20:	60b8      	str	r0, [r7, #8]
                                                sizeof( nvmData->ClassB.Crc32 ) );
    if( crc != nvmData->ClassB.Crc32 )
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 800ec28:	68ba      	ldr	r2, [r7, #8]
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d007      	beq.n	800ec3e <LoRaMacHandleNvm+0x142>
    {
        nvmData->ClassB.Crc32 = crc;
 800ec2e:	687b      	ldr	r3, [r7, #4]
 800ec30:	68ba      	ldr	r2, [r7, #8]
 800ec32:	f8c3 2578 	str.w	r2, [r3, #1400]	@ 0x578
        notifyFlags |= LORAMAC_NVM_NOTIFY_FLAG_CLASS_B;
 800ec36:	89fb      	ldrh	r3, [r7, #14]
 800ec38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ec3c:	81fb      	strh	r3, [r7, #14]
    }

    CallNvmDataChangeCallback( notifyFlags );
 800ec3e:	89fb      	ldrh	r3, [r7, #14]
 800ec40:	4618      	mov	r0, r3
 800ec42:	f002 f819 	bl	8010c78 <CallNvmDataChangeCallback>
 800ec46:	e000      	b.n	800ec4a <LoRaMacHandleNvm+0x14e>
        return;
 800ec48:	bf00      	nop
}
 800ec4a:	3710      	adds	r7, #16
 800ec4c:	46bd      	mov	sp, r7
 800ec4e:	bd80      	pop	{r7, pc}
 800ec50:	20000670 	.word	0x20000670

0800ec54 <LoRaMacHandleResponseTimeout>:

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool LoRaMacHandleResponseTimeout( TimerTime_t timeoutInMs, TimerTime_t startTimeInMs )
{
 800ec54:	b580      	push	{r7, lr}
 800ec56:	b084      	sub	sp, #16
 800ec58:	af00      	add	r7, sp, #0
 800ec5a:	6078      	str	r0, [r7, #4]
 800ec5c:	6039      	str	r1, [r7, #0]
    if( startTimeInMs != 0 )
 800ec5e:	683b      	ldr	r3, [r7, #0]
 800ec60:	2b00      	cmp	r3, #0
 800ec62:	d00d      	beq.n	800ec80 <LoRaMacHandleResponseTimeout+0x2c>
    {
        TimerTime_t elapsedTime = TimerGetElapsedTime( startTimeInMs );
 800ec64:	6838      	ldr	r0, [r7, #0]
 800ec66:	f00c f96b 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 800ec6a:	60f8      	str	r0, [r7, #12]
        if( elapsedTime > timeoutInMs )
 800ec6c:	68fa      	ldr	r2, [r7, #12]
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	429a      	cmp	r2, r3
 800ec72:	d905      	bls.n	800ec80 <LoRaMacHandleResponseTimeout+0x2c>
        {
            Nvm.MacGroup1.SrvAckRequested = false;
 800ec74:	4b05      	ldr	r3, [pc, #20]	@ (800ec8c <LoRaMacHandleResponseTimeout+0x38>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            return true;
 800ec7c:	2301      	movs	r3, #1
 800ec7e:	e000      	b.n	800ec82 <LoRaMacHandleResponseTimeout+0x2e>
        }
    }
    return false;
 800ec80:	2300      	movs	r3, #0
}
 800ec82:	4618      	mov	r0, r3
 800ec84:	3710      	adds	r7, #16
 800ec86:	46bd      	mov	sp, r7
 800ec88:	bd80      	pop	{r7, pc}
 800ec8a:	bf00      	nop
 800ec8c:	20000b90 	.word	0x20000b90

0800ec90 <LoRaMacProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacProcess( void )
{
 800ec90:	b580      	push	{r7, lr}
 800ec92:	b082      	sub	sp, #8
 800ec94:	af00      	add	r7, sp, #0
    uint8_t noTx = false;
 800ec96:	2300      	movs	r3, #0
 800ec98:	71fb      	strb	r3, [r7, #7]

    LoRaMacHandleIrqEvents( );
 800ec9a:	f7ff fd11 	bl	800e6c0 <LoRaMacHandleIrqEvents>
    LoRaMacClassBProcess( );
 800ec9e:	f003 fd90 	bl	80127c2 <LoRaMacClassBProcess>

    // MAC proceeded a state and is ready to check
    if( MacCtx.MacFlags.Bits.MacDone == 1 )
 800eca2:	4b26      	ldr	r3, [pc, #152]	@ (800ed3c <LoRaMacProcess+0xac>)
 800eca4:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800eca8:	f003 0320 	and.w	r3, r3, #32
 800ecac:	b2db      	uxtb	r3, r3
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d025      	beq.n	800ecfe <LoRaMacProcess+0x6e>
    {
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_OFF );
 800ecb2:	2000      	movs	r0, #0
 800ecb4:	f7ff fd6c 	bl	800e790 <LoRaMacEnableRequests>
        LoRaMacCheckForRxAbort( );
 800ecb8:	f7ff ff00 	bl	800eabc <LoRaMacCheckForRxAbort>

        // An error occurs during transmitting
        if( IsRequestPending( ) > 0 )
 800ecbc:	f001 fffa 	bl	8010cb4 <IsRequestPending>
 800ecc0:	4603      	mov	r3, r0
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d006      	beq.n	800ecd4 <LoRaMacProcess+0x44>
        {
            noTx |= LoRaMacCheckForBeaconAcquisition( );
 800ecc6:	f7ff feb3 	bl	800ea30 <LoRaMacCheckForBeaconAcquisition>
 800ecca:	4603      	mov	r3, r0
 800eccc:	461a      	mov	r2, r3
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	4313      	orrs	r3, r2
 800ecd2:	71fb      	strb	r3, [r7, #7]
        }

        if( noTx == 0x00 )
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d103      	bne.n	800ece2 <LoRaMacProcess+0x52>
        {
            LoRaMacHandleMlmeRequest( );
 800ecda:	f7ff fe73 	bl	800e9c4 <LoRaMacHandleMlmeRequest>
            LoRaMacHandleMcpsRequest( );
 800ecde:	f7ff fe15 	bl	800e90c <LoRaMacHandleMcpsRequest>
        }
        LoRaMacHandleRequestEvents( );
 800ece2:	f7ff fd65 	bl	800e7b0 <LoRaMacHandleRequestEvents>
        LoRaMacHandleScheduleUplinkEvent( );
 800ece6:	f7ff fdc5 	bl	800e874 <LoRaMacHandleScheduleUplinkEvent>
        LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 800ecea:	2001      	movs	r0, #1
 800ecec:	f7ff fd50 	bl	800e790 <LoRaMacEnableRequests>
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 800ecf0:	4a12      	ldr	r2, [pc, #72]	@ (800ed3c <LoRaMacProcess+0xac>)
 800ecf2:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ecf6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ecfa:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
    LoRaMacHandleIndicationEvents( );
 800ecfe:	f7ff fdcd 	bl	800e89c <LoRaMacHandleIndicationEvents>
    if( MacCtx.RxSlot == RX_SLOT_WIN_CLASS_C )
 800ed02:	4b0e      	ldr	r3, [pc, #56]	@ (800ed3c <LoRaMacProcess+0xac>)
 800ed04:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ed08:	2b02      	cmp	r3, #2
 800ed0a:	d101      	bne.n	800ed10 <LoRaMacProcess+0x80>
    {
        OpenContinuousRxCWindow( );
 800ed0c:	f001 fbee 	bl	80104ec <OpenContinuousRxCWindow>
    }
    if( MacCtx.MacFlags.Bits.NvmHandle == 1 )
 800ed10:	4b0a      	ldr	r3, [pc, #40]	@ (800ed3c <LoRaMacProcess+0xac>)
 800ed12:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800ed16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ed1a:	b2db      	uxtb	r3, r3
 800ed1c:	2b00      	cmp	r3, #0
 800ed1e:	d009      	beq.n	800ed34 <LoRaMacProcess+0xa4>
    {
        MacCtx.MacFlags.Bits.NvmHandle = 0;
 800ed20:	4a06      	ldr	r2, [pc, #24]	@ (800ed3c <LoRaMacProcess+0xac>)
 800ed22:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 800ed26:	f36f 1386 	bfc	r3, #6, #1
 800ed2a:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
        LoRaMacHandleNvm( &Nvm );
 800ed2e:	4804      	ldr	r0, [pc, #16]	@ (800ed40 <LoRaMacProcess+0xb0>)
 800ed30:	f7ff fee4 	bl	800eafc <LoRaMacHandleNvm>
    }
}
 800ed34:	bf00      	nop
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	20000670 	.word	0x20000670
 800ed40:	20000b90 	.word	0x20000b90

0800ed44 <OnTxDelayedTimerEvent>:

static void OnTxDelayedTimerEvent( void* context )
{
 800ed44:	b580      	push	{r7, lr}
 800ed46:	b082      	sub	sp, #8
 800ed48:	af00      	add	r7, sp, #0
 800ed4a:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.TxDelayedTimer );
 800ed4c:	481e      	ldr	r0, [pc, #120]	@ (800edc8 <OnTxDelayedTimerEvent+0x84>)
 800ed4e:	f00b ffcb 	bl	801ace8 <UTIL_TIMER_Stop>
    MacCtx.MacState &= ~LORAMAC_TX_DELAYED;
 800ed52:	4b1e      	ldr	r3, [pc, #120]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800ed54:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 800ed58:	f023 0320 	bic.w	r3, r3, #32
 800ed5c:	4a1b      	ldr	r2, [pc, #108]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800ed5e:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 800ed62:	4b1b      	ldr	r3, [pc, #108]	@ (800edd0 <OnTxDelayedTimerEvent+0x8c>)
 800ed64:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ed68:	4a18      	ldr	r2, [pc, #96]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800ed6a:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 800ed6e:	4611      	mov	r1, r2
 800ed70:	4618      	mov	r0, r3
 800ed72:	f7ff ff6f 	bl	800ec54 <LoRaMacHandleResponseTimeout>
 800ed76:	4603      	mov	r3, r0
 800ed78:	2b00      	cmp	r3, #0
 800ed7a:	d11e      	bne.n	800edba <OnTxDelayedTimerEvent+0x76>
        return;
    }
#endif /* LORAMAC_VERSION */

    // Schedule frame, allow delayed frame transmissions
    switch( ScheduleTx( true ) )
 800ed7c:	2001      	movs	r0, #1
 800ed7e:	f001 f93b 	bl	800fff8 <ScheduleTx>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d01a      	beq.n	800edbe <OnTxDelayedTimerEvent+0x7a>
 800ed88:	2b0b      	cmp	r3, #11
 800ed8a:	d018      	beq.n	800edbe <OnTxDelayedTimerEvent+0x7a>
            break;
        }
        default:
        {
            // Stop retransmission attempt
            MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800ed8c:	4b10      	ldr	r3, [pc, #64]	@ (800edd0 <OnTxDelayedTimerEvent+0x8c>)
 800ed8e:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800ed92:	b2da      	uxtb	r2, r3
 800ed94:	4b0d      	ldr	r3, [pc, #52]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800ed96:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 800ed9a:	4b0c      	ldr	r3, [pc, #48]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800ed9c:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 800eda0:	4b0a      	ldr	r3, [pc, #40]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800eda2:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR;
 800eda6:	4b09      	ldr	r3, [pc, #36]	@ (800edcc <OnTxDelayedTimerEvent+0x88>)
 800eda8:	2209      	movs	r2, #9
 800edaa:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
            LoRaMacConfirmQueueSetStatusCmn( LORAMAC_EVENT_INFO_STATUS_TX_DR_PAYLOAD_SIZE_ERROR );
 800edae:	2009      	movs	r0, #9
 800edb0:	f004 f926 	bl	8013000 <LoRaMacConfirmQueueSetStatusCmn>
            StopRetransmission( );
 800edb4:	f001 ff24 	bl	8010c00 <StopRetransmission>
            break;
 800edb8:	e002      	b.n	800edc0 <OnTxDelayedTimerEvent+0x7c>
        return;
 800edba:	bf00      	nop
 800edbc:	e000      	b.n	800edc0 <OnTxDelayedTimerEvent+0x7c>
            break;
 800edbe:	bf00      	nop
        }
    }
}
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	200009d8 	.word	0x200009d8
 800edcc:	20000670 	.word	0x20000670
 800edd0:	20000b90 	.word	0x20000b90

0800edd4 <OnRxWindow1TimerEvent>:

static void OnRxWindow1TimerEvent( void* context )
{
 800edd4:	b580      	push	{r7, lr}
 800edd6:	b082      	sub	sp, #8
 800edd8:	af00      	add	r7, sp, #0
 800edda:	6078      	str	r0, [r7, #4]
    MacCtx.RxWindow1Config.Channel = MacCtx.Channel;
 800eddc:	4b17      	ldr	r3, [pc, #92]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800edde:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800ede2:	4b16      	ldr	r3, [pc, #88]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800ede4:	f883 23b8 	strb.w	r2, [r3, #952]	@ 0x3b8
    MacCtx.RxWindow1Config.DrOffset = Nvm.MacGroup2.MacParams.Rx1DrOffset;
 800ede8:	4b15      	ldr	r3, [pc, #84]	@ (800ee40 <OnRxWindow1TimerEvent+0x6c>)
 800edea:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800edee:	b25a      	sxtb	r2, r3
 800edf0:	4b12      	ldr	r3, [pc, #72]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800edf2:	f883 23bb 	strb.w	r2, [r3, #955]	@ 0x3bb
    MacCtx.RxWindow1Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800edf6:	4b12      	ldr	r3, [pc, #72]	@ (800ee40 <OnRxWindow1TimerEvent+0x6c>)
 800edf8:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800edfc:	4b0f      	ldr	r3, [pc, #60]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800edfe:	f883 23c8 	strb.w	r2, [r3, #968]	@ 0x3c8
    MacCtx.RxWindow1Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ee02:	4b0f      	ldr	r3, [pc, #60]	@ (800ee40 <OnRxWindow1TimerEvent+0x6c>)
 800ee04:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ee08:	4b0c      	ldr	r3, [pc, #48]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800ee0a:	f883 23c9 	strb.w	r2, [r3, #969]	@ 0x3c9
    MacCtx.RxWindow1Config.RxContinuous = false;
 800ee0e:	4b0b      	ldr	r3, [pc, #44]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800ee10:	2200      	movs	r2, #0
 800ee12:	f883 23ca 	strb.w	r2, [r3, #970]	@ 0x3ca
    MacCtx.RxWindow1Config.RxSlot = RX_SLOT_WIN_1;
 800ee16:	4b09      	ldr	r3, [pc, #36]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800ee18:	2200      	movs	r2, #0
 800ee1a:	f883 23cb 	strb.w	r2, [r3, #971]	@ 0x3cb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow1Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ee1e:	4b08      	ldr	r3, [pc, #32]	@ (800ee40 <OnRxWindow1TimerEvent+0x6c>)
 800ee20:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800ee24:	4b05      	ldr	r3, [pc, #20]	@ (800ee3c <OnRxWindow1TimerEvent+0x68>)
 800ee26:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer1, &MacCtx.RxWindow1Config );
 800ee2a:	4906      	ldr	r1, [pc, #24]	@ (800ee44 <OnRxWindow1TimerEvent+0x70>)
 800ee2c:	4806      	ldr	r0, [pc, #24]	@ (800ee48 <OnRxWindow1TimerEvent+0x74>)
 800ee2e:	f001 fb29 	bl	8010484 <RxWindowSetup>
}
 800ee32:	bf00      	nop
 800ee34:	3708      	adds	r7, #8
 800ee36:	46bd      	mov	sp, r7
 800ee38:	bd80      	pop	{r7, pc}
 800ee3a:	bf00      	nop
 800ee3c:	20000670 	.word	0x20000670
 800ee40:	20000b90 	.word	0x20000b90
 800ee44:	20000a28 	.word	0x20000a28
 800ee48:	200009f0 	.word	0x200009f0

0800ee4c <OnRxWindow2TimerEvent>:

static void OnRxWindow2TimerEvent( void* context )
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
    // Check if we are processing Rx1 window.
    // If yes, we don't setup the Rx2 window.
    if( MacCtx.RxSlot == RX_SLOT_WIN_1 )
 800ee54:	4b19      	ldr	r3, [pc, #100]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee56:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d029      	beq.n	800eeb2 <OnRxWindow2TimerEvent+0x66>
    {
        return;
    }
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 800ee5e:	4b17      	ldr	r3, [pc, #92]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee60:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800ee64:	4b15      	ldr	r3, [pc, #84]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee66:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 800ee6a:	4b15      	ldr	r3, [pc, #84]	@ (800eec0 <OnRxWindow2TimerEvent+0x74>)
 800ee6c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ee6e:	4a13      	ldr	r2, [pc, #76]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee70:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800ee74:	4b12      	ldr	r3, [pc, #72]	@ (800eec0 <OnRxWindow2TimerEvent+0x74>)
 800ee76:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800ee7a:	4b10      	ldr	r3, [pc, #64]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee7c:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800ee80:	4b0f      	ldr	r3, [pc, #60]	@ (800eec0 <OnRxWindow2TimerEvent+0x74>)
 800ee82:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800ee86:	4b0d      	ldr	r3, [pc, #52]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee88:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 800ee8c:	4b0b      	ldr	r3, [pc, #44]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee8e:	2200      	movs	r2, #0
 800ee90:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 800ee94:	4b09      	ldr	r3, [pc, #36]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800ee96:	2201      	movs	r2, #1
 800ee98:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 800ee9c:	4b08      	ldr	r3, [pc, #32]	@ (800eec0 <OnRxWindow2TimerEvent+0x74>)
 800ee9e:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 800eea2:	4b06      	ldr	r3, [pc, #24]	@ (800eebc <OnRxWindow2TimerEvent+0x70>)
 800eea4:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    RxWindowSetup( &MacCtx.RxWindowTimer2, &MacCtx.RxWindow2Config );
 800eea8:	4906      	ldr	r1, [pc, #24]	@ (800eec4 <OnRxWindow2TimerEvent+0x78>)
 800eeaa:	4807      	ldr	r0, [pc, #28]	@ (800eec8 <OnRxWindow2TimerEvent+0x7c>)
 800eeac:	f001 faea 	bl	8010484 <RxWindowSetup>
 800eeb0:	e000      	b.n	800eeb4 <OnRxWindow2TimerEvent+0x68>
        return;
 800eeb2:	bf00      	nop
}
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	20000670 	.word	0x20000670
 800eec0:	20000b90 	.word	0x20000b90
 800eec4:	20000a40 	.word	0x20000a40
 800eec8:	20000a08 	.word	0x20000a08

0800eecc <OnRetransmitTimeoutTimerEvent>:

    return LoRaMacCryptoGetFCntDown( *fCntID, maxFCntGap, macMsg->FHDR.FCnt, currentDown );
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static void OnRetransmitTimeoutTimerEvent( void* context )
{
 800eecc:	b580      	push	{r7, lr}
 800eece:	b082      	sub	sp, #8
 800eed0:	af00      	add	r7, sp, #0
 800eed2:	6078      	str	r0, [r7, #4]
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 800eed4:	480f      	ldr	r0, [pc, #60]	@ (800ef14 <OnRetransmitTimeoutTimerEvent+0x48>)
 800eed6:	f00b ff07 	bl	801ace8 <UTIL_TIMER_Stop>

    if( MacCtx.NodeAckRequested == true )
 800eeda:	4b0f      	ldr	r3, [pc, #60]	@ (800ef18 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800eedc:	f893 341e 	ldrb.w	r3, [r3, #1054]	@ 0x41e
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d003      	beq.n	800eeec <OnRetransmitTimeoutTimerEvent+0x20>
    {
        MacCtx.RetransmitTimeoutRetry = true;
 800eee4:	4b0c      	ldr	r3, [pc, #48]	@ (800ef18 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800eee6:	2201      	movs	r2, #1
 800eee8:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    }
    if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->MacProcessNotify != NULL ) )
 800eeec:	4b0a      	ldr	r3, [pc, #40]	@ (800ef18 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800eeee:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d00a      	beq.n	800ef0c <OnRetransmitTimeoutTimerEvent+0x40>
 800eef6:	4b08      	ldr	r3, [pc, #32]	@ (800ef18 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800eef8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800eefc:	691b      	ldr	r3, [r3, #16]
 800eefe:	2b00      	cmp	r3, #0
 800ef00:	d004      	beq.n	800ef0c <OnRetransmitTimeoutTimerEvent+0x40>
    {
        MacCtx.MacCallbacks->MacProcessNotify( );
 800ef02:	4b05      	ldr	r3, [pc, #20]	@ (800ef18 <OnRetransmitTimeoutTimerEvent+0x4c>)
 800ef04:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800ef08:	691b      	ldr	r3, [r3, #16]
 800ef0a:	4798      	blx	r3
    }
}
 800ef0c:	bf00      	nop
 800ef0e:	3708      	adds	r7, #8
 800ef10:	46bd      	mov	sp, r7
 800ef12:	bd80      	pop	{r7, pc}
 800ef14:	20000a74 	.word	0x20000a74
 800ef18:	20000670 	.word	0x20000670

0800ef1c <GetFCntDown>:

static LoRaMacCryptoStatus_t GetFCntDown( AddressIdentifier_t addrID, FType_t fType, LoRaMacMessageData_t* macMsg, Version_t lrWanVersion,
                                          FCntIdentifier_t* fCntID, uint32_t* currentDown )
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	60ba      	str	r2, [r7, #8]
 800ef24:	607b      	str	r3, [r7, #4]
 800ef26:	4603      	mov	r3, r0
 800ef28:	73fb      	strb	r3, [r7, #15]
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	73bb      	strb	r3, [r7, #14]
    if( ( macMsg == NULL ) || ( fCntID == NULL ) ||
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	2b00      	cmp	r3, #0
 800ef32:	d005      	beq.n	800ef40 <GetFCntDown+0x24>
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d002      	beq.n	800ef40 <GetFCntDown+0x24>
 800ef3a:	69fb      	ldr	r3, [r7, #28]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d101      	bne.n	800ef44 <GetFCntDown+0x28>
        ( currentDown == NULL ) )
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 800ef40:	2309      	movs	r3, #9
 800ef42:	e028      	b.n	800ef96 <GetFCntDown+0x7a>
    }

    // Determine the frame counter identifier and choose counter from FCntList
    switch( addrID )
 800ef44:	7bfb      	ldrb	r3, [r7, #15]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d016      	beq.n	800ef78 <GetFCntDown+0x5c>
 800ef4a:	2b01      	cmp	r3, #1
 800ef4c:	d118      	bne.n	800ef80 <GetFCntDown+0x64>
    {
        case UNICAST_DEV_ADDR:
            if( lrWanVersion.Fields.Minor == 1 )
 800ef4e:	79bb      	ldrb	r3, [r7, #6]
 800ef50:	2b01      	cmp	r3, #1
 800ef52:	d10d      	bne.n	800ef70 <GetFCntDown+0x54>
            {
                if( ( fType == FRAME_TYPE_A ) || ( fType == FRAME_TYPE_D ) )
 800ef54:	7bbb      	ldrb	r3, [r7, #14]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d002      	beq.n	800ef60 <GetFCntDown+0x44>
 800ef5a:	7bbb      	ldrb	r3, [r7, #14]
 800ef5c:	2b03      	cmp	r3, #3
 800ef5e:	d103      	bne.n	800ef68 <GetFCntDown+0x4c>
                {
                    *fCntID = A_FCNT_DOWN;
 800ef60:	69bb      	ldr	r3, [r7, #24]
 800ef62:	2202      	movs	r2, #2
 800ef64:	701a      	strb	r2, [r3, #0]
            }
            else
            { // For LoRaWAN 1.0.X
                *fCntID = FCNT_DOWN;
            }
            break;
 800ef66:	e00d      	b.n	800ef84 <GetFCntDown+0x68>
                    *fCntID = N_FCNT_DOWN;
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	2201      	movs	r2, #1
 800ef6c:	701a      	strb	r2, [r3, #0]
            break;
 800ef6e:	e009      	b.n	800ef84 <GetFCntDown+0x68>
                *fCntID = FCNT_DOWN;
 800ef70:	69bb      	ldr	r3, [r7, #24]
 800ef72:	2203      	movs	r2, #3
 800ef74:	701a      	strb	r2, [r3, #0]
            break;
 800ef76:	e005      	b.n	800ef84 <GetFCntDown+0x68>
        /* ST_WORKAROUND_BEGIN: reduced LORAMAC_MAX_MC_CTX */
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MULTICAST_0_ADDR:
            *fCntID = MC_FCNT_DOWN_0;
 800ef78:	69bb      	ldr	r3, [r7, #24]
 800ef7a:	2204      	movs	r2, #4
 800ef7c:	701a      	strb	r2, [r3, #0]
            break;
 800ef7e:	e001      	b.n	800ef84 <GetFCntDown+0x68>
            *fCntID = MC_FCNT_DOWN_3;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        /* ST_WORKAROUND_END */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 800ef80:	2305      	movs	r3, #5
 800ef82:	e008      	b.n	800ef96 <GetFCntDown+0x7a>
    }

    return LoRaMacCryptoGetFCntDown( *fCntID, macMsg->FHDR.FCnt, currentDown );
 800ef84:	69bb      	ldr	r3, [r7, #24]
 800ef86:	7818      	ldrb	r0, [r3, #0]
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	89db      	ldrh	r3, [r3, #14]
 800ef8c:	69fa      	ldr	r2, [r7, #28]
 800ef8e:	4619      	mov	r1, r3
 800ef90:	f004 fc60 	bl	8013854 <LoRaMacCryptoGetFCntDown>
 800ef94:	4603      	mov	r3, r0
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}
	...

0800efa0 <SwitchClass>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t SwitchClass( DeviceClass_t deviceClass )
{
 800efa0:	b5b0      	push	{r4, r5, r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	4603      	mov	r3, r0
 800efa8:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800efaa:	2303      	movs	r3, #3
 800efac:	73fb      	strb	r3, [r7, #15]

    switch( Nvm.MacGroup2.DeviceClass )
 800efae:	4b62      	ldr	r3, [pc, #392]	@ (800f138 <SwitchClass+0x198>)
 800efb0:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	f000 80a7 	beq.w	800f108 <SwitchClass+0x168>
 800efba:	2b02      	cmp	r3, #2
 800efbc:	f300 80b6 	bgt.w	800f12c <SwitchClass+0x18c>
 800efc0:	2b00      	cmp	r3, #0
 800efc2:	d003      	beq.n	800efcc <SwitchClass+0x2c>
 800efc4:	2b01      	cmp	r3, #1
 800efc6:	f000 8091 	beq.w	800f0ec <SwitchClass+0x14c>
 800efca:	e0af      	b.n	800f12c <SwitchClass+0x18c>
    {
        case CLASS_A:
        {
            if( deviceClass == CLASS_A )
 800efcc:	79fb      	ldrb	r3, [r7, #7]
 800efce:	2b00      	cmp	r3, #0
 800efd0:	d107      	bne.n	800efe2 <SwitchClass+0x42>
            {
                // Revert back RxC parameters
                Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParams.Rx2Channel;
 800efd2:	4b59      	ldr	r3, [pc, #356]	@ (800f138 <SwitchClass+0x198>)
 800efd4:	4a58      	ldr	r2, [pc, #352]	@ (800f138 <SwitchClass+0x198>)
 800efd6:	336c      	adds	r3, #108	@ 0x6c
 800efd8:	3264      	adds	r2, #100	@ 0x64
 800efda:	e892 0003 	ldmia.w	r2, {r0, r1}
 800efde:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            if( deviceClass == CLASS_B )
 800efe2:	79fb      	ldrb	r3, [r7, #7]
 800efe4:	2b01      	cmp	r3, #1
 800efe6:	d10c      	bne.n	800f002 <SwitchClass+0x62>
            {
                status = LoRaMacClassBSwitchClass( deviceClass );
 800efe8:	79fb      	ldrb	r3, [r7, #7]
 800efea:	4618      	mov	r0, r3
 800efec:	f003 fb80 	bl	80126f0 <LoRaMacClassBSwitchClass>
 800eff0:	4603      	mov	r3, r0
 800eff2:	73fb      	strb	r3, [r7, #15]
                if( status == LORAMAC_STATUS_OK )
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	d103      	bne.n	800f002 <SwitchClass+0x62>
                {
                    Nvm.MacGroup2.DeviceClass = deviceClass;
 800effa:	4a4f      	ldr	r2, [pc, #316]	@ (800f138 <SwitchClass+0x198>)
 800effc:	79fb      	ldrb	r3, [r7, #7]
 800effe:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
                }
            }

            if( deviceClass == CLASS_C )
 800f002:	79fb      	ldrb	r3, [r7, #7]
 800f004:	2b02      	cmp	r3, #2
 800f006:	f040 808c 	bne.w	800f122 <SwitchClass+0x182>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f00a:	4a4b      	ldr	r2, [pc, #300]	@ (800f138 <SwitchClass+0x198>)
 800f00c:	79fb      	ldrb	r3, [r7, #7]
 800f00e:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 800f012:	4a4a      	ldr	r2, [pc, #296]	@ (800f13c <SwitchClass+0x19c>)
 800f014:	4b49      	ldr	r3, [pc, #292]	@ (800f13c <SwitchClass+0x19c>)
 800f016:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 800f01a:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 800f01e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f020:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f022:	e895 0003 	ldmia.w	r5, {r0, r1}
 800f026:	e884 0003 	stmia.w	r4, {r0, r1}
                MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 800f02a:	4b44      	ldr	r3, [pc, #272]	@ (800f13c <SwitchClass+0x19c>)
 800f02c:	2202      	movs	r2, #2
 800f02e:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f032:	2300      	movs	r3, #0
 800f034:	73bb      	strb	r3, [r7, #14]
 800f036:	e049      	b.n	800f0cc <SwitchClass+0x12c>
                {
                    if( Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.IsEnabled == true )
 800f038:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f03c:	4a3e      	ldr	r2, [pc, #248]	@ (800f138 <SwitchClass+0x198>)
 800f03e:	212c      	movs	r1, #44	@ 0x2c
 800f040:	fb01 f303 	mul.w	r3, r1, r3
 800f044:	4413      	add	r3, r2
 800f046:	33da      	adds	r3, #218	@ 0xda
 800f048:	781b      	ldrb	r3, [r3, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d038      	beq.n	800f0c0 <SwitchClass+0x120>
                    {
                        Nvm.MacGroup2.MacParams.RxCChannel.Frequency = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Frequency;
 800f04e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f052:	4a39      	ldr	r2, [pc, #228]	@ (800f138 <SwitchClass+0x198>)
 800f054:	212c      	movs	r1, #44	@ 0x2c
 800f056:	fb01 f303 	mul.w	r3, r1, r3
 800f05a:	4413      	add	r3, r2
 800f05c:	33f0      	adds	r3, #240	@ 0xf0
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	4a35      	ldr	r2, [pc, #212]	@ (800f138 <SwitchClass+0x198>)
 800f062:	66d3      	str	r3, [r2, #108]	@ 0x6c
                        Nvm.MacGroup2.MacParams.RxCChannel.Datarate = Nvm.MacGroup2.MulticastChannelList[i].ChannelParams.RxParams.ClassC.Datarate;
 800f064:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f068:	4a33      	ldr	r2, [pc, #204]	@ (800f138 <SwitchClass+0x198>)
 800f06a:	212c      	movs	r1, #44	@ 0x2c
 800f06c:	fb01 f303 	mul.w	r3, r1, r3
 800f070:	4413      	add	r3, r2
 800f072:	33f4      	adds	r3, #244	@ 0xf4
 800f074:	f993 3000 	ldrsb.w	r3, [r3]
 800f078:	b2da      	uxtb	r2, r3
 800f07a:	4b2f      	ldr	r3, [pc, #188]	@ (800f138 <SwitchClass+0x198>)
 800f07c:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70

                        MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 800f080:	4b2e      	ldr	r3, [pc, #184]	@ (800f13c <SwitchClass+0x19c>)
 800f082:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 800f086:	4b2d      	ldr	r3, [pc, #180]	@ (800f13c <SwitchClass+0x19c>)
 800f088:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
                        MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 800f08c:	4b2a      	ldr	r3, [pc, #168]	@ (800f138 <SwitchClass+0x198>)
 800f08e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800f090:	4a2a      	ldr	r2, [pc, #168]	@ (800f13c <SwitchClass+0x19c>)
 800f092:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
                        MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 800f096:	4b28      	ldr	r3, [pc, #160]	@ (800f138 <SwitchClass+0x198>)
 800f098:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 800f09c:	4b27      	ldr	r3, [pc, #156]	@ (800f13c <SwitchClass+0x19c>)
 800f09e:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
                        MacCtx.RxWindowCConfig.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 800f0a2:	4b25      	ldr	r3, [pc, #148]	@ (800f138 <SwitchClass+0x198>)
 800f0a4:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 800f0a8:	4b24      	ldr	r3, [pc, #144]	@ (800f13c <SwitchClass+0x19c>)
 800f0aa:	f883 23f9 	strb.w	r2, [r3, #1017]	@ 0x3f9
                        MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C_MULTICAST;
 800f0ae:	4b23      	ldr	r3, [pc, #140]	@ (800f13c <SwitchClass+0x19c>)
 800f0b0:	2203      	movs	r2, #3
 800f0b2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
                        MacCtx.RxWindowCConfig.RxContinuous = true;
 800f0b6:	4b21      	ldr	r3, [pc, #132]	@ (800f13c <SwitchClass+0x19c>)
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
                        break;
 800f0be:	e009      	b.n	800f0d4 <SwitchClass+0x134>
                for( int8_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 800f0c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0c4:	b2db      	uxtb	r3, r3
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	b2db      	uxtb	r3, r3
 800f0ca:	73bb      	strb	r3, [r7, #14]
 800f0cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f0d0:	2b00      	cmp	r3, #0
 800f0d2:	ddb1      	ble.n	800f038 <SwitchClass+0x98>
                    }
                }

                // Set the NodeAckRequested indicator to default
                MacCtx.NodeAckRequested = false;
 800f0d4:	4b19      	ldr	r3, [pc, #100]	@ (800f13c <SwitchClass+0x19c>)
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
                // Set the radio into sleep mode in case we are still in RX mode
                Radio.Sleep( );
 800f0dc:	4b18      	ldr	r3, [pc, #96]	@ (800f140 <SwitchClass+0x1a0>)
 800f0de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f0e0:	4798      	blx	r3

                OpenContinuousRxCWindow( );
 800f0e2:	f001 fa03 	bl	80104ec <OpenContinuousRxCWindow>

                status = LORAMAC_STATUS_OK;
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f0ea:	e01a      	b.n	800f122 <SwitchClass+0x182>
        }
        case CLASS_B:
        {
            status = LoRaMacClassBSwitchClass( deviceClass );
 800f0ec:	79fb      	ldrb	r3, [r7, #7]
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f003 fafe 	bl	80126f0 <LoRaMacClassBSwitchClass>
 800f0f4:	4603      	mov	r3, r0
 800f0f6:	73fb      	strb	r3, [r7, #15]
            if( status == LORAMAC_STATUS_OK )
 800f0f8:	7bfb      	ldrb	r3, [r7, #15]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d113      	bne.n	800f126 <SwitchClass+0x186>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f0fe:	4a0e      	ldr	r2, [pc, #56]	@ (800f138 <SwitchClass+0x198>)
 800f100:	79fb      	ldrb	r3, [r7, #7]
 800f102:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104
            }
            break;
 800f106:	e00e      	b.n	800f126 <SwitchClass+0x186>
        }
        case CLASS_C:
        {
            if( deviceClass == CLASS_A )
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d10d      	bne.n	800f12a <SwitchClass+0x18a>
            {
                Nvm.MacGroup2.DeviceClass = deviceClass;
 800f10e:	4a0a      	ldr	r2, [pc, #40]	@ (800f138 <SwitchClass+0x198>)
 800f110:	79fb      	ldrb	r3, [r7, #7]
 800f112:	f882 3104 	strb.w	r3, [r2, #260]	@ 0x104

                // Set the radio into sleep to setup a defined state
                Radio.Sleep( );
 800f116:	4b0a      	ldr	r3, [pc, #40]	@ (800f140 <SwitchClass+0x1a0>)
 800f118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f11a:	4798      	blx	r3

                status = LORAMAC_STATUS_OK;
 800f11c:	2300      	movs	r3, #0
 800f11e:	73fb      	strb	r3, [r7, #15]
            }
            break;
 800f120:	e003      	b.n	800f12a <SwitchClass+0x18a>
            break;
 800f122:	bf00      	nop
 800f124:	e002      	b.n	800f12c <SwitchClass+0x18c>
            break;
 800f126:	bf00      	nop
 800f128:	e000      	b.n	800f12c <SwitchClass+0x18c>
            break;
 800f12a:	bf00      	nop
        }
    }

    return status;
 800f12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f12e:	4618      	mov	r0, r3
 800f130:	3710      	adds	r7, #16
 800f132:	46bd      	mov	sp, r7
 800f134:	bdb0      	pop	{r4, r5, r7, pc}
 800f136:	bf00      	nop
 800f138:	20000b90 	.word	0x20000b90
 800f13c:	20000670 	.word	0x20000670
 800f140:	0801c500 	.word	0x0801c500

0800f144 <GetMaxAppPayloadWithoutFOptsLength>:

static uint8_t GetMaxAppPayloadWithoutFOptsLength( int8_t datarate )
{
 800f144:	b580      	push	{r7, lr}
 800f146:	b086      	sub	sp, #24
 800f148:	af00      	add	r7, sp, #0
 800f14a:	4603      	mov	r3, r0
 800f14c:	71fb      	strb	r3, [r7, #7]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Setup PHY request
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f14e:	4b10      	ldr	r3, [pc, #64]	@ (800f190 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f150:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f154:	74bb      	strb	r3, [r7, #18]
    getPhy.Datarate = datarate;
 800f156:	79fb      	ldrb	r3, [r7, #7]
 800f158:	747b      	strb	r3, [r7, #17]
    getPhy.Attribute = PHY_MAX_PAYLOAD;
 800f15a:	230d      	movs	r3, #13
 800f15c:	743b      	strb	r3, [r7, #16]
    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    // Get the maximum payload length
    if( Nvm.MacGroup2.MacParams.RepeaterSupport == true )
 800f15e:	4b0c      	ldr	r3, [pc, #48]	@ (800f190 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f160:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800f164:	2b00      	cmp	r3, #0
 800f166:	d001      	beq.n	800f16c <GetMaxAppPayloadWithoutFOptsLength+0x28>
    {
        getPhy.Attribute = PHY_MAX_PAYLOAD_REPEATER;
 800f168:	230e      	movs	r3, #14
 800f16a:	743b      	strb	r3, [r7, #16]
    }
    /* ST_WORKAROUND_END */
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f16c:	4b08      	ldr	r3, [pc, #32]	@ (800f190 <GetMaxAppPayloadWithoutFOptsLength+0x4c>)
 800f16e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f172:	f107 0210 	add.w	r2, r7, #16
 800f176:	4611      	mov	r1, r2
 800f178:	4618      	mov	r0, r3
 800f17a:	f005 f9c3 	bl	8014504 <RegionGetPhyParam>
 800f17e:	4603      	mov	r3, r0
 800f180:	60fb      	str	r3, [r7, #12]

    return phyParam.Value;
 800f182:	68fb      	ldr	r3, [r7, #12]
 800f184:	b2db      	uxtb	r3, r3
}
 800f186:	4618      	mov	r0, r3
 800f188:	3718      	adds	r7, #24
 800f18a:	46bd      	mov	sp, r7
 800f18c:	bd80      	pop	{r7, pc}
 800f18e:	bf00      	nop
 800f190:	20000b90 	.word	0x20000b90

0800f194 <ValidatePayloadLength>:

static bool ValidatePayloadLength( uint8_t lenN, int8_t datarate, uint8_t fOptsLen )
{
 800f194:	b580      	push	{r7, lr}
 800f196:	b084      	sub	sp, #16
 800f198:	af00      	add	r7, sp, #0
 800f19a:	4603      	mov	r3, r0
 800f19c:	71fb      	strb	r3, [r7, #7]
 800f19e:	460b      	mov	r3, r1
 800f1a0:	71bb      	strb	r3, [r7, #6]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	717b      	strb	r3, [r7, #5]
    uint16_t maxN = 0;
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	81fb      	strh	r3, [r7, #14]
    uint16_t payloadSize = 0;
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	81bb      	strh	r3, [r7, #12]

    maxN = GetMaxAppPayloadWithoutFOptsLength( datarate );
 800f1ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f7ff ffc6 	bl	800f144 <GetMaxAppPayloadWithoutFOptsLength>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	81fb      	strh	r3, [r7, #14]

    // Calculate the resulting payload size
    payloadSize = ( lenN + fOptsLen );
 800f1bc:	79fb      	ldrb	r3, [r7, #7]
 800f1be:	b29a      	uxth	r2, r3
 800f1c0:	797b      	ldrb	r3, [r7, #5]
 800f1c2:	b29b      	uxth	r3, r3
 800f1c4:	4413      	add	r3, r2
 800f1c6:	81bb      	strh	r3, [r7, #12]

    // Validation of the application payload size
    if( ( payloadSize <= maxN ) && ( payloadSize <= LORAMAC_PHY_MAXPAYLOAD ) )
 800f1c8:	89ba      	ldrh	r2, [r7, #12]
 800f1ca:	89fb      	ldrh	r3, [r7, #14]
 800f1cc:	429a      	cmp	r2, r3
 800f1ce:	d804      	bhi.n	800f1da <ValidatePayloadLength+0x46>
 800f1d0:	89bb      	ldrh	r3, [r7, #12]
 800f1d2:	2bff      	cmp	r3, #255	@ 0xff
 800f1d4:	d801      	bhi.n	800f1da <ValidatePayloadLength+0x46>
    {
        return true;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e000      	b.n	800f1dc <ValidatePayloadLength+0x48>
    }
    return false;
 800f1da:	2300      	movs	r3, #0
}
 800f1dc:	4618      	mov	r0, r3
 800f1de:	3710      	adds	r7, #16
 800f1e0:	46bd      	mov	sp, r7
 800f1e2:	bd80      	pop	{r7, pc}

0800f1e4 <ProcessMacCommands>:
}
*/
/*ST_WORKAROUND_END */

static void ProcessMacCommands( uint8_t *payload, uint8_t macIndex, uint8_t commandsSize, int8_t snr, LoRaMacRxSlot_t rxSlot )
{
 800f1e4:	b590      	push	{r4, r7, lr}
 800f1e6:	b0a5      	sub	sp, #148	@ 0x94
 800f1e8:	af02      	add	r7, sp, #8
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	4608      	mov	r0, r1
 800f1ee:	4611      	mov	r1, r2
 800f1f0:	461a      	mov	r2, r3
 800f1f2:	4603      	mov	r3, r0
 800f1f4:	70fb      	strb	r3, [r7, #3]
 800f1f6:	460b      	mov	r3, r1
 800f1f8:	70bb      	strb	r3, [r7, #2]
 800f1fa:	4613      	mov	r3, r2
 800f1fc:	707b      	strb	r3, [r7, #1]
    uint8_t status = 0;
 800f1fe:	2300      	movs	r3, #0
 800f200:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
    bool adrBlockFound = false;
 800f204:	2300      	movs	r3, #0
 800f206:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 800f20a:	2300      	movs	r3, #0
 800f20c:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( ( rxSlot != RX_SLOT_WIN_1 ) && ( rxSlot != RX_SLOT_WIN_2 ) )
 800f210:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f214:	2b00      	cmp	r3, #0
 800f216:	f000 84b9 	beq.w	800fb8c <ProcessMacCommands+0x9a8>
 800f21a:	f897 3098 	ldrb.w	r3, [r7, #152]	@ 0x98
 800f21e:	2b01      	cmp	r3, #1
 800f220:	f040 84ba 	bne.w	800fb98 <ProcessMacCommands+0x9b4>
        // Do only parse MAC commands for Class A RX windows
        return;
    }
#endif /* LORAMAC_VERSION */

    while( macIndex < commandsSize )
 800f224:	f000 bcb2 	b.w	800fb8c <ProcessMacCommands+0x9a8>
    {
        // Make sure to parse only complete MAC commands
        if( ( LoRaMacCommandsGetCmdSize( payload[macIndex] ) + macIndex ) > commandsSize )
 800f228:	78fb      	ldrb	r3, [r7, #3]
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	4413      	add	r3, r2
 800f22e:	781b      	ldrb	r3, [r3, #0]
 800f230:	4618      	mov	r0, r3
 800f232:	f003 fd41 	bl	8012cb8 <LoRaMacCommandsGetCmdSize>
 800f236:	4603      	mov	r3, r0
 800f238:	461a      	mov	r2, r3
 800f23a:	78fb      	ldrb	r3, [r7, #3]
 800f23c:	441a      	add	r2, r3
 800f23e:	78bb      	ldrb	r3, [r7, #2]
 800f240:	429a      	cmp	r2, r3
 800f242:	f300 84ab 	bgt.w	800fb9c <ProcessMacCommands+0x9b8>
        {
            return;
        }

        // Decode Frame MAC commands
        switch( payload[macIndex++] )
 800f246:	78fb      	ldrb	r3, [r7, #3]
 800f248:	1c5a      	adds	r2, r3, #1
 800f24a:	70fa      	strb	r2, [r7, #3]
 800f24c:	461a      	mov	r2, r3
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	4413      	add	r3, r2
 800f252:	781b      	ldrb	r3, [r3, #0]
 800f254:	3b02      	subs	r3, #2
 800f256:	2b11      	cmp	r3, #17
 800f258:	f200 84a2 	bhi.w	800fba0 <ProcessMacCommands+0x9bc>
 800f25c:	a201      	add	r2, pc, #4	@ (adr r2, 800f264 <ProcessMacCommands+0x80>)
 800f25e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f262:	bf00      	nop
 800f264:	0800f2ad 	.word	0x0800f2ad
 800f268:	0800f2ef 	.word	0x0800f2ef
 800f26c:	0800f46b 	.word	0x0800f46b
 800f270:	0800f4a9 	.word	0x0800f4a9
 800f274:	0800f5a1 	.word	0x0800f5a1
 800f278:	0800f5f1 	.word	0x0800f5f1
 800f27c:	0800f6ad 	.word	0x0800f6ad
 800f280:	0800f703 	.word	0x0800f703
 800f284:	0800f7e7 	.word	0x0800f7e7
 800f288:	0800fba1 	.word	0x0800fba1
 800f28c:	0800fba1 	.word	0x0800fba1
 800f290:	0800f891 	.word	0x0800f891
 800f294:	0800fba1 	.word	0x0800fba1
 800f298:	0800fba1 	.word	0x0800fba1
 800f29c:	0800f9b1 	.word	0x0800f9b1
 800f2a0:	0800f9e5 	.word	0x0800f9e5
 800f2a4:	0800fa75 	.word	0x0800fa75
 800f2a8:	0800faed 	.word	0x0800faed
        {
            case SRV_MAC_LINK_CHECK_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_LINK_CHECK ) == true )
 800f2ac:	2004      	movs	r0, #4
 800f2ae:	f003 fedb 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800f2b2:	4603      	mov	r3, r0
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f000 845c 	beq.w	800fb72 <ProcessMacCommands+0x98e>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_LINK_CHECK );
 800f2ba:	2104      	movs	r1, #4
 800f2bc:	2000      	movs	r0, #0
 800f2be:	f003 fe47 	bl	8012f50 <LoRaMacConfirmQueueSetStatus>
                    MacCtx.MlmeConfirm.DemodMargin = payload[macIndex++];
 800f2c2:	78fb      	ldrb	r3, [r7, #3]
 800f2c4:	1c5a      	adds	r2, r3, #1
 800f2c6:	70fa      	strb	r2, [r7, #3]
 800f2c8:	461a      	mov	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	4413      	add	r3, r2
 800f2ce:	781a      	ldrb	r2, [r3, #0]
 800f2d0:	4bb0      	ldr	r3, [pc, #704]	@ (800f594 <ProcessMacCommands+0x3b0>)
 800f2d2:	f883 2460 	strb.w	r2, [r3, #1120]	@ 0x460
                    MacCtx.MlmeConfirm.NbGateways = payload[macIndex++];
 800f2d6:	78fb      	ldrb	r3, [r7, #3]
 800f2d8:	1c5a      	adds	r2, r3, #1
 800f2da:	70fa      	strb	r2, [r7, #3]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4413      	add	r3, r2
 800f2e2:	781a      	ldrb	r2, [r3, #0]
 800f2e4:	4bab      	ldr	r3, [pc, #684]	@ (800f594 <ProcessMacCommands+0x3b0>)
 800f2e6:	f883 2461 	strb.w	r2, [r3, #1121]	@ 0x461
                }
                break;
 800f2ea:	f000 bc42 	b.w	800fb72 <ProcessMacCommands+0x98e>
            }
            case SRV_MAC_LINK_ADR_REQ:
            {
                LinkAdrReqParams_t linkAdrReq;
                int8_t linkAdrDatarate = DR_0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
                int8_t linkAdrTxPower = TX_POWER_0;
 800f2f4:	2300      	movs	r3, #0
 800f2f6:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56
                uint8_t linkAdrNbRep = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
                uint8_t linkAdrNbBytesParsed = 0;
 800f300:	2300      	movs	r3, #0
 800f302:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
                    }
                    // Update MAC index
                    macIndex += linkAdrNbBytesParsed - 1;
                }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                if( adrBlockFound == false )
 800f306:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800f30a:	f083 0301 	eor.w	r3, r3, #1
 800f30e:	b2db      	uxtb	r3, r3
 800f310:	2b00      	cmp	r3, #0
 800f312:	f000 80a6 	beq.w	800f462 <ProcessMacCommands+0x27e>
                {
                    adrBlockFound = true;
 800f316:	2301      	movs	r3, #1
 800f318:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                    do
                    {
                        // Fill parameter structure
                        linkAdrReq.Payload = &payload[macIndex - 1];
 800f31c:	78fb      	ldrb	r3, [r7, #3]
 800f31e:	3b01      	subs	r3, #1
 800f320:	687a      	ldr	r2, [r7, #4]
 800f322:	4413      	add	r3, r2
 800f324:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        linkAdrReq.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 800f326:	4b9c      	ldr	r3, [pc, #624]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f328:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f32c:	f887 3062 	strb.w	r3, [r7, #98]	@ 0x62
                        linkAdrReq.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f330:	4b99      	ldr	r3, [pc, #612]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f332:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f336:	f887 3061 	strb.w	r3, [r7, #97]	@ 0x61
                        linkAdrReq.CurrentDatarate = Nvm.MacGroup1.ChannelsDatarate;
 800f33a:	4b97      	ldr	r3, [pc, #604]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f33c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f340:	f887 3063 	strb.w	r3, [r7, #99]	@ 0x63
                        linkAdrReq.CurrentTxPower = Nvm.MacGroup1.ChannelsTxPower;
 800f344:	4b94      	ldr	r3, [pc, #592]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f346:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800f34a:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
                        linkAdrReq.CurrentNbRep = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800f34e:	4b92      	ldr	r3, [pc, #584]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f350:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800f354:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65
                        linkAdrReq.Version = Nvm.MacGroup2.Version;
 800f358:	4b8f      	ldr	r3, [pc, #572]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f35a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800f35e:	65bb      	str	r3, [r7, #88]	@ 0x58

                        // There is a fundamental difference in reporting the status
                        // of the LinkAdrRequests when ADR is on or off. When ADR is on, every
                        // LinkAdrAns contains the same value. This does not hold when ADR is off,
                        // where every LinkAdrAns requires an individual status.
                        if( Nvm.MacGroup2.AdrCtrlOn == true )
 800f360:	4b8d      	ldr	r3, [pc, #564]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f362:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 800f366:	2b00      	cmp	r3, #0
 800f368:	d008      	beq.n	800f37c <ProcessMacCommands+0x198>
                        {
                            // When ADR is on, the function RegionLinkAdrReq will take care
                            // about the parsing and interpretation of the LinkAdrRequest block and
                            // it provides one status which shall be applied to every LinkAdrAns
                            linkAdrReq.PayloadSize = commandsSize - ( macIndex - 1 );
 800f36a:	78ba      	ldrb	r2, [r7, #2]
 800f36c:	78fb      	ldrb	r3, [r7, #3]
 800f36e:	1ad3      	subs	r3, r2, r3
 800f370:	b2db      	uxtb	r3, r3
 800f372:	3301      	adds	r3, #1
 800f374:	b2db      	uxtb	r3, r3
 800f376:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
 800f37a:	e002      	b.n	800f382 <ProcessMacCommands+0x19e>
                            // When ADR is off, this function will loop over the individual LinkAdrRequests
                            // and will call RegionLinkAdrReq for each individually, as every request
                            // requires an individual answer.
                            // When ADR is off, the function RegionLinkAdrReq ignores the new values for
                            // ChannelsDatarate, ChannelsTxPower and ChannelsNbTrans.
                            linkAdrReq.PayloadSize = 5;
 800f37c:	2305      	movs	r3, #5
 800f37e:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
                        }

                        // Process the ADR requests
                        status = RegionLinkAdrReq( Nvm.MacGroup2.Region, &linkAdrReq, &linkAdrDatarate,
 800f382:	4b85      	ldr	r3, [pc, #532]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f384:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800f388:	f107 0456 	add.w	r4, r7, #86	@ 0x56
 800f38c:	f107 0257 	add.w	r2, r7, #87	@ 0x57
 800f390:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800f394:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800f398:	9301      	str	r3, [sp, #4]
 800f39a:	f107 0355 	add.w	r3, r7, #85	@ 0x55
 800f39e:	9300      	str	r3, [sp, #0]
 800f3a0:	4623      	mov	r3, r4
 800f3a2:	f005 f96c 	bl	801467e <RegionLinkAdrReq>
 800f3a6:	4603      	mov	r3, r0
 800f3a8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                                                &linkAdrTxPower, &linkAdrNbRep, &linkAdrNbBytesParsed );

                        if( ( status & 0x07 ) == 0x07 )
 800f3ac:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f3b0:	f003 0307 	and.w	r3, r3, #7
 800f3b4:	2b07      	cmp	r3, #7
 800f3b6:	d119      	bne.n	800f3ec <ProcessMacCommands+0x208>
                        {
                            // Set the status that the datarate has been increased
                            if( linkAdrDatarate > Nvm.MacGroup1.ChannelsDatarate )
 800f3b8:	4b77      	ldr	r3, [pc, #476]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f3ba:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 800f3be:	f997 3057 	ldrsb.w	r3, [r7, #87]	@ 0x57
 800f3c2:	429a      	cmp	r2, r3
 800f3c4:	da03      	bge.n	800f3ce <ProcessMacCommands+0x1ea>
                            {
                                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = true;
 800f3c6:	4b74      	ldr	r3, [pc, #464]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f3c8:	2201      	movs	r2, #1
 800f3ca:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                            }
                            Nvm.MacGroup1.ChannelsDatarate = linkAdrDatarate;
 800f3ce:	f997 2057 	ldrsb.w	r2, [r7, #87]	@ 0x57
 800f3d2:	4b71      	ldr	r3, [pc, #452]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f3d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                            Nvm.MacGroup1.ChannelsTxPower = linkAdrTxPower;
 800f3d8:	f997 2056 	ldrsb.w	r2, [r7, #86]	@ 0x56
 800f3dc:	4b6e      	ldr	r3, [pc, #440]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f3de:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
                            Nvm.MacGroup2.MacParams.ChannelsNbTrans = linkAdrNbRep;
 800f3e2:	f897 2055 	ldrb.w	r2, [r7, #85]	@ 0x55
 800f3e6:	4b6c      	ldr	r3, [pc, #432]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f3e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
                        }

                        // Add the answers to the buffer
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f3ec:	2300      	movs	r3, #0
 800f3ee:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f3f2:	e00b      	b.n	800f40c <ProcessMacCommands+0x228>
                        {
                            LoRaMacCommandsAddCmd( MOTE_MAC_LINK_ADR_ANS, &status, 1 );
 800f3f4:	f107 036b 	add.w	r3, r7, #107	@ 0x6b
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	4619      	mov	r1, r3
 800f3fc:	2003      	movs	r0, #3
 800f3fe:	f003 fb0b 	bl	8012a18 <LoRaMacCommandsAddCmd>
                        for( uint8_t i = 0; i < ( linkAdrNbBytesParsed / 5 ); i++ )
 800f402:	f897 3086 	ldrb.w	r3, [r7, #134]	@ 0x86
 800f406:	3301      	adds	r3, #1
 800f408:	f887 3086 	strb.w	r3, [r7, #134]	@ 0x86
 800f40c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800f410:	4a62      	ldr	r2, [pc, #392]	@ (800f59c <ProcessMacCommands+0x3b8>)
 800f412:	fba2 2303 	umull	r2, r3, r2, r3
 800f416:	089b      	lsrs	r3, r3, #2
 800f418:	b2db      	uxtb	r3, r3
 800f41a:	f897 2086 	ldrb.w	r2, [r7, #134]	@ 0x86
 800f41e:	429a      	cmp	r2, r3
 800f420:	d3e8      	bcc.n	800f3f4 <ProcessMacCommands+0x210>
                        }
                        // Update MAC index
                        macIndex += linkAdrNbBytesParsed - 1;
 800f422:	f897 2054 	ldrb.w	r2, [r7, #84]	@ 0x54
 800f426:	78fb      	ldrb	r3, [r7, #3]
 800f428:	4413      	add	r3, r2
 800f42a:	b2db      	uxtb	r3, r3
 800f42c:	3b01      	subs	r3, #1
 800f42e:	70fb      	strb	r3, [r7, #3]

                        // Check to prevent invalid access
                        if( macIndex >= commandsSize )
 800f430:	78fa      	ldrb	r2, [r7, #3]
 800f432:	78bb      	ldrb	r3, [r7, #2]
 800f434:	429a      	cmp	r2, r3
 800f436:	d20a      	bcs.n	800f44e <ProcessMacCommands+0x26a>
                            break;

                    } while( payload[macIndex++] == SRV_MAC_LINK_ADR_REQ );
 800f438:	78fb      	ldrb	r3, [r7, #3]
 800f43a:	1c5a      	adds	r2, r3, #1
 800f43c:	70fa      	strb	r2, [r7, #3]
 800f43e:	461a      	mov	r2, r3
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4413      	add	r3, r2
 800f444:	781b      	ldrb	r3, [r3, #0]
 800f446:	2b03      	cmp	r3, #3
 800f448:	f43f af68 	beq.w	800f31c <ProcessMacCommands+0x138>
 800f44c:	e000      	b.n	800f450 <ProcessMacCommands+0x26c>
                            break;
 800f44e:	bf00      	nop

                    if( macIndex < commandsSize )
 800f450:	78fa      	ldrb	r2, [r7, #3]
 800f452:	78bb      	ldrb	r3, [r7, #2]
 800f454:	429a      	cmp	r2, r3
 800f456:	f080 838e 	bcs.w	800fb76 <ProcessMacCommands+0x992>
                    {
                        // Decrease the index such that it points to the next MAC command
                        macIndex--;
 800f45a:	78fb      	ldrb	r3, [r7, #3]
 800f45c:	3b01      	subs	r3, #1
 800f45e:	70fb      	strb	r3, [r7, #3]
                {
                    // Increase the index by the MAC command size (without command)
                    macIndex += 4;
                }
#endif /* LORAMAC_VERSION */
                break;
 800f460:	e389      	b.n	800fb76 <ProcessMacCommands+0x992>
                    macIndex += 4;
 800f462:	78fb      	ldrb	r3, [r7, #3]
 800f464:	3304      	adds	r3, #4
 800f466:	70fb      	strb	r3, [r7, #3]
                break;
 800f468:	e385      	b.n	800fb76 <ProcessMacCommands+0x992>
            }
            case SRV_MAC_DUTY_CYCLE_REQ:
            {
                Nvm.MacGroup2.MaxDCycle = payload[macIndex++] & 0x0F;
 800f46a:	78fb      	ldrb	r3, [r7, #3]
 800f46c:	1c5a      	adds	r2, r3, #1
 800f46e:	70fa      	strb	r2, [r7, #3]
 800f470:	461a      	mov	r2, r3
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	4413      	add	r3, r2
 800f476:	781b      	ldrb	r3, [r3, #0]
 800f478:	f003 030f 	and.w	r3, r3, #15
 800f47c:	b2da      	uxtb	r2, r3
 800f47e:	4b46      	ldr	r3, [pc, #280]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f480:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
                Nvm.MacGroup2.AggregatedDCycle = 1 << Nvm.MacGroup2.MaxDCycle;
 800f484:	4b44      	ldr	r3, [pc, #272]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f486:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800f48a:	461a      	mov	r2, r3
 800f48c:	2301      	movs	r3, #1
 800f48e:	4093      	lsls	r3, r2
 800f490:	b29a      	uxth	r2, r3
 800f492:	4b41      	ldr	r3, [pc, #260]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f494:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c
                LoRaMacCommandsAddCmd( MOTE_MAC_DUTY_CYCLE_ANS, macCmdPayload, 0 );
 800f498:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f49c:	2200      	movs	r2, #0
 800f49e:	4619      	mov	r1, r3
 800f4a0:	2004      	movs	r0, #4
 800f4a2:	f003 fab9 	bl	8012a18 <LoRaMacCommandsAddCmd>
                break;
 800f4a6:	e371      	b.n	800fb8c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_RX_PARAM_SETUP_REQ:
            {
                RxParamSetupReqParams_t rxParamSetupReq;
                status = 0x07;
 800f4a8:	2307      	movs	r3, #7
 800f4aa:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                rxParamSetupReq.DrOffset = ( payload[macIndex] >> 4 ) & 0x07;
 800f4ae:	78fb      	ldrb	r3, [r7, #3]
 800f4b0:	687a      	ldr	r2, [r7, #4]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	781b      	ldrb	r3, [r3, #0]
 800f4b6:	091b      	lsrs	r3, r3, #4
 800f4b8:	b2db      	uxtb	r3, r3
 800f4ba:	b25b      	sxtb	r3, r3
 800f4bc:	f003 0307 	and.w	r3, r3, #7
 800f4c0:	b25b      	sxtb	r3, r3
 800f4c2:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
                rxParamSetupReq.Datarate = payload[macIndex] & 0x0F;
 800f4c6:	78fb      	ldrb	r3, [r7, #3]
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	781b      	ldrb	r3, [r3, #0]
 800f4ce:	b25b      	sxtb	r3, r3
 800f4d0:	f003 030f 	and.w	r3, r3, #15
 800f4d4:	b25b      	sxtb	r3, r3
 800f4d6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
                macIndex++;
 800f4da:	78fb      	ldrb	r3, [r7, #3]
 800f4dc:	3301      	adds	r3, #1
 800f4de:	70fb      	strb	r3, [r7, #3]

                rxParamSetupReq.Frequency = ( uint32_t ) payload[macIndex++];
 800f4e0:	78fb      	ldrb	r3, [r7, #3]
 800f4e2:	1c5a      	adds	r2, r3, #1
 800f4e4:	70fa      	strb	r2, [r7, #3]
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	781b      	ldrb	r3, [r3, #0]
 800f4ee:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f4f0:	78fb      	ldrb	r3, [r7, #3]
 800f4f2:	1c5a      	adds	r2, r3, #1
 800f4f4:	70fa      	strb	r2, [r7, #3]
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	781b      	ldrb	r3, [r3, #0]
 800f4fe:	021a      	lsls	r2, r3, #8
 800f500:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f502:	4313      	orrs	r3, r2
 800f504:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f506:	78fb      	ldrb	r3, [r7, #3]
 800f508:	1c5a      	adds	r2, r3, #1
 800f50a:	70fa      	strb	r2, [r7, #3]
 800f50c:	461a      	mov	r2, r3
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	4413      	add	r3, r2
 800f512:	781b      	ldrb	r3, [r3, #0]
 800f514:	041a      	lsls	r2, r3, #16
 800f516:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f518:	4313      	orrs	r3, r2
 800f51a:	653b      	str	r3, [r7, #80]	@ 0x50
                rxParamSetupReq.Frequency *= 100;
 800f51c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f51e:	2264      	movs	r2, #100	@ 0x64
 800f520:	fb02 f303 	mul.w	r3, r2, r3
 800f524:	653b      	str	r3, [r7, #80]	@ 0x50

                // Perform request on region
                status = RegionRxParamSetupReq( Nvm.MacGroup2.Region, &rxParamSetupReq );
 800f526:	4b1c      	ldr	r3, [pc, #112]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f528:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f52c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 800f530:	4611      	mov	r1, r2
 800f532:	4618      	mov	r0, r3
 800f534:	f005 f8bd 	bl	80146b2 <RegionRxParamSetupReq>
 800f538:	4603      	mov	r3, r0
 800f53a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( status & 0x07 ) == 0x07 )
 800f53e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f542:	f003 0307 	and.w	r3, r3, #7
 800f546:	2b07      	cmp	r3, #7
 800f548:	d117      	bne.n	800f57a <ProcessMacCommands+0x396>
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel.Datarate = rxParamSetupReq.Datarate;
 800f54a:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f54e:	b2da      	uxtb	r2, r3
 800f550:	4b11      	ldr	r3, [pc, #68]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f552:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
                    Nvm.MacGroup2.MacParams.RxCChannel.Datarate = rxParamSetupReq.Datarate;
 800f556:	f997 304c 	ldrsb.w	r3, [r7, #76]	@ 0x4c
 800f55a:	b2da      	uxtb	r2, r3
 800f55c:	4b0e      	ldr	r3, [pc, #56]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f55e:	f883 2070 	strb.w	r2, [r3, #112]	@ 0x70
                    Nvm.MacGroup2.MacParams.Rx2Channel.Frequency = rxParamSetupReq.Frequency;
 800f562:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f564:	4a0c      	ldr	r2, [pc, #48]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f566:	6653      	str	r3, [r2, #100]	@ 0x64
                    Nvm.MacGroup2.MacParams.RxCChannel.Frequency = rxParamSetupReq.Frequency;
 800f568:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800f56a:	4a0b      	ldr	r2, [pc, #44]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f56c:	66d3      	str	r3, [r2, #108]	@ 0x6c
                    Nvm.MacGroup2.MacParams.Rx1DrOffset = rxParamSetupReq.DrOffset;
 800f56e:	f997 304d 	ldrsb.w	r3, [r7, #77]	@ 0x4d
 800f572:	b2da      	uxtb	r2, r3
 800f574:	4b08      	ldr	r3, [pc, #32]	@ (800f598 <ProcessMacCommands+0x3b4>)
 800f576:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
                }
                macCmdPayload[0] = status;
 800f57a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f57e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_PARAM_SETUP_ANS, macCmdPayload, 1 );
 800f582:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f586:	2201      	movs	r2, #1
 800f588:	4619      	mov	r1, r3
 800f58a:	2005      	movs	r0, #5
 800f58c:	f003 fa44 	bl	8012a18 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f590:	e2fc      	b.n	800fb8c <ProcessMacCommands+0x9a8>
 800f592:	bf00      	nop
 800f594:	20000670 	.word	0x20000670
 800f598:	20000b90 	.word	0x20000b90
 800f59c:	cccccccd 	.word	0xcccccccd
            }
            case SRV_MAC_DEV_STATUS_REQ:
            {
                uint8_t batteryLevel = BAT_LEVEL_NO_MEASURE;
 800f5a0:	23ff      	movs	r3, #255	@ 0xff
 800f5a2:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                if( ( MacCtx.MacCallbacks != NULL ) && ( MacCtx.MacCallbacks->GetBatteryLevel != NULL ) )
 800f5a6:	4bb7      	ldr	r3, [pc, #732]	@ (800f884 <ProcessMacCommands+0x6a0>)
 800f5a8:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00d      	beq.n	800f5cc <ProcessMacCommands+0x3e8>
 800f5b0:	4bb4      	ldr	r3, [pc, #720]	@ (800f884 <ProcessMacCommands+0x6a0>)
 800f5b2:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d007      	beq.n	800f5cc <ProcessMacCommands+0x3e8>
                {
                    batteryLevel = MacCtx.MacCallbacks->GetBatteryLevel( );
 800f5bc:	4bb1      	ldr	r3, [pc, #708]	@ (800f884 <ProcessMacCommands+0x6a0>)
 800f5be:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 800f5c2:	681b      	ldr	r3, [r3, #0]
 800f5c4:	4798      	blx	r3
 800f5c6:	4603      	mov	r3, r0
 800f5c8:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
                }
                macCmdPayload[0] = batteryLevel;
 800f5cc:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 800f5d0:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                macCmdPayload[1] = ( uint8_t )( snr & 0x3F );
 800f5d4:	787b      	ldrb	r3, [r7, #1]
 800f5d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f5da:	b2db      	uxtb	r3, r3
 800f5dc:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                LoRaMacCommandsAddCmd( MOTE_MAC_DEV_STATUS_ANS, macCmdPayload, 2 );
 800f5e0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f5e4:	2202      	movs	r2, #2
 800f5e6:	4619      	mov	r1, r3
 800f5e8:	2006      	movs	r0, #6
 800f5ea:	f003 fa15 	bl	8012a18 <LoRaMacCommandsAddCmd>
                break;
 800f5ee:	e2cd      	b.n	800fb8c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_NEW_CHANNEL_REQ:
            {
                NewChannelReqParams_t newChannelReq;
                ChannelParams_t chParam;
                status = 0x03;
 800f5f0:	2303      	movs	r3, #3
 800f5f2:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                newChannelReq.ChannelId = payload[macIndex++];
 800f5f6:	78fb      	ldrb	r3, [r7, #3]
 800f5f8:	1c5a      	adds	r2, r3, #1
 800f5fa:	70fa      	strb	r2, [r7, #3]
 800f5fc:	461a      	mov	r2, r3
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	4413      	add	r3, r2
 800f602:	781b      	ldrb	r3, [r3, #0]
 800f604:	b25b      	sxtb	r3, r3
 800f606:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
                newChannelReq.NewChannel = &chParam;
 800f60a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800f60e:	647b      	str	r3, [r7, #68]	@ 0x44

                chParam.Frequency = ( uint32_t ) payload[macIndex++];
 800f610:	78fb      	ldrb	r3, [r7, #3]
 800f612:	1c5a      	adds	r2, r3, #1
 800f614:	70fa      	strb	r2, [r7, #3]
 800f616:	461a      	mov	r2, r3
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	4413      	add	r3, r2
 800f61c:	781b      	ldrb	r3, [r3, #0]
 800f61e:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f620:	78fb      	ldrb	r3, [r7, #3]
 800f622:	1c5a      	adds	r2, r3, #1
 800f624:	70fa      	strb	r2, [r7, #3]
 800f626:	461a      	mov	r2, r3
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	4413      	add	r3, r2
 800f62c:	781b      	ldrb	r3, [r3, #0]
 800f62e:	021a      	lsls	r2, r3, #8
 800f630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f632:	4313      	orrs	r3, r2
 800f634:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f636:	78fb      	ldrb	r3, [r7, #3]
 800f638:	1c5a      	adds	r2, r3, #1
 800f63a:	70fa      	strb	r2, [r7, #3]
 800f63c:	461a      	mov	r2, r3
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	4413      	add	r3, r2
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	041a      	lsls	r2, r3, #16
 800f646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f648:	4313      	orrs	r3, r2
 800f64a:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Frequency *= 100;
 800f64c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f64e:	2264      	movs	r2, #100	@ 0x64
 800f650:	fb02 f303 	mul.w	r3, r2, r3
 800f654:	63bb      	str	r3, [r7, #56]	@ 0x38
                chParam.Rx1Frequency = 0;
 800f656:	2300      	movs	r3, #0
 800f658:	63fb      	str	r3, [r7, #60]	@ 0x3c
                chParam.DrRange.Value = payload[macIndex++];
 800f65a:	78fb      	ldrb	r3, [r7, #3]
 800f65c:	1c5a      	adds	r2, r3, #1
 800f65e:	70fa      	strb	r2, [r7, #3]
 800f660:	461a      	mov	r2, r3
 800f662:	687b      	ldr	r3, [r7, #4]
 800f664:	4413      	add	r3, r2
 800f666:	781b      	ldrb	r3, [r3, #0]
 800f668:	b25b      	sxtb	r3, r3
 800f66a:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40

                status = ( uint8_t )RegionNewChannelReq( Nvm.MacGroup2.Region, &newChannelReq );
 800f66e:	4b86      	ldr	r3, [pc, #536]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f670:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f674:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800f678:	4611      	mov	r1, r2
 800f67a:	4618      	mov	r0, r3
 800f67c:	f005 f82c 	bl	80146d8 <RegionNewChannelReq>
 800f680:	4603      	mov	r3, r0
 800f682:	b2db      	uxtb	r3, r3
 800f684:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f688:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f68c:	b25b      	sxtb	r3, r3
 800f68e:	2b00      	cmp	r3, #0
 800f690:	f2c0 8273 	blt.w	800fb7a <ProcessMacCommands+0x996>
                {
                    macCmdPayload[0] = status;
 800f694:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f698:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_NEW_CHANNEL_ANS, macCmdPayload, 1 );
 800f69c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f6a0:	2201      	movs	r2, #1
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	2007      	movs	r0, #7
 800f6a6:	f003 f9b7 	bl	8012a18 <LoRaMacCommandsAddCmd>
                }
                break;
 800f6aa:	e266      	b.n	800fb7a <ProcessMacCommands+0x996>
            }
            case SRV_MAC_RX_TIMING_SETUP_REQ:
            {
                uint8_t delay = payload[macIndex++] & 0x0F;
 800f6ac:	78fb      	ldrb	r3, [r7, #3]
 800f6ae:	1c5a      	adds	r2, r3, #1
 800f6b0:	70fa      	strb	r2, [r7, #3]
 800f6b2:	461a      	mov	r2, r3
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	4413      	add	r3, r2
 800f6b8:	781b      	ldrb	r3, [r3, #0]
 800f6ba:	f003 030f 	and.w	r3, r3, #15
 800f6be:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84

                if( delay == 0 )
 800f6c2:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d104      	bne.n	800f6d4 <ProcessMacCommands+0x4f0>
                {
                    delay++;
 800f6ca:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f6ce:	3301      	adds	r3, #1
 800f6d0:	f887 3084 	strb.w	r3, [r7, #132]	@ 0x84
                }
                Nvm.MacGroup2.MacParams.ReceiveDelay1 = delay * 1000;
 800f6d4:	f897 3084 	ldrb.w	r3, [r7, #132]	@ 0x84
 800f6d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800f6dc:	fb02 f303 	mul.w	r3, r2, r3
 800f6e0:	461a      	mov	r2, r3
 800f6e2:	4b69      	ldr	r3, [pc, #420]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f6e4:	651a      	str	r2, [r3, #80]	@ 0x50
                Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay1 + 1000;
 800f6e6:	4b68      	ldr	r3, [pc, #416]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f6e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f6ea:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800f6ee:	4a66      	ldr	r2, [pc, #408]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f6f0:	6553      	str	r3, [r2, #84]	@ 0x54
                LoRaMacCommandsAddCmd( MOTE_MAC_RX_TIMING_SETUP_ANS, macCmdPayload, 0 );
 800f6f2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f6f6:	2200      	movs	r2, #0
 800f6f8:	4619      	mov	r1, r3
 800f6fa:	2008      	movs	r0, #8
 800f6fc:	f003 f98c 	bl	8012a18 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
                break;
 800f700:	e244      	b.n	800fb8c <ProcessMacCommands+0x9a8>
            case SRV_MAC_TX_PARAM_SETUP_REQ:
            {
                TxParamSetupReqParams_t txParamSetupReq;
                GetPhyParams_t getPhy;
                PhyParam_t phyParam;
                uint8_t eirpDwellTime = payload[macIndex++];
 800f702:	78fb      	ldrb	r3, [r7, #3]
 800f704:	1c5a      	adds	r2, r3, #1
 800f706:	70fa      	strb	r2, [r7, #3]
 800f708:	461a      	mov	r2, r3
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	4413      	add	r3, r2
 800f70e:	781b      	ldrb	r3, [r3, #0]
 800f710:	f887 3076 	strb.w	r3, [r7, #118]	@ 0x76

                txParamSetupReq.UplinkDwellTime = 0;
 800f714:	2300      	movs	r3, #0
 800f716:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                txParamSetupReq.DownlinkDwellTime = 0;
 800f71a:	2300      	movs	r3, #0
 800f71c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

                if( ( eirpDwellTime & 0x20 ) == 0x20 )
 800f720:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f724:	f003 0320 	and.w	r3, r3, #32
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d002      	beq.n	800f732 <ProcessMacCommands+0x54e>
                {
                    txParamSetupReq.DownlinkDwellTime = 1;
 800f72c:	2301      	movs	r3, #1
 800f72e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
                }
                if( ( eirpDwellTime & 0x10 ) == 0x10 )
 800f732:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f736:	f003 0310 	and.w	r3, r3, #16
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d002      	beq.n	800f744 <ProcessMacCommands+0x560>
                {
                    txParamSetupReq.UplinkDwellTime = 1;
 800f73e:	2301      	movs	r3, #1
 800f740:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
                }
                txParamSetupReq.MaxEirp = eirpDwellTime & 0x0F;
 800f744:	f897 3076 	ldrb.w	r3, [r7, #118]	@ 0x76
 800f748:	f003 030f 	and.w	r3, r3, #15
 800f74c:	b2db      	uxtb	r3, r3
 800f74e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

                // Check the status for correctness
                if( RegionTxParamSetupReq( Nvm.MacGroup2.Region, &txParamSetupReq ) != -1 )
 800f752:	4b4d      	ldr	r3, [pc, #308]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f754:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f758:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800f75c:	4611      	mov	r1, r2
 800f75e:	4618      	mov	r0, r3
 800f760:	f004 ffcd 	bl	80146fe <RegionTxParamSetupReq>
 800f764:	4603      	mov	r3, r0
 800f766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f76a:	f000 8208 	beq.w	800fb7e <ProcessMacCommands+0x99a>
                {
                    // Accept command
                    Nvm.MacGroup2.MacParams.UplinkDwellTime = txParamSetupReq.UplinkDwellTime;
 800f76e:	f897 2034 	ldrb.w	r2, [r7, #52]	@ 0x34
 800f772:	4b45      	ldr	r3, [pc, #276]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f774:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
                    Nvm.MacGroup2.MacParams.DownlinkDwellTime = txParamSetupReq.DownlinkDwellTime;
 800f778:	f897 2035 	ldrb.w	r2, [r7, #53]	@ 0x35
 800f77c:	4b42      	ldr	r3, [pc, #264]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f77e:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
                    Nvm.MacGroup2.MacParams.MaxEirp = LoRaMacMaxEirpTable[txParamSetupReq.MaxEirp];
 800f782:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800f786:	461a      	mov	r2, r3
 800f788:	4b40      	ldr	r3, [pc, #256]	@ (800f88c <ProcessMacCommands+0x6a8>)
 800f78a:	5c9b      	ldrb	r3, [r3, r2]
 800f78c:	4618      	mov	r0, r3
 800f78e:	f7f1 f81d 	bl	80007cc <__aeabi_ui2f>
 800f792:	4603      	mov	r3, r0
 800f794:	4a3c      	ldr	r2, [pc, #240]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f796:	6793      	str	r3, [r2, #120]	@ 0x78
                    // Update the datarate in case of the new configuration limits it
                    getPhy.Attribute = PHY_MIN_TX_DR;
 800f798:	2302      	movs	r3, #2
 800f79a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800f79e:	4b3a      	ldr	r3, [pc, #232]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f7a0:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800f7a4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
                    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 800f7a8:	4b37      	ldr	r3, [pc, #220]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f7aa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f7ae:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800f7b2:	4611      	mov	r1, r2
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	f004 fea5 	bl	8014504 <RegionGetPhyParam>
 800f7ba:	4603      	mov	r3, r0
 800f7bc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    Nvm.MacGroup1.ChannelsDatarate = MAX( Nvm.MacGroup1.ChannelsDatarate, ( int8_t )phyParam.Value );
 800f7be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f7c0:	b25a      	sxtb	r2, r3
 800f7c2:	4b31      	ldr	r3, [pc, #196]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f7c4:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	bfb8      	it	lt
 800f7cc:	4613      	movlt	r3, r2
 800f7ce:	b25a      	sxtb	r2, r3
 800f7d0:	4b2d      	ldr	r3, [pc, #180]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f7d2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                    // Add command response
                    LoRaMacCommandsAddCmd( MOTE_MAC_TX_PARAM_SETUP_ANS, macCmdPayload, 0 );
 800f7d6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f7da:	2200      	movs	r2, #0
 800f7dc:	4619      	mov	r1, r3
 800f7de:	2009      	movs	r0, #9
 800f7e0:	f003 f91a 	bl	8012a18 <LoRaMacCommandsAddCmd>
                }
                break;
 800f7e4:	e1cb      	b.n	800fb7e <ProcessMacCommands+0x99a>
            }
            case SRV_MAC_DL_CHANNEL_REQ:
            {
                DlChannelReqParams_t dlChannelReq;
                status = 0x03;
 800f7e6:	2303      	movs	r3, #3
 800f7e8:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                dlChannelReq.ChannelId = payload[macIndex++];
 800f7ec:	78fb      	ldrb	r3, [r7, #3]
 800f7ee:	1c5a      	adds	r2, r3, #1
 800f7f0:	70fa      	strb	r2, [r7, #3]
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	4413      	add	r3, r2
 800f7f8:	781b      	ldrb	r3, [r3, #0]
 800f7fa:	f887 3020 	strb.w	r3, [r7, #32]
                dlChannelReq.Rx1Frequency = ( uint32_t ) payload[macIndex++];
 800f7fe:	78fb      	ldrb	r3, [r7, #3]
 800f800:	1c5a      	adds	r2, r3, #1
 800f802:	70fa      	strb	r2, [r7, #3]
 800f804:	461a      	mov	r2, r3
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	4413      	add	r3, r2
 800f80a:	781b      	ldrb	r3, [r3, #0]
 800f80c:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 8;
 800f80e:	78fb      	ldrb	r3, [r7, #3]
 800f810:	1c5a      	adds	r2, r3, #1
 800f812:	70fa      	strb	r2, [r7, #3]
 800f814:	461a      	mov	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	4413      	add	r3, r2
 800f81a:	781b      	ldrb	r3, [r3, #0]
 800f81c:	021a      	lsls	r2, r3, #8
 800f81e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f820:	4313      	orrs	r3, r2
 800f822:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency |= ( uint32_t ) payload[macIndex++] << 16;
 800f824:	78fb      	ldrb	r3, [r7, #3]
 800f826:	1c5a      	adds	r2, r3, #1
 800f828:	70fa      	strb	r2, [r7, #3]
 800f82a:	461a      	mov	r2, r3
 800f82c:	687b      	ldr	r3, [r7, #4]
 800f82e:	4413      	add	r3, r2
 800f830:	781b      	ldrb	r3, [r3, #0]
 800f832:	041a      	lsls	r2, r3, #16
 800f834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f836:	4313      	orrs	r3, r2
 800f838:	627b      	str	r3, [r7, #36]	@ 0x24
                dlChannelReq.Rx1Frequency *= 100;
 800f83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f83c:	2264      	movs	r2, #100	@ 0x64
 800f83e:	fb02 f303 	mul.w	r3, r2, r3
 800f842:	627b      	str	r3, [r7, #36]	@ 0x24

                status = ( uint8_t )RegionDlChannelReq( Nvm.MacGroup2.Region, &dlChannelReq );
 800f844:	4b10      	ldr	r3, [pc, #64]	@ (800f888 <ProcessMacCommands+0x6a4>)
 800f846:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800f84a:	f107 0220 	add.w	r2, r7, #32
 800f84e:	4611      	mov	r1, r2
 800f850:	4618      	mov	r0, r3
 800f852:	f004 ff67 	bl	8014724 <RegionDlChannelReq>
 800f856:	4603      	mov	r3, r0
 800f858:	b2db      	uxtb	r3, r3
 800f85a:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

                if( ( int8_t )status >= 0 )
 800f85e:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f862:	b25b      	sxtb	r3, r3
 800f864:	2b00      	cmp	r3, #0
 800f866:	f2c0 818c 	blt.w	800fb82 <ProcessMacCommands+0x99e>
                {
                    macCmdPayload[0] = status;
 800f86a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800f86e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    LoRaMacCommandsAddCmd( MOTE_MAC_DL_CHANNEL_ANS, macCmdPayload, 1 );
 800f872:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800f876:	2201      	movs	r2, #1
 800f878:	4619      	mov	r1, r3
 800f87a:	200a      	movs	r0, #10
 800f87c:	f003 f8cc 	bl	8012a18 <LoRaMacCommandsAddCmd>
                    /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                    // Setup indication to inform the application
                    /* SetMlmeScheduleUplinkIndication( ); */
                    /*ST_WORKAROUND_END */
                }
                break;
 800f880:	e17f      	b.n	800fb82 <ProcessMacCommands+0x99e>
 800f882:	bf00      	nop
 800f884:	20000670 	.word	0x20000670
 800f888:	20000b90 	.word	0x20000b90
 800f88c:	0801c4b8 	.word	0x0801c4b8
            }
            case SRV_MAC_DEVICE_TIME_ANS:
            {
                // The mote time can be updated only when the time is received in classA
                // receive windows only.
                if( LoRaMacConfirmQueueIsCmdActive( MLME_DEVICE_TIME ) == true )
 800f890:	2009      	movs	r0, #9
 800f892:	f003 fbe9 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800f896:	4603      	mov	r3, r0
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 8084 	beq.w	800f9a6 <ProcessMacCommands+0x7c2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
 800f89e:	2109      	movs	r1, #9
 800f8a0:	2000      	movs	r0, #0
 800f8a2:	f003 fb55 	bl	8012f50 <LoRaMacConfirmQueueSetStatus>

                    SysTime_t gpsEpochTime = { 0 };
 800f8a6:	f107 0318 	add.w	r3, r7, #24
 800f8aa:	2200      	movs	r2, #0
 800f8ac:	601a      	str	r2, [r3, #0]
 800f8ae:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTime = { 0 };
 800f8b0:	f107 0310 	add.w	r3, r7, #16
 800f8b4:	2200      	movs	r2, #0
 800f8b6:	601a      	str	r2, [r3, #0]
 800f8b8:	605a      	str	r2, [r3, #4]
                    SysTime_t sysTimeCurrent = { 0 };
 800f8ba:	f107 0308 	add.w	r3, r7, #8
 800f8be:	2200      	movs	r2, #0
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	605a      	str	r2, [r3, #4]

                    gpsEpochTime.Seconds = ( uint32_t )payload[macIndex++];
 800f8c4:	78fb      	ldrb	r3, [r7, #3]
 800f8c6:	1c5a      	adds	r2, r3, #1
 800f8c8:	70fa      	strb	r2, [r7, #3]
 800f8ca:	461a      	mov	r2, r3
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	4413      	add	r3, r2
 800f8d0:	781b      	ldrb	r3, [r3, #0]
 800f8d2:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 8;
 800f8d4:	78fb      	ldrb	r3, [r7, #3]
 800f8d6:	1c5a      	adds	r2, r3, #1
 800f8d8:	70fa      	strb	r2, [r7, #3]
 800f8da:	461a      	mov	r2, r3
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	4413      	add	r3, r2
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	021a      	lsls	r2, r3, #8
 800f8e4:	69bb      	ldr	r3, [r7, #24]
 800f8e6:	4313      	orrs	r3, r2
 800f8e8:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 16;
 800f8ea:	78fb      	ldrb	r3, [r7, #3]
 800f8ec:	1c5a      	adds	r2, r3, #1
 800f8ee:	70fa      	strb	r2, [r7, #3]
 800f8f0:	461a      	mov	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	4413      	add	r3, r2
 800f8f6:	781b      	ldrb	r3, [r3, #0]
 800f8f8:	041a      	lsls	r2, r3, #16
 800f8fa:	69bb      	ldr	r3, [r7, #24]
 800f8fc:	4313      	orrs	r3, r2
 800f8fe:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.Seconds |= ( uint32_t )payload[macIndex++] << 24;
 800f900:	78fb      	ldrb	r3, [r7, #3]
 800f902:	1c5a      	adds	r2, r3, #1
 800f904:	70fa      	strb	r2, [r7, #3]
 800f906:	461a      	mov	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	4413      	add	r3, r2
 800f90c:	781b      	ldrb	r3, [r3, #0]
 800f90e:	061a      	lsls	r2, r3, #24
 800f910:	69bb      	ldr	r3, [r7, #24]
 800f912:	4313      	orrs	r3, r2
 800f914:	61bb      	str	r3, [r7, #24]
                    gpsEpochTime.SubSeconds = payload[macIndex++];
 800f916:	78fb      	ldrb	r3, [r7, #3]
 800f918:	1c5a      	adds	r2, r3, #1
 800f91a:	70fa      	strb	r2, [r7, #3]
 800f91c:	461a      	mov	r2, r3
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	4413      	add	r3, r2
 800f922:	781b      	ldrb	r3, [r3, #0]
 800f924:	b21b      	sxth	r3, r3
 800f926:	83bb      	strh	r3, [r7, #28]

                    // Convert the fractional second received in ms
                    // round( pow( 0.5, 8.0 ) * 1000 ) = 3.90625
                    gpsEpochTime.SubSeconds = ( int16_t )( ( ( int32_t )gpsEpochTime.SubSeconds * 1000 ) >> 8 );
 800f928:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800f92c:	461a      	mov	r2, r3
 800f92e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f932:	fb02 f303 	mul.w	r3, r2, r3
 800f936:	121b      	asrs	r3, r3, #8
 800f938:	b21b      	sxth	r3, r3
 800f93a:	83bb      	strh	r3, [r7, #28]

                    // Copy received GPS Epoch time into system time
                    sysTime = gpsEpochTime;
 800f93c:	f107 0310 	add.w	r3, r7, #16
 800f940:	f107 0218 	add.w	r2, r7, #24
 800f944:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f948:	e883 0003 	stmia.w	r3, {r0, r1}
                    // Add Unix to Gps epoch offset. The system time is based on Unix time.
                    sysTime.Seconds += UNIX_GPS_EPOCH_OFFSET;
 800f94c:	693a      	ldr	r2, [r7, #16]
 800f94e:	4b96      	ldr	r3, [pc, #600]	@ (800fba8 <ProcessMacCommands+0x9c4>)
 800f950:	4413      	add	r3, r2
 800f952:	613b      	str	r3, [r7, #16]

                    // Compensate time difference between Tx Done time and now
                    sysTimeCurrent = SysTimeGet( );
 800f954:	f107 0308 	add.w	r3, r7, #8
 800f958:	4618      	mov	r0, r3
 800f95a:	f00a fc5f 	bl	801a21c <SysTimeGet>
                    sysTime = SysTimeAdd( sysTimeCurrent, SysTimeSub( sysTime, MacCtx.LastTxSysTime ) );
 800f95e:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 800f962:	4b92      	ldr	r3, [pc, #584]	@ (800fbac <ProcessMacCommands+0x9c8>)
 800f964:	f8d3 233c 	ldr.w	r2, [r3, #828]	@ 0x33c
 800f968:	9200      	str	r2, [sp, #0]
 800f96a:	f8d3 3338 	ldr.w	r3, [r3, #824]	@ 0x338
 800f96e:	f107 0210 	add.w	r2, r7, #16
 800f972:	ca06      	ldmia	r2, {r1, r2}
 800f974:	f00a fbeb 	bl	801a14e <SysTimeSub>
 800f978:	f107 0010 	add.w	r0, r7, #16
 800f97c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800f97e:	9300      	str	r3, [sp, #0]
 800f980:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800f982:	f107 0208 	add.w	r2, r7, #8
 800f986:	ca06      	ldmia	r2, {r1, r2}
 800f988:	f00a fba8 	bl	801a0dc <SysTimeAdd>

                    // Apply the new system time.
                    SysTimeSet( sysTime );
 800f98c:	f107 0310 	add.w	r3, r7, #16
 800f990:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f994:	f00a fc14 	bl	801a1c0 <SysTimeSet>
                    LoRaMacClassBDeviceTimeAns( );
 800f998:	f002 fee8 	bl	801276c <LoRaMacClassBDeviceTimeAns>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = true;
 800f99c:	4b83      	ldr	r3, [pc, #524]	@ (800fbac <ProcessMacCommands+0x9c8>)
 800f99e:	2201      	movs	r2, #1
 800f9a0:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                    // In case of other receive windows the Device Time Answer is not received.
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
#endif /* LORAMAC_VERSION */
                }
                break;
 800f9a4:	e0f2      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                    MacCtx.McpsIndication.DeviceTimeAnsReceived = false;
 800f9a6:	4b81      	ldr	r3, [pc, #516]	@ (800fbac <ProcessMacCommands+0x9c8>)
 800f9a8:	2200      	movs	r2, #0
 800f9aa:	f883 243c 	strb.w	r2, [r3, #1084]	@ 0x43c
                break;
 800f9ae:	e0ed      	b.n	800fb8c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_PING_SLOT_INFO_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_PING_SLOT_INFO ) == true )
 800f9b0:	200c      	movs	r0, #12
 800f9b2:	f003 fb59 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800f9b6:	4603      	mov	r3, r0
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	f000 80e4 	beq.w	800fb86 <ProcessMacCommands+0x9a2>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
 800f9be:	210c      	movs	r1, #12
 800f9c0:	2000      	movs	r0, #0
 800f9c2:	f003 fac5 	bl	8012f50 <LoRaMacConfirmQueueSetStatus>
                    // According to the specification, it is not allowed to process this answer in
                    // a ping or multicast slot
                    if( ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_PING_SLOT ) && ( MacCtx.RxSlot != RX_SLOT_WIN_CLASS_B_MULTICAST_SLOT ) )
 800f9c6:	4b79      	ldr	r3, [pc, #484]	@ (800fbac <ProcessMacCommands+0x9c8>)
 800f9c8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f9cc:	2b04      	cmp	r3, #4
 800f9ce:	f000 80da 	beq.w	800fb86 <ProcessMacCommands+0x9a2>
 800f9d2:	4b76      	ldr	r3, [pc, #472]	@ (800fbac <ProcessMacCommands+0x9c8>)
 800f9d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800f9d8:	2b05      	cmp	r3, #5
 800f9da:	f000 80d4 	beq.w	800fb86 <ProcessMacCommands+0x9a2>
                    {
                        LoRaMacClassBPingSlotInfoAns( );
 800f9de:	f002 fea6 	bl	801272e <LoRaMacClassBPingSlotInfoAns>
                    }
                }
                break;
 800f9e2:	e0d0      	b.n	800fb86 <ProcessMacCommands+0x9a2>
            }
            case SRV_MAC_PING_SLOT_CHANNEL_REQ:
            {
                uint8_t status = 0x03;
 800f9e4:	2303      	movs	r3, #3
 800f9e6:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                uint32_t frequency = 0;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	67bb      	str	r3, [r7, #120]	@ 0x78
                uint8_t datarate;

                frequency = ( uint32_t )payload[macIndex++];
 800f9ee:	78fb      	ldrb	r3, [r7, #3]
 800f9f0:	1c5a      	adds	r2, r3, #1
 800f9f2:	70fa      	strb	r2, [r7, #3]
 800f9f4:	461a      	mov	r2, r3
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	4413      	add	r3, r2
 800f9fa:	781b      	ldrb	r3, [r3, #0]
 800f9fc:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 8;
 800f9fe:	78fb      	ldrb	r3, [r7, #3]
 800fa00:	1c5a      	adds	r2, r3, #1
 800fa02:	70fa      	strb	r2, [r7, #3]
 800fa04:	461a      	mov	r2, r3
 800fa06:	687b      	ldr	r3, [r7, #4]
 800fa08:	4413      	add	r3, r2
 800fa0a:	781b      	ldrb	r3, [r3, #0]
 800fa0c:	021b      	lsls	r3, r3, #8
 800fa0e:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fa10:	4313      	orrs	r3, r2
 800fa12:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fa14:	78fb      	ldrb	r3, [r7, #3]
 800fa16:	1c5a      	adds	r2, r3, #1
 800fa18:	70fa      	strb	r2, [r7, #3]
 800fa1a:	461a      	mov	r2, r3
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	4413      	add	r3, r2
 800fa20:	781b      	ldrb	r3, [r3, #0]
 800fa22:	041b      	lsls	r3, r3, #16
 800fa24:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 800fa26:	4313      	orrs	r3, r2
 800fa28:	67bb      	str	r3, [r7, #120]	@ 0x78
                frequency *= 100;
 800fa2a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800fa2c:	2264      	movs	r2, #100	@ 0x64
 800fa2e:	fb02 f303 	mul.w	r3, r2, r3
 800fa32:	67bb      	str	r3, [r7, #120]	@ 0x78
                datarate = payload[macIndex++] & 0x0F;
 800fa34:	78fb      	ldrb	r3, [r7, #3]
 800fa36:	1c5a      	adds	r2, r3, #1
 800fa38:	70fa      	strb	r2, [r7, #3]
 800fa3a:	461a      	mov	r2, r3
 800fa3c:	687b      	ldr	r3, [r7, #4]
 800fa3e:	4413      	add	r3, r2
 800fa40:	781b      	ldrb	r3, [r3, #0]
 800fa42:	f003 030f 	and.w	r3, r3, #15
 800fa46:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

                status = LoRaMacClassBPingSlotChannelReq( datarate, frequency );
 800fa4a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800fa4e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800fa50:	4618      	mov	r0, r3
 800fa52:	f002 fe72 	bl	801273a <LoRaMacClassBPingSlotChannelReq>
 800fa56:	4603      	mov	r3, r0
 800fa58:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
                macCmdPayload[0] = status;
 800fa5c:	f897 307c 	ldrb.w	r3, [r7, #124]	@ 0x7c
 800fa60:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_FREQ_ANS, macCmdPayload, 1 );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
                LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_CHANNEL_ANS, macCmdPayload, 1 );
 800fa64:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fa68:	2201      	movs	r2, #1
 800fa6a:	4619      	mov	r1, r3
 800fa6c:	2011      	movs	r0, #17
 800fa6e:	f002 ffd3 	bl	8012a18 <LoRaMacCommandsAddCmd>
                /*ST_WORKAROUND_BEGIN: remove unnecessary mlme operation to prevent uplinks burst */
                // Setup indication to inform the application
                /* SetMlmeScheduleUplinkIndication( ); */
                /*ST_WORKAROUND_END */
#endif /* LORAMAC_VERSION */
                break;
 800fa72:	e08b      	b.n	800fb8c <ProcessMacCommands+0x9a8>
            }
            case SRV_MAC_BEACON_TIMING_ANS:
            {
                if( LoRaMacConfirmQueueIsCmdActive( MLME_BEACON_TIMING ) == true )
 800fa74:	200d      	movs	r0, #13
 800fa76:	f003 faf7 	bl	8013068 <LoRaMacConfirmQueueIsCmdActive>
 800fa7a:	4603      	mov	r3, r0
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	f000 8084 	beq.w	800fb8a <ProcessMacCommands+0x9a6>
                {
                    LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_BEACON_TIMING );
 800fa82:	210d      	movs	r1, #13
 800fa84:	2000      	movs	r0, #0
 800fa86:	f003 fa63 	bl	8012f50 <LoRaMacConfirmQueueSetStatus>
                    uint16_t beaconTimingDelay = 0;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    uint8_t beaconTimingChannel = 0;
 800fa90:	2300      	movs	r3, #0
 800fa92:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    beaconTimingDelay = ( uint16_t )payload[macIndex++];
 800fa96:	78fb      	ldrb	r3, [r7, #3]
 800fa98:	1c5a      	adds	r2, r3, #1
 800fa9a:	70fa      	strb	r2, [r7, #3]
 800fa9c:	461a      	mov	r2, r3
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	4413      	add	r3, r2
 800faa2:	781b      	ldrb	r3, [r3, #0]
 800faa4:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingDelay |= ( uint16_t )payload[macIndex++] << 8;
 800faa8:	78fb      	ldrb	r3, [r7, #3]
 800faaa:	1c5a      	adds	r2, r3, #1
 800faac:	70fa      	strb	r2, [r7, #3]
 800faae:	461a      	mov	r2, r3
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	4413      	add	r3, r2
 800fab4:	781b      	ldrb	r3, [r3, #0]
 800fab6:	021b      	lsls	r3, r3, #8
 800fab8:	b21a      	sxth	r2, r3
 800faba:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 800fabe:	4313      	orrs	r3, r2
 800fac0:	b21b      	sxth	r3, r3
 800fac2:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e
                    beaconTimingChannel = payload[macIndex++];
 800fac6:	78fb      	ldrb	r3, [r7, #3]
 800fac8:	1c5a      	adds	r2, r3, #1
 800faca:	70fa      	strb	r2, [r7, #3]
 800facc:	461a      	mov	r2, r3
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	4413      	add	r3, r2
 800fad2:	781b      	ldrb	r3, [r3, #0]
 800fad4:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d

                    LoRaMacClassBBeaconTimingAns( beaconTimingDelay, beaconTimingChannel, RxDoneParams.LastRxDone );
 800fad8:	4b35      	ldr	r3, [pc, #212]	@ (800fbb0 <ProcessMacCommands+0x9cc>)
 800fada:	681a      	ldr	r2, [r3, #0]
 800fadc:	f897 107d 	ldrb.w	r1, [r7, #125]	@ 0x7d
 800fae0:	f8b7 307e 	ldrh.w	r3, [r7, #126]	@ 0x7e
 800fae4:	4618      	mov	r0, r3
 800fae6:	f002 fe34 	bl	8012752 <LoRaMacClassBBeaconTimingAns>
                }
                break;
 800faea:	e04e      	b.n	800fb8a <ProcessMacCommands+0x9a6>
            }
            case SRV_MAC_BEACON_FREQ_REQ:
                {
                    uint32_t frequency = 0;
 800faec:	2300      	movs	r3, #0
 800faee:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    frequency = ( uint32_t )payload[macIndex++];
 800faf2:	78fb      	ldrb	r3, [r7, #3]
 800faf4:	1c5a      	adds	r2, r3, #1
 800faf6:	70fa      	strb	r2, [r7, #3]
 800faf8:	461a      	mov	r2, r3
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	4413      	add	r3, r2
 800fafe:	781b      	ldrb	r3, [r3, #0]
 800fb00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 8;
 800fb04:	78fb      	ldrb	r3, [r7, #3]
 800fb06:	1c5a      	adds	r2, r3, #1
 800fb08:	70fa      	strb	r2, [r7, #3]
 800fb0a:	461a      	mov	r2, r3
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	4413      	add	r3, r2
 800fb10:	781b      	ldrb	r3, [r3, #0]
 800fb12:	021b      	lsls	r3, r3, #8
 800fb14:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb18:	4313      	orrs	r3, r2
 800fb1a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency |= ( uint32_t )payload[macIndex++] << 16;
 800fb1e:	78fb      	ldrb	r3, [r7, #3]
 800fb20:	1c5a      	adds	r2, r3, #1
 800fb22:	70fa      	strb	r2, [r7, #3]
 800fb24:	461a      	mov	r2, r3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	4413      	add	r3, r2
 800fb2a:	781b      	ldrb	r3, [r3, #0]
 800fb2c:	041b      	lsls	r3, r3, #16
 800fb2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800fb32:	4313      	orrs	r3, r2
 800fb34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                    frequency *= 100;
 800fb38:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800fb3c:	2264      	movs	r2, #100	@ 0x64
 800fb3e:	fb02 f303 	mul.w	r3, r2, r3
 800fb42:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                    if( LoRaMacClassBBeaconFreqReq( frequency ) == true )
 800fb46:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800fb4a:	f002 fe15 	bl	8012778 <LoRaMacClassBBeaconFreqReq>
 800fb4e:	4603      	mov	r3, r0
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d003      	beq.n	800fb5c <ProcessMacCommands+0x978>
                    {
                        macCmdPayload[0] = 1;
 800fb54:	2301      	movs	r3, #1
 800fb56:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
 800fb5a:	e002      	b.n	800fb62 <ProcessMacCommands+0x97e>
                    }
                    else
                    {
                        macCmdPayload[0] = 0;
 800fb5c:	2300      	movs	r3, #0
 800fb5e:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                    }
                    LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_FREQ_ANS, macCmdPayload, 1 );
 800fb62:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800fb66:	2201      	movs	r2, #1
 800fb68:	4619      	mov	r1, r3
 800fb6a:	2013      	movs	r0, #19
 800fb6c:	f002 ff54 	bl	8012a18 <LoRaMacCommandsAddCmd>
                }
                break;
 800fb70:	e00c      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb72:	bf00      	nop
 800fb74:	e00a      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb76:	bf00      	nop
 800fb78:	e008      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb7a:	bf00      	nop
 800fb7c:	e006      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb7e:	bf00      	nop
 800fb80:	e004      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb82:	bf00      	nop
 800fb84:	e002      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb86:	bf00      	nop
 800fb88:	e000      	b.n	800fb8c <ProcessMacCommands+0x9a8>
                break;
 800fb8a:	bf00      	nop
    while( macIndex < commandsSize )
 800fb8c:	78fa      	ldrb	r2, [r7, #3]
 800fb8e:	78bb      	ldrb	r3, [r7, #2]
 800fb90:	429a      	cmp	r2, r3
 800fb92:	f4ff ab49 	bcc.w	800f228 <ProcessMacCommands+0x44>
 800fb96:	e004      	b.n	800fba2 <ProcessMacCommands+0x9be>
        return;
 800fb98:	bf00      	nop
 800fb9a:	e002      	b.n	800fba2 <ProcessMacCommands+0x9be>
            return;
 800fb9c:	bf00      	nop
 800fb9e:	e000      	b.n	800fba2 <ProcessMacCommands+0x9be>
            default:
                // Unknown command. ABORT MAC commands processing
                return;
 800fba0:	bf00      	nop
        }
    }
}
 800fba2:	378c      	adds	r7, #140	@ 0x8c
 800fba4:	46bd      	mov	sp, r7
 800fba6:	bd90      	pop	{r4, r7, pc}
 800fba8:	12d53d80 	.word	0x12d53d80
 800fbac:	20000670 	.word	0x20000670
 800fbb0:	20001720 	.word	0x20001720

0800fbb4 <Send>:

/* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
static LoRaMacStatus_t Send( LoRaMacHeader_t* macHdr, uint8_t fPort, void* fBuffer, uint16_t fBufferSize, bool allowDelayedTx )
{
 800fbb4:	b580      	push	{r7, lr}
 800fbb6:	b08e      	sub	sp, #56	@ 0x38
 800fbb8:	af02      	add	r7, sp, #8
 800fbba:	60f8      	str	r0, [r7, #12]
 800fbbc:	607a      	str	r2, [r7, #4]
 800fbbe:	461a      	mov	r2, r3
 800fbc0:	460b      	mov	r3, r1
 800fbc2:	72fb      	strb	r3, [r7, #11]
 800fbc4:	4613      	mov	r3, r2
 800fbc6:	813b      	strh	r3, [r7, #8]
    LoRaMacFrameCtrl_t fCtrl;
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 800fbc8:	2303      	movs	r3, #3
 800fbca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fbce:	4b66      	ldr	r3, [pc, #408]	@ (800fd68 <Send+0x1b4>)
 800fbd0:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800fbd4:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = Nvm.MacGroup1.ChannelsTxPower;
 800fbd8:	4b63      	ldr	r3, [pc, #396]	@ (800fd68 <Send+0x1b4>)
 800fbda:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fbde:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fbe2:	4b61      	ldr	r3, [pc, #388]	@ (800fd68 <Send+0x1b4>)
 800fbe4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fbe6:	62bb      	str	r3, [r7, #40]	@ 0x28
    CalcNextAdrParams_t adrNext;

    // Check if we are joined
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fbe8:	4b5f      	ldr	r3, [pc, #380]	@ (800fd68 <Send+0x1b4>)
 800fbea:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d101      	bne.n	800fbf6 <Send+0x42>
    {
        return LORAMAC_STATUS_NO_NETWORK_JOINED;
 800fbf2:	2307      	movs	r3, #7
 800fbf4:	e0b4      	b.n	800fd60 <Send+0x1ac>
    }
    if( Nvm.MacGroup2.MaxDCycle == 0 )
 800fbf6:	4b5c      	ldr	r3, [pc, #368]	@ (800fd68 <Send+0x1b4>)
 800fbf8:	f893 3107 	ldrb.w	r3, [r3, #263]	@ 0x107
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d102      	bne.n	800fc06 <Send+0x52>
    {
        Nvm.MacGroup1.AggregatedTimeOff = 0;
 800fc00:	4b59      	ldr	r3, [pc, #356]	@ (800fd68 <Send+0x1b4>)
 800fc02:	2200      	movs	r2, #0
 800fc04:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    fCtrl.Value = 0;
 800fc06:	2300      	movs	r3, #0
 800fc08:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.FOptsLen      = 0;
 800fc0c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc10:	f36f 0303 	bfc	r3, #0, #4
 800fc14:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    fCtrl.Bits.Adr           = Nvm.MacGroup2.AdrCtrlOn;
 800fc18:	4b53      	ldr	r3, [pc, #332]	@ (800fd68 <Send+0x1b4>)
 800fc1a:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 800fc1e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc22:	f362 13c7 	bfi	r3, r2, #7, #1
 800fc26:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Check class b
    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fc2a:	4b4f      	ldr	r3, [pc, #316]	@ (800fd68 <Send+0x1b4>)
 800fc2c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fc30:	2b01      	cmp	r3, #1
 800fc32:	d106      	bne.n	800fc42 <Send+0x8e>
    {
        fCtrl.Bits.FPending      = 1;
 800fc34:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc38:	f043 0310 	orr.w	r3, r3, #16
 800fc3c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
 800fc40:	e005      	b.n	800fc4e <Send+0x9a>
    }
    else
    {
        fCtrl.Bits.FPending      = 0;
 800fc42:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc46:	f36f 1304 	bfc	r3, #4, #1
 800fc4a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    }

    // Check server ack
    if( Nvm.MacGroup1.SrvAckRequested == true )
 800fc4e:	4b46      	ldr	r3, [pc, #280]	@ (800fd68 <Send+0x1b4>)
 800fc50:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d005      	beq.n	800fc64 <Send+0xb0>
    {
        fCtrl.Bits.Ack = 1;
 800fc58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc5c:	f043 0320 	orr.w	r3, r3, #32
 800fc60:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    adrNext.Region = Nvm.MacGroup2.Region;

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
                                               &Nvm.MacGroup1.ChannelsTxPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.UpdateChanMask = true;
 800fc64:	2301      	movs	r3, #1
 800fc66:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = fCtrl.Bits.Adr;
 800fc68:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fc6c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800fc70:	b2db      	uxtb	r3, r3
 800fc72:	2b00      	cmp	r3, #0
 800fc74:	bf14      	ite	ne
 800fc76:	2301      	movne	r3, #1
 800fc78:	2300      	moveq	r3, #0
 800fc7a:	b2db      	uxtb	r3, r3
 800fc7c:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 800fc7e:	4b3a      	ldr	r3, [pc, #232]	@ (800fd68 <Send+0x1b4>)
 800fc80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc82:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 800fc84:	4b39      	ldr	r3, [pc, #228]	@ (800fd6c <Send+0x1b8>)
 800fc86:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 800fc8a:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 800fc8c:	4b37      	ldr	r3, [pc, #220]	@ (800fd6c <Send+0x1b8>)
 800fc8e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 800fc92:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 800fc94:	4b34      	ldr	r3, [pc, #208]	@ (800fd68 <Send+0x1b4>)
 800fc96:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 800fc9a:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 800fc9e:	4b32      	ldr	r3, [pc, #200]	@ (800fd68 <Send+0x1b4>)
 800fca0:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 800fca4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    adrNext.NbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 800fca8:	4b2f      	ldr	r3, [pc, #188]	@ (800fd68 <Send+0x1b4>)
 800fcaa:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800fcae:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    adrNext.UplinkDwellTime =  Nvm.MacGroup2.MacParams.UplinkDwellTime;
 800fcb2:	4b2d      	ldr	r3, [pc, #180]	@ (800fd68 <Send+0x1b4>)
 800fcb4:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800fcb8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 800fcbc:	4b2a      	ldr	r3, [pc, #168]	@ (800fd68 <Send+0x1b4>)
 800fcbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800fcc2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    fCtrl.Bits.AdrAckReq = LoRaMacAdrCalcNext( &adrNext, &Nvm.MacGroup1.ChannelsDatarate,
 800fcc6:	f107 0014 	add.w	r0, r7, #20
 800fcca:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800fcce:	9300      	str	r3, [sp, #0]
 800fcd0:	4b27      	ldr	r3, [pc, #156]	@ (800fd70 <Send+0x1bc>)
 800fcd2:	4a28      	ldr	r2, [pc, #160]	@ (800fd74 <Send+0x1c0>)
 800fcd4:	4928      	ldr	r1, [pc, #160]	@ (800fd78 <Send+0x1c4>)
 800fcd6:	f002 fbc9 	bl	801246c <LoRaMacAdrCalcNext>
 800fcda:	4603      	mov	r3, r0
 800fcdc:	461a      	mov	r2, r3
 800fcde:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800fce2:	f362 1386 	bfi	r3, r2, #6, #1
 800fce6:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                                               &Nvm.MacGroup1.ChannelsTxPower,
                                               &Nvm.MacGroup2.MacParams.ChannelsNbTrans, &adrAckCounter );
#endif /* LORAMAC_VERSION */

    // Prepare the frame
    status = PrepareFrame( macHdr, &fCtrl, fPort, fBuffer, fBufferSize );
 800fcea:	7afa      	ldrb	r2, [r7, #11]
 800fcec:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 800fcf0:	893b      	ldrh	r3, [r7, #8]
 800fcf2:	9300      	str	r3, [sp, #0]
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	68f8      	ldr	r0, [r7, #12]
 800fcf8:	f000 fc42 	bl	8010580 <PrepareFrame>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    // Validate status
    if( ( status == LORAMAC_STATUS_OK ) || ( status == LORAMAC_STATUS_SKIPPED_APP_DATA ) )
 800fd02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d003      	beq.n	800fd12 <Send+0x15e>
 800fd0a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd0e:	2b0a      	cmp	r3, #10
 800fd10:	d107      	bne.n	800fd22 <Send+0x16e>
    {
        // Schedule frame, do not allow delayed transmissions
        status = ScheduleTx( allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 800fd12:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800fd16:	4618      	mov	r0, r3
 800fd18:	f000 f96e 	bl	800fff8 <ScheduleTx>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    // Post processing
    if( status != LORAMAC_STATUS_OK )
 800fd22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800fd26:	2b00      	cmp	r3, #0
 800fd28:	d00a      	beq.n	800fd40 <Send+0x18c>
    {
        // Bad case - restore
        // Store local variables
        Nvm.MacGroup1.ChannelsDatarate = datarate;
 800fd2a:	4a0f      	ldr	r2, [pc, #60]	@ (800fd68 <Send+0x1b4>)
 800fd2c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800fd30:	f882 3039 	strb.w	r3, [r2, #57]	@ 0x39
        Nvm.MacGroup1.ChannelsTxPower = txPower;
 800fd34:	4a0c      	ldr	r2, [pc, #48]	@ (800fd68 <Send+0x1b4>)
 800fd36:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800fd3a:	f882 3038 	strb.w	r3, [r2, #56]	@ 0x38
 800fd3e:	e00d      	b.n	800fd5c <Send+0x1a8>
    }
    else
    {
        // Good case
        Nvm.MacGroup1.SrvAckRequested = false;
 800fd40:	4b09      	ldr	r3, [pc, #36]	@ (800fd68 <Send+0x1b4>)
 800fd42:	2200      	movs	r2, #0
 800fd44:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        Nvm.MacGroup1.AdrAckCounter = adrAckCounter;
 800fd48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800fd4a:	4a07      	ldr	r2, [pc, #28]	@ (800fd68 <Send+0x1b4>)
 800fd4c:	6293      	str	r3, [r2, #40]	@ 0x28
        // Remove all none sticky MAC commands
        if( LoRaMacCommandsRemoveNoneStickyCmds( ) != LORAMAC_COMMANDS_SUCCESS )
 800fd4e:	f002 fedb 	bl	8012b08 <LoRaMacCommandsRemoveNoneStickyCmds>
 800fd52:	4603      	mov	r3, r0
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <Send+0x1a8>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800fd58:	2313      	movs	r3, #19
 800fd5a:	e001      	b.n	800fd60 <Send+0x1ac>
        }
    }
    return status;
 800fd5c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800fd60:	4618      	mov	r0, r3
 800fd62:	3730      	adds	r7, #48	@ 0x30
 800fd64:	46bd      	mov	sp, r7
 800fd66:	bd80      	pop	{r7, pc}
 800fd68:	20000b90 	.word	0x20000b90
 800fd6c:	20000670 	.word	0x20000670
 800fd70:	20000bf0 	.word	0x20000bf0
 800fd74:	20000bc8 	.word	0x20000bc8
 800fd78:	20000bc9 	.word	0x20000bc9

0800fd7c <SendReJoinReq>:

static LoRaMacStatus_t SendReJoinReq( JoinReqIdentifier_t joinReqType )
{
 800fd7c:	b580      	push	{r7, lr}
 800fd7e:	b084      	sub	sp, #16
 800fd80:	af00      	add	r7, sp, #0
 800fd82:	4603      	mov	r3, r0
 800fd84:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 800fd86:	2300      	movs	r3, #0
 800fd88:	73bb      	strb	r3, [r7, #14]
    LoRaMacHeader_t macHdr;
    macHdr.Value = 0;
 800fd8a:	2300      	movs	r3, #0
 800fd8c:	733b      	strb	r3, [r7, #12]
    bool allowDelayedTx = true;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	73fb      	strb	r3, [r7, #15]

    // Setup join/rejoin message
    switch( joinReqType )
 800fd92:	79fb      	ldrb	r3, [r7, #7]
 800fd94:	2bff      	cmp	r3, #255	@ 0xff
 800fd96:	d129      	bne.n	800fdec <SendReJoinReq+0x70>
    {
        case JOIN_REQ:
        {
            SwitchClass( CLASS_A );
 800fd98:	2000      	movs	r0, #0
 800fd9a:	f7ff f901 	bl	800efa0 <SwitchClass>

            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_JOIN_REQUEST;
 800fd9e:	4b1a      	ldr	r3, [pc, #104]	@ (800fe08 <SendReJoinReq+0x8c>)
 800fda0:	2200      	movs	r2, #0
 800fda2:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.JoinReq.Buffer = MacCtx.PktBuffer;
 800fda6:	4b18      	ldr	r3, [pc, #96]	@ (800fe08 <SendReJoinReq+0x8c>)
 800fda8:	4a18      	ldr	r2, [pc, #96]	@ (800fe0c <SendReJoinReq+0x90>)
 800fdaa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.JoinReq.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 800fdae:	4b16      	ldr	r3, [pc, #88]	@ (800fe08 <SendReJoinReq+0x8c>)
 800fdb0:	22ff      	movs	r2, #255	@ 0xff
 800fdb2:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c

            macHdr.Bits.MType = FRAME_TYPE_JOIN_REQ;
 800fdb6:	7b3b      	ldrb	r3, [r7, #12]
 800fdb8:	f36f 1347 	bfc	r3, #5, #3
 800fdbc:	733b      	strb	r3, [r7, #12]
            MacCtx.TxMsg.Message.JoinReq.MHDR.Value = macHdr.Value;
 800fdbe:	7b3a      	ldrb	r2, [r7, #12]
 800fdc0:	4b11      	ldr	r3, [pc, #68]	@ (800fe08 <SendReJoinReq+0x8c>)
 800fdc2:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d

            memcpy1( MacCtx.TxMsg.Message.JoinReq.JoinEUI, SecureElementGetJoinEui( ), LORAMAC_JOIN_EUI_FIELD_SIZE );
 800fdc6:	f7fc f871 	bl	800beac <SecureElementGetJoinEui>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2208      	movs	r2, #8
 800fdce:	4619      	mov	r1, r3
 800fdd0:	480f      	ldr	r0, [pc, #60]	@ (800fe10 <SendReJoinReq+0x94>)
 800fdd2:	f006 fe44 	bl	8016a5e <memcpy1>
            memcpy1( MacCtx.TxMsg.Message.JoinReq.DevEUI, SecureElementGetDevEui( ), LORAMAC_DEV_EUI_FIELD_SIZE );
 800fdd6:	f7fc f847 	bl	800be68 <SecureElementGetDevEui>
 800fdda:	4603      	mov	r3, r0
 800fddc:	2208      	movs	r2, #8
 800fdde:	4619      	mov	r1, r3
 800fde0:	480c      	ldr	r0, [pc, #48]	@ (800fe14 <SendReJoinReq+0x98>)
 800fde2:	f006 fe3c 	bl	8016a5e <memcpy1>

            allowDelayedTx = false;
 800fde6:	2300      	movs	r3, #0
 800fde8:	73fb      	strb	r3, [r7, #15]

            break;
 800fdea:	e002      	b.n	800fdf2 <SendReJoinReq+0x76>
        }
        default:
            status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 800fdec:	2302      	movs	r3, #2
 800fdee:	73bb      	strb	r3, [r7, #14]
            break;
 800fdf0:	bf00      	nop
    }

    // Schedule frame
    status = ScheduleTx( allowDelayedTx );
 800fdf2:	7bfb      	ldrb	r3, [r7, #15]
 800fdf4:	4618      	mov	r0, r3
 800fdf6:	f000 f8ff 	bl	800fff8 <ScheduleTx>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	73bb      	strb	r3, [r7, #14]
    return status;
 800fdfe:	7bbb      	ldrb	r3, [r7, #14]
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	3710      	adds	r7, #16
 800fe04:	46bd      	mov	sp, r7
 800fe06:	bd80      	pop	{r7, pc}
 800fe08:	20000670 	.word	0x20000670
 800fe0c:	20000672 	.word	0x20000672
 800fe10:	2000077e 	.word	0x2000077e
 800fe14:	20000786 	.word	0x20000786

0800fe18 <CheckForClassBCollision>:

static LoRaMacStatus_t CheckForClassBCollision( void )
{
 800fe18:	b580      	push	{r7, lr}
 800fe1a:	af00      	add	r7, sp, #0
    if( LoRaMacClassBIsBeaconExpected( ) == true )
 800fe1c:	f002 fc36 	bl	801268c <LoRaMacClassBIsBeaconExpected>
 800fe20:	4603      	mov	r3, r0
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	d001      	beq.n	800fe2a <CheckForClassBCollision+0x12>
    {
        return LORAMAC_STATUS_BUSY_BEACON_RESERVED_TIME;
 800fe26:	230e      	movs	r3, #14
 800fe28:	e013      	b.n	800fe52 <CheckForClassBCollision+0x3a>
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 800fe2a:	4b0b      	ldr	r3, [pc, #44]	@ (800fe58 <CheckForClassBCollision+0x40>)
 800fe2c:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800fe30:	2b01      	cmp	r3, #1
 800fe32:	d10d      	bne.n	800fe50 <CheckForClassBCollision+0x38>
    {
        if( LoRaMacClassBIsPingExpected( ) == true )
 800fe34:	f002 fc31 	bl	801269a <LoRaMacClassBIsPingExpected>
 800fe38:	4603      	mov	r3, r0
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d001      	beq.n	800fe42 <CheckForClassBCollision+0x2a>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe3e:	230f      	movs	r3, #15
 800fe40:	e007      	b.n	800fe52 <CheckForClassBCollision+0x3a>
        }
        else if( LoRaMacClassBIsMulticastExpected( ) == true )
 800fe42:	f002 fc31 	bl	80126a8 <LoRaMacClassBIsMulticastExpected>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d001      	beq.n	800fe50 <CheckForClassBCollision+0x38>
        {
            return LORAMAC_STATUS_BUSY_PING_SLOT_WINDOW_TIME;
 800fe4c:	230f      	movs	r3, #15
 800fe4e:	e000      	b.n	800fe52 <CheckForClassBCollision+0x3a>
        }
    }
    return LORAMAC_STATUS_OK;
 800fe50:	2300      	movs	r3, #0
}
 800fe52:	4618      	mov	r0, r3
 800fe54:	bd80      	pop	{r7, pc}
 800fe56:	bf00      	nop
 800fe58:	20000b90 	.word	0x20000b90

0800fe5c <ComputeRxWindowParameters>:

static void ComputeRxWindowParameters( void )
{
 800fe5c:	b590      	push	{r4, r7, lr}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af02      	add	r7, sp, #8
    // Compute Rx1 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe62:	4b2d      	ldr	r3, [pc, #180]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe64:	f893 4040 	ldrb.w	r4, [r3, #64]	@ 0x40
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fe68:	4b2b      	ldr	r3, [pc, #172]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe6a:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 800fe6e:	4b2a      	ldr	r3, [pc, #168]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe70:	f893 1075 	ldrb.w	r1, [r3, #117]	@ 0x75
 800fe74:	4b28      	ldr	r3, [pc, #160]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe76:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
                                                          Nvm.MacGroup2.MacParams.DownlinkDwellTime,
                                                          Nvm.MacGroup1.ChannelsDatarate,
                                                          Nvm.MacGroup2.MacParams.Rx1DrOffset ),
 800fe7a:	4b27      	ldr	r3, [pc, #156]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe7c:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
                                     RegionApplyDrOffset( Nvm.MacGroup2.Region,
 800fe80:	b25b      	sxtb	r3, r3
 800fe82:	f004 fc94 	bl	80147ae <RegionApplyDrOffset>
 800fe86:	4603      	mov	r3, r0
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe88:	b259      	sxtb	r1, r3
 800fe8a:	4b23      	ldr	r3, [pc, #140]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe8c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800fe90:	4b21      	ldr	r3, [pc, #132]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fe92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe94:	4821      	ldr	r0, [pc, #132]	@ (800ff1c <ComputeRxWindowParameters+0xc0>)
 800fe96:	9000      	str	r0, [sp, #0]
 800fe98:	4620      	mov	r0, r4
 800fe9a:	f004 fbaa 	bl	80145f2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow1Config );
    // Compute Rx2 windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800fe9e:	4b1e      	ldr	r3, [pc, #120]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fea0:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.Rx2Channel.Datarate,
 800fea4:	4b1c      	ldr	r3, [pc, #112]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fea6:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 800feaa:	b259      	sxtb	r1, r3
 800feac:	4b1a      	ldr	r3, [pc, #104]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800feae:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 800feb2:	4b19      	ldr	r3, [pc, #100]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800feb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800feb6:	4c1a      	ldr	r4, [pc, #104]	@ (800ff20 <ComputeRxWindowParameters+0xc4>)
 800feb8:	9400      	str	r4, [sp, #0]
 800feba:	f004 fb9a 	bl	80145f2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindow2Config );

    // Default setup, in case the device joined
    MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.ReceiveDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800febe:	4b16      	ldr	r3, [pc, #88]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fec0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fec2:	4a18      	ldr	r2, [pc, #96]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800fec4:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fec8:	4413      	add	r3, r2
 800feca:	4a16      	ldr	r2, [pc, #88]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800fecc:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
    MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.ReceiveDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fed0:	4b11      	ldr	r3, [pc, #68]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fed2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fed4:	4a13      	ldr	r2, [pc, #76]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800fed6:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800feda:	4413      	add	r3, r2
 800fedc:	4a11      	ldr	r2, [pc, #68]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800fede:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4

    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 800fee2:	4b0d      	ldr	r3, [pc, #52]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800fee4:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d111      	bne.n	800ff10 <ComputeRxWindowParameters+0xb4>
    {
        MacCtx.RxWindow1Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay1 + MacCtx.RxWindow1Config.WindowOffset;
 800feec:	4b0a      	ldr	r3, [pc, #40]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800feee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fef0:	4a0c      	ldr	r2, [pc, #48]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800fef2:	f8d2 23c4 	ldr.w	r2, [r2, #964]	@ 0x3c4
 800fef6:	4413      	add	r3, r2
 800fef8:	4a0a      	ldr	r2, [pc, #40]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800fefa:	f8c2 33b0 	str.w	r3, [r2, #944]	@ 0x3b0
        MacCtx.RxWindow2Delay = Nvm.MacGroup2.MacParams.JoinAcceptDelay2 + MacCtx.RxWindow2Config.WindowOffset;
 800fefe:	4b06      	ldr	r3, [pc, #24]	@ (800ff18 <ComputeRxWindowParameters+0xbc>)
 800ff00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ff02:	4a08      	ldr	r2, [pc, #32]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800ff04:	f8d2 23dc 	ldr.w	r2, [r2, #988]	@ 0x3dc
 800ff08:	4413      	add	r3, r2
 800ff0a:	4a06      	ldr	r2, [pc, #24]	@ (800ff24 <ComputeRxWindowParameters+0xc8>)
 800ff0c:	f8c2 33b4 	str.w	r3, [r2, #948]	@ 0x3b4
    }
}
 800ff10:	bf00      	nop
 800ff12:	3704      	adds	r7, #4
 800ff14:	46bd      	mov	sp, r7
 800ff16:	bd90      	pop	{r4, r7, pc}
 800ff18:	20000b90 	.word	0x20000b90
 800ff1c:	20000a28 	.word	0x20000a28
 800ff20:	20000a40 	.word	0x20000a40
 800ff24:	20000670 	.word	0x20000670

0800ff28 <VerifyTxFrame>:

static LoRaMacStatus_t VerifyTxFrame( void )
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b082      	sub	sp, #8
 800ff2c:	af00      	add	r7, sp, #0
    size_t macCmdsSize = 0;
 800ff2e:	2300      	movs	r3, #0
 800ff30:	607b      	str	r3, [r7, #4]

    if( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE )
 800ff32:	4b13      	ldr	r3, [pc, #76]	@ (800ff80 <VerifyTxFrame+0x58>)
 800ff34:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d01b      	beq.n	800ff74 <VerifyTxFrame+0x4c>
    {
        if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 800ff3c:	1d3b      	adds	r3, r7, #4
 800ff3e:	4618      	mov	r0, r3
 800ff40:	f002 fe28 	bl	8012b94 <LoRaMacCommandsGetSizeSerializedCmds>
 800ff44:	4603      	mov	r3, r0
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d001      	beq.n	800ff4e <VerifyTxFrame+0x26>
        {
            return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 800ff4a:	2313      	movs	r3, #19
 800ff4c:	e013      	b.n	800ff76 <VerifyTxFrame+0x4e>
        }

        if( ValidatePayloadLength( MacCtx.AppDataSize, Nvm.MacGroup1.ChannelsDatarate, macCmdsSize ) == false )
 800ff4e:	4b0d      	ldr	r3, [pc, #52]	@ (800ff84 <VerifyTxFrame+0x5c>)
 800ff50:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 800ff54:	4a0a      	ldr	r2, [pc, #40]	@ (800ff80 <VerifyTxFrame+0x58>)
 800ff56:	f992 1039 	ldrsb.w	r1, [r2, #57]	@ 0x39
 800ff5a:	687a      	ldr	r2, [r7, #4]
 800ff5c:	b2d2      	uxtb	r2, r2
 800ff5e:	4618      	mov	r0, r3
 800ff60:	f7ff f918 	bl	800f194 <ValidatePayloadLength>
 800ff64:	4603      	mov	r3, r0
 800ff66:	f083 0301 	eor.w	r3, r3, #1
 800ff6a:	b2db      	uxtb	r3, r3
 800ff6c:	2b00      	cmp	r3, #0
 800ff6e:	d001      	beq.n	800ff74 <VerifyTxFrame+0x4c>
        {
            return LORAMAC_STATUS_LENGTH_ERROR;
 800ff70:	2308      	movs	r3, #8
 800ff72:	e000      	b.n	800ff76 <VerifyTxFrame+0x4e>
        }
    }
    return LORAMAC_STATUS_OK;
 800ff74:	2300      	movs	r3, #0
}
 800ff76:	4618      	mov	r0, r3
 800ff78:	3708      	adds	r7, #8
 800ff7a:	46bd      	mov	sp, r7
 800ff7c:	bd80      	pop	{r7, pc}
 800ff7e:	bf00      	nop
 800ff80:	20000b90 	.word	0x20000b90
 800ff84:	20000670 	.word	0x20000670

0800ff88 <SerializeTxFrame>:

static LoRaMacStatus_t SerializeTxFrame( void )
{
 800ff88:	b580      	push	{r7, lr}
 800ff8a:	b082      	sub	sp, #8
 800ff8c:	af00      	add	r7, sp, #0
    LoRaMacSerializerStatus_t serializeStatus;

    switch( MacCtx.TxMsg.Type )
 800ff8e:	4b18      	ldr	r3, [pc, #96]	@ (800fff0 <SerializeTxFrame+0x68>)
 800ff90:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	d002      	beq.n	800ff9e <SerializeTxFrame+0x16>
 800ff98:	2b04      	cmp	r3, #4
 800ff9a:	d011      	beq.n	800ffc0 <SerializeTxFrame+0x38>
 800ff9c:	e021      	b.n	800ffe2 <SerializeTxFrame+0x5a>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            serializeStatus = LoRaMacSerializerJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 800ff9e:	4815      	ldr	r0, [pc, #84]	@ (800fff4 <SerializeTxFrame+0x6c>)
 800ffa0:	f004 f929 	bl	80141f6 <LoRaMacSerializerJoinRequest>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffa8:	79fb      	ldrb	r3, [r7, #7]
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	d001      	beq.n	800ffb2 <SerializeTxFrame+0x2a>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffae:	2311      	movs	r3, #17
 800ffb0:	e01a      	b.n	800ffe8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 800ffb2:	4b0f      	ldr	r3, [pc, #60]	@ (800fff0 <SerializeTxFrame+0x68>)
 800ffb4:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ffb8:	461a      	mov	r2, r3
 800ffba:	4b0d      	ldr	r3, [pc, #52]	@ (800fff0 <SerializeTxFrame+0x68>)
 800ffbc:	801a      	strh	r2, [r3, #0]
            break;
 800ffbe:	e012      	b.n	800ffe6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_DATA:
            serializeStatus = LoRaMacSerializerData( &MacCtx.TxMsg.Message.Data );
 800ffc0:	480c      	ldr	r0, [pc, #48]	@ (800fff4 <SerializeTxFrame+0x6c>)
 800ffc2:	f004 f99a 	bl	80142fa <LoRaMacSerializerData>
 800ffc6:	4603      	mov	r3, r0
 800ffc8:	71fb      	strb	r3, [r7, #7]
            if( LORAMAC_SERIALIZER_SUCCESS != serializeStatus )
 800ffca:	79fb      	ldrb	r3, [r7, #7]
 800ffcc:	2b00      	cmp	r3, #0
 800ffce:	d001      	beq.n	800ffd4 <SerializeTxFrame+0x4c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 800ffd0:	2311      	movs	r3, #17
 800ffd2:	e009      	b.n	800ffe8 <SerializeTxFrame+0x60>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 800ffd4:	4b06      	ldr	r3, [pc, #24]	@ (800fff0 <SerializeTxFrame+0x68>)
 800ffd6:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 800ffda:	461a      	mov	r2, r3
 800ffdc:	4b04      	ldr	r3, [pc, #16]	@ (800fff0 <SerializeTxFrame+0x68>)
 800ffde:	801a      	strh	r2, [r3, #0]
            break;
 800ffe0:	e001      	b.n	800ffe6 <SerializeTxFrame+0x5e>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 800ffe2:	2303      	movs	r3, #3
 800ffe4:	e000      	b.n	800ffe8 <SerializeTxFrame+0x60>
    }
    return LORAMAC_STATUS_OK;
 800ffe6:	2300      	movs	r3, #0
}
 800ffe8:	4618      	mov	r0, r3
 800ffea:	3708      	adds	r7, #8
 800ffec:	46bd      	mov	sp, r7
 800ffee:	bd80      	pop	{r7, pc}
 800fff0:	20000670 	.word	0x20000670
 800fff4:	20000778 	.word	0x20000778

0800fff8 <ScheduleTx>:

static LoRaMacStatus_t ScheduleTx( bool allowDelayedTx )
{
 800fff8:	b580      	push	{r7, lr}
 800fffa:	b090      	sub	sp, #64	@ 0x40
 800fffc:	af02      	add	r7, sp, #8
 800fffe:	4603      	mov	r3, r0
 8010000:	73fb      	strb	r3, [r7, #15]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 8010002:	2303      	movs	r3, #3
 8010004:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    NextChanParams_t nextChan;

    // Check class b collisions
    status = CheckForClassBCollision( );
 8010008:	f7ff ff06 	bl	800fe18 <CheckForClassBCollision>
 801000c:	4603      	mov	r3, r0
 801000e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010012:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010016:	2b00      	cmp	r3, #0
 8010018:	d002      	beq.n	8010020 <ScheduleTx+0x28>
    {
        return status;
 801001a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801001e:	e08f      	b.n	8010140 <ScheduleTx+0x148>
    }

    // Update back-off
    CalculateBackOff( );
 8010020:	f000 f8f4 	bl	801020c <CalculateBackOff>

    // Serialize frame
    status = SerializeTxFrame( );
 8010024:	f7ff ffb0 	bl	800ff88 <SerializeTxFrame>
 8010028:	4603      	mov	r3, r0
 801002a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 801002e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010032:	2b00      	cmp	r3, #0
 8010034:	d002      	beq.n	801003c <ScheduleTx+0x44>
    {
        return status;
 8010036:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801003a:	e081      	b.n	8010140 <ScheduleTx+0x148>
    }

    nextChan.AggrTimeOff = Nvm.MacGroup1.AggregatedTimeOff;
 801003c:	4b42      	ldr	r3, [pc, #264]	@ (8010148 <ScheduleTx+0x150>)
 801003e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010040:	617b      	str	r3, [r7, #20]
    nextChan.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010042:	4b41      	ldr	r3, [pc, #260]	@ (8010148 <ScheduleTx+0x150>)
 8010044:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010048:	773b      	strb	r3, [r7, #28]
    nextChan.DutyCycleEnabled = Nvm.MacGroup2.DutyCycleOn;
 801004a:	4b3f      	ldr	r3, [pc, #252]	@ (8010148 <ScheduleTx+0x150>)
 801004c:	f893 3108 	ldrb.w	r3, [r3, #264]	@ 0x108
 8010050:	77bb      	strb	r3, [r7, #30]
    nextChan.ElapsedTimeSinceStartUp = SysTimeSub( SysTimeGetMcuTime( ), Nvm.MacGroup2.InitializationTime );
 8010052:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8010056:	4618      	mov	r0, r3
 8010058:	f00a f918 	bl	801a28c <SysTimeGetMcuTime>
 801005c:	4638      	mov	r0, r7
 801005e:	4b3a      	ldr	r3, [pc, #232]	@ (8010148 <ScheduleTx+0x150>)
 8010060:	f8d3 2114 	ldr.w	r2, [r3, #276]	@ 0x114
 8010064:	9200      	str	r2, [sp, #0]
 8010066:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 801006a:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 801006e:	ca06      	ldmia	r2, {r1, r2}
 8010070:	f00a f86d 	bl	801a14e <SysTimeSub>
 8010074:	f107 0320 	add.w	r3, r7, #32
 8010078:	463a      	mov	r2, r7
 801007a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801007e:	e883 0003 	stmia.w	r3, {r0, r1}
    nextChan.LastAggrTx = Nvm.MacGroup1.LastTxDoneTime;
 8010082:	4b31      	ldr	r3, [pc, #196]	@ (8010148 <ScheduleTx+0x150>)
 8010084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010086:	61bb      	str	r3, [r7, #24]
    nextChan.LastTxIsJoinRequest = false;
 8010088:	2300      	movs	r3, #0
 801008a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    nextChan.Joined = true;
 801008e:	2301      	movs	r3, #1
 8010090:	777b      	strb	r3, [r7, #29]
    nextChan.PktLen = MacCtx.PktBufferLen;
 8010092:	4b2e      	ldr	r3, [pc, #184]	@ (801014c <ScheduleTx+0x154>)
 8010094:	881b      	ldrh	r3, [r3, #0]
 8010096:	857b      	strh	r3, [r7, #42]	@ 0x2a

    // Setup the parameters based on the join status
    if( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_NONE )
 8010098:	4b2b      	ldr	r3, [pc, #172]	@ (8010148 <ScheduleTx+0x150>)
 801009a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 801009e:	2b00      	cmp	r3, #0
 80100a0:	d104      	bne.n	80100ac <ScheduleTx+0xb4>
    {
        nextChan.LastTxIsJoinRequest = true;
 80100a2:	2301      	movs	r3, #1
 80100a4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        nextChan.Joined = false;
 80100a8:	2300      	movs	r3, #0
 80100aa:	777b      	strb	r3, [r7, #29]
    }

    // Select channel
    status = RegionNextChannel( Nvm.MacGroup2.Region, &nextChan, &MacCtx.Channel, &MacCtx.DutyCycleWaitTime, &Nvm.MacGroup1.AggregatedTimeOff );
 80100ac:	4b26      	ldr	r3, [pc, #152]	@ (8010148 <ScheduleTx+0x150>)
 80100ae:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80100b2:	f107 0114 	add.w	r1, r7, #20
 80100b6:	4b26      	ldr	r3, [pc, #152]	@ (8010150 <ScheduleTx+0x158>)
 80100b8:	9300      	str	r3, [sp, #0]
 80100ba:	4b26      	ldr	r3, [pc, #152]	@ (8010154 <ScheduleTx+0x15c>)
 80100bc:	4a26      	ldr	r2, [pc, #152]	@ (8010158 <ScheduleTx+0x160>)
 80100be:	f004 fb5e 	bl	801477e <RegionNextChannel>
 80100c2:	4603      	mov	r3, r0
 80100c4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( status != LORAMAC_STATUS_OK )
 80100c8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d022      	beq.n	8010116 <ScheduleTx+0x11e>
    {
        if( ( status == LORAMAC_STATUS_DUTYCYCLE_RESTRICTED ) &&
 80100d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80100d4:	2b0b      	cmp	r3, #11
 80100d6:	d11b      	bne.n	8010110 <ScheduleTx+0x118>
 80100d8:	7bfb      	ldrb	r3, [r7, #15]
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d018      	beq.n	8010110 <ScheduleTx+0x118>
            ( allowDelayedTx == true ) )
        {
            // Allow delayed transmissions. We have to allow it in case
            // the MAC must retransmit a frame with the frame repetitions
            if( MacCtx.DutyCycleWaitTime != 0 )
 80100de:	4b1b      	ldr	r3, [pc, #108]	@ (801014c <ScheduleTx+0x154>)
 80100e0:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80100e4:	2b00      	cmp	r3, #0
 80100e6:	d011      	beq.n	801010c <ScheduleTx+0x114>
            {// Send later - prepare timer
                MacCtx.MacState |= LORAMAC_TX_DELAYED;
 80100e8:	4b18      	ldr	r3, [pc, #96]	@ (801014c <ScheduleTx+0x154>)
 80100ea:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80100ee:	f043 0320 	orr.w	r3, r3, #32
 80100f2:	4a16      	ldr	r2, [pc, #88]	@ (801014c <ScheduleTx+0x154>)
 80100f4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
                TimerSetValue( &MacCtx.TxDelayedTimer, MacCtx.DutyCycleWaitTime );
 80100f8:	4b14      	ldr	r3, [pc, #80]	@ (801014c <ScheduleTx+0x154>)
 80100fa:	f8d3 3498 	ldr.w	r3, [r3, #1176]	@ 0x498
 80100fe:	4619      	mov	r1, r3
 8010100:	4816      	ldr	r0, [pc, #88]	@ (801015c <ScheduleTx+0x164>)
 8010102:	f00a fe61 	bl	801adc8 <UTIL_TIMER_SetPeriod>
                TimerStart( &MacCtx.TxDelayedTimer );
 8010106:	4815      	ldr	r0, [pc, #84]	@ (801015c <ScheduleTx+0x164>)
 8010108:	f00a fd80 	bl	801ac0c <UTIL_TIMER_Start>
            }
            return LORAMAC_STATUS_OK;
 801010c:	2300      	movs	r3, #0
 801010e:	e017      	b.n	8010140 <ScheduleTx+0x148>
        }
        else
        {// State where the MAC cannot send a frame
            return status;
 8010110:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010114:	e014      	b.n	8010140 <ScheduleTx+0x148>
        }
    }

    // Compute window parameters, offsets, rx symbols, system errors etc.
    ComputeRxWindowParameters( );
 8010116:	f7ff fea1 	bl	800fe5c <ComputeRxWindowParameters>

    // Verify TX frame
    status = VerifyTxFrame( );
 801011a:	f7ff ff05 	bl	800ff28 <VerifyTxFrame>
 801011e:	4603      	mov	r3, r0
 8010120:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if( status != LORAMAC_STATUS_OK )
 8010124:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010128:	2b00      	cmp	r3, #0
 801012a:	d002      	beq.n	8010132 <ScheduleTx+0x13a>
    {
        return status;
 801012c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010130:	e006      	b.n	8010140 <ScheduleTx+0x148>
    }

    // Try to send now
    return SendFrameOnChannel( MacCtx.Channel );
 8010132:	4b06      	ldr	r3, [pc, #24]	@ (801014c <ScheduleTx+0x154>)
 8010134:	f893 341f 	ldrb.w	r3, [r3, #1055]	@ 0x41f
 8010138:	4618      	mov	r0, r3
 801013a:	f000 fb3b 	bl	80107b4 <SendFrameOnChannel>
 801013e:	4603      	mov	r3, r0
}
 8010140:	4618      	mov	r0, r3
 8010142:	3738      	adds	r7, #56	@ 0x38
 8010144:	46bd      	mov	sp, r7
 8010146:	bd80      	pop	{r7, pc}
 8010148:	20000b90 	.word	0x20000b90
 801014c:	20000670 	.word	0x20000670
 8010150:	20000bc0 	.word	0x20000bc0
 8010154:	20000b08 	.word	0x20000b08
 8010158:	20000a8f 	.word	0x20000a8f
 801015c:	200009d8 	.word	0x200009d8

08010160 <SecureFrame>:

static LoRaMacStatus_t SecureFrame( uint8_t txDr, uint8_t txCh )
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b084      	sub	sp, #16
 8010164:	af00      	add	r7, sp, #0
 8010166:	4603      	mov	r3, r0
 8010168:	460a      	mov	r2, r1
 801016a:	71fb      	strb	r3, [r7, #7]
 801016c:	4613      	mov	r3, r2
 801016e:	71bb      	strb	r3, [r7, #6]
    LoRaMacCryptoStatus_t macCryptoStatus = LORAMAC_CRYPTO_ERROR;
 8010170:	2312      	movs	r3, #18
 8010172:	73fb      	strb	r3, [r7, #15]
    uint32_t fCntUp = 0;
 8010174:	2300      	movs	r3, #0
 8010176:	60bb      	str	r3, [r7, #8]

    switch( MacCtx.TxMsg.Type )
 8010178:	4b22      	ldr	r3, [pc, #136]	@ (8010204 <SecureFrame+0xa4>)
 801017a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 801017e:	2b00      	cmp	r3, #0
 8010180:	d002      	beq.n	8010188 <SecureFrame+0x28>
 8010182:	2b04      	cmp	r3, #4
 8010184:	d011      	beq.n	80101aa <SecureFrame+0x4a>
 8010186:	e036      	b.n	80101f6 <SecureFrame+0x96>
    {
        case LORAMAC_MSG_TYPE_JOIN_REQUEST:
            macCryptoStatus = LoRaMacCryptoPrepareJoinRequest( &MacCtx.TxMsg.Message.JoinReq );
 8010188:	481f      	ldr	r0, [pc, #124]	@ (8010208 <SecureFrame+0xa8>)
 801018a:	f003 fc07 	bl	801399c <LoRaMacCryptoPrepareJoinRequest>
 801018e:	4603      	mov	r3, r0
 8010190:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 8010192:	7bfb      	ldrb	r3, [r7, #15]
 8010194:	2b00      	cmp	r3, #0
 8010196:	d001      	beq.n	801019c <SecureFrame+0x3c>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 8010198:	2311      	movs	r3, #17
 801019a:	e02f      	b.n	80101fc <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.JoinReq.BufSize;
 801019c:	4b19      	ldr	r3, [pc, #100]	@ (8010204 <SecureFrame+0xa4>)
 801019e:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80101a2:	461a      	mov	r2, r3
 80101a4:	4b17      	ldr	r3, [pc, #92]	@ (8010204 <SecureFrame+0xa4>)
 80101a6:	801a      	strh	r2, [r3, #0]
            break;
 80101a8:	e027      	b.n	80101fa <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_DATA:

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 80101aa:	f107 0308 	add.w	r3, r7, #8
 80101ae:	4618      	mov	r0, r3
 80101b0:	f003 fb38 	bl	8013824 <LoRaMacCryptoGetFCntUp>
 80101b4:	4603      	mov	r3, r0
 80101b6:	2b00      	cmp	r3, #0
 80101b8:	d001      	beq.n	80101be <SecureFrame+0x5e>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 80101ba:	2312      	movs	r3, #18
 80101bc:	e01e      	b.n	80101fc <SecureFrame+0x9c>
            }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            if( ( MacCtx.ChannelsNbTransCounter >= 1 ) || ( MacCtx.AckTimeoutRetriesCounter > 1 ) )
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( MacCtx.ChannelsNbTransCounter >= 1 )
 80101be:	4b11      	ldr	r3, [pc, #68]	@ (8010204 <SecureFrame+0xa4>)
 80101c0:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	d002      	beq.n	80101ce <SecureFrame+0x6e>
#endif /* LORAMAC_VERSION */
            {
                fCntUp -= 1;
 80101c8:	68bb      	ldr	r3, [r7, #8]
 80101ca:	3b01      	subs	r3, #1
 80101cc:	60bb      	str	r3, [r7, #8]
            }

            macCryptoStatus = LoRaMacCryptoSecureMessage( fCntUp, txDr, txCh, &MacCtx.TxMsg.Message.Data );
 80101ce:	68b8      	ldr	r0, [r7, #8]
 80101d0:	79ba      	ldrb	r2, [r7, #6]
 80101d2:	79f9      	ldrb	r1, [r7, #7]
 80101d4:	4b0c      	ldr	r3, [pc, #48]	@ (8010208 <SecureFrame+0xa8>)
 80101d6:	f003 fcf3 	bl	8013bc0 <LoRaMacCryptoSecureMessage>
 80101da:	4603      	mov	r3, r0
 80101dc:	73fb      	strb	r3, [r7, #15]
            if( LORAMAC_CRYPTO_SUCCESS != macCryptoStatus )
 80101de:	7bfb      	ldrb	r3, [r7, #15]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d001      	beq.n	80101e8 <SecureFrame+0x88>
            {
                return LORAMAC_STATUS_CRYPTO_ERROR;
 80101e4:	2311      	movs	r3, #17
 80101e6:	e009      	b.n	80101fc <SecureFrame+0x9c>
            }
            MacCtx.PktBufferLen = MacCtx.TxMsg.Message.Data.BufSize;
 80101e8:	4b06      	ldr	r3, [pc, #24]	@ (8010204 <SecureFrame+0xa4>)
 80101ea:	f893 310c 	ldrb.w	r3, [r3, #268]	@ 0x10c
 80101ee:	461a      	mov	r2, r3
 80101f0:	4b04      	ldr	r3, [pc, #16]	@ (8010204 <SecureFrame+0xa4>)
 80101f2:	801a      	strh	r2, [r3, #0]
            break;
 80101f4:	e001      	b.n	80101fa <SecureFrame+0x9a>
        case LORAMAC_MSG_TYPE_JOIN_ACCEPT:
        case LORAMAC_MSG_TYPE_UNDEF:
        default:
            return LORAMAC_STATUS_PARAMETER_INVALID;
 80101f6:	2303      	movs	r3, #3
 80101f8:	e000      	b.n	80101fc <SecureFrame+0x9c>
    }
    return LORAMAC_STATUS_OK;
 80101fa:	2300      	movs	r3, #0
}
 80101fc:	4618      	mov	r0, r3
 80101fe:	3710      	adds	r7, #16
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}
 8010204:	20000670 	.word	0x20000670
 8010208:	20000778 	.word	0x20000778

0801020c <CalculateBackOff>:

static void CalculateBackOff( void )
{
 801020c:	b480      	push	{r7}
 801020e:	af00      	add	r7, sp, #0
    // Make sure that the calculation of the backoff time for the aggregated time off will only be done in
    // case the value is zero. It will be set to zero in the function RegionNextChannel.
    if( Nvm.MacGroup1.AggregatedTimeOff == 0 )
 8010210:	4b09      	ldr	r3, [pc, #36]	@ (8010238 <CalculateBackOff+0x2c>)
 8010212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010214:	2b00      	cmp	r3, #0
 8010216:	d10a      	bne.n	801022e <CalculateBackOff+0x22>
    {
        // Update aggregated time-off. This must be an assignment and no incremental
        // update as we do only calculate the time-off based on the last transmission
        Nvm.MacGroup1.AggregatedTimeOff = ( MacCtx.TxTimeOnAir * Nvm.MacGroup2.AggregatedDCycle - MacCtx.TxTimeOnAir );
 8010218:	4b07      	ldr	r3, [pc, #28]	@ (8010238 <CalculateBackOff+0x2c>)
 801021a:	f8b3 310c 	ldrh.w	r3, [r3, #268]	@ 0x10c
 801021e:	3b01      	subs	r3, #1
 8010220:	4a06      	ldr	r2, [pc, #24]	@ (801023c <CalculateBackOff+0x30>)
 8010222:	f8d2 2420 	ldr.w	r2, [r2, #1056]	@ 0x420
 8010226:	fb02 f303 	mul.w	r3, r2, r3
 801022a:	4a03      	ldr	r2, [pc, #12]	@ (8010238 <CalculateBackOff+0x2c>)
 801022c:	6313      	str	r3, [r2, #48]	@ 0x30
    }
}
 801022e:	bf00      	nop
 8010230:	46bd      	mov	sp, r7
 8010232:	bc80      	pop	{r7}
 8010234:	4770      	bx	lr
 8010236:	bf00      	nop
 8010238:	20000b90 	.word	0x20000b90
 801023c:	20000670 	.word	0x20000670

08010240 <RemoveMacCommands>:

static void RemoveMacCommands( LoRaMacRxSlot_t rxSlot, LoRaMacFrameCtrl_t fCtrl, Mcps_t request )
{
 8010240:	b580      	push	{r7, lr}
 8010242:	b082      	sub	sp, #8
 8010244:	af00      	add	r7, sp, #0
 8010246:	4603      	mov	r3, r0
 8010248:	7139      	strb	r1, [r7, #4]
 801024a:	71fb      	strb	r3, [r7, #7]
 801024c:	4613      	mov	r3, r2
 801024e:	71bb      	strb	r3, [r7, #6]
    if( rxSlot == RX_SLOT_WIN_1 || rxSlot == RX_SLOT_WIN_2  )
 8010250:	79fb      	ldrb	r3, [r7, #7]
 8010252:	2b00      	cmp	r3, #0
 8010254:	d002      	beq.n	801025c <RemoveMacCommands+0x1c>
 8010256:	79fb      	ldrb	r3, [r7, #7]
 8010258:	2b01      	cmp	r3, #1
 801025a:	d10d      	bne.n	8010278 <RemoveMacCommands+0x38>
    {
        // Remove all sticky MAC commands answers since we can assume
        // that they have been received by the server.
        if( request == MCPS_CONFIRMED )
 801025c:	79bb      	ldrb	r3, [r7, #6]
 801025e:	2b01      	cmp	r3, #1
 8010260:	d108      	bne.n	8010274 <RemoveMacCommands+0x34>
        {
            if( fCtrl.Bits.Ack == 1 )
 8010262:	793b      	ldrb	r3, [r7, #4]
 8010264:	f003 0320 	and.w	r3, r3, #32
 8010268:	b2db      	uxtb	r3, r3
 801026a:	2b00      	cmp	r3, #0
 801026c:	d004      	beq.n	8010278 <RemoveMacCommands+0x38>
            {  // For confirmed uplinks only if we have received an ACK.
                LoRaMacCommandsRemoveStickyAnsCmds( );
 801026e:	f002 fc6f 	bl	8012b50 <LoRaMacCommandsRemoveStickyAnsCmds>
        else
        {
            LoRaMacCommandsRemoveStickyAnsCmds( );
        }
    }
}
 8010272:	e001      	b.n	8010278 <RemoveMacCommands+0x38>
            LoRaMacCommandsRemoveStickyAnsCmds( );
 8010274:	f002 fc6c 	bl	8012b50 <LoRaMacCommandsRemoveStickyAnsCmds>
}
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}

08010280 <ResetMacParameters>:

static void ResetMacParameters( void )
{
 8010280:	b5b0      	push	{r4, r5, r7, lr}
 8010282:	b090      	sub	sp, #64	@ 0x40
 8010284:	af00      	add	r7, sp, #0
    LoRaMacClassBCallback_t classBCallbacks;
    LoRaMacClassBParams_t classBParams;

    Nvm.MacGroup2.NetworkActivation = ACTIVATION_TYPE_NONE;
 8010286:	4b70      	ldr	r3, [pc, #448]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010288:	2200      	movs	r2, #0
 801028a:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

    // ADR counter
    Nvm.MacGroup1.AdrAckCounter = 0;
 801028e:	4b6e      	ldr	r3, [pc, #440]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010290:	2200      	movs	r2, #0
 8010292:	629a      	str	r2, [r3, #40]	@ 0x28

    MacCtx.ChannelsNbTransCounter = 0;
 8010294:	4b6d      	ldr	r3, [pc, #436]	@ (801044c <ResetMacParameters+0x1cc>)
 8010296:	2200      	movs	r2, #0
 8010298:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetries = 1;
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 801029c:	4b6b      	ldr	r3, [pc, #428]	@ (801044c <ResetMacParameters+0x1cc>)
 801029e:	2200      	movs	r2, #0
 80102a0:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
    MacCtx.ResponseTimeoutStartTime = 0;
 80102a4:	4b69      	ldr	r3, [pc, #420]	@ (801044c <ResetMacParameters+0x1cc>)
 80102a6:	2200      	movs	r2, #0
 80102a8:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    Nvm.MacGroup2.MaxDCycle = 0;
 80102ac:	4b66      	ldr	r3, [pc, #408]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102ae:	2200      	movs	r2, #0
 80102b0:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
    Nvm.MacGroup2.AggregatedDCycle = 1;
 80102b4:	4b64      	ldr	r3, [pc, #400]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102b6:	2201      	movs	r2, #1
 80102b8:	f8a3 210c 	strh.w	r2, [r3, #268]	@ 0x10c

    Nvm.MacGroup1.ChannelsTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80102bc:	4b62      	ldr	r3, [pc, #392]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102be:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80102c2:	4b61      	ldr	r3, [pc, #388]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102c4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    Nvm.MacGroup1.ChannelsDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80102c8:	4b5f      	ldr	r3, [pc, #380]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102ca:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80102ce:	4b5e      	ldr	r3, [pc, #376]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102d0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
    Nvm.MacGroup2.MacParams.Rx1DrOffset = Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset;
 80102d4:	4b5c      	ldr	r3, [pc, #368]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102d6:	f893 20a5 	ldrb.w	r2, [r3, #165]	@ 0xa5
 80102da:	4b5b      	ldr	r3, [pc, #364]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102dc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
    Nvm.MacGroup2.MacParams.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80102e0:	4b59      	ldr	r3, [pc, #356]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102e2:	4a59      	ldr	r2, [pc, #356]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102e4:	3364      	adds	r3, #100	@ 0x64
 80102e6:	32a8      	adds	r2, #168	@ 0xa8
 80102e8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102ec:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 80102f0:	4b55      	ldr	r3, [pc, #340]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102f2:	4a55      	ldr	r2, [pc, #340]	@ (8010448 <ResetMacParameters+0x1c8>)
 80102f4:	336c      	adds	r3, #108	@ 0x6c
 80102f6:	32b0      	adds	r2, #176	@ 0xb0
 80102f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80102fc:	e883 0003 	stmia.w	r3, {r0, r1}
    Nvm.MacGroup2.MacParams.UplinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime;
 8010300:	4b51      	ldr	r3, [pc, #324]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010302:	f893 20b8 	ldrb.w	r2, [r3, #184]	@ 0xb8
 8010306:	4b50      	ldr	r3, [pc, #320]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010308:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
    Nvm.MacGroup2.MacParams.DownlinkDwellTime = Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime;
 801030c:	4b4e      	ldr	r3, [pc, #312]	@ (8010448 <ResetMacParameters+0x1c8>)
 801030e:	f893 20b9 	ldrb.w	r2, [r3, #185]	@ 0xb9
 8010312:	4b4d      	ldr	r3, [pc, #308]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010314:	f883 2075 	strb.w	r2, [r3, #117]	@ 0x75
    Nvm.MacGroup2.MacParams.MaxEirp = Nvm.MacGroup2.MacParamsDefaults.MaxEirp;
 8010318:	4b4b      	ldr	r3, [pc, #300]	@ (8010448 <ResetMacParameters+0x1c8>)
 801031a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801031e:	4a4a      	ldr	r2, [pc, #296]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010320:	6793      	str	r3, [r2, #120]	@ 0x78
    Nvm.MacGroup2.MacParams.AntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8010322:	4b49      	ldr	r3, [pc, #292]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010324:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010328:	4a47      	ldr	r2, [pc, #284]	@ (8010448 <ResetMacParameters+0x1c8>)
 801032a:	67d3      	str	r3, [r2, #124]	@ 0x7c

    MacCtx.NodeAckRequested = false;
 801032c:	4b47      	ldr	r3, [pc, #284]	@ (801044c <ResetMacParameters+0x1cc>)
 801032e:	2200      	movs	r2, #0
 8010330:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    Nvm.MacGroup1.SrvAckRequested = false;
 8010334:	4b44      	ldr	r3, [pc, #272]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010336:	2200      	movs	r2, #0
 8010338:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 801033c:	4b42      	ldr	r3, [pc, #264]	@ (8010448 <ResetMacParameters+0x1c8>)
 801033e:	2200      	movs	r2, #0
 8010340:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
    Nvm.MacGroup2.DownlinkReceived = false;
 8010344:	4b40      	ldr	r3, [pc, #256]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010346:	2200      	movs	r2, #0
 8010348:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
#endif /* LORAMAC_VERSION */

    // Reset to application defaults
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_RESET_TO_DEFAULT_CHANNELS;
 801034c:	2301      	movs	r3, #1
 801034e:	743b      	strb	r3, [r7, #16]
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010350:	4b3f      	ldr	r3, [pc, #252]	@ (8010450 <ResetMacParameters+0x1d0>)
 8010352:	607b      	str	r3, [r7, #4]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010354:	4b3f      	ldr	r3, [pc, #252]	@ (8010454 <ResetMacParameters+0x1d4>)
 8010356:	60bb      	str	r3, [r7, #8]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    params.Bands = &RegionBands;
 8010358:	4b3f      	ldr	r3, [pc, #252]	@ (8010458 <ResetMacParameters+0x1d8>)
 801035a:	60fb      	str	r3, [r7, #12]
#endif /* LORAMAC_VERSION */
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 801035c:	4b3a      	ldr	r3, [pc, #232]	@ (8010448 <ResetMacParameters+0x1c8>)
 801035e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010362:	1d3a      	adds	r2, r7, #4
 8010364:	4611      	mov	r1, r2
 8010366:	4618      	mov	r0, r3
 8010368:	f004 f8f5 	bl	8014556 <RegionInitDefaults>

    // Initialize channel index.
    MacCtx.Channel = 0;
 801036c:	4b37      	ldr	r3, [pc, #220]	@ (801044c <ResetMacParameters+0x1cc>)
 801036e:	2200      	movs	r2, #0
 8010370:	f883 241f 	strb.w	r2, [r3, #1055]	@ 0x41f

    // Initialize Rx2 config parameters.
    MacCtx.RxWindow2Config.Channel = MacCtx.Channel;
 8010374:	4b35      	ldr	r3, [pc, #212]	@ (801044c <ResetMacParameters+0x1cc>)
 8010376:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 801037a:	4b34      	ldr	r3, [pc, #208]	@ (801044c <ResetMacParameters+0x1cc>)
 801037c:	f883 23d0 	strb.w	r2, [r3, #976]	@ 0x3d0
    MacCtx.RxWindow2Config.Frequency = Nvm.MacGroup2.MacParams.Rx2Channel.Frequency;
 8010380:	4b31      	ldr	r3, [pc, #196]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010382:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010384:	4a31      	ldr	r2, [pc, #196]	@ (801044c <ResetMacParameters+0x1cc>)
 8010386:	f8c2 33d4 	str.w	r3, [r2, #980]	@ 0x3d4
    MacCtx.RxWindow2Config.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 801038a:	4b2f      	ldr	r3, [pc, #188]	@ (8010448 <ResetMacParameters+0x1c8>)
 801038c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010390:	4b2e      	ldr	r3, [pc, #184]	@ (801044c <ResetMacParameters+0x1cc>)
 8010392:	f883 23e0 	strb.w	r2, [r3, #992]	@ 0x3e0
    MacCtx.RxWindow2Config.RepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport; /* ST_WORKAROUND: Keep repeater feature */
 8010396:	4b2c      	ldr	r3, [pc, #176]	@ (8010448 <ResetMacParameters+0x1c8>)
 8010398:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 801039c:	4b2b      	ldr	r3, [pc, #172]	@ (801044c <ResetMacParameters+0x1cc>)
 801039e:	f883 23e1 	strb.w	r2, [r3, #993]	@ 0x3e1
    MacCtx.RxWindow2Config.RxContinuous = false;
 80103a2:	4b2a      	ldr	r3, [pc, #168]	@ (801044c <ResetMacParameters+0x1cc>)
 80103a4:	2200      	movs	r2, #0
 80103a6:	f883 23e2 	strb.w	r2, [r3, #994]	@ 0x3e2
    MacCtx.RxWindow2Config.RxSlot = RX_SLOT_WIN_2;
 80103aa:	4b28      	ldr	r3, [pc, #160]	@ (801044c <ResetMacParameters+0x1cc>)
 80103ac:	2201      	movs	r2, #1
 80103ae:	f883 23e3 	strb.w	r2, [r3, #995]	@ 0x3e3
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindow2Config.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80103b2:	4b25      	ldr	r3, [pc, #148]	@ (8010448 <ResetMacParameters+0x1c8>)
 80103b4:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 80103b8:	4b24      	ldr	r3, [pc, #144]	@ (801044c <ResetMacParameters+0x1cc>)
 80103ba:	f883 23e4 	strb.w	r2, [r3, #996]	@ 0x3e4
#endif /* LORAMAC_VERSION */

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig = MacCtx.RxWindow2Config;
 80103be:	4a23      	ldr	r2, [pc, #140]	@ (801044c <ResetMacParameters+0x1cc>)
 80103c0:	4b22      	ldr	r3, [pc, #136]	@ (801044c <ResetMacParameters+0x1cc>)
 80103c2:	f502 747a 	add.w	r4, r2, #1000	@ 0x3e8
 80103c6:	f503 7574 	add.w	r5, r3, #976	@ 0x3d0
 80103ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80103cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80103ce:	e895 0003 	ldmia.w	r5, {r0, r1}
 80103d2:	e884 0003 	stmia.w	r4, {r0, r1}
    MacCtx.RxWindowCConfig.RxContinuous = true;
 80103d6:	4b1d      	ldr	r3, [pc, #116]	@ (801044c <ResetMacParameters+0x1cc>)
 80103d8:	2201      	movs	r2, #1
 80103da:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 80103de:	4b1b      	ldr	r3, [pc, #108]	@ (801044c <ResetMacParameters+0x1cc>)
 80103e0:	2202      	movs	r2, #2
 80103e2:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    // Initialize class b
    // Apply callback
    classBCallbacks.GetTemperatureLevel = NULL;
 80103e6:	2300      	movs	r3, #0
 80103e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    classBCallbacks.MacProcessNotify = NULL;
 80103ea:	2300      	movs	r3, #0
 80103ec:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if( MacCtx.MacCallbacks != NULL )
 80103ee:	4b17      	ldr	r3, [pc, #92]	@ (801044c <ResetMacParameters+0x1cc>)
 80103f0:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d009      	beq.n	801040c <ResetMacParameters+0x18c>
    {
        classBCallbacks.GetTemperatureLevel = MacCtx.MacCallbacks->GetTemperatureLevel;
 80103f8:	4b14      	ldr	r3, [pc, #80]	@ (801044c <ResetMacParameters+0x1cc>)
 80103fa:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 80103fe:	685b      	ldr	r3, [r3, #4]
 8010400:	63bb      	str	r3, [r7, #56]	@ 0x38
        classBCallbacks.MacProcessNotify = MacCtx.MacCallbacks->MacProcessNotify;
 8010402:	4b12      	ldr	r3, [pc, #72]	@ (801044c <ResetMacParameters+0x1cc>)
 8010404:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010408:	691b      	ldr	r3, [r3, #16]
 801040a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }

    // Must all be static. Don't use local references.
    classBParams.MlmeIndication = &MacCtx.MlmeIndication;
 801040c:	4b13      	ldr	r3, [pc, #76]	@ (801045c <ResetMacParameters+0x1dc>)
 801040e:	617b      	str	r3, [r7, #20]
    classBParams.McpsIndication = &MacCtx.McpsIndication;
 8010410:	4b13      	ldr	r3, [pc, #76]	@ (8010460 <ResetMacParameters+0x1e0>)
 8010412:	61bb      	str	r3, [r7, #24]
    classBParams.MlmeConfirm = &MacCtx.MlmeConfirm;
 8010414:	4b13      	ldr	r3, [pc, #76]	@ (8010464 <ResetMacParameters+0x1e4>)
 8010416:	61fb      	str	r3, [r7, #28]
    classBParams.LoRaMacFlags = &MacCtx.MacFlags;
 8010418:	4b13      	ldr	r3, [pc, #76]	@ (8010468 <ResetMacParameters+0x1e8>)
 801041a:	623b      	str	r3, [r7, #32]
    classBParams.LoRaMacDevAddr = &Nvm.MacGroup2.DevAddr;
 801041c:	4b13      	ldr	r3, [pc, #76]	@ (801046c <ResetMacParameters+0x1ec>)
 801041e:	627b      	str	r3, [r7, #36]	@ 0x24
    classBParams.LoRaMacRegion = &Nvm.MacGroup2.Region;
 8010420:	4b13      	ldr	r3, [pc, #76]	@ (8010470 <ResetMacParameters+0x1f0>)
 8010422:	62bb      	str	r3, [r7, #40]	@ 0x28
    classBParams.LoRaMacParams = &Nvm.MacGroup2.MacParams;
 8010424:	4b13      	ldr	r3, [pc, #76]	@ (8010474 <ResetMacParameters+0x1f4>)
 8010426:	62fb      	str	r3, [r7, #44]	@ 0x2c
    classBParams.MulticastChannels = &Nvm.MacGroup2.MulticastChannelList[0];
 8010428:	4b13      	ldr	r3, [pc, #76]	@ (8010478 <ResetMacParameters+0x1f8>)
 801042a:	633b      	str	r3, [r7, #48]	@ 0x30
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    classBParams.NetworkActivation = &Nvm.MacGroup2.NetworkActivation;
 801042c:	4b13      	ldr	r3, [pc, #76]	@ (801047c <ResetMacParameters+0x1fc>)
 801042e:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* LORAMAC_VERSION */

    LoRaMacClassBInit( &classBParams, &classBCallbacks, &Nvm.ClassB );
 8010430:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8010434:	f107 0314 	add.w	r3, r7, #20
 8010438:	4a11      	ldr	r2, [pc, #68]	@ (8010480 <ResetMacParameters+0x200>)
 801043a:	4618      	mov	r0, r3
 801043c:	f002 f8cf 	bl	80125de <LoRaMacClassBInit>
}
 8010440:	bf00      	nop
 8010442:	3740      	adds	r7, #64	@ 0x40
 8010444:	46bd      	mov	sp, r7
 8010446:	bdb0      	pop	{r4, r5, r7, pc}
 8010448:	20000b90 	.word	0x20000b90
 801044c:	20000670 	.word	0x20000670
 8010450:	20000d74 	.word	0x20000d74
 8010454:	20000d78 	.word	0x20000d78
 8010458:	20001688 	.word	0x20001688
 801045c:	20000adc 	.word	0x20000adc
 8010460:	20000a94 	.word	0x20000a94
 8010464:	20000ac8 	.word	0x20000ac8
 8010468:	20000b05 	.word	0x20000b05
 801046c:	20000c64 	.word	0x20000c64
 8010470:	20000bd0 	.word	0x20000bd0
 8010474:	20000bd4 	.word	0x20000bd4
 8010478:	20000c68 	.word	0x20000c68
 801047c:	20000cac 	.word	0x20000cac
 8010480:	200010f4 	.word	0x200010f4

08010484 <RxWindowSetup>:
 *
 * \param [in] rxTimer  Window timer to be topped.
 * \param [in] rxConfig Window parameters to be setup
 */
static void RxWindowSetup( TimerEvent_t* rxTimer, RxConfigParams_t* rxConfig )
{
 8010484:	b580      	push	{r7, lr}
 8010486:	b082      	sub	sp, #8
 8010488:	af00      	add	r7, sp, #0
 801048a:	6078      	str	r0, [r7, #4]
 801048c:	6039      	str	r1, [r7, #0]
    TimerStop( rxTimer );
 801048e:	6878      	ldr	r0, [r7, #4]
 8010490:	f00a fc2a 	bl	801ace8 <UTIL_TIMER_Stop>

    // Ensure the radio is Idle
    Radio.Standby( );
 8010494:	4b11      	ldr	r3, [pc, #68]	@ (80104dc <RxWindowSetup+0x58>)
 8010496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010498:	4798      	blx	r3

    if( RegionRxConfig( Nvm.MacGroup2.Region, rxConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801049a:	4b11      	ldr	r3, [pc, #68]	@ (80104e0 <RxWindowSetup+0x5c>)
 801049c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80104a0:	4a10      	ldr	r2, [pc, #64]	@ (80104e4 <RxWindowSetup+0x60>)
 80104a2:	6839      	ldr	r1, [r7, #0]
 80104a4:	4618      	mov	r0, r3
 80104a6:	f004 f8be 	bl	8014626 <RegionRxConfig>
 80104aa:	4603      	mov	r3, r0
 80104ac:	2b00      	cmp	r3, #0
 80104ae:	d010      	beq.n	80104d2 <RxWindowSetup+0x4e>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 80104b0:	4b0d      	ldr	r3, [pc, #52]	@ (80104e8 <RxWindowSetup+0x64>)
 80104b2:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 80104b6:	4b0c      	ldr	r3, [pc, #48]	@ (80104e8 <RxWindowSetup+0x64>)
 80104b8:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( Nvm.MacGroup2.MacParams.MaxRxWindow );
 80104bc:	4b07      	ldr	r3, [pc, #28]	@ (80104dc <RxWindowSetup+0x58>)
 80104be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80104c0:	4a07      	ldr	r2, [pc, #28]	@ (80104e0 <RxWindowSetup+0x5c>)
 80104c2:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80104c4:	4610      	mov	r0, r2
 80104c6:	4798      	blx	r3
        MacCtx.RxSlot = rxConfig->RxSlot;
 80104c8:	683b      	ldr	r3, [r7, #0]
 80104ca:	7cda      	ldrb	r2, [r3, #19]
 80104cc:	4b06      	ldr	r3, [pc, #24]	@ (80104e8 <RxWindowSetup+0x64>)
 80104ce:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 80104d2:	bf00      	nop
 80104d4:	3708      	adds	r7, #8
 80104d6:	46bd      	mov	sp, r7
 80104d8:	bd80      	pop	{r7, pc}
 80104da:	bf00      	nop
 80104dc:	0801c500 	.word	0x0801c500
 80104e0:	20000b90 	.word	0x20000b90
 80104e4:	20000a98 	.word	0x20000a98
 80104e8:	20000670 	.word	0x20000670

080104ec <OpenContinuousRxCWindow>:

static void OpenContinuousRxCWindow( void )
{
 80104ec:	b590      	push	{r4, r7, lr}
 80104ee:	b083      	sub	sp, #12
 80104f0:	af02      	add	r7, sp, #8
    // Compute RxC windows parameters
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104f2:	4b1e      	ldr	r3, [pc, #120]	@ (801056c <OpenContinuousRxCWindow+0x80>)
 80104f4:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
                                     Nvm.MacGroup2.MacParams.RxCChannel.Datarate,
 80104f8:	4b1c      	ldr	r3, [pc, #112]	@ (801056c <OpenContinuousRxCWindow+0x80>)
 80104fa:	f893 3070 	ldrb.w	r3, [r3, #112]	@ 0x70
    RegionComputeRxWindowParameters( Nvm.MacGroup2.Region,
 80104fe:	b259      	sxtb	r1, r3
 8010500:	4b1a      	ldr	r3, [pc, #104]	@ (801056c <OpenContinuousRxCWindow+0x80>)
 8010502:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8010506:	4b19      	ldr	r3, [pc, #100]	@ (801056c <OpenContinuousRxCWindow+0x80>)
 8010508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801050a:	4c19      	ldr	r4, [pc, #100]	@ (8010570 <OpenContinuousRxCWindow+0x84>)
 801050c:	9400      	str	r4, [sp, #0]
 801050e:	f004 f870 	bl	80145f2 <RegionComputeRxWindowParameters>
                                     Nvm.MacGroup2.MacParams.MinRxSymbols,
                                     Nvm.MacGroup2.MacParams.SystemMaxRxError,
                                     &MacCtx.RxWindowCConfig );

    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010512:	4b18      	ldr	r3, [pc, #96]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 8010514:	2202      	movs	r2, #2
 8010516:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RxWindowCConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801051a:	4b14      	ldr	r3, [pc, #80]	@ (801056c <OpenContinuousRxCWindow+0x80>)
 801051c:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8010520:	4b14      	ldr	r3, [pc, #80]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 8010522:	f883 23fc 	strb.w	r2, [r3, #1020]	@ 0x3fc
#endif /* LORAMAC_VERSION */
    // Setup continuous listening
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010526:	4b13      	ldr	r3, [pc, #76]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 8010528:	2201      	movs	r2, #1
 801052a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa

    // At this point the Radio should be idle.
    // Thus, there is no need to set the radio in standby mode.
    if( RegionRxConfig( Nvm.MacGroup2.Region, &MacCtx.RxWindowCConfig, ( int8_t* )&MacCtx.McpsIndication.RxDatarate ) == true )
 801052e:	4b0f      	ldr	r3, [pc, #60]	@ (801056c <OpenContinuousRxCWindow+0x80>)
 8010530:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010534:	4a10      	ldr	r2, [pc, #64]	@ (8010578 <OpenContinuousRxCWindow+0x8c>)
 8010536:	490e      	ldr	r1, [pc, #56]	@ (8010570 <OpenContinuousRxCWindow+0x84>)
 8010538:	4618      	mov	r0, r3
 801053a:	f004 f874 	bl	8014626 <RegionRxConfig>
 801053e:	4603      	mov	r3, r0
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00f      	beq.n	8010564 <OpenContinuousRxCWindow+0x78>
    {
        MacCtx.MlmeIndication.RxDatarate = MacCtx.McpsIndication.RxDatarate;
 8010544:	4b0b      	ldr	r3, [pc, #44]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 8010546:	f893 2428 	ldrb.w	r2, [r3, #1064]	@ 0x428
 801054a:	4b0a      	ldr	r3, [pc, #40]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 801054c:	f883 246e 	strb.w	r2, [r3, #1134]	@ 0x46e
        Radio.Rx( 0 ); // Continuous mode
 8010550:	4b0a      	ldr	r3, [pc, #40]	@ (801057c <OpenContinuousRxCWindow+0x90>)
 8010552:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010554:	2000      	movs	r0, #0
 8010556:	4798      	blx	r3
        MacCtx.RxSlot = MacCtx.RxWindowCConfig.RxSlot;
 8010558:	4b06      	ldr	r3, [pc, #24]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 801055a:	f893 23fb 	ldrb.w	r2, [r3, #1019]	@ 0x3fb
 801055e:	4b05      	ldr	r3, [pc, #20]	@ (8010574 <OpenContinuousRxCWindow+0x88>)
 8010560:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
    }
}
 8010564:	bf00      	nop
 8010566:	3704      	adds	r7, #4
 8010568:	46bd      	mov	sp, r7
 801056a:	bd90      	pop	{r4, r7, pc}
 801056c:	20000b90 	.word	0x20000b90
 8010570:	20000a58 	.word	0x20000a58
 8010574:	20000670 	.word	0x20000670
 8010578:	20000a98 	.word	0x20000a98
 801057c:	0801c500 	.word	0x0801c500

08010580 <PrepareFrame>:

static LoRaMacStatus_t PrepareFrame( LoRaMacHeader_t* macHdr, LoRaMacFrameCtrl_t* fCtrl, uint8_t fPort, void* fBuffer, uint16_t fBufferSize )
{
 8010580:	b580      	push	{r7, lr}
 8010582:	b088      	sub	sp, #32
 8010584:	af00      	add	r7, sp, #0
 8010586:	60f8      	str	r0, [r7, #12]
 8010588:	60b9      	str	r1, [r7, #8]
 801058a:	603b      	str	r3, [r7, #0]
 801058c:	4613      	mov	r3, r2
 801058e:	71fb      	strb	r3, [r7, #7]
    MacCtx.PktBufferLen = 0;
 8010590:	4b81      	ldr	r3, [pc, #516]	@ (8010798 <PrepareFrame+0x218>)
 8010592:	2200      	movs	r2, #0
 8010594:	801a      	strh	r2, [r3, #0]
    MacCtx.NodeAckRequested = false;
 8010596:	4b80      	ldr	r3, [pc, #512]	@ (8010798 <PrepareFrame+0x218>)
 8010598:	2200      	movs	r2, #0
 801059a:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
    uint32_t fCntUp = 0;
 801059e:	2300      	movs	r3, #0
 80105a0:	61bb      	str	r3, [r7, #24]
    size_t macCmdsSize = 0;
 80105a2:	2300      	movs	r3, #0
 80105a4:	617b      	str	r3, [r7, #20]
    uint8_t availableSize = 0;
 80105a6:	2300      	movs	r3, #0
 80105a8:	77fb      	strb	r3, [r7, #31]

    if( fBuffer == NULL )
 80105aa:	683b      	ldr	r3, [r7, #0]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d101      	bne.n	80105b4 <PrepareFrame+0x34>
    {
        fBufferSize = 0;
 80105b0:	2300      	movs	r3, #0
 80105b2:	853b      	strh	r3, [r7, #40]	@ 0x28
    }

    memcpy1( MacCtx.AppData, ( uint8_t* ) fBuffer, fBufferSize );
 80105b4:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105b6:	461a      	mov	r2, r3
 80105b8:	6839      	ldr	r1, [r7, #0]
 80105ba:	4878      	ldr	r0, [pc, #480]	@ (801079c <PrepareFrame+0x21c>)
 80105bc:	f006 fa4f 	bl	8016a5e <memcpy1>
    MacCtx.AppDataSize = fBufferSize;
 80105c0:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80105c2:	b2da      	uxtb	r2, r3
 80105c4:	4b74      	ldr	r3, [pc, #464]	@ (8010798 <PrepareFrame+0x218>)
 80105c6:	f883 2237 	strb.w	r2, [r3, #567]	@ 0x237
    MacCtx.PktBuffer[0] = macHdr->Value;
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	781a      	ldrb	r2, [r3, #0]
 80105ce:	4b72      	ldr	r3, [pc, #456]	@ (8010798 <PrepareFrame+0x218>)
 80105d0:	709a      	strb	r2, [r3, #2]

    switch( macHdr->Bits.MType )
 80105d2:	68fb      	ldr	r3, [r7, #12]
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80105da:	b2db      	uxtb	r3, r3
 80105dc:	2b07      	cmp	r3, #7
 80105de:	f000 80b9 	beq.w	8010754 <PrepareFrame+0x1d4>
 80105e2:	2b07      	cmp	r3, #7
 80105e4:	f300 80ce 	bgt.w	8010784 <PrepareFrame+0x204>
 80105e8:	2b02      	cmp	r3, #2
 80105ea:	d006      	beq.n	80105fa <PrepareFrame+0x7a>
 80105ec:	2b04      	cmp	r3, #4
 80105ee:	f040 80c9 	bne.w	8010784 <PrepareFrame+0x204>
    {
        case FRAME_TYPE_DATA_CONFIRMED_UP:
            MacCtx.NodeAckRequested = true;
 80105f2:	4b69      	ldr	r3, [pc, #420]	@ (8010798 <PrepareFrame+0x218>)
 80105f4:	2201      	movs	r2, #1
 80105f6:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            // Intentional fall through
        case FRAME_TYPE_DATA_UNCONFIRMED_UP:
            MacCtx.TxMsg.Type = LORAMAC_MSG_TYPE_DATA;
 80105fa:	4b67      	ldr	r3, [pc, #412]	@ (8010798 <PrepareFrame+0x218>)
 80105fc:	2204      	movs	r2, #4
 80105fe:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
            MacCtx.TxMsg.Message.Data.Buffer = MacCtx.PktBuffer;
 8010602:	4b65      	ldr	r3, [pc, #404]	@ (8010798 <PrepareFrame+0x218>)
 8010604:	4a66      	ldr	r2, [pc, #408]	@ (80107a0 <PrepareFrame+0x220>)
 8010606:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            MacCtx.TxMsg.Message.Data.BufSize = LORAMAC_PHY_MAXPAYLOAD;
 801060a:	4b63      	ldr	r3, [pc, #396]	@ (8010798 <PrepareFrame+0x218>)
 801060c:	22ff      	movs	r2, #255	@ 0xff
 801060e:	f883 210c 	strb.w	r2, [r3, #268]	@ 0x10c
            MacCtx.TxMsg.Message.Data.MHDR.Value = macHdr->Value;
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	781a      	ldrb	r2, [r3, #0]
 8010616:	4b60      	ldr	r3, [pc, #384]	@ (8010798 <PrepareFrame+0x218>)
 8010618:	f883 210d 	strb.w	r2, [r3, #269]	@ 0x10d
            MacCtx.TxMsg.Message.Data.FPort = fPort;
 801061c:	4a5e      	ldr	r2, [pc, #376]	@ (8010798 <PrepareFrame+0x218>)
 801061e:	79fb      	ldrb	r3, [r7, #7]
 8010620:	f882 3128 	strb.w	r3, [r2, #296]	@ 0x128
            MacCtx.TxMsg.Message.Data.FHDR.DevAddr = Nvm.MacGroup2.DevAddr;
 8010624:	4b5f      	ldr	r3, [pc, #380]	@ (80107a4 <PrepareFrame+0x224>)
 8010626:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801062a:	4a5b      	ldr	r2, [pc, #364]	@ (8010798 <PrepareFrame+0x218>)
 801062c:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
            MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 8010630:	68bb      	ldr	r3, [r7, #8]
 8010632:	781a      	ldrb	r2, [r3, #0]
 8010634:	4b58      	ldr	r3, [pc, #352]	@ (8010798 <PrepareFrame+0x218>)
 8010636:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
            MacCtx.TxMsg.Message.Data.FRMPayloadSize = MacCtx.AppDataSize;
 801063a:	4b57      	ldr	r3, [pc, #348]	@ (8010798 <PrepareFrame+0x218>)
 801063c:	f893 2237 	ldrb.w	r2, [r3, #567]	@ 0x237
 8010640:	4b55      	ldr	r3, [pc, #340]	@ (8010798 <PrepareFrame+0x218>)
 8010642:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.AppData;
 8010646:	4b54      	ldr	r3, [pc, #336]	@ (8010798 <PrepareFrame+0x218>)
 8010648:	4a54      	ldr	r2, [pc, #336]	@ (801079c <PrepareFrame+0x21c>)
 801064a:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c

            if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoGetFCntUp( &fCntUp ) )
 801064e:	f107 0318 	add.w	r3, r7, #24
 8010652:	4618      	mov	r0, r3
 8010654:	f003 f8e6 	bl	8013824 <LoRaMacCryptoGetFCntUp>
 8010658:	4603      	mov	r3, r0
 801065a:	2b00      	cmp	r3, #0
 801065c:	d001      	beq.n	8010662 <PrepareFrame+0xe2>
            {
                return LORAMAC_STATUS_FCNT_HANDLER_ERROR;
 801065e:	2312      	movs	r3, #18
 8010660:	e096      	b.n	8010790 <PrepareFrame+0x210>
            }
            MacCtx.TxMsg.Message.Data.FHDR.FCnt = ( uint16_t )fCntUp;
 8010662:	69bb      	ldr	r3, [r7, #24]
 8010664:	b29a      	uxth	r2, r3
 8010666:	4b4c      	ldr	r3, [pc, #304]	@ (8010798 <PrepareFrame+0x218>)
 8010668:	f8a3 2116 	strh.w	r2, [r3, #278]	@ 0x116

            // Reset confirm parameters
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            MacCtx.McpsConfirm.NbRetries = 0;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            MacCtx.McpsConfirm.NbTrans = 0;
 801066c:	4b4a      	ldr	r3, [pc, #296]	@ (8010798 <PrepareFrame+0x218>)
 801066e:	2200      	movs	r2, #0
 8010670:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
#endif /* LORAMAC_VERSION */
            MacCtx.McpsConfirm.AckReceived = false;
 8010674:	4b48      	ldr	r3, [pc, #288]	@ (8010798 <PrepareFrame+0x218>)
 8010676:	2200      	movs	r2, #0
 8010678:	f883 2448 	strb.w	r2, [r3, #1096]	@ 0x448
            MacCtx.McpsConfirm.UpLinkCounter = fCntUp;
 801067c:	69bb      	ldr	r3, [r7, #24]
 801067e:	4a46      	ldr	r2, [pc, #280]	@ (8010798 <PrepareFrame+0x218>)
 8010680:	f8c2 3450 	str.w	r3, [r2, #1104]	@ 0x450

            // Handle the MAC commands if there are any available
            if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 8010684:	f107 0314 	add.w	r3, r7, #20
 8010688:	4618      	mov	r0, r3
 801068a:	f002 fa83 	bl	8012b94 <LoRaMacCommandsGetSizeSerializedCmds>
 801068e:	4603      	mov	r3, r0
 8010690:	2b00      	cmp	r3, #0
 8010692:	d001      	beq.n	8010698 <PrepareFrame+0x118>
            {
                return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010694:	2313      	movs	r3, #19
 8010696:	e07b      	b.n	8010790 <PrepareFrame+0x210>
            }

            if( macCmdsSize > 0 )
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	2b00      	cmp	r3, #0
 801069c:	d074      	beq.n	8010788 <PrepareFrame+0x208>
            {
                availableSize = GetMaxAppPayloadWithoutFOptsLength( Nvm.MacGroup1.ChannelsDatarate );
 801069e:	4b41      	ldr	r3, [pc, #260]	@ (80107a4 <PrepareFrame+0x224>)
 80106a0:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7fe fd4d 	bl	800f144 <GetMaxAppPayloadWithoutFOptsLength>
 80106aa:	4603      	mov	r3, r0
 80106ac:	77fb      	strb	r3, [r7, #31]

                // There is application payload available and the MAC commands fit into FOpts field.
                if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize <= LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80106ae:	4b3a      	ldr	r3, [pc, #232]	@ (8010798 <PrepareFrame+0x218>)
 80106b0:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d01d      	beq.n	80106f4 <PrepareFrame+0x174>
 80106b8:	697b      	ldr	r3, [r7, #20]
 80106ba:	2b0f      	cmp	r3, #15
 80106bc:	d81a      	bhi.n	80106f4 <PrepareFrame+0x174>
                {
                    if( LoRaMacCommandsSerializeCmds( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH, &macCmdsSize, MacCtx.TxMsg.Message.Data.FHDR.FOpts ) != LORAMAC_COMMANDS_SUCCESS )
 80106be:	f107 0314 	add.w	r3, r7, #20
 80106c2:	4a39      	ldr	r2, [pc, #228]	@ (80107a8 <PrepareFrame+0x228>)
 80106c4:	4619      	mov	r1, r3
 80106c6:	200f      	movs	r0, #15
 80106c8:	f002 fa7a 	bl	8012bc0 <LoRaMacCommandsSerializeCmds>
 80106cc:	4603      	mov	r3, r0
 80106ce:	2b00      	cmp	r3, #0
 80106d0:	d001      	beq.n	80106d6 <PrepareFrame+0x156>
                    {
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80106d2:	2313      	movs	r3, #19
 80106d4:	e05c      	b.n	8010790 <PrepareFrame+0x210>
                    }
                    fCtrl->Bits.FOptsLen = macCmdsSize;
 80106d6:	697b      	ldr	r3, [r7, #20]
 80106d8:	f003 030f 	and.w	r3, r3, #15
 80106dc:	b2d9      	uxtb	r1, r3
 80106de:	68ba      	ldr	r2, [r7, #8]
 80106e0:	7813      	ldrb	r3, [r2, #0]
 80106e2:	f361 0303 	bfi	r3, r1, #0, #4
 80106e6:	7013      	strb	r3, [r2, #0]
                    // Update FCtrl field with new value of FOptionsLength
                    MacCtx.TxMsg.Message.Data.FHDR.FCtrl.Value = fCtrl->Value;
 80106e8:	68bb      	ldr	r3, [r7, #8]
 80106ea:	781a      	ldrb	r2, [r3, #0]
 80106ec:	4b2a      	ldr	r3, [pc, #168]	@ (8010798 <PrepareFrame+0x218>)
 80106ee:	f883 2114 	strb.w	r2, [r3, #276]	@ 0x114
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
                }
            }

            break;
 80106f2:	e049      	b.n	8010788 <PrepareFrame+0x208>
                else if( ( MacCtx.AppDataSize > 0 ) && ( macCmdsSize > LORA_MAC_COMMAND_MAX_FOPTS_LENGTH ) )
 80106f4:	4b28      	ldr	r3, [pc, #160]	@ (8010798 <PrepareFrame+0x218>)
 80106f6:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 80106fa:	2b00      	cmp	r3, #0
 80106fc:	d010      	beq.n	8010720 <PrepareFrame+0x1a0>
 80106fe:	697b      	ldr	r3, [r7, #20]
 8010700:	2b0f      	cmp	r3, #15
 8010702:	d90d      	bls.n	8010720 <PrepareFrame+0x1a0>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010704:	7ffb      	ldrb	r3, [r7, #31]
 8010706:	f107 0114 	add.w	r1, r7, #20
 801070a:	4a28      	ldr	r2, [pc, #160]	@ (80107ac <PrepareFrame+0x22c>)
 801070c:	4618      	mov	r0, r3
 801070e:	f002 fa57 	bl	8012bc0 <LoRaMacCommandsSerializeCmds>
 8010712:	4603      	mov	r3, r0
 8010714:	2b00      	cmp	r3, #0
 8010716:	d001      	beq.n	801071c <PrepareFrame+0x19c>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010718:	2313      	movs	r3, #19
 801071a:	e039      	b.n	8010790 <PrepareFrame+0x210>
                    return LORAMAC_STATUS_SKIPPED_APP_DATA;
 801071c:	230a      	movs	r3, #10
 801071e:	e037      	b.n	8010790 <PrepareFrame+0x210>
                    if( LoRaMacCommandsSerializeCmds( availableSize, &macCmdsSize, MacCtx.MacCommandsBuffer ) != LORAMAC_COMMANDS_SUCCESS )
 8010720:	7ffb      	ldrb	r3, [r7, #31]
 8010722:	f107 0114 	add.w	r1, r7, #20
 8010726:	4a21      	ldr	r2, [pc, #132]	@ (80107ac <PrepareFrame+0x22c>)
 8010728:	4618      	mov	r0, r3
 801072a:	f002 fa49 	bl	8012bc0 <LoRaMacCommandsSerializeCmds>
 801072e:	4603      	mov	r3, r0
 8010730:	2b00      	cmp	r3, #0
 8010732:	d001      	beq.n	8010738 <PrepareFrame+0x1b8>
                        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8010734:	2313      	movs	r3, #19
 8010736:	e02b      	b.n	8010790 <PrepareFrame+0x210>
                    MacCtx.TxMsg.Message.Data.FPort = 0;
 8010738:	4b17      	ldr	r3, [pc, #92]	@ (8010798 <PrepareFrame+0x218>)
 801073a:	2200      	movs	r2, #0
 801073c:	f883 2128 	strb.w	r2, [r3, #296]	@ 0x128
                    MacCtx.TxMsg.Message.Data.FRMPayload = MacCtx.MacCommandsBuffer;
 8010740:	4b15      	ldr	r3, [pc, #84]	@ (8010798 <PrepareFrame+0x218>)
 8010742:	4a1a      	ldr	r2, [pc, #104]	@ (80107ac <PrepareFrame+0x22c>)
 8010744:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
                    MacCtx.TxMsg.Message.Data.FRMPayloadSize = macCmdsSize;
 8010748:	697b      	ldr	r3, [r7, #20]
 801074a:	b2da      	uxtb	r2, r3
 801074c:	4b12      	ldr	r3, [pc, #72]	@ (8010798 <PrepareFrame+0x218>)
 801074e:	f883 2130 	strb.w	r2, [r3, #304]	@ 0x130
            break;
 8010752:	e019      	b.n	8010788 <PrepareFrame+0x208>
        case FRAME_TYPE_PROPRIETARY:
            if( ( fBuffer != NULL ) && ( MacCtx.AppDataSize > 0 ) )
 8010754:	683b      	ldr	r3, [r7, #0]
 8010756:	2b00      	cmp	r3, #0
 8010758:	d018      	beq.n	801078c <PrepareFrame+0x20c>
 801075a:	4b0f      	ldr	r3, [pc, #60]	@ (8010798 <PrepareFrame+0x218>)
 801075c:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 8010760:	2b00      	cmp	r3, #0
 8010762:	d013      	beq.n	801078c <PrepareFrame+0x20c>
            {
                memcpy1( MacCtx.PktBuffer + LORAMAC_MHDR_FIELD_SIZE, ( uint8_t* ) fBuffer, MacCtx.AppDataSize );
 8010764:	4812      	ldr	r0, [pc, #72]	@ (80107b0 <PrepareFrame+0x230>)
 8010766:	4b0c      	ldr	r3, [pc, #48]	@ (8010798 <PrepareFrame+0x218>)
 8010768:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801076c:	461a      	mov	r2, r3
 801076e:	6839      	ldr	r1, [r7, #0]
 8010770:	f006 f975 	bl	8016a5e <memcpy1>
                MacCtx.PktBufferLen = LORAMAC_MHDR_FIELD_SIZE + MacCtx.AppDataSize;
 8010774:	4b08      	ldr	r3, [pc, #32]	@ (8010798 <PrepareFrame+0x218>)
 8010776:	f893 3237 	ldrb.w	r3, [r3, #567]	@ 0x237
 801077a:	3301      	adds	r3, #1
 801077c:	b29a      	uxth	r2, r3
 801077e:	4b06      	ldr	r3, [pc, #24]	@ (8010798 <PrepareFrame+0x218>)
 8010780:	801a      	strh	r2, [r3, #0]
            }
            break;
 8010782:	e003      	b.n	801078c <PrepareFrame+0x20c>
        default:
            return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8010784:	2302      	movs	r3, #2
 8010786:	e003      	b.n	8010790 <PrepareFrame+0x210>
            break;
 8010788:	bf00      	nop
 801078a:	e000      	b.n	801078e <PrepareFrame+0x20e>
            break;
 801078c:	bf00      	nop
    }

    return LORAMAC_STATUS_OK;
 801078e:	2300      	movs	r3, #0
}
 8010790:	4618      	mov	r0, r3
 8010792:	3720      	adds	r7, #32
 8010794:	46bd      	mov	sp, r7
 8010796:	bd80      	pop	{r7, pc}
 8010798:	20000670 	.word	0x20000670
 801079c:	200007a8 	.word	0x200007a8
 80107a0:	20000672 	.word	0x20000672
 80107a4:	20000b90 	.word	0x20000b90
 80107a8:	20000788 	.word	0x20000788
 80107ac:	20000b10 	.word	0x20000b10
 80107b0:	20000673 	.word	0x20000673

080107b4 <SendFrameOnChannel>:

static LoRaMacStatus_t SendFrameOnChannel( uint8_t channel )
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b08a      	sub	sp, #40	@ 0x28
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	4603      	mov	r3, r0
 80107bc:	71fb      	strb	r3, [r7, #7]
    LoRaMacStatus_t status = LORAMAC_STATUS_PARAMETER_INVALID;
 80107be:	2303      	movs	r3, #3
 80107c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    TxConfigParams_t txConfig;
    int8_t txPower = 0;
 80107c4:	2300      	movs	r3, #0
 80107c6:	73fb      	strb	r3, [r7, #15]

    txConfig.Channel = channel;
 80107c8:	79fb      	ldrb	r3, [r7, #7]
 80107ca:	743b      	strb	r3, [r7, #16]
    txConfig.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 80107cc:	4b4a      	ldr	r3, [pc, #296]	@ (80108f8 <SendFrameOnChannel+0x144>)
 80107ce:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 80107d2:	747b      	strb	r3, [r7, #17]
    txConfig.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 80107d4:	4b48      	ldr	r3, [pc, #288]	@ (80108f8 <SendFrameOnChannel+0x144>)
 80107d6:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 80107da:	74bb      	strb	r3, [r7, #18]
    txConfig.MaxEirp = Nvm.MacGroup2.MacParams.MaxEirp;
 80107dc:	4b46      	ldr	r3, [pc, #280]	@ (80108f8 <SendFrameOnChannel+0x144>)
 80107de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80107e0:	617b      	str	r3, [r7, #20]
    txConfig.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 80107e2:	4b45      	ldr	r3, [pc, #276]	@ (80108f8 <SendFrameOnChannel+0x144>)
 80107e4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80107e6:	61bb      	str	r3, [r7, #24]
    txConfig.PktLen = MacCtx.PktBufferLen;
 80107e8:	4b44      	ldr	r3, [pc, #272]	@ (80108fc <SendFrameOnChannel+0x148>)
 80107ea:	881b      	ldrh	r3, [r3, #0]
 80107ec:	83bb      	strh	r3, [r7, #28]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    txConfig.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 80107ee:	4b42      	ldr	r3, [pc, #264]	@ (80108f8 <SendFrameOnChannel+0x144>)
 80107f0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80107f4:	77bb      	strb	r3, [r7, #30]
#endif /* LORAMAC_VERSION */

    RegionTxConfig( Nvm.MacGroup2.Region, &txConfig, &txPower, &MacCtx.TxTimeOnAir );
 80107f6:	4b40      	ldr	r3, [pc, #256]	@ (80108f8 <SendFrameOnChannel+0x144>)
 80107f8:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 80107fc:	f107 020f 	add.w	r2, r7, #15
 8010800:	f107 0110 	add.w	r1, r7, #16
 8010804:	4b3e      	ldr	r3, [pc, #248]	@ (8010900 <SendFrameOnChannel+0x14c>)
 8010806:	f003 ff23 	bl	8014650 <RegionTxConfig>

    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 801080a:	4b3c      	ldr	r3, [pc, #240]	@ (80108fc <SendFrameOnChannel+0x148>)
 801080c:	2201      	movs	r2, #1
 801080e:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445
    MacCtx.McpsConfirm.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 8010812:	4b39      	ldr	r3, [pc, #228]	@ (80108f8 <SendFrameOnChannel+0x144>)
 8010814:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010818:	b2da      	uxtb	r2, r3
 801081a:	4b38      	ldr	r3, [pc, #224]	@ (80108fc <SendFrameOnChannel+0x148>)
 801081c:	f883 2446 	strb.w	r2, [r3, #1094]	@ 0x446
    MacCtx.McpsConfirm.TxPower = txPower;
 8010820:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8010824:	4b35      	ldr	r3, [pc, #212]	@ (80108fc <SendFrameOnChannel+0x148>)
 8010826:	f883 2447 	strb.w	r2, [r3, #1095]	@ 0x447
    MacCtx.McpsConfirm.Channel = channel;
 801082a:	79fb      	ldrb	r3, [r7, #7]
 801082c:	4a33      	ldr	r2, [pc, #204]	@ (80108fc <SendFrameOnChannel+0x148>)
 801082e:	f8c2 3454 	str.w	r3, [r2, #1108]	@ 0x454

    // Store the time on air
    MacCtx.McpsConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 8010832:	4b32      	ldr	r3, [pc, #200]	@ (80108fc <SendFrameOnChannel+0x148>)
 8010834:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010838:	4a30      	ldr	r2, [pc, #192]	@ (80108fc <SendFrameOnChannel+0x148>)
 801083a:	f8c2 344c 	str.w	r3, [r2, #1100]	@ 0x44c
    MacCtx.MlmeConfirm.TxTimeOnAir = MacCtx.TxTimeOnAir;
 801083e:	4b2f      	ldr	r3, [pc, #188]	@ (80108fc <SendFrameOnChannel+0x148>)
 8010840:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 8010844:	4a2d      	ldr	r2, [pc, #180]	@ (80108fc <SendFrameOnChannel+0x148>)
 8010846:	f8c2 345c 	str.w	r3, [r2, #1116]	@ 0x45c

    if( LoRaMacClassBIsBeaconModeActive( ) == true )
 801084a:	f001 ff34 	bl	80126b6 <LoRaMacClassBIsBeaconModeActive>
 801084e:	4603      	mov	r3, r0
 8010850:	2b00      	cmp	r3, #0
 8010852:	d00b      	beq.n	801086c <SendFrameOnChannel+0xb8>
    {
        // Currently, the Time-On-Air can only be computed when the radio is configured with
        // the TX configuration
        TimerTime_t collisionTime = LoRaMacClassBIsUplinkCollision( MacCtx.TxTimeOnAir );
 8010854:	4b29      	ldr	r3, [pc, #164]	@ (80108fc <SendFrameOnChannel+0x148>)
 8010856:	f8d3 3420 	ldr.w	r3, [r3, #1056]	@ 0x420
 801085a:	4618      	mov	r0, r3
 801085c:	f001 ff96 	bl	801278c <LoRaMacClassBIsUplinkCollision>
 8010860:	6238      	str	r0, [r7, #32]

        if( collisionTime > 0 )
 8010862:	6a3b      	ldr	r3, [r7, #32]
 8010864:	2b00      	cmp	r3, #0
 8010866:	d001      	beq.n	801086c <SendFrameOnChannel+0xb8>
        {
            return LORAMAC_STATUS_BUSY_UPLINK_COLLISION;
 8010868:	2310      	movs	r3, #16
 801086a:	e040      	b.n	80108ee <SendFrameOnChannel+0x13a>
        }
    }

    if( Nvm.MacGroup2.DeviceClass == CLASS_B )
 801086c:	4b22      	ldr	r3, [pc, #136]	@ (80108f8 <SendFrameOnChannel+0x144>)
 801086e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8010872:	2b01      	cmp	r3, #1
 8010874:	d101      	bne.n	801087a <SendFrameOnChannel+0xc6>
    {
        // Stop slots for class b
        LoRaMacClassBStopRxSlots( );
 8010876:	f001 ff93 	bl	80127a0 <LoRaMacClassBStopRxSlots>
    }

    LoRaMacClassBHaltBeaconing( );
 801087a:	f001 ff2d 	bl	80126d8 <LoRaMacClassBHaltBeaconing>

    // Secure frame
    status = SecureFrame( Nvm.MacGroup1.ChannelsDatarate, MacCtx.Channel );
 801087e:	4b1e      	ldr	r3, [pc, #120]	@ (80108f8 <SendFrameOnChannel+0x144>)
 8010880:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8010884:	b2db      	uxtb	r3, r3
 8010886:	4a1d      	ldr	r2, [pc, #116]	@ (80108fc <SendFrameOnChannel+0x148>)
 8010888:	f892 241f 	ldrb.w	r2, [r2, #1055]	@ 0x41f
 801088c:	4611      	mov	r1, r2
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fc66 	bl	8010160 <SecureFrame>
 8010894:	4603      	mov	r3, r0
 8010896:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if( status != LORAMAC_STATUS_OK )
 801089a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d002      	beq.n	80108a8 <SendFrameOnChannel+0xf4>
    {
        return status;
 80108a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80108a6:	e022      	b.n	80108ee <SendFrameOnChannel+0x13a>
    }

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 80108a8:	4b14      	ldr	r3, [pc, #80]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108aa:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80108ae:	f043 0302 	orr.w	r3, r3, #2
 80108b2:	4a12      	ldr	r2, [pc, #72]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108b4:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340
    if( MacCtx.NodeAckRequested == false )
    {
        MacCtx.ChannelsNbTransCounter++;
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.ChannelsNbTransCounter++;
 80108b8:	4b10      	ldr	r3, [pc, #64]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108ba:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 80108be:	3301      	adds	r3, #1
 80108c0:	b2da      	uxtb	r2, r3
 80108c2:	4b0e      	ldr	r3, [pc, #56]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108c4:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.McpsConfirm.NbTrans = MacCtx.ChannelsNbTransCounter;
 80108c8:	4b0c      	ldr	r3, [pc, #48]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108ca:	f893 241c 	ldrb.w	r2, [r3, #1052]	@ 0x41c
 80108ce:	4b0b      	ldr	r3, [pc, #44]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108d0:	f883 2449 	strb.w	r2, [r3, #1097]	@ 0x449
    MacCtx.ResponseTimeoutStartTime = 0;
 80108d4:	4b09      	ldr	r3, [pc, #36]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108d6:	2200      	movs	r2, #0
 80108d8:	f8c3 249c 	str.w	r2, [r3, #1180]	@ 0x49c
#endif /* LORAMAC_VERSION */

    // Send now
    Radio.Send( MacCtx.PktBuffer, MacCtx.PktBufferLen );
 80108dc:	4b09      	ldr	r3, [pc, #36]	@ (8010904 <SendFrameOnChannel+0x150>)
 80108de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80108e0:	4a06      	ldr	r2, [pc, #24]	@ (80108fc <SendFrameOnChannel+0x148>)
 80108e2:	8812      	ldrh	r2, [r2, #0]
 80108e4:	b2d2      	uxtb	r2, r2
 80108e6:	4611      	mov	r1, r2
 80108e8:	4807      	ldr	r0, [pc, #28]	@ (8010908 <SendFrameOnChannel+0x154>)
 80108ea:	4798      	blx	r3

    return LORAMAC_STATUS_OK;
 80108ec:	2300      	movs	r3, #0
}
 80108ee:	4618      	mov	r0, r3
 80108f0:	3728      	adds	r7, #40	@ 0x28
 80108f2:	46bd      	mov	sp, r7
 80108f4:	bd80      	pop	{r7, pc}
 80108f6:	bf00      	nop
 80108f8:	20000b90 	.word	0x20000b90
 80108fc:	20000670 	.word	0x20000670
 8010900:	20000a90 	.word	0x20000a90
 8010904:	0801c500 	.word	0x0801c500
 8010908:	20000672 	.word	0x20000672

0801090c <SetTxContinuousWave>:

    return LORAMAC_STATUS_OK;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static LoRaMacStatus_t SetTxContinuousWave( uint16_t timeout, uint32_t frequency, uint8_t power )
{
 801090c:	b580      	push	{r7, lr}
 801090e:	b082      	sub	sp, #8
 8010910:	af00      	add	r7, sp, #0
 8010912:	4603      	mov	r3, r0
 8010914:	6039      	str	r1, [r7, #0]
 8010916:	80fb      	strh	r3, [r7, #6]
 8010918:	4613      	mov	r3, r2
 801091a:	717b      	strb	r3, [r7, #5]
    Radio.SetTxContinuousWave( frequency, power, timeout );
 801091c:	4b09      	ldr	r3, [pc, #36]	@ (8010944 <SetTxContinuousWave+0x38>)
 801091e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010920:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8010924:	88fa      	ldrh	r2, [r7, #6]
 8010926:	6838      	ldr	r0, [r7, #0]
 8010928:	4798      	blx	r3

    MacCtx.MacState |= LORAMAC_TX_RUNNING;
 801092a:	4b07      	ldr	r3, [pc, #28]	@ (8010948 <SetTxContinuousWave+0x3c>)
 801092c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010930:	f043 0302 	orr.w	r3, r3, #2
 8010934:	4a04      	ldr	r2, [pc, #16]	@ (8010948 <SetTxContinuousWave+0x3c>)
 8010936:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 801093a:	2300      	movs	r3, #0
}
 801093c:	4618      	mov	r0, r3
 801093e:	3708      	adds	r7, #8
 8010940:	46bd      	mov	sp, r7
 8010942:	bd80      	pop	{r7, pc}
 8010944:	0801c500 	.word	0x0801c500
 8010948:	20000670 	.word	0x20000670

0801094c <RestoreNvmData>:
#endif /* LORAMAC_VERSION */

static LoRaMacStatus_t RestoreNvmData( void )
{
 801094c:	b580      	push	{r7, lr}
 801094e:	b082      	sub	sp, #8
 8010950:	af00      	add	r7, sp, #0
    uint32_t crc = 0;
 8010952:	2300      	movs	r3, #0
 8010954:	607b      	str	r3, [r7, #4]

    // Status and parameter validation
    if( MacCtx.MacState != LORAMAC_STOPPED )
 8010956:	4b3e      	ldr	r3, [pc, #248]	@ (8010a50 <RestoreNvmData+0x104>)
 8010958:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801095c:	2b01      	cmp	r3, #1
 801095e:	d001      	beq.n	8010964 <RestoreNvmData+0x18>
    {
        return LORAMAC_STATUS_BUSY;
 8010960:	2301      	movs	r3, #1
 8010962:	e071      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    // Crypto
    crc = Crc32( ( uint8_t* ) &(NvmBackup.Crypto), sizeof( NvmBackup.Crypto ) -
 8010964:	2124      	movs	r1, #36	@ 0x24
 8010966:	483b      	ldr	r0, [pc, #236]	@ (8010a54 <RestoreNvmData+0x108>)
 8010968:	f006 f8ce 	bl	8016b08 <Crc32>
 801096c:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.Crypto.Crc32 ) );
    if( crc != NvmBackup.Crypto.Crc32 )
 801096e:	4b39      	ldr	r3, [pc, #228]	@ (8010a54 <RestoreNvmData+0x108>)
 8010970:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010972:	687a      	ldr	r2, [r7, #4]
 8010974:	429a      	cmp	r2, r3
 8010976:	d001      	beq.n	801097c <RestoreNvmData+0x30>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010978:	2317      	movs	r3, #23
 801097a:	e065      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    // MacGroup1
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup1), sizeof( NvmBackup.MacGroup1 ) -
 801097c:	2114      	movs	r1, #20
 801097e:	4836      	ldr	r0, [pc, #216]	@ (8010a58 <RestoreNvmData+0x10c>)
 8010980:	f006 f8c2 	bl	8016b08 <Crc32>
 8010984:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup1.Crc32 ) );
    if( crc != NvmBackup.MacGroup1.Crc32 )
 8010986:	4b33      	ldr	r3, [pc, #204]	@ (8010a54 <RestoreNvmData+0x108>)
 8010988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801098a:	687a      	ldr	r2, [r7, #4]
 801098c:	429a      	cmp	r2, r3
 801098e:	d001      	beq.n	8010994 <RestoreNvmData+0x48>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 8010990:	2317      	movs	r3, #23
 8010992:	e059      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    // MacGroup2
    crc = Crc32( ( uint8_t* ) &(NvmBackup.MacGroup2), sizeof( NvmBackup.MacGroup2 ) -
 8010994:	21e0      	movs	r1, #224	@ 0xe0
 8010996:	4831      	ldr	r0, [pc, #196]	@ (8010a5c <RestoreNvmData+0x110>)
 8010998:	f006 f8b6 	bl	8016b08 <Crc32>
 801099c:	6078      	str	r0, [r7, #4]
                                               sizeof( NvmBackup.MacGroup2.Crc32 ) );
    if( crc != NvmBackup.MacGroup2.Crc32 )
 801099e:	4b2d      	ldr	r3, [pc, #180]	@ (8010a54 <RestoreNvmData+0x108>)
 80109a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80109a4:	687a      	ldr	r2, [r7, #4]
 80109a6:	429a      	cmp	r2, r3
 80109a8:	d001      	beq.n	80109ae <RestoreNvmData+0x62>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109aa:	2317      	movs	r3, #23
 80109ac:	e04c      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    // Secure Element
    crc = Crc32( ( uint8_t* ) &(NvmBackup.SecureElement), sizeof( NvmBackup.SecureElement ) -
 80109ae:	21bc      	movs	r1, #188	@ 0xbc
 80109b0:	482b      	ldr	r0, [pc, #172]	@ (8010a60 <RestoreNvmData+0x114>)
 80109b2:	f006 f8a9 	bl	8016b08 <Crc32>
 80109b6:	6078      	str	r0, [r7, #4]
                                                   sizeof( NvmBackup.SecureElement.Crc32 ) );
    if( crc != NvmBackup.SecureElement.Crc32 )
 80109b8:	4b26      	ldr	r3, [pc, #152]	@ (8010a54 <RestoreNvmData+0x108>)
 80109ba:	f8d3 31e0 	ldr.w	r3, [r3, #480]	@ 0x1e0
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d001      	beq.n	80109c8 <RestoreNvmData+0x7c>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109c4:	2317      	movs	r3, #23
 80109c6:	e03f      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    // Region
    crc = Crc32( ( uint8_t* ) &(NvmBackup.RegionGroup1), sizeof( NvmBackup.RegionGroup1 ) -
 80109c8:	2100      	movs	r1, #0
 80109ca:	4826      	ldr	r0, [pc, #152]	@ (8010a64 <RestoreNvmData+0x118>)
 80109cc:	f006 f89c 	bl	8016b08 <Crc32>
 80109d0:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.RegionGroup1.Crc32 ) );
    if( crc != NvmBackup.RegionGroup1.Crc32 )
 80109d2:	4b20      	ldr	r3, [pc, #128]	@ (8010a54 <RestoreNvmData+0x108>)
 80109d4:	f8d3 31e4 	ldr.w	r3, [r3, #484]	@ 0x1e4
 80109d8:	687a      	ldr	r2, [r7, #4]
 80109da:	429a      	cmp	r2, r3
 80109dc:	d001      	beq.n	80109e2 <RestoreNvmData+0x96>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109de:	2317      	movs	r3, #23
 80109e0:	e032      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    crc = Crc32( ( uint8_t* ) &(NvmBackup.ClassB), sizeof( NvmBackup.ClassB ) -
 80109e2:	2114      	movs	r1, #20
 80109e4:	4820      	ldr	r0, [pc, #128]	@ (8010a68 <RestoreNvmData+0x11c>)
 80109e6:	f006 f88f 	bl	8016b08 <Crc32>
 80109ea:	6078      	str	r0, [r7, #4]
                                            sizeof( NvmBackup.ClassB.Crc32 ) );
    if( crc != NvmBackup.ClassB.Crc32 )
 80109ec:	4b19      	ldr	r3, [pc, #100]	@ (8010a54 <RestoreNvmData+0x108>)
 80109ee:	f8d3 3578 	ldr.w	r3, [r3, #1400]	@ 0x578
 80109f2:	687a      	ldr	r2, [r7, #4]
 80109f4:	429a      	cmp	r2, r3
 80109f6:	d001      	beq.n	80109fc <RestoreNvmData+0xb0>
    {
        return LORAMAC_STATUS_NVM_DATA_INCONSISTENT;
 80109f8:	2317      	movs	r3, #23
 80109fa:	e025      	b.n	8010a48 <RestoreNvmData+0xfc>
    }

    memcpy1( ( uint8_t* ) &Nvm, ( uint8_t* ) &NvmBackup, sizeof( LoRaMacNvmData_t ) );
 80109fc:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010a00:	4914      	ldr	r1, [pc, #80]	@ (8010a54 <RestoreNvmData+0x108>)
 8010a02:	481a      	ldr	r0, [pc, #104]	@ (8010a6c <RestoreNvmData+0x120>)
 8010a04:	f006 f82b 	bl	8016a5e <memcpy1>
    memset1( ( uint8_t* ) &NvmBackup, 0, sizeof( LoRaMacNvmData_t ) );
 8010a08:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010a0c:	2100      	movs	r1, #0
 8010a0e:	4811      	ldr	r0, [pc, #68]	@ (8010a54 <RestoreNvmData+0x108>)
 8010a10:	f006 f860 	bl	8016ad4 <memset1>

    // Initialize RxC config parameters.
    MacCtx.RxWindowCConfig.Channel = MacCtx.Channel;
 8010a14:	4b0e      	ldr	r3, [pc, #56]	@ (8010a50 <RestoreNvmData+0x104>)
 8010a16:	f893 241f 	ldrb.w	r2, [r3, #1055]	@ 0x41f
 8010a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8010a50 <RestoreNvmData+0x104>)
 8010a1c:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
    MacCtx.RxWindowCConfig.Frequency = Nvm.MacGroup2.MacParams.RxCChannel.Frequency;
 8010a20:	4b12      	ldr	r3, [pc, #72]	@ (8010a6c <RestoreNvmData+0x120>)
 8010a22:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010a24:	4a0a      	ldr	r2, [pc, #40]	@ (8010a50 <RestoreNvmData+0x104>)
 8010a26:	f8c2 33ec 	str.w	r3, [r2, #1004]	@ 0x3ec
    MacCtx.RxWindowCConfig.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8010a2a:	4b10      	ldr	r3, [pc, #64]	@ (8010a6c <RestoreNvmData+0x120>)
 8010a2c:	f893 2075 	ldrb.w	r2, [r3, #117]	@ 0x75
 8010a30:	4b07      	ldr	r3, [pc, #28]	@ (8010a50 <RestoreNvmData+0x104>)
 8010a32:	f883 23f8 	strb.w	r2, [r3, #1016]	@ 0x3f8
    MacCtx.RxWindowCConfig.RxContinuous = true;
 8010a36:	4b06      	ldr	r3, [pc, #24]	@ (8010a50 <RestoreNvmData+0x104>)
 8010a38:	2201      	movs	r2, #1
 8010a3a:	f883 23fa 	strb.w	r2, [r3, #1018]	@ 0x3fa
    MacCtx.RxWindowCConfig.RxSlot = RX_SLOT_WIN_CLASS_C;
 8010a3e:	4b04      	ldr	r3, [pc, #16]	@ (8010a50 <RestoreNvmData+0x104>)
 8010a40:	2202      	movs	r2, #2
 8010a42:	f883 23fb 	strb.w	r2, [r3, #1019]	@ 0x3fb

    return LORAMAC_STATUS_OK;
 8010a46:	2300      	movs	r3, #0
}
 8010a48:	4618      	mov	r0, r3
 8010a4a:	3708      	adds	r7, #8
 8010a4c:	46bd      	mov	sp, r7
 8010a4e:	bd80      	pop	{r7, pc}
 8010a50:	20000670 	.word	0x20000670
 8010a54:	2000110c 	.word	0x2000110c
 8010a58:	20001134 	.word	0x20001134
 8010a5c:	2000114c 	.word	0x2000114c
 8010a60:	20001230 	.word	0x20001230
 8010a64:	200012f0 	.word	0x200012f0
 8010a68:	20001670 	.word	0x20001670
 8010a6c:	20000b90 	.word	0x20000b90

08010a70 <DetermineFrameType>:

static LoRaMacStatus_t DetermineFrameType( LoRaMacMessageData_t* macMsg, FType_t* fType )
{
 8010a70:	b480      	push	{r7}
 8010a72:	b083      	sub	sp, #12
 8010a74:	af00      	add	r7, sp, #0
 8010a76:	6078      	str	r0, [r7, #4]
 8010a78:	6039      	str	r1, [r7, #0]
    if( ( macMsg == NULL ) || ( fType == NULL ) )
 8010a7a:	687b      	ldr	r3, [r7, #4]
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d002      	beq.n	8010a86 <DetermineFrameType+0x16>
 8010a80:	683b      	ldr	r3, [r7, #0]
 8010a82:	2b00      	cmp	r3, #0
 8010a84:	d101      	bne.n	8010a8a <DetermineFrameType+0x1a>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010a86:	2303      	movs	r3, #3
 8010a88:	e03b      	b.n	8010b02 <DetermineFrameType+0x92>
     * +-------+  +----------+------+-------+--------------+
     * |   D   |  |    = 0   |   -  |  > 0  |       X      |
     * +-------+  +----------+------+-------+--------------+
     */

    if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen > 0 ) && ( macMsg->FPort > 0 ) )
 8010a8a:	687b      	ldr	r3, [r7, #4]
 8010a8c:	7b1b      	ldrb	r3, [r3, #12]
 8010a8e:	f003 030f 	and.w	r3, r3, #15
 8010a92:	b2db      	uxtb	r3, r3
 8010a94:	2b00      	cmp	r3, #0
 8010a96:	d008      	beq.n	8010aaa <DetermineFrameType+0x3a>
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010a9e:	2b00      	cmp	r3, #0
 8010aa0:	d003      	beq.n	8010aaa <DetermineFrameType+0x3a>
    {
        *fType = FRAME_TYPE_A;
 8010aa2:	683b      	ldr	r3, [r7, #0]
 8010aa4:	2200      	movs	r2, #0
 8010aa6:	701a      	strb	r2, [r3, #0]
 8010aa8:	e02a      	b.n	8010b00 <DetermineFrameType+0x90>
    }
    else if( macMsg->FRMPayloadSize == 0 )
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d103      	bne.n	8010abc <DetermineFrameType+0x4c>
    {
        *fType = FRAME_TYPE_B;
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	2201      	movs	r2, #1
 8010ab8:	701a      	strb	r2, [r3, #0]
 8010aba:	e021      	b.n	8010b00 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort == 0 ) )
 8010abc:	687b      	ldr	r3, [r7, #4]
 8010abe:	7b1b      	ldrb	r3, [r3, #12]
 8010ac0:	f003 030f 	and.w	r3, r3, #15
 8010ac4:	b2db      	uxtb	r3, r3
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d108      	bne.n	8010adc <DetermineFrameType+0x6c>
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010ad0:	2b00      	cmp	r3, #0
 8010ad2:	d103      	bne.n	8010adc <DetermineFrameType+0x6c>
    {
        *fType = FRAME_TYPE_C;
 8010ad4:	683b      	ldr	r3, [r7, #0]
 8010ad6:	2202      	movs	r2, #2
 8010ad8:	701a      	strb	r2, [r3, #0]
 8010ada:	e011      	b.n	8010b00 <DetermineFrameType+0x90>
    }
    else if( ( macMsg->FHDR.FCtrl.Bits.FOptsLen == 0 ) && ( macMsg->FPort > 0 ) )
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	7b1b      	ldrb	r3, [r3, #12]
 8010ae0:	f003 030f 	and.w	r3, r3, #15
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	d108      	bne.n	8010afc <DetermineFrameType+0x8c>
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d003      	beq.n	8010afc <DetermineFrameType+0x8c>
    {
        *fType = FRAME_TYPE_D;
 8010af4:	683b      	ldr	r3, [r7, #0]
 8010af6:	2203      	movs	r2, #3
 8010af8:	701a      	strb	r2, [r3, #0]
 8010afa:	e001      	b.n	8010b00 <DetermineFrameType+0x90>
    }
    else
    {
        // Should never happen.
        return LORAMAC_STATUS_ERROR;
 8010afc:	2318      	movs	r3, #24
 8010afe:	e000      	b.n	8010b02 <DetermineFrameType+0x92>
    }

    return LORAMAC_STATUS_OK;
 8010b00:	2300      	movs	r3, #0
}
 8010b02:	4618      	mov	r0, r3
 8010b04:	370c      	adds	r7, #12
 8010b06:	46bd      	mov	sp, r7
 8010b08:	bc80      	pop	{r7}
 8010b0a:	4770      	bx	lr

08010b0c <CheckRetrans>:
    }
    return false;
}
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
static bool CheckRetrans( uint8_t counter, uint8_t limit )
{
 8010b0c:	b480      	push	{r7}
 8010b0e:	b083      	sub	sp, #12
 8010b10:	af00      	add	r7, sp, #0
 8010b12:	4603      	mov	r3, r0
 8010b14:	460a      	mov	r2, r1
 8010b16:	71fb      	strb	r3, [r7, #7]
 8010b18:	4613      	mov	r3, r2
 8010b1a:	71bb      	strb	r3, [r7, #6]
    if( counter >= limit )
 8010b1c:	79fa      	ldrb	r2, [r7, #7]
 8010b1e:	79bb      	ldrb	r3, [r7, #6]
 8010b20:	429a      	cmp	r2, r3
 8010b22:	d301      	bcc.n	8010b28 <CheckRetrans+0x1c>
    {
        return true;
 8010b24:	2301      	movs	r3, #1
 8010b26:	e000      	b.n	8010b2a <CheckRetrans+0x1e>
    }
    return false;
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	370c      	adds	r7, #12
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bc80      	pop	{r7}
 8010b32:	4770      	bx	lr

08010b34 <CheckRetransUnconfirmedUplink>:

static bool CheckRetransUnconfirmedUplink( void )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010b38:	4b12      	ldr	r3, [pc, #72]	@ (8010b84 <CheckRetransUnconfirmedUplink+0x50>)
 8010b3a:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010b3e:	4a12      	ldr	r2, [pc, #72]	@ (8010b88 <CheckRetransUnconfirmedUplink+0x54>)
 8010b40:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8010b44:	4611      	mov	r1, r2
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7ff ffe0 	bl	8010b0c <CheckRetrans>
 8010b4c:	4603      	mov	r3, r0
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d001      	beq.n	8010b56 <CheckRetransUnconfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010b52:	2301      	movs	r3, #1
 8010b54:	e014      	b.n	8010b80 <CheckRetransUnconfirmedUplink+0x4c>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010b56:	4b0b      	ldr	r3, [pc, #44]	@ (8010b84 <CheckRetransUnconfirmedUplink+0x50>)
 8010b58:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010b5c:	f003 0302 	and.w	r3, r3, #2
 8010b60:	b2db      	uxtb	r3, r3
 8010b62:	2b00      	cmp	r3, #0
 8010b64:	d00b      	beq.n	8010b7e <CheckRetransUnconfirmedUplink+0x4a>
    {
        // Stop the retransmissions, if a valid downlink is received
        // a class A RX window. This holds also for class B and C.
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010b66:	4b07      	ldr	r3, [pc, #28]	@ (8010b84 <CheckRetransUnconfirmedUplink+0x50>)
 8010b68:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
 8010b6c:	2b00      	cmp	r3, #0
 8010b6e:	d004      	beq.n	8010b7a <CheckRetransUnconfirmedUplink+0x46>
            ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_2 ) )
 8010b70:	4b04      	ldr	r3, [pc, #16]	@ (8010b84 <CheckRetransUnconfirmedUplink+0x50>)
 8010b72:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        if( ( MacCtx.RxStatus.RxSlot == RX_SLOT_WIN_1 ) ||
 8010b76:	2b01      	cmp	r3, #1
 8010b78:	d101      	bne.n	8010b7e <CheckRetransUnconfirmedUplink+0x4a>
        {
            return true;
 8010b7a:	2301      	movs	r3, #1
 8010b7c:	e000      	b.n	8010b80 <CheckRetransUnconfirmedUplink+0x4c>
        }
    }
    return false;
 8010b7e:	2300      	movs	r3, #0
}
 8010b80:	4618      	mov	r0, r3
 8010b82:	bd80      	pop	{r7, pc}
 8010b84:	20000670 	.word	0x20000670
 8010b88:	20000b90 	.word	0x20000b90

08010b8c <CheckRetransConfirmedUplink>:

static bool CheckRetransConfirmedUplink( void )
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	af00      	add	r7, sp, #0
    // Verify, if the max number of retransmissions have been reached
    if( CheckRetrans( MacCtx.ChannelsNbTransCounter,
 8010b90:	4b10      	ldr	r3, [pc, #64]	@ (8010bd4 <CheckRetransConfirmedUplink+0x48>)
 8010b92:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8010b96:	4a10      	ldr	r2, [pc, #64]	@ (8010bd8 <CheckRetransConfirmedUplink+0x4c>)
 8010b98:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8010b9c:	4611      	mov	r1, r2
 8010b9e:	4618      	mov	r0, r3
 8010ba0:	f7ff ffb4 	bl	8010b0c <CheckRetrans>
 8010ba4:	4603      	mov	r3, r0
 8010ba6:	2b00      	cmp	r3, #0
 8010ba8:	d001      	beq.n	8010bae <CheckRetransConfirmedUplink+0x22>
                      Nvm.MacGroup2.MacParams.ChannelsNbTrans ) == true )
    {
        return true;
 8010baa:	2301      	movs	r3, #1
 8010bac:	e00f      	b.n	8010bce <CheckRetransConfirmedUplink+0x42>
    }

    if( MacCtx.MacFlags.Bits.McpsInd == 1 )
 8010bae:	4b09      	ldr	r3, [pc, #36]	@ (8010bd4 <CheckRetransConfirmedUplink+0x48>)
 8010bb0:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010bb4:	f003 0302 	and.w	r3, r3, #2
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	2b00      	cmp	r3, #0
 8010bbc:	d006      	beq.n	8010bcc <CheckRetransConfirmedUplink+0x40>
    {
        if( MacCtx.McpsConfirm.AckReceived == true )
 8010bbe:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <CheckRetransConfirmedUplink+0x48>)
 8010bc0:	f893 3448 	ldrb.w	r3, [r3, #1096]	@ 0x448
 8010bc4:	2b00      	cmp	r3, #0
 8010bc6:	d001      	beq.n	8010bcc <CheckRetransConfirmedUplink+0x40>
        {
            return true;
 8010bc8:	2301      	movs	r3, #1
 8010bca:	e000      	b.n	8010bce <CheckRetransConfirmedUplink+0x42>
        }
    }
    return false;
 8010bcc:	2300      	movs	r3, #0
}
 8010bce:	4618      	mov	r0, r3
 8010bd0:	bd80      	pop	{r7, pc}
 8010bd2:	bf00      	nop
 8010bd4:	20000670 	.word	0x20000670
 8010bd8:	20000b90 	.word	0x20000b90

08010bdc <IncreaseAdrAckCounter>:

static uint32_t IncreaseAdrAckCounter( uint32_t counter )
{
 8010bdc:	b480      	push	{r7}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
    if( counter < ADR_ACK_COUNTER_MAX )
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010bea:	d002      	beq.n	8010bf2 <IncreaseAdrAckCounter+0x16>
    {
        counter++;
 8010bec:	687b      	ldr	r3, [r7, #4]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	607b      	str	r3, [r7, #4]
    }
    return counter;
 8010bf2:	687b      	ldr	r3, [r7, #4]
}
 8010bf4:	4618      	mov	r0, r3
 8010bf6:	370c      	adds	r7, #12
 8010bf8:	46bd      	mov	sp, r7
 8010bfa:	bc80      	pop	{r7}
 8010bfc:	4770      	bx	lr
	...

08010c00 <StopRetransmission>:
#endif /* LORAMAC_VERSION */

static bool StopRetransmission( void )
{
 8010c00:	b580      	push	{r7, lr}
 8010c02:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c04:	4b1a      	ldr	r3, [pc, #104]	@ (8010c70 <StopRetransmission+0x70>)
 8010c06:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010c0a:	f003 0302 	and.w	r3, r3, #2
 8010c0e:	b2db      	uxtb	r3, r3
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d009      	beq.n	8010c28 <StopRetransmission+0x28>
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c14:	4b16      	ldr	r3, [pc, #88]	@ (8010c70 <StopRetransmission+0x70>)
 8010c16:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
    if( ( MacCtx.MacFlags.Bits.McpsInd == 0 ) ||
 8010c1a:	2b00      	cmp	r3, #0
 8010c1c:	d011      	beq.n	8010c42 <StopRetransmission+0x42>
          ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_2 ) ) )
 8010c1e:	4b14      	ldr	r3, [pc, #80]	@ (8010c70 <StopRetransmission+0x70>)
 8010c20:	f893 3493 	ldrb.w	r3, [r3, #1171]	@ 0x493
        ( ( MacCtx.RxStatus.RxSlot != RX_SLOT_WIN_1 ) &&
 8010c24:	2b01      	cmp	r3, #1
 8010c26:	d00c      	beq.n	8010c42 <StopRetransmission+0x42>
    {   // Maximum repetitions without downlink. Increase ADR Ack counter.
        // Only process the case when the MAC did not receive a downlink.
        if( Nvm.MacGroup2.AdrCtrlOn == true )
 8010c28:	4b12      	ldr	r3, [pc, #72]	@ (8010c74 <StopRetransmission+0x74>)
 8010c2a:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d007      	beq.n	8010c42 <StopRetransmission+0x42>
        {
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
            Nvm.MacGroup1.AdrAckCounter++;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            Nvm.MacGroup1.AdrAckCounter = IncreaseAdrAckCounter( Nvm.MacGroup1.AdrAckCounter );
 8010c32:	4b10      	ldr	r3, [pc, #64]	@ (8010c74 <StopRetransmission+0x74>)
 8010c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010c36:	4618      	mov	r0, r3
 8010c38:	f7ff ffd0 	bl	8010bdc <IncreaseAdrAckCounter>
 8010c3c:	4603      	mov	r3, r0
 8010c3e:	4a0d      	ldr	r2, [pc, #52]	@ (8010c74 <StopRetransmission+0x74>)
 8010c40:	6293      	str	r3, [r2, #40]	@ 0x28
#endif /* LORAMAC_VERSION */
        }
    }

    MacCtx.ChannelsNbTransCounter = 0;
 8010c42:	4b0b      	ldr	r3, [pc, #44]	@ (8010c70 <StopRetransmission+0x70>)
 8010c44:	2200      	movs	r2, #0
 8010c46:	f883 241c 	strb.w	r2, [r3, #1052]	@ 0x41c
    MacCtx.NodeAckRequested = false;
 8010c4a:	4b09      	ldr	r3, [pc, #36]	@ (8010c70 <StopRetransmission+0x70>)
 8010c4c:	2200      	movs	r2, #0
 8010c4e:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetry = false;
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    MacCtx.RetransmitTimeoutRetry = false;
 8010c52:	4b07      	ldr	r3, [pc, #28]	@ (8010c70 <StopRetransmission+0x70>)
 8010c54:	2200      	movs	r2, #0
 8010c56:	f883 241d 	strb.w	r2, [r3, #1053]	@ 0x41d
#endif /* LORAMAC_VERSION */
    MacCtx.MacState &= ~LORAMAC_TX_RUNNING;
 8010c5a:	4b05      	ldr	r3, [pc, #20]	@ (8010c70 <StopRetransmission+0x70>)
 8010c5c:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8010c60:	f023 0302 	bic.w	r3, r3, #2
 8010c64:	4a02      	ldr	r2, [pc, #8]	@ (8010c70 <StopRetransmission+0x70>)
 8010c66:	f8c2 3340 	str.w	r3, [r2, #832]	@ 0x340

    return true;
 8010c6a:	2301      	movs	r3, #1
}
 8010c6c:	4618      	mov	r0, r3
 8010c6e:	bd80      	pop	{r7, pc}
 8010c70:	20000670 	.word	0x20000670
 8010c74:	20000b90 	.word	0x20000b90

08010c78 <CallNvmDataChangeCallback>:

static void CallNvmDataChangeCallback( uint16_t notifyFlags )
{
 8010c78:	b580      	push	{r7, lr}
 8010c7a:	b082      	sub	sp, #8
 8010c7c:	af00      	add	r7, sp, #0
 8010c7e:	4603      	mov	r3, r0
 8010c80:	80fb      	strh	r3, [r7, #6]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010c82:	4b0b      	ldr	r3, [pc, #44]	@ (8010cb0 <CallNvmDataChangeCallback+0x38>)
 8010c84:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d00c      	beq.n	8010ca6 <CallNvmDataChangeCallback+0x2e>
        ( MacCtx.MacCallbacks->NvmDataChange  != NULL ) )
 8010c8c:	4b08      	ldr	r3, [pc, #32]	@ (8010cb0 <CallNvmDataChangeCallback+0x38>)
 8010c8e:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010c92:	68db      	ldr	r3, [r3, #12]
    if( ( MacCtx.MacCallbacks != NULL ) &&
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d006      	beq.n	8010ca6 <CallNvmDataChangeCallback+0x2e>
    {
        MacCtx.MacCallbacks->NvmDataChange ( notifyFlags );
 8010c98:	4b05      	ldr	r3, [pc, #20]	@ (8010cb0 <CallNvmDataChangeCallback+0x38>)
 8010c9a:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8010c9e:	68db      	ldr	r3, [r3, #12]
 8010ca0:	88fa      	ldrh	r2, [r7, #6]
 8010ca2:	4610      	mov	r0, r2
 8010ca4:	4798      	blx	r3
    }
}
 8010ca6:	bf00      	nop
 8010ca8:	3708      	adds	r7, #8
 8010caa:	46bd      	mov	sp, r7
 8010cac:	bd80      	pop	{r7, pc}
 8010cae:	bf00      	nop
 8010cb0:	20000670 	.word	0x20000670

08010cb4 <IsRequestPending>:
    MacCtx.McpsConfirm.NbRetries = MacCtx.AckTimeoutRetriesCounter;
}
#endif /* LORAMAC_VERSION */

static uint8_t IsRequestPending( void )
{
 8010cb4:	b480      	push	{r7}
 8010cb6:	af00      	add	r7, sp, #0
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010cb8:	4b0b      	ldr	r3, [pc, #44]	@ (8010ce8 <IsRequestPending+0x34>)
 8010cba:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010cbe:	f003 0304 	and.w	r3, r3, #4
 8010cc2:	b2db      	uxtb	r3, r3
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d107      	bne.n	8010cd8 <IsRequestPending+0x24>
        ( MacCtx.MacFlags.Bits.McpsReq == 1 ) )
 8010cc8:	4b07      	ldr	r3, [pc, #28]	@ (8010ce8 <IsRequestPending+0x34>)
 8010cca:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8010cce:	f003 0301 	and.w	r3, r3, #1
 8010cd2:	b2db      	uxtb	r3, r3
    if( ( MacCtx.MacFlags.Bits.MlmeReq == 1 ) ||
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d001      	beq.n	8010cdc <IsRequestPending+0x28>
    {
        return 1;
 8010cd8:	2301      	movs	r3, #1
 8010cda:	e000      	b.n	8010cde <IsRequestPending+0x2a>
    }
    return 0;
 8010cdc:	2300      	movs	r3, #0
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	bc80      	pop	{r7}
 8010ce4:	4770      	bx	lr
 8010ce6:	bf00      	nop
 8010ce8:	20000670 	.word	0x20000670

08010cec <LoRaMacInitialization>:

LoRaMacStatus_t LoRaMacInitialization( LoRaMacPrimitives_t* primitives, LoRaMacCallback_t* callbacks, LoRaMacRegion_t region )
{
 8010cec:	b590      	push	{r4, r7, lr}
 8010cee:	b091      	sub	sp, #68	@ 0x44
 8010cf0:	af02      	add	r7, sp, #8
 8010cf2:	6178      	str	r0, [r7, #20]
 8010cf4:	6139      	str	r1, [r7, #16]
 8010cf6:	4613      	mov	r3, r2
 8010cf8:	73fb      	strb	r3, [r7, #15]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( ( primitives == NULL ) ||
 8010cfa:	697b      	ldr	r3, [r7, #20]
 8010cfc:	2b00      	cmp	r3, #0
 8010cfe:	d002      	beq.n	8010d06 <LoRaMacInitialization+0x1a>
 8010d00:	693b      	ldr	r3, [r7, #16]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d101      	bne.n	8010d0a <LoRaMacInitialization+0x1e>
        ( callbacks == NULL ) )
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d06:	2303      	movs	r3, #3
 8010d08:	e27c      	b.n	8011204 <LoRaMacInitialization+0x518>
    }

    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010d0a:	697b      	ldr	r3, [r7, #20]
 8010d0c:	681b      	ldr	r3, [r3, #0]
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d00b      	beq.n	8010d2a <LoRaMacInitialization+0x3e>
        ( primitives->MacMcpsIndication == NULL ) ||
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	685b      	ldr	r3, [r3, #4]
    if( ( primitives->MacMcpsConfirm == NULL ) ||
 8010d16:	2b00      	cmp	r3, #0
 8010d18:	d007      	beq.n	8010d2a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010d1a:	697b      	ldr	r3, [r7, #20]
 8010d1c:	689b      	ldr	r3, [r3, #8]
        ( primitives->MacMcpsIndication == NULL ) ||
 8010d1e:	2b00      	cmp	r3, #0
 8010d20:	d003      	beq.n	8010d2a <LoRaMacInitialization+0x3e>
        ( primitives->MacMlmeIndication == NULL ) )
 8010d22:	697b      	ldr	r3, [r7, #20]
 8010d24:	68db      	ldr	r3, [r3, #12]
        ( primitives->MacMlmeConfirm == NULL ) ||
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d101      	bne.n	8010d2e <LoRaMacInitialization+0x42>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8010d2a:	2303      	movs	r3, #3
 8010d2c:	e26a      	b.n	8011204 <LoRaMacInitialization+0x518>
    }
    // Verify if the region is supported
    if( RegionIsActive( region ) == false )
 8010d2e:	7bfb      	ldrb	r3, [r7, #15]
 8010d30:	4618      	mov	r0, r3
 8010d32:	f003 fbd7 	bl	80144e4 <RegionIsActive>
 8010d36:	4603      	mov	r3, r0
 8010d38:	f083 0301 	eor.w	r3, r3, #1
 8010d3c:	b2db      	uxtb	r3, r3
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d001      	beq.n	8010d46 <LoRaMacInitialization+0x5a>
    {
        return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 8010d42:	2309      	movs	r3, #9
 8010d44:	e25e      	b.n	8011204 <LoRaMacInitialization+0x518>
    }

    // Confirm queue reset
    LoRaMacConfirmQueueInit( primitives );
 8010d46:	6978      	ldr	r0, [r7, #20]
 8010d48:	f002 f884 	bl	8012e54 <LoRaMacConfirmQueueInit>

    // Initialize the module context with zeros
    memset1( ( uint8_t* ) &Nvm, 0x00, sizeof( LoRaMacNvmData_t ) );
 8010d4c:	f240 527c 	movw	r2, #1404	@ 0x57c
 8010d50:	2100      	movs	r1, #0
 8010d52:	48c7      	ldr	r0, [pc, #796]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010d54:	f005 febe 	bl	8016ad4 <memset1>
    memset1( ( uint8_t* ) &MacCtx, 0x00, sizeof( LoRaMacCtx_t ) );
 8010d58:	f44f 62a4 	mov.w	r2, #1312	@ 0x520
 8010d5c:	2100      	movs	r1, #0
 8010d5e:	48c5      	ldr	r0, [pc, #788]	@ (8011074 <LoRaMacInitialization+0x388>)
 8010d60:	f005 feb8 	bl	8016ad4 <memset1>
    // Set non zero variables to its default value
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    MacCtx.AckTimeoutRetriesCounter = 1;
    MacCtx.AckTimeoutRetries = 1;
#endif /* LORAMAC_VERSION */
    Nvm.MacGroup2.Region = region;
 8010d64:	4ac2      	ldr	r2, [pc, #776]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010d66:	7bfb      	ldrb	r3, [r7, #15]
 8010d68:	f882 3040 	strb.w	r3, [r2, #64]	@ 0x40
    Nvm.MacGroup2.DeviceClass = CLASS_A;
 8010d6c:	4bc0      	ldr	r3, [pc, #768]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010d6e:	2200      	movs	r2, #0
 8010d70:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
    Nvm.MacGroup2.MacParams.RepeaterSupport = false; /* ST_WORKAROUND: Keep repeater feature */
 8010d74:	4bbe      	ldr	r3, [pc, #760]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010d76:	2200      	movs	r2, #0
 8010d78:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    // Setup version
    Nvm.MacGroup2.Version.Value = LORAMAC_VERSION;
 8010d7c:	4bbc      	ldr	r3, [pc, #752]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010d7e:	4abe      	ldr	r2, [pc, #760]	@ (8011078 <LoRaMacInitialization+0x38c>)
 8010d80:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    InitDefaultsParams_t params;
    params.Type = INIT_TYPE_DEFAULTS;
 8010d84:	2300      	movs	r3, #0
 8010d86:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    params.NvmGroup1 = &Nvm.RegionGroup1;
 8010d8a:	4bbc      	ldr	r3, [pc, #752]	@ (801107c <LoRaMacInitialization+0x390>)
 8010d8c:	61fb      	str	r3, [r7, #28]
    params.NvmGroup2 = &Nvm.RegionGroup2;
 8010d8e:	4bbc      	ldr	r3, [pc, #752]	@ (8011080 <LoRaMacInitialization+0x394>)
 8010d90:	623b      	str	r3, [r7, #32]
    params.Bands = &RegionBands;
 8010d92:	4bbc      	ldr	r3, [pc, #752]	@ (8011084 <LoRaMacInitialization+0x398>)
 8010d94:	627b      	str	r3, [r7, #36]	@ 0x24
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8010d96:	4bb6      	ldr	r3, [pc, #728]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010d98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010d9c:	f107 021c 	add.w	r2, r7, #28
 8010da0:	4611      	mov	r1, r2
 8010da2:	4618      	mov	r0, r3
 8010da4:	f003 fbd7 	bl	8014556 <RegionInitDefaults>
#endif /* LORAMAC_VERSION */

    // Reset to defaults
    getPhy.Attribute = PHY_DUTY_CYCLE;
 8010da8:	230f      	movs	r3, #15
 8010daa:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010dae:	4bb0      	ldr	r3, [pc, #704]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010db0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010db4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010db8:	4611      	mov	r1, r2
 8010dba:	4618      	mov	r0, r3
 8010dbc:	f003 fba2 	bl	8014504 <RegionGetPhyParam>
 8010dc0:	4603      	mov	r3, r0
 8010dc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.DutyCycleOn = ( bool ) phyParam.Value;
 8010dc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	bf14      	ite	ne
 8010dca:	2301      	movne	r3, #1
 8010dcc:	2300      	moveq	r3, #0
 8010dce:	b2da      	uxtb	r2, r3
 8010dd0:	4ba7      	ldr	r3, [pc, #668]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010dd2:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108

    getPhy.Attribute = PHY_DEF_TX_POWER;
 8010dd6:	230a      	movs	r3, #10
 8010dd8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ddc:	4ba4      	ldr	r3, [pc, #656]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010dde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010de2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010de6:	4611      	mov	r1, r2
 8010de8:	4618      	mov	r0, r3
 8010dea:	f003 fb8b 	bl	8014504 <RegionGetPhyParam>
 8010dee:	4603      	mov	r3, r0
 8010df0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsTxPowerDefault = phyParam.Value;
 8010df2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010df4:	b25a      	sxtb	r2, r3
 8010df6:	4b9e      	ldr	r3, [pc, #632]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010df8:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc

    getPhy.Attribute = PHY_DEF_TX_DR;
 8010dfc:	2306      	movs	r3, #6
 8010dfe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e02:	4b9b      	ldr	r3, [pc, #620]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e08:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e0c:	4611      	mov	r1, r2
 8010e0e:	4618      	mov	r0, r3
 8010e10:	f003 fb78 	bl	8014504 <RegionGetPhyParam>
 8010e14:	4603      	mov	r3, r0
 8010e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.ChannelsDatarateDefault = phyParam.Value;
 8010e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e1a:	b25a      	sxtb	r2, r3
 8010e1c:	4b94      	ldr	r3, [pc, #592]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e1e:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd

    getPhy.Attribute = PHY_MAX_RX_WINDOW;
 8010e22:	2310      	movs	r3, #16
 8010e24:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e28:	4b91      	ldr	r3, [pc, #580]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e2a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e2e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e32:	4611      	mov	r1, r2
 8010e34:	4618      	mov	r0, r3
 8010e36:	f003 fb65 	bl	8014504 <RegionGetPhyParam>
 8010e3a:	4603      	mov	r3, r0
 8010e3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow = phyParam.Value;
 8010e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e40:	4a8b      	ldr	r2, [pc, #556]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e42:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    getPhy.Attribute = PHY_RECEIVE_DELAY1;
 8010e46:	2311      	movs	r3, #17
 8010e48:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e4c:	4b88      	ldr	r3, [pc, #544]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e4e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e52:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e56:	4611      	mov	r1, r2
 8010e58:	4618      	mov	r0, r3
 8010e5a:	f003 fb53 	bl	8014504 <RegionGetPhyParam>
 8010e5e:	4603      	mov	r3, r0
 8010e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1 = phyParam.Value;
 8010e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e64:	4a82      	ldr	r2, [pc, #520]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e66:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

    getPhy.Attribute = PHY_RECEIVE_DELAY2;
 8010e6a:	2312      	movs	r3, #18
 8010e6c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e70:	4b7f      	ldr	r3, [pc, #508]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e72:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e76:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e7a:	4611      	mov	r1, r2
 8010e7c:	4618      	mov	r0, r3
 8010e7e:	f003 fb41 	bl	8014504 <RegionGetPhyParam>
 8010e82:	4603      	mov	r3, r0
 8010e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2 = phyParam.Value;
 8010e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010e88:	4a79      	ldr	r2, [pc, #484]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e8a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY1;
 8010e8e:	2313      	movs	r3, #19
 8010e90:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010e94:	4b76      	ldr	r3, [pc, #472]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010e96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010e9a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010e9e:	4611      	mov	r1, r2
 8010ea0:	4618      	mov	r0, r3
 8010ea2:	f003 fb2f 	bl	8014504 <RegionGetPhyParam>
 8010ea6:	4603      	mov	r3, r0
 8010ea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1 = phyParam.Value;
 8010eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010eac:	4a70      	ldr	r2, [pc, #448]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010eae:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

    getPhy.Attribute = PHY_JOIN_ACCEPT_DELAY2;
 8010eb2:	2314      	movs	r3, #20
 8010eb4:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010eb8:	4b6d      	ldr	r3, [pc, #436]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ebe:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ec2:	4611      	mov	r1, r2
 8010ec4:	4618      	mov	r0, r3
 8010ec6:	f003 fb1d 	bl	8014504 <RegionGetPhyParam>
 8010eca:	4603      	mov	r3, r0
 8010ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2 = phyParam.Value;
 8010ece:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed0:	4a67      	ldr	r2, [pc, #412]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010ed2:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

    getPhy.Attribute = PHY_DEF_DR1_OFFSET;
 8010ed6:	2316      	movs	r3, #22
 8010ed8:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010edc:	4b64      	ldr	r3, [pc, #400]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010ede:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ee2:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ee6:	4611      	mov	r1, r2
 8010ee8:	4618      	mov	r0, r3
 8010eea:	f003 fb0b 	bl	8014504 <RegionGetPhyParam>
 8010eee:	4603      	mov	r3, r0
 8010ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx1DrOffset = phyParam.Value;
 8010ef2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ef4:	b2da      	uxtb	r2, r3
 8010ef6:	4b5e      	ldr	r3, [pc, #376]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010ef8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5

    getPhy.Attribute = PHY_DEF_RX2_FREQUENCY;
 8010efc:	2317      	movs	r3, #23
 8010efe:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f02:	4b5b      	ldr	r3, [pc, #364]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f04:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f08:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f0c:	4611      	mov	r1, r2
 8010f0e:	4618      	mov	r0, r3
 8010f10:	f003 faf8 	bl	8014504 <RegionGetPhyParam>
 8010f14:	4603      	mov	r3, r0
 8010f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Frequency = phyParam.Value;
 8010f18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f1a:	4a55      	ldr	r2, [pc, #340]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f1c:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Frequency = phyParam.Value;
 8010f20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f22:	4a53      	ldr	r2, [pc, #332]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f24:	f8c2 30b0 	str.w	r3, [r2, #176]	@ 0xb0

    getPhy.Attribute = PHY_DEF_RX2_DR;
 8010f28:	2318      	movs	r3, #24
 8010f2a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f2e:	4b50      	ldr	r3, [pc, #320]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f30:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f34:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f38:	4611      	mov	r1, r2
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f003 fae2 	bl	8014504 <RegionGetPhyParam>
 8010f40:	4603      	mov	r3, r0
 8010f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.Rx2Channel.Datarate = phyParam.Value;
 8010f44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f46:	b2da      	uxtb	r2, r3
 8010f48:	4b49      	ldr	r3, [pc, #292]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f4a:	f883 20ac 	strb.w	r2, [r3, #172]	@ 0xac
    Nvm.MacGroup2.MacParamsDefaults.RxCChannel.Datarate = phyParam.Value;
 8010f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f50:	b2da      	uxtb	r2, r3
 8010f52:	4b47      	ldr	r3, [pc, #284]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f54:	f883 20b4 	strb.w	r2, [r3, #180]	@ 0xb4

    getPhy.Attribute = PHY_DEF_UPLINK_DWELL_TIME;
 8010f58:	231d      	movs	r3, #29
 8010f5a:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f5e:	4b44      	ldr	r3, [pc, #272]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f60:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f64:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f68:	4611      	mov	r1, r2
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f003 faca 	bl	8014504 <RegionGetPhyParam>
 8010f70:	4603      	mov	r3, r0
 8010f72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.UplinkDwellTime = phyParam.Value;
 8010f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f76:	b2da      	uxtb	r2, r3
 8010f78:	4b3d      	ldr	r3, [pc, #244]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f7a:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8

    getPhy.Attribute = PHY_DEF_DOWNLINK_DWELL_TIME;
 8010f7e:	231e      	movs	r3, #30
 8010f80:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010f84:	4b3a      	ldr	r3, [pc, #232]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010f86:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010f8a:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010f8e:	4611      	mov	r1, r2
 8010f90:	4618      	mov	r0, r3
 8010f92:	f003 fab7 	bl	8014504 <RegionGetPhyParam>
 8010f96:	4603      	mov	r3, r0
 8010f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.DownlinkDwellTime = phyParam.Value;
 8010f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f9c:	b2da      	uxtb	r2, r3
 8010f9e:	4b34      	ldr	r3, [pc, #208]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010fa0:	f883 20b9 	strb.w	r2, [r3, #185]	@ 0xb9

    getPhy.Attribute = PHY_DEF_MAX_EIRP;
 8010fa4:	231f      	movs	r3, #31
 8010fa6:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010faa:	4b31      	ldr	r3, [pc, #196]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fb0:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010fb4:	4611      	mov	r1, r2
 8010fb6:	4618      	mov	r0, r3
 8010fb8:	f003 faa4 	bl	8014504 <RegionGetPhyParam>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.MaxEirp = phyParam.fValue;
 8010fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fc2:	4a2b      	ldr	r2, [pc, #172]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010fc4:	f8c2 30bc 	str.w	r3, [r2, #188]	@ 0xbc

    getPhy.Attribute = PHY_DEF_ANTENNA_GAIN;
 8010fc8:	2320      	movs	r3, #32
 8010fca:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010fce:	4b28      	ldr	r3, [pc, #160]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010fd0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010fd4:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010fd8:	4611      	mov	r1, r2
 8010fda:	4618      	mov	r0, r3
 8010fdc:	f003 fa92 	bl	8014504 <RegionGetPhyParam>
 8010fe0:	4603      	mov	r3, r0
 8010fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    Nvm.MacGroup2.MacParamsDefaults.AntennaGain = phyParam.fValue;
 8010fe4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010fe6:	4a22      	ldr	r2, [pc, #136]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010fe8:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0

    getPhy.Attribute = PHY_DEF_ADR_ACK_LIMIT;
 8010fec:	230b      	movs	r3, #11
 8010fee:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8010ff2:	4b1f      	ldr	r3, [pc, #124]	@ (8011070 <LoRaMacInitialization+0x384>)
 8010ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8010ff8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8010ffc:	4611      	mov	r1, r2
 8010ffe:	4618      	mov	r0, r3
 8011000:	f003 fa80 	bl	8014504 <RegionGetPhyParam>
 8011004:	4603      	mov	r3, r0
 8011006:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckLimit = phyParam.Value;
 8011008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801100a:	b29a      	uxth	r2, r3
 801100c:	4b19      	ldr	r3, [pc, #100]	@ (8011074 <LoRaMacInitialization+0x388>)
 801100e:	f8a3 2400 	strh.w	r2, [r3, #1024]	@ 0x400

    getPhy.Attribute = PHY_DEF_ADR_ACK_DELAY;
 8011012:	230c      	movs	r3, #12
 8011014:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 8011018:	4b15      	ldr	r3, [pc, #84]	@ (8011070 <LoRaMacInitialization+0x384>)
 801101a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801101e:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8011022:	4611      	mov	r1, r2
 8011024:	4618      	mov	r0, r3
 8011026:	f003 fa6d 	bl	8014504 <RegionGetPhyParam>
 801102a:	4603      	mov	r3, r0
 801102c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    MacCtx.AdrAckDelay = phyParam.Value;
 801102e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011030:	b29a      	uxth	r2, r3
 8011032:	4b10      	ldr	r3, [pc, #64]	@ (8011074 <LoRaMacInitialization+0x388>)
 8011034:	f8a3 2402 	strh.w	r2, [r3, #1026]	@ 0x402

    // Init parameters which are not set in function ResetMacParameters
    Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans = 1;
 8011038:	4b0d      	ldr	r3, [pc, #52]	@ (8011070 <LoRaMacInitialization+0x384>)
 801103a:	2201      	movs	r2, #1
 801103c:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
    Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = 10;
 8011040:	4b0b      	ldr	r3, [pc, #44]	@ (8011070 <LoRaMacInitialization+0x384>)
 8011042:	220a      	movs	r2, #10
 8011044:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = 6;
 8011048:	4b09      	ldr	r3, [pc, #36]	@ (8011070 <LoRaMacInitialization+0x384>)
 801104a:	2206      	movs	r2, #6
 801104c:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c

    Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError;
 8011050:	4b07      	ldr	r3, [pc, #28]	@ (8011070 <LoRaMacInitialization+0x384>)
 8011052:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011056:	4a06      	ldr	r2, [pc, #24]	@ (8011070 <LoRaMacInitialization+0x384>)
 8011058:	6453      	str	r3, [r2, #68]	@ 0x44
    Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols;
 801105a:	4b05      	ldr	r3, [pc, #20]	@ (8011070 <LoRaMacInitialization+0x384>)
 801105c:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011060:	4b03      	ldr	r3, [pc, #12]	@ (8011070 <LoRaMacInitialization+0x384>)
 8011062:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
    Nvm.MacGroup2.MacParams.MaxRxWindow = Nvm.MacGroup2.MacParamsDefaults.MaxRxWindow;
 8011066:	4b02      	ldr	r3, [pc, #8]	@ (8011070 <LoRaMacInitialization+0x384>)
 8011068:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801106c:	e00c      	b.n	8011088 <LoRaMacInitialization+0x39c>
 801106e:	bf00      	nop
 8011070:	20000b90 	.word	0x20000b90
 8011074:	20000670 	.word	0x20000670
 8011078:	01000400 	.word	0x01000400
 801107c:	20000d74 	.word	0x20000d74
 8011080:	20000d78 	.word	0x20000d78
 8011084:	20001688 	.word	0x20001688
 8011088:	4a60      	ldr	r2, [pc, #384]	@ (801120c <LoRaMacInitialization+0x520>)
 801108a:	64d3      	str	r3, [r2, #76]	@ 0x4c
    Nvm.MacGroup2.MacParams.ReceiveDelay1 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay1;
 801108c:	4b5f      	ldr	r3, [pc, #380]	@ (801120c <LoRaMacInitialization+0x520>)
 801108e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8011092:	4a5e      	ldr	r2, [pc, #376]	@ (801120c <LoRaMacInitialization+0x520>)
 8011094:	6513      	str	r3, [r2, #80]	@ 0x50
    Nvm.MacGroup2.MacParams.ReceiveDelay2 = Nvm.MacGroup2.MacParamsDefaults.ReceiveDelay2;
 8011096:	4b5d      	ldr	r3, [pc, #372]	@ (801120c <LoRaMacInitialization+0x520>)
 8011098:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801109c:	4a5b      	ldr	r2, [pc, #364]	@ (801120c <LoRaMacInitialization+0x520>)
 801109e:	6553      	str	r3, [r2, #84]	@ 0x54
    Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay1;
 80110a0:	4b5a      	ldr	r3, [pc, #360]	@ (801120c <LoRaMacInitialization+0x520>)
 80110a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80110a6:	4a59      	ldr	r2, [pc, #356]	@ (801120c <LoRaMacInitialization+0x520>)
 80110a8:	6593      	str	r3, [r2, #88]	@ 0x58
    Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = Nvm.MacGroup2.MacParamsDefaults.JoinAcceptDelay2;
 80110aa:	4b58      	ldr	r3, [pc, #352]	@ (801120c <LoRaMacInitialization+0x520>)
 80110ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80110b0:	4a56      	ldr	r2, [pc, #344]	@ (801120c <LoRaMacInitialization+0x520>)
 80110b2:	65d3      	str	r3, [r2, #92]	@ 0x5c
    Nvm.MacGroup2.MacParams.ChannelsNbTrans = Nvm.MacGroup2.MacParamsDefaults.ChannelsNbTrans;
 80110b4:	4b55      	ldr	r3, [pc, #340]	@ (801120c <LoRaMacInitialization+0x520>)
 80110b6:	f893 20a4 	ldrb.w	r2, [r3, #164]	@ 0xa4
 80110ba:	4b54      	ldr	r3, [pc, #336]	@ (801120c <LoRaMacInitialization+0x520>)
 80110bc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    params.NvmGroup1 = &Nvm.RegionGroup1;
    params.NvmGroup2 = &Nvm.RegionGroup2;
    RegionInitDefaults( Nvm.MacGroup2.Region, &params );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // FPort 224 is enabled by default.
    Nvm.MacGroup2.IsCertPortOn = true;
 80110c0:	4b52      	ldr	r3, [pc, #328]	@ (801120c <LoRaMacInitialization+0x520>)
 80110c2:	2201      	movs	r2, #1
 80110c4:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
#endif /* LORAMAC_VERSION */

    MacCtx.MacCallbacks = callbacks;
 80110c8:	4a51      	ldr	r2, [pc, #324]	@ (8011210 <LoRaMacInitialization+0x524>)
 80110ca:	693b      	ldr	r3, [r7, #16]
 80110cc:	f8c2 3348 	str.w	r3, [r2, #840]	@ 0x348
    ResetMacParameters( );
 80110d0:	f7ff f8d6 	bl	8010280 <ResetMacParameters>

    Nvm.MacGroup2.PublicNetwork = true;
 80110d4:	4b4d      	ldr	r3, [pc, #308]	@ (801120c <LoRaMacInitialization+0x520>)
 80110d6:	2201      	movs	r2, #1
 80110d8:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

    MacCtx.MacPrimitives = primitives;
 80110dc:	4a4c      	ldr	r2, [pc, #304]	@ (8011210 <LoRaMacInitialization+0x524>)
 80110de:	697b      	ldr	r3, [r7, #20]
 80110e0:	f8c2 3344 	str.w	r3, [r2, #836]	@ 0x344
    MacCtx.MacFlags.Value = 0;
 80110e4:	4b4a      	ldr	r3, [pc, #296]	@ (8011210 <LoRaMacInitialization+0x524>)
 80110e6:	2200      	movs	r2, #0
 80110e8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    MacCtx.MacState = LORAMAC_STOPPED;
 80110ec:	4b48      	ldr	r3, [pc, #288]	@ (8011210 <LoRaMacInitialization+0x524>)
 80110ee:	2201      	movs	r2, #1
 80110f0:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    // Reset duty cycle times
    Nvm.MacGroup1.LastTxDoneTime = 0;
 80110f4:	4b45      	ldr	r3, [pc, #276]	@ (801120c <LoRaMacInitialization+0x520>)
 80110f6:	2200      	movs	r2, #0
 80110f8:	62da      	str	r2, [r3, #44]	@ 0x2c
    Nvm.MacGroup1.AggregatedTimeOff = 0;
 80110fa:	4b44      	ldr	r3, [pc, #272]	@ (801120c <LoRaMacInitialization+0x520>)
 80110fc:	2200      	movs	r2, #0
 80110fe:	631a      	str	r2, [r3, #48]	@ 0x30

    // Initialize timers
    TimerInit( &MacCtx.TxDelayedTimer, OnTxDelayedTimerEvent );
 8011100:	2300      	movs	r3, #0
 8011102:	9300      	str	r3, [sp, #0]
 8011104:	4b43      	ldr	r3, [pc, #268]	@ (8011214 <LoRaMacInitialization+0x528>)
 8011106:	2200      	movs	r2, #0
 8011108:	f04f 31ff 	mov.w	r1, #4294967295
 801110c:	4842      	ldr	r0, [pc, #264]	@ (8011218 <LoRaMacInitialization+0x52c>)
 801110e:	f009 fd47 	bl	801aba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer1, OnRxWindow1TimerEvent );
 8011112:	2300      	movs	r3, #0
 8011114:	9300      	str	r3, [sp, #0]
 8011116:	4b41      	ldr	r3, [pc, #260]	@ (801121c <LoRaMacInitialization+0x530>)
 8011118:	2200      	movs	r2, #0
 801111a:	f04f 31ff 	mov.w	r1, #4294967295
 801111e:	4840      	ldr	r0, [pc, #256]	@ (8011220 <LoRaMacInitialization+0x534>)
 8011120:	f009 fd3e 	bl	801aba0 <UTIL_TIMER_Create>
    TimerInit( &MacCtx.RxWindowTimer2, OnRxWindow2TimerEvent );
 8011124:	2300      	movs	r3, #0
 8011126:	9300      	str	r3, [sp, #0]
 8011128:	4b3e      	ldr	r3, [pc, #248]	@ (8011224 <LoRaMacInitialization+0x538>)
 801112a:	2200      	movs	r2, #0
 801112c:	f04f 31ff 	mov.w	r1, #4294967295
 8011130:	483d      	ldr	r0, [pc, #244]	@ (8011228 <LoRaMacInitialization+0x53c>)
 8011132:	f009 fd35 	bl	801aba0 <UTIL_TIMER_Create>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerInit( &MacCtx.AckTimeoutTimer, OnAckTimeoutTimerEvent );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerInit( &MacCtx.RetransmitTimeoutTimer, OnRetransmitTimeoutTimerEvent );
 8011136:	2300      	movs	r3, #0
 8011138:	9300      	str	r3, [sp, #0]
 801113a:	4b3c      	ldr	r3, [pc, #240]	@ (801122c <LoRaMacInitialization+0x540>)
 801113c:	2200      	movs	r2, #0
 801113e:	f04f 31ff 	mov.w	r1, #4294967295
 8011142:	483b      	ldr	r0, [pc, #236]	@ (8011230 <LoRaMacInitialization+0x544>)
 8011144:	f009 fd2c 	bl	801aba0 <UTIL_TIMER_Create>
#endif /* LORAMAC_VERSION */

    // Store the current initialization time
    Nvm.MacGroup2.InitializationTime = SysTimeGetMcuTime( );
 8011148:	4c30      	ldr	r4, [pc, #192]	@ (801120c <LoRaMacInitialization+0x520>)
 801114a:	463b      	mov	r3, r7
 801114c:	4618      	mov	r0, r3
 801114e:	f009 f89d 	bl	801a28c <SysTimeGetMcuTime>
 8011152:	f504 7388 	add.w	r3, r4, #272	@ 0x110
 8011156:	463a      	mov	r2, r7
 8011158:	e892 0003 	ldmia.w	r2, {r0, r1}
 801115c:	e883 0003 	stmia.w	r3, {r0, r1}

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize MAC radio events
    LoRaMacRadioEvents.Value = 0;
 8011160:	4b34      	ldr	r3, [pc, #208]	@ (8011234 <LoRaMacInitialization+0x548>)
 8011162:	2200      	movs	r2, #0
 8011164:	601a      	str	r2, [r3, #0]
#endif /* LORAMAC_VERSION */

    // Initialize Radio driver
    MacCtx.RadioEvents.TxDone = OnRadioTxDone;
 8011166:	4b2a      	ldr	r3, [pc, #168]	@ (8011210 <LoRaMacInitialization+0x524>)
 8011168:	4a33      	ldr	r2, [pc, #204]	@ (8011238 <LoRaMacInitialization+0x54c>)
 801116a:	f8c3 234c 	str.w	r2, [r3, #844]	@ 0x34c
    MacCtx.RadioEvents.RxDone = OnRadioRxDone;
 801116e:	4b28      	ldr	r3, [pc, #160]	@ (8011210 <LoRaMacInitialization+0x524>)
 8011170:	4a32      	ldr	r2, [pc, #200]	@ (801123c <LoRaMacInitialization+0x550>)
 8011172:	f8c3 2354 	str.w	r2, [r3, #852]	@ 0x354
    MacCtx.RadioEvents.RxError = OnRadioRxError;
 8011176:	4b26      	ldr	r3, [pc, #152]	@ (8011210 <LoRaMacInitialization+0x524>)
 8011178:	4a31      	ldr	r2, [pc, #196]	@ (8011240 <LoRaMacInitialization+0x554>)
 801117a:	f8c3 235c 	str.w	r2, [r3, #860]	@ 0x35c
    MacCtx.RadioEvents.TxTimeout = OnRadioTxTimeout;
 801117e:	4b24      	ldr	r3, [pc, #144]	@ (8011210 <LoRaMacInitialization+0x524>)
 8011180:	4a30      	ldr	r2, [pc, #192]	@ (8011244 <LoRaMacInitialization+0x558>)
 8011182:	f8c3 2350 	str.w	r2, [r3, #848]	@ 0x350
    MacCtx.RadioEvents.RxTimeout = OnRadioRxTimeout;
 8011186:	4b22      	ldr	r3, [pc, #136]	@ (8011210 <LoRaMacInitialization+0x524>)
 8011188:	4a2f      	ldr	r2, [pc, #188]	@ (8011248 <LoRaMacInitialization+0x55c>)
 801118a:	f8c3 2358 	str.w	r2, [r3, #856]	@ 0x358
    Radio.Init( &MacCtx.RadioEvents );
 801118e:	4b2f      	ldr	r3, [pc, #188]	@ (801124c <LoRaMacInitialization+0x560>)
 8011190:	681b      	ldr	r3, [r3, #0]
 8011192:	482f      	ldr	r0, [pc, #188]	@ (8011250 <LoRaMacInitialization+0x564>)
 8011194:	4798      	blx	r3

    // Initialize the Secure Element driver
    if( SecureElementInit( &Nvm.SecureElement, callbacks->GetUniqueId ) != SECURE_ELEMENT_SUCCESS ) /* ST_WORKAROUND: Add unique ID callback as input parameter */
 8011196:	693b      	ldr	r3, [r7, #16]
 8011198:	689b      	ldr	r3, [r3, #8]
 801119a:	4619      	mov	r1, r3
 801119c:	482d      	ldr	r0, [pc, #180]	@ (8011254 <LoRaMacInitialization+0x568>)
 801119e:	f7fa fb8d 	bl	800b8bc <SecureElementInit>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d001      	beq.n	80111ac <LoRaMacInitialization+0x4c0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111a8:	2311      	movs	r3, #17
 80111aa:	e02b      	b.n	8011204 <LoRaMacInitialization+0x518>
    }

    // Initialize Crypto module
    if( LoRaMacCryptoInit( &Nvm.Crypto ) != LORAMAC_CRYPTO_SUCCESS )
 80111ac:	4817      	ldr	r0, [pc, #92]	@ (801120c <LoRaMacInitialization+0x520>)
 80111ae:	f002 fafd 	bl	80137ac <LoRaMacCryptoInit>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d001      	beq.n	80111bc <LoRaMacInitialization+0x4d0>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111b8:	2311      	movs	r3, #17
 80111ba:	e023      	b.n	8011204 <LoRaMacInitialization+0x518>
    }

    // Initialize MAC commands module
    if( LoRaMacCommandsInit( ) != LORAMAC_COMMANDS_SUCCESS )
 80111bc:	f001 fc1c 	bl	80129f8 <LoRaMacCommandsInit>
 80111c0:	4603      	mov	r3, r0
 80111c2:	2b00      	cmp	r3, #0
 80111c4:	d001      	beq.n	80111ca <LoRaMacInitialization+0x4de>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80111c6:	2313      	movs	r3, #19
 80111c8:	e01c      	b.n	8011204 <LoRaMacInitialization+0x518>
    }

    // Set multicast downlink counter reference
    if( LoRaMacCryptoSetMulticastReference( Nvm.MacGroup2.MulticastChannelList ) != LORAMAC_CRYPTO_SUCCESS )
 80111ca:	4823      	ldr	r0, [pc, #140]	@ (8011258 <LoRaMacInitialization+0x56c>)
 80111cc:	f002 fb8e 	bl	80138ec <LoRaMacCryptoSetMulticastReference>
 80111d0:	4603      	mov	r3, r0
 80111d2:	2b00      	cmp	r3, #0
 80111d4:	d001      	beq.n	80111da <LoRaMacInitialization+0x4ee>
    {
        return LORAMAC_STATUS_CRYPTO_ERROR;
 80111d6:	2311      	movs	r3, #17
 80111d8:	e014      	b.n	8011204 <LoRaMacInitialization+0x518>
    }

    // Random seed initialization
    srand1( Radio.Random( ) );
 80111da:	4b1c      	ldr	r3, [pc, #112]	@ (801124c <LoRaMacInitialization+0x560>)
 80111dc:	695b      	ldr	r3, [r3, #20]
 80111de:	4798      	blx	r3
 80111e0:	4603      	mov	r3, r0
 80111e2:	4618      	mov	r0, r3
 80111e4:	f005 fc16 	bl	8016a14 <srand1>

    Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 80111e8:	4b18      	ldr	r3, [pc, #96]	@ (801124c <LoRaMacInitialization+0x560>)
 80111ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80111ec:	4a07      	ldr	r2, [pc, #28]	@ (801120c <LoRaMacInitialization+0x520>)
 80111ee:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 80111f2:	4610      	mov	r0, r2
 80111f4:	4798      	blx	r3
    Radio.Sleep( );
 80111f6:	4b15      	ldr	r3, [pc, #84]	@ (801124c <LoRaMacInitialization+0x560>)
 80111f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80111fa:	4798      	blx	r3

    LoRaMacEnableRequests( LORAMAC_REQUEST_HANDLING_ON );
 80111fc:	2001      	movs	r0, #1
 80111fe:	f7fd fac7 	bl	800e790 <LoRaMacEnableRequests>

    return LORAMAC_STATUS_OK;
 8011202:	2300      	movs	r3, #0
}
 8011204:	4618      	mov	r0, r3
 8011206:	373c      	adds	r7, #60	@ 0x3c
 8011208:	46bd      	mov	sp, r7
 801120a:	bd90      	pop	{r4, r7, pc}
 801120c:	20000b90 	.word	0x20000b90
 8011210:	20000670 	.word	0x20000670
 8011214:	0800ed45 	.word	0x0800ed45
 8011218:	200009d8 	.word	0x200009d8
 801121c:	0800edd5 	.word	0x0800edd5
 8011220:	200009f0 	.word	0x200009f0
 8011224:	0800ee4d 	.word	0x0800ee4d
 8011228:	20000a08 	.word	0x20000a08
 801122c:	0800eecd 	.word	0x0800eecd
 8011230:	20000a74 	.word	0x20000a74
 8011234:	20001718 	.word	0x20001718
 8011238:	0800d845 	.word	0x0800d845
 801123c:	0800d8bd 	.word	0x0800d8bd
 8011240:	0800d99d 	.word	0x0800d99d
 8011244:	0800d951 	.word	0x0800d951
 8011248:	0800d9d9 	.word	0x0800d9d9
 801124c:	0801c500 	.word	0x0801c500
 8011250:	200009bc 	.word	0x200009bc
 8011254:	20000cb4 	.word	0x20000cb4
 8011258:	20000c68 	.word	0x20000c68

0801125c <LoRaMacStart>:

LoRaMacStatus_t LoRaMacStart( void )
{
 801125c:	b480      	push	{r7}
 801125e:	af00      	add	r7, sp, #0
    MacCtx.MacState = LORAMAC_IDLE;
 8011260:	4b04      	ldr	r3, [pc, #16]	@ (8011274 <LoRaMacStart+0x18>)
 8011262:	2200      	movs	r2, #0
 8011264:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
    return LORAMAC_STATUS_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	46bd      	mov	sp, r7
 801126e:	bc80      	pop	{r7}
 8011270:	4770      	bx	lr
 8011272:	bf00      	nop
 8011274:	20000670 	.word	0x20000670

08011278 <LoRaMacStop>:

LoRaMacStatus_t LoRaMacStop( void )
{
 8011278:	b580      	push	{r7, lr}
 801127a:	af00      	add	r7, sp, #0
    if( LoRaMacIsBusy( ) == false )
 801127c:	f7fd fa68 	bl	800e750 <LoRaMacIsBusy>
 8011280:	4603      	mov	r3, r0
 8011282:	f083 0301 	eor.w	r3, r3, #1
 8011286:	b2db      	uxtb	r3, r3
 8011288:	2b00      	cmp	r3, #0
 801128a:	d005      	beq.n	8011298 <LoRaMacStop+0x20>
    {
        MacCtx.MacState = LORAMAC_STOPPED;
 801128c:	4b07      	ldr	r3, [pc, #28]	@ (80112ac <LoRaMacStop+0x34>)
 801128e:	2201      	movs	r2, #1
 8011290:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340
        return LORAMAC_STATUS_OK;
 8011294:	2300      	movs	r3, #0
 8011296:	e007      	b.n	80112a8 <LoRaMacStop+0x30>
    }
    else if(  MacCtx.MacState == LORAMAC_STOPPED )
 8011298:	4b04      	ldr	r3, [pc, #16]	@ (80112ac <LoRaMacStop+0x34>)
 801129a:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 801129e:	2b01      	cmp	r3, #1
 80112a0:	d101      	bne.n	80112a6 <LoRaMacStop+0x2e>
    {
        return LORAMAC_STATUS_OK;
 80112a2:	2300      	movs	r3, #0
 80112a4:	e000      	b.n	80112a8 <LoRaMacStop+0x30>
    }
    return LORAMAC_STATUS_BUSY;
 80112a6:	2301      	movs	r3, #1
}
 80112a8:	4618      	mov	r0, r3
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	20000670 	.word	0x20000670

080112b0 <LoRaMacHalt>:

LoRaMacStatus_t LoRaMacHalt( void )
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	af00      	add	r7, sp, #0
    // Stop Timers
    TimerStop( &MacCtx.TxDelayedTimer );
 80112b4:	4812      	ldr	r0, [pc, #72]	@ (8011300 <LoRaMacHalt+0x50>)
 80112b6:	f009 fd17 	bl	801ace8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer1 );
 80112ba:	4812      	ldr	r0, [pc, #72]	@ (8011304 <LoRaMacHalt+0x54>)
 80112bc:	f009 fd14 	bl	801ace8 <UTIL_TIMER_Stop>
    TimerStop( &MacCtx.RxWindowTimer2 );
 80112c0:	4811      	ldr	r0, [pc, #68]	@ (8011308 <LoRaMacHalt+0x58>)
 80112c2:	f009 fd11 	bl	801ace8 <UTIL_TIMER_Stop>
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    TimerStop( &MacCtx.AckTimeoutTimer );
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    TimerStop( &MacCtx.RetransmitTimeoutTimer );
 80112c6:	4811      	ldr	r0, [pc, #68]	@ (801130c <LoRaMacHalt+0x5c>)
 80112c8:	f009 fd0e 	bl	801ace8 <UTIL_TIMER_Stop>
#endif /* LORAMAC_VERSION */

    // Take care about class B
    LoRaMacClassBHaltBeaconing( );
 80112cc:	f001 fa04 	bl	80126d8 <LoRaMacClassBHaltBeaconing>

    // Switch off Radio
    Radio.Sleep( );
 80112d0:	4b0f      	ldr	r3, [pc, #60]	@ (8011310 <LoRaMacHalt+0x60>)
 80112d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80112d4:	4798      	blx	r3

    MacCtx.MacState = LORAMAC_IDLE;
 80112d6:	4b0f      	ldr	r3, [pc, #60]	@ (8011314 <LoRaMacHalt+0x64>)
 80112d8:	2200      	movs	r2, #0
 80112da:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    LoRaMacHandleNvm( &Nvm );
 80112de:	480e      	ldr	r0, [pc, #56]	@ (8011318 <LoRaMacHalt+0x68>)
 80112e0:	f7fd fc0c 	bl	800eafc <LoRaMacHandleNvm>

    // Preserve the Nvm context if data retention
    memcpy1( ( uint8_t* ) &NvmBackup, ( uint8_t* ) &Nvm, sizeof( LoRaMacNvmData_t ) );
 80112e4:	f240 527c 	movw	r2, #1404	@ 0x57c
 80112e8:	490b      	ldr	r1, [pc, #44]	@ (8011318 <LoRaMacHalt+0x68>)
 80112ea:	480c      	ldr	r0, [pc, #48]	@ (801131c <LoRaMacHalt+0x6c>)
 80112ec:	f005 fbb7 	bl	8016a5e <memcpy1>

    MacCtx.MacState = LORAMAC_STOPPED;
 80112f0:	4b08      	ldr	r3, [pc, #32]	@ (8011314 <LoRaMacHalt+0x64>)
 80112f2:	2201      	movs	r2, #1
 80112f4:	f8c3 2340 	str.w	r2, [r3, #832]	@ 0x340

    return LORAMAC_STATUS_OK;
 80112f8:	2300      	movs	r3, #0
}
 80112fa:	4618      	mov	r0, r3
 80112fc:	bd80      	pop	{r7, pc}
 80112fe:	bf00      	nop
 8011300:	200009d8 	.word	0x200009d8
 8011304:	200009f0 	.word	0x200009f0
 8011308:	20000a08 	.word	0x20000a08
 801130c:	20000a74 	.word	0x20000a74
 8011310:	0801c500 	.word	0x0801c500
 8011314:	20000670 	.word	0x20000670
 8011318:	20000b90 	.word	0x20000b90
 801131c:	2000110c 	.word	0x2000110c

08011320 <LoRaMacQueryTxPossible>:

LoRaMacStatus_t LoRaMacQueryTxPossible( uint8_t size, LoRaMacTxInfo_t* txInfo )
{
 8011320:	b590      	push	{r4, r7, lr}
 8011322:	b08d      	sub	sp, #52	@ 0x34
 8011324:	af02      	add	r7, sp, #8
 8011326:	4603      	mov	r3, r0
 8011328:	6039      	str	r1, [r7, #0]
 801132a:	71fb      	strb	r3, [r7, #7]
    CalcNextAdrParams_t adrNext;
    uint32_t adrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 801132c:	4b42      	ldr	r3, [pc, #264]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 801132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011330:	613b      	str	r3, [r7, #16]
    int8_t datarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 8011332:	4b41      	ldr	r3, [pc, #260]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 8011334:	f993 30cd 	ldrsb.w	r3, [r3, #205]	@ 0xcd
 8011338:	73fb      	strb	r3, [r7, #15]
    int8_t txPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 801133a:	4b3f      	ldr	r3, [pc, #252]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 801133c:	f993 30cc 	ldrsb.w	r3, [r3, #204]	@ 0xcc
 8011340:	73bb      	strb	r3, [r7, #14]
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    uint8_t nbTrans = MacCtx.ChannelsNbTransCounter;
 8011342:	4b3e      	ldr	r3, [pc, #248]	@ (801143c <LoRaMacQueryTxPossible+0x11c>)
 8011344:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011348:	737b      	strb	r3, [r7, #13]
#endif /* LORAMAC_VERSION */
    size_t macCmdsSize = 0;
 801134a:	2300      	movs	r3, #0
 801134c:	60bb      	str	r3, [r7, #8]

    if( txInfo == NULL )
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d101      	bne.n	8011358 <LoRaMacQueryTxPossible+0x38>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011354:	2303      	movs	r3, #3
 8011356:	e06b      	b.n	8011430 <LoRaMacQueryTxPossible+0x110>

    // Setup ADR request
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    adrNext.Version = Nvm.MacGroup2.Version;
#endif /* LORAMAC_VERSION */
    adrNext.UpdateChanMask = false;
 8011358:	2300      	movs	r3, #0
 801135a:	753b      	strb	r3, [r7, #20]
    adrNext.AdrEnabled = Nvm.MacGroup2.AdrCtrlOn;
 801135c:	4b36      	ldr	r3, [pc, #216]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 801135e:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 8011362:	757b      	strb	r3, [r7, #21]
    adrNext.AdrAckCounter = Nvm.MacGroup1.AdrAckCounter;
 8011364:	4b34      	ldr	r3, [pc, #208]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 8011366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011368:	61bb      	str	r3, [r7, #24]
    adrNext.AdrAckLimit = MacCtx.AdrAckLimit;
 801136a:	4b34      	ldr	r3, [pc, #208]	@ (801143c <LoRaMacQueryTxPossible+0x11c>)
 801136c:	f8b3 3400 	ldrh.w	r3, [r3, #1024]	@ 0x400
 8011370:	83bb      	strh	r3, [r7, #28]
    adrNext.AdrAckDelay = MacCtx.AdrAckDelay;
 8011372:	4b32      	ldr	r3, [pc, #200]	@ (801143c <LoRaMacQueryTxPossible+0x11c>)
 8011374:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	@ 0x402
 8011378:	83fb      	strh	r3, [r7, #30]
    adrNext.Datarate = Nvm.MacGroup1.ChannelsDatarate;
 801137a:	4b2f      	ldr	r3, [pc, #188]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 801137c:	f993 3039 	ldrsb.w	r3, [r3, #57]	@ 0x39
 8011380:	f887 3020 	strb.w	r3, [r7, #32]
    adrNext.TxPower = Nvm.MacGroup1.ChannelsTxPower;
 8011384:	4b2c      	ldr	r3, [pc, #176]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 8011386:	f993 3038 	ldrsb.w	r3, [r3, #56]	@ 0x38
 801138a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    adrNext.NbTrans = MacCtx.ChannelsNbTransCounter;
 801138e:	4b2b      	ldr	r3, [pc, #172]	@ (801143c <LoRaMacQueryTxPossible+0x11c>)
 8011390:	f893 341c 	ldrb.w	r3, [r3, #1052]	@ 0x41c
 8011394:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */
    adrNext.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011398:	4b27      	ldr	r3, [pc, #156]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 801139a:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 801139e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    adrNext.Region = Nvm.MacGroup2.Region;
 80113a2:	4b25      	ldr	r3, [pc, #148]	@ (8011438 <LoRaMacQueryTxPossible+0x118>)
 80113a4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80113a8:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    // We call the function for information purposes only. We don't want to
    // apply the datarate, the tx power and the ADR ack counter.
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &adrAckCounter );
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    LoRaMacAdrCalcNext( &adrNext, &datarate, &txPower, &nbTrans, &adrAckCounter );
 80113ac:	f107 040d 	add.w	r4, r7, #13
 80113b0:	f107 020e 	add.w	r2, r7, #14
 80113b4:	f107 010f 	add.w	r1, r7, #15
 80113b8:	f107 0014 	add.w	r0, r7, #20
 80113bc:	f107 0310 	add.w	r3, r7, #16
 80113c0:	9300      	str	r3, [sp, #0]
 80113c2:	4623      	mov	r3, r4
 80113c4:	f001 f852 	bl	801246c <LoRaMacAdrCalcNext>
#endif /* LORAMAC_VERSION */

    txInfo->CurrentPossiblePayloadSize = GetMaxAppPayloadWithoutFOptsLength( datarate );
 80113c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f7fd feb9 	bl	800f144 <GetMaxAppPayloadWithoutFOptsLength>
 80113d2:	4603      	mov	r3, r0
 80113d4:	461a      	mov	r2, r3
 80113d6:	683b      	ldr	r3, [r7, #0]
 80113d8:	705a      	strb	r2, [r3, #1]

    if( LoRaMacCommandsGetSizeSerializedCmds( &macCmdsSize ) != LORAMAC_COMMANDS_SUCCESS )
 80113da:	f107 0308 	add.w	r3, r7, #8
 80113de:	4618      	mov	r0, r3
 80113e0:	f001 fbd8 	bl	8012b94 <LoRaMacCommandsGetSizeSerializedCmds>
 80113e4:	4603      	mov	r3, r0
 80113e6:	2b00      	cmp	r3, #0
 80113e8:	d001      	beq.n	80113ee <LoRaMacQueryTxPossible+0xce>
    {
        return LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80113ea:	2313      	movs	r3, #19
 80113ec:	e020      	b.n	8011430 <LoRaMacQueryTxPossible+0x110>
    }

    // Verify if the MAC commands fit into the FOpts and into the maximum payload.
    if( ( LORA_MAC_COMMAND_MAX_FOPTS_LENGTH >= macCmdsSize ) && ( txInfo->CurrentPossiblePayloadSize >= macCmdsSize ) )
 80113ee:	68bb      	ldr	r3, [r7, #8]
 80113f0:	2b0f      	cmp	r3, #15
 80113f2:	d819      	bhi.n	8011428 <LoRaMacQueryTxPossible+0x108>
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	785b      	ldrb	r3, [r3, #1]
 80113f8:	461a      	mov	r2, r3
 80113fa:	68bb      	ldr	r3, [r7, #8]
 80113fc:	429a      	cmp	r2, r3
 80113fe:	d313      	bcc.n	8011428 <LoRaMacQueryTxPossible+0x108>
    {
        txInfo->MaxPossibleApplicationDataSize = txInfo->CurrentPossiblePayloadSize - macCmdsSize;
 8011400:	683b      	ldr	r3, [r7, #0]
 8011402:	785a      	ldrb	r2, [r3, #1]
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	b2db      	uxtb	r3, r3
 8011408:	1ad3      	subs	r3, r2, r3
 801140a:	b2da      	uxtb	r2, r3
 801140c:	683b      	ldr	r3, [r7, #0]
 801140e:	701a      	strb	r2, [r3, #0]

        // Verify if the application data together with MAC command fit into the maximum payload.
        if( txInfo->CurrentPossiblePayloadSize >= ( macCmdsSize + size ) )
 8011410:	683b      	ldr	r3, [r7, #0]
 8011412:	785b      	ldrb	r3, [r3, #1]
 8011414:	4619      	mov	r1, r3
 8011416:	79fa      	ldrb	r2, [r7, #7]
 8011418:	68bb      	ldr	r3, [r7, #8]
 801141a:	4413      	add	r3, r2
 801141c:	4299      	cmp	r1, r3
 801141e:	d301      	bcc.n	8011424 <LoRaMacQueryTxPossible+0x104>
        {
            return LORAMAC_STATUS_OK;
 8011420:	2300      	movs	r3, #0
 8011422:	e005      	b.n	8011430 <LoRaMacQueryTxPossible+0x110>
        }
        else
        {
           return LORAMAC_STATUS_LENGTH_ERROR;
 8011424:	2308      	movs	r3, #8
 8011426:	e003      	b.n	8011430 <LoRaMacQueryTxPossible+0x110>
        }
    }
    else
    {
        txInfo->MaxPossibleApplicationDataSize = 0;
 8011428:	683b      	ldr	r3, [r7, #0]
 801142a:	2200      	movs	r2, #0
 801142c:	701a      	strb	r2, [r3, #0]
        return LORAMAC_STATUS_LENGTH_ERROR;
 801142e:	2308      	movs	r3, #8
    }
}
 8011430:	4618      	mov	r0, r3
 8011432:	372c      	adds	r7, #44	@ 0x2c
 8011434:	46bd      	mov	sp, r7
 8011436:	bd90      	pop	{r4, r7, pc}
 8011438:	20000b90 	.word	0x20000b90
 801143c:	20000670 	.word	0x20000670

08011440 <LoRaMacMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibGetRequestConfirm( MibRequestConfirm_t* mibGet )
{
 8011440:	b590      	push	{r4, r7, lr}
 8011442:	b087      	sub	sp, #28
 8011444:	af00      	add	r7, sp, #0
 8011446:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011448:	2300      	movs	r3, #0
 801144a:	75fb      	strb	r3, [r7, #23]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    if( mibGet == NULL )
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	2b00      	cmp	r3, #0
 8011450:	d101      	bne.n	8011456 <LoRaMacMibGetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011452:	2303      	movs	r3, #3
 8011454:	e191      	b.n	801177a <LoRaMacMibGetRequestConfirm+0x33a>
    }

    switch( mibGet->Type )
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	781b      	ldrb	r3, [r3, #0]
 801145a:	2b39      	cmp	r3, #57	@ 0x39
 801145c:	f200 8186 	bhi.w	801176c <LoRaMacMibGetRequestConfirm+0x32c>
 8011460:	a201      	add	r2, pc, #4	@ (adr r2, 8011468 <LoRaMacMibGetRequestConfirm+0x28>)
 8011462:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011466:	bf00      	nop
 8011468:	08011551 	.word	0x08011551
 801146c:	0801155d 	.word	0x0801155d
 8011470:	08011569 	.word	0x08011569
 8011474:	08011575 	.word	0x08011575
 8011478:	08011581 	.word	0x08011581
 801147c:	0801158d 	.word	0x0801158d
 8011480:	08011599 	.word	0x08011599
 8011484:	0801176d 	.word	0x0801176d
 8011488:	0801176d 	.word	0x0801176d
 801148c:	0801176d 	.word	0x0801176d
 8011490:	0801176d 	.word	0x0801176d
 8011494:	0801176d 	.word	0x0801176d
 8011498:	0801176d 	.word	0x0801176d
 801149c:	0801176d 	.word	0x0801176d
 80114a0:	0801176d 	.word	0x0801176d
 80114a4:	080115a5 	.word	0x080115a5
 80114a8:	080115b1 	.word	0x080115b1
 80114ac:	080115bd 	.word	0x080115bd
 80114b0:	080115df 	.word	0x080115df
 80114b4:	080115f1 	.word	0x080115f1
 80114b8:	08011603 	.word	0x08011603
 80114bc:	08011615 	.word	0x08011615
 80114c0:	08011649 	.word	0x08011649
 80114c4:	08011627 	.word	0x08011627
 80114c8:	0801166b 	.word	0x0801166b
 80114cc:	08011677 	.word	0x08011677
 80114d0:	08011681 	.word	0x08011681
 80114d4:	0801168b 	.word	0x0801168b
 80114d8:	08011695 	.word	0x08011695
 80114dc:	0801169f 	.word	0x0801169f
 80114e0:	080116a9 	.word	0x080116a9
 80114e4:	080116d5 	.word	0x080116d5
 80114e8:	080116e1 	.word	0x080116e1
 80114ec:	080116f9 	.word	0x080116f9
 80114f0:	080116ed 	.word	0x080116ed
 80114f4:	08011705 	.word	0x08011705
 80114f8:	0801170f 	.word	0x0801170f
 80114fc:	0801171b 	.word	0x0801171b
 8011500:	08011735 	.word	0x08011735
 8011504:	08011725 	.word	0x08011725
 8011508:	0801172d 	.word	0x0801172d
 801150c:	0801176d 	.word	0x0801176d
 8011510:	08011741 	.word	0x08011741
 8011514:	0801176d 	.word	0x0801176d
 8011518:	0801176d 	.word	0x0801176d
 801151c:	0801176d 	.word	0x0801176d
 8011520:	0801176d 	.word	0x0801176d
 8011524:	0801176d 	.word	0x0801176d
 8011528:	0801176d 	.word	0x0801176d
 801152c:	0801176d 	.word	0x0801176d
 8011530:	0801176d 	.word	0x0801176d
 8011534:	0801176d 	.word	0x0801176d
 8011538:	0801176d 	.word	0x0801176d
 801153c:	0801176d 	.word	0x0801176d
 8011540:	0801176d 	.word	0x0801176d
 8011544:	0801176d 	.word	0x0801176d
 8011548:	08011755 	.word	0x08011755
 801154c:	08011761 	.word	0x08011761
    {
        case MIB_DEVICE_CLASS:
        {
            mibGet->Param.Class = Nvm.MacGroup2.DeviceClass;
 8011550:	4b8c      	ldr	r3, [pc, #560]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011552:	f893 2104 	ldrb.w	r2, [r3, #260]	@ 0x104
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	711a      	strb	r2, [r3, #4]
            break;
 801155a:	e10d      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            mibGet->Param.NetworkActivation = Nvm.MacGroup2.NetworkActivation;
 801155c:	4b89      	ldr	r3, [pc, #548]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801155e:	f893 211c 	ldrb.w	r2, [r3, #284]	@ 0x11c
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	711a      	strb	r2, [r3, #4]
            break;
 8011566:	e107      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_EUI:
        {
            mibGet->Param.DevEui = SecureElementGetDevEui( );
 8011568:	f7fa fc7e 	bl	800be68 <SecureElementGetDevEui>
 801156c:	4602      	mov	r2, r0
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	605a      	str	r2, [r3, #4]
            break;
 8011572:	e101      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_EUI:
        {
            mibGet->Param.JoinEui = SecureElementGetJoinEui( );
 8011574:	f7fa fc9a 	bl	800beac <SecureElementGetJoinEui>
 8011578:	4602      	mov	r2, r0
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	605a      	str	r2, [r3, #4]
            break;
 801157e:	e0fb      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ADR:
        {
            mibGet->Param.AdrEnable = Nvm.MacGroup2.AdrCtrlOn;
 8011580:	4b80      	ldr	r3, [pc, #512]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011582:	f893 2106 	ldrb.w	r2, [r3, #262]	@ 0x106
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	711a      	strb	r2, [r3, #4]
            break;
 801158a:	e0f5      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NET_ID:
        {
            mibGet->Param.NetID = Nvm.MacGroup2.NetID;
 801158c:	4b7d      	ldr	r3, [pc, #500]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801158e:	f8d3 20d0 	ldr.w	r2, [r3, #208]	@ 0xd0
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	605a      	str	r2, [r3, #4]
            break;
 8011596:	e0ef      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEV_ADDR:
        {
            mibGet->Param.DevAddr = Nvm.MacGroup2.DevAddr;
 8011598:	4b7a      	ldr	r3, [pc, #488]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801159a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	605a      	str	r2, [r3, #4]
            break;
 80115a2:	e0e9      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_PUBLIC_NETWORK:
        {
            mibGet->Param.EnablePublicNetwork = Nvm.MacGroup2.PublicNetwork;
 80115a4:	4b77      	ldr	r3, [pc, #476]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80115a6:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	711a      	strb	r2, [r3, #4]
            break;
 80115ae:	e0e3      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            mibGet->Param.EnableRepeaterSupport = Nvm.MacGroup2.MacParams.RepeaterSupport;
 80115b0:	4b74      	ldr	r3, [pc, #464]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80115b2:	f893 2080 	ldrb.w	r2, [r3, #128]	@ 0x80
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	711a      	strb	r2, [r3, #4]
            break;
 80115ba:	e0dd      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        /* ST_WORKAROUND_END */
        case MIB_CHANNELS:
        {
            getPhy.Attribute = PHY_CHANNELS;
 80115bc:	231c      	movs	r3, #28
 80115be:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80115c0:	4b70      	ldr	r3, [pc, #448]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80115c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80115c6:	f107 0210 	add.w	r2, r7, #16
 80115ca:	4611      	mov	r1, r2
 80115cc:	4618      	mov	r0, r3
 80115ce:	f002 ff99 	bl	8014504 <RegionGetPhyParam>
 80115d2:	4603      	mov	r3, r0
 80115d4:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelList = phyParam.Channels;
 80115d6:	68fa      	ldr	r2, [r7, #12]
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	605a      	str	r2, [r3, #4]
            break;
 80115dc:	e0cc      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParams.Rx2Channel;
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	4a68      	ldr	r2, [pc, #416]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80115e2:	3304      	adds	r3, #4
 80115e4:	3264      	adds	r2, #100	@ 0x64
 80115e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115ea:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 80115ee:	e0c3      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            mibGet->Param.Rx2Channel = Nvm.MacGroup2.MacParamsDefaults.Rx2Channel;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	4a64      	ldr	r2, [pc, #400]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80115f4:	3304      	adds	r3, #4
 80115f6:	32a8      	adds	r2, #168	@ 0xa8
 80115f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80115fc:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011600:	e0ba      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParams.RxCChannel;
 8011602:	687b      	ldr	r3, [r7, #4]
 8011604:	4a5f      	ldr	r2, [pc, #380]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011606:	3304      	adds	r3, #4
 8011608:	326c      	adds	r2, #108	@ 0x6c
 801160a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801160e:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011612:	e0b1      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            mibGet->Param.RxCChannel = Nvm.MacGroup2.MacParamsDefaults.RxCChannel;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	4a5b      	ldr	r2, [pc, #364]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011618:	3304      	adds	r3, #4
 801161a:	32b0      	adds	r2, #176	@ 0xb0
 801161c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011620:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011624:	e0a8      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_DEFAULT_MASK;
 8011626:	231a      	movs	r3, #26
 8011628:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801162a:	4b56      	ldr	r3, [pc, #344]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801162c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011630:	f107 0210 	add.w	r2, r7, #16
 8011634:	4611      	mov	r1, r2
 8011636:	4618      	mov	r0, r3
 8011638:	f002 ff64 	bl	8014504 <RegionGetPhyParam>
 801163c:	4603      	mov	r3, r0
 801163e:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsDefaultMask = phyParam.ChannelsMask;
 8011640:	68fa      	ldr	r2, [r7, #12]
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	605a      	str	r2, [r3, #4]
            break;
 8011646:	e097      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_MASK:
        {
            getPhy.Attribute = PHY_CHANNELS_MASK;
 8011648:	2319      	movs	r3, #25
 801164a:	743b      	strb	r3, [r7, #16]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 801164c:	4b4d      	ldr	r3, [pc, #308]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801164e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011652:	f107 0210 	add.w	r2, r7, #16
 8011656:	4611      	mov	r1, r2
 8011658:	4618      	mov	r0, r3
 801165a:	f002 ff53 	bl	8014504 <RegionGetPhyParam>
 801165e:	4603      	mov	r3, r0
 8011660:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMask = phyParam.ChannelsMask;
 8011662:	68fa      	ldr	r2, [r7, #12]
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	605a      	str	r2, [r3, #4]
            break;
 8011668:	e086      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            mibGet->Param.ChannelsNbTrans = Nvm.MacGroup2.MacParams.ChannelsNbTrans;
 801166a:	4b46      	ldr	r3, [pc, #280]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801166c:	f893 2060 	ldrb.w	r2, [r3, #96]	@ 0x60
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	711a      	strb	r2, [r3, #4]
            break;
 8011674:	e080      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            mibGet->Param.MaxRxWindow = Nvm.MacGroup2.MacParams.MaxRxWindow;
 8011676:	4b43      	ldr	r3, [pc, #268]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011678:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	605a      	str	r2, [r3, #4]
            break;
 801167e:	e07b      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            mibGet->Param.ReceiveDelay1 = Nvm.MacGroup2.MacParams.ReceiveDelay1;
 8011680:	4b40      	ldr	r3, [pc, #256]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011682:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	605a      	str	r2, [r3, #4]
            break;
 8011688:	e076      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            mibGet->Param.ReceiveDelay2 = Nvm.MacGroup2.MacParams.ReceiveDelay2;
 801168a:	4b3e      	ldr	r3, [pc, #248]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801168c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	605a      	str	r2, [r3, #4]
            break;
 8011692:	e071      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            mibGet->Param.JoinAcceptDelay1 = Nvm.MacGroup2.MacParams.JoinAcceptDelay1;
 8011694:	4b3b      	ldr	r3, [pc, #236]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011696:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	605a      	str	r2, [r3, #4]
            break;
 801169c:	e06c      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            mibGet->Param.JoinAcceptDelay2 = Nvm.MacGroup2.MacParams.JoinAcceptDelay2;
 801169e:	4b39      	ldr	r3, [pc, #228]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116a0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	605a      	str	r2, [r3, #4]
            break;
 80116a6:	e067      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_CHANNELS_MIN_TX_DATARATE:
        {
            getPhy.Attribute = PHY_MIN_TX_DR;
 80116a8:	2302      	movs	r3, #2
 80116aa:	743b      	strb	r3, [r7, #16]
            getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80116ac:	4b35      	ldr	r3, [pc, #212]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116ae:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80116b2:	74bb      	strb	r3, [r7, #18]
            phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80116b4:	4b33      	ldr	r3, [pc, #204]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80116ba:	f107 0210 	add.w	r2, r7, #16
 80116be:	4611      	mov	r1, r2
 80116c0:	4618      	mov	r0, r3
 80116c2:	f002 ff1f 	bl	8014504 <RegionGetPhyParam>
 80116c6:	4603      	mov	r3, r0
 80116c8:	60fb      	str	r3, [r7, #12]

            mibGet->Param.ChannelsMinTxDatarate = phyParam.Value;
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	b25a      	sxtb	r2, r3
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	711a      	strb	r2, [r3, #4]
            break;
 80116d2:	e051      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            mibGet->Param.ChannelsDefaultDatarate = Nvm.MacGroup2.ChannelsDatarateDefault;
 80116d4:	4b2b      	ldr	r3, [pc, #172]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116d6:	f993 20cd 	ldrsb.w	r2, [r3, #205]	@ 0xcd
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	711a      	strb	r2, [r3, #4]
            break;
 80116de:	e04b      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DATARATE:
        {
            mibGet->Param.ChannelsDatarate = Nvm.MacGroup1.ChannelsDatarate;
 80116e0:	4b28      	ldr	r3, [pc, #160]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116e2:	f993 2039 	ldrsb.w	r2, [r3, #57]	@ 0x39
 80116e6:	687b      	ldr	r3, [r7, #4]
 80116e8:	711a      	strb	r2, [r3, #4]
            break;
 80116ea:	e045      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            mibGet->Param.ChannelsDefaultTxPower = Nvm.MacGroup2.ChannelsTxPowerDefault;
 80116ec:	4b25      	ldr	r3, [pc, #148]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116ee:	f993 20cc 	ldrsb.w	r2, [r3, #204]	@ 0xcc
 80116f2:	687b      	ldr	r3, [r7, #4]
 80116f4:	711a      	strb	r2, [r3, #4]
            break;
 80116f6:	e03f      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            mibGet->Param.ChannelsTxPower = Nvm.MacGroup1.ChannelsTxPower;
 80116f8:	4b22      	ldr	r3, [pc, #136]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 80116fa:	f993 2038 	ldrsb.w	r2, [r3, #56]	@ 0x38
 80116fe:	687b      	ldr	r3, [r7, #4]
 8011700:	711a      	strb	r2, [r3, #4]
            break;
 8011702:	e039      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            mibGet->Param.SystemMaxRxError = Nvm.MacGroup2.MacParams.SystemMaxRxError;
 8011704:	4b1f      	ldr	r3, [pc, #124]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011706:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	605a      	str	r2, [r3, #4]
            break;
 801170c:	e034      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            mibGet->Param.MinRxSymbols = Nvm.MacGroup2.MacParams.MinRxSymbols;
 801170e:	4b1d      	ldr	r3, [pc, #116]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011710:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	711a      	strb	r2, [r3, #4]
            break;
 8011718:	e02e      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_ANTENNA_GAIN:
        {
            mibGet->Param.AntennaGain = Nvm.MacGroup2.MacParams.AntennaGain;
 801171a:	4b1a      	ldr	r3, [pc, #104]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 801171c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	605a      	str	r2, [r3, #4]
            break;
 8011722:	e029      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_CTXS:
        {
            mibGet->Param.Contexts = &Nvm;
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	4a17      	ldr	r2, [pc, #92]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011728:	605a      	str	r2, [r3, #4]
            break;
 801172a:	e025      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_NVM_BKP_CTXS:
        {
            mibGet->Param.BackupContexts = &NvmBackup;
 801172c:	687b      	ldr	r3, [r7, #4]
 801172e:	4a16      	ldr	r2, [pc, #88]	@ (8011788 <LoRaMacMibGetRequestConfirm+0x348>)
 8011730:	605a      	str	r2, [r3, #4]
            break;
 8011732:	e021      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            mibGet->Param.DefaultAntennaGain = Nvm.MacGroup2.MacParamsDefaults.AntennaGain;
 8011734:	4b13      	ldr	r3, [pc, #76]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011736:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	605a      	str	r2, [r3, #4]
            break;
 801173e:	e01b      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
        case MIB_LORAWAN_VERSION:
        {
            mibGet->Param.LrWanVersion.LoRaWan = Nvm.MacGroup2.Version;
 8011740:	687b      	ldr	r3, [r7, #4]
 8011742:	4a10      	ldr	r2, [pc, #64]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011744:	f8d2 2118 	ldr.w	r2, [r2, #280]	@ 0x118
 8011748:	605a      	str	r2, [r3, #4]
            mibGet->Param.LrWanVersion.LoRaWanRegion = RegionGetVersion( );
 801174a:	687c      	ldr	r4, [r7, #4]
 801174c:	f003 f850 	bl	80147f0 <RegionGetVersion>
 8011750:	60a0      	str	r0, [r4, #8]
            break;
 8011752:	e011      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
    case MIB_RXB_C_TIMEOUT:
        {
            mibGet->Param.RxBCTimeout = Nvm.MacGroup2.MacParams.RxBCTimeout;
 8011754:	4b0b      	ldr	r3, [pc, #44]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011756:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	605a      	str	r2, [r3, #4]
            break;
 801175e:	e00b      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            mibGet->Param.IsCertPortOn = Nvm.MacGroup2.IsCertPortOn;
 8011760:	4b08      	ldr	r3, [pc, #32]	@ (8011784 <LoRaMacMibGetRequestConfirm+0x344>)
 8011762:	f893 210b 	ldrb.w	r2, [r3, #267]	@ 0x10b
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	711a      	strb	r2, [r3, #4]
            break;
 801176a:	e005      	b.n	8011778 <LoRaMacMibGetRequestConfirm+0x338>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacClassBMibGetRequestConfirm( mibGet );
 801176c:	6878      	ldr	r0, [r7, #4]
 801176e:	f000 ffca 	bl	8012706 <LoRaMacClassBMibGetRequestConfirm>
 8011772:	4603      	mov	r3, r0
 8011774:	75fb      	strb	r3, [r7, #23]
            break;
 8011776:	bf00      	nop
        }
    }
    return status;
 8011778:	7dfb      	ldrb	r3, [r7, #23]
}
 801177a:	4618      	mov	r0, r3
 801177c:	371c      	adds	r7, #28
 801177e:	46bd      	mov	sp, r7
 8011780:	bd90      	pop	{r4, r7, pc}
 8011782:	bf00      	nop
 8011784:	20000b90 	.word	0x20000b90
 8011788:	2000110c 	.word	0x2000110c

0801178c <LoRaMacMibSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibSetRequestConfirm( MibRequestConfirm_t* mibSet )
{
 801178c:	b580      	push	{r7, lr}
 801178e:	b086      	sub	sp, #24
 8011790:	af00      	add	r7, sp, #0
 8011792:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_OK;
 8011794:	2300      	movs	r3, #0
 8011796:	75fb      	strb	r3, [r7, #23]
    ChanMaskSetParams_t chanMaskSet;
    VerifyParams_t verify;

    if( mibSet == NULL )
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d101      	bne.n	80117a2 <LoRaMacMibSetRequestConfirm+0x16>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801179e:	2303      	movs	r3, #3
 80117a0:	e35c      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
    }
    if( ( MacCtx.MacState & LORAMAC_TX_RUNNING ) == LORAMAC_TX_RUNNING )
 80117a2:	4bb9      	ldr	r3, [pc, #740]	@ (8011a88 <LoRaMacMibSetRequestConfirm+0x2fc>)
 80117a4:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 80117a8:	f003 0302 	and.w	r3, r3, #2
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d001      	beq.n	80117b4 <LoRaMacMibSetRequestConfirm+0x28>
    {
        return LORAMAC_STATUS_BUSY;
 80117b0:	2301      	movs	r3, #1
 80117b2:	e353      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
    }

    switch( mibSet->Type )
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	781b      	ldrb	r3, [r3, #0]
 80117b8:	2b39      	cmp	r3, #57	@ 0x39
 80117ba:	f200 8323 	bhi.w	8011e04 <LoRaMacMibSetRequestConfirm+0x678>
 80117be:	a201      	add	r2, pc, #4	@ (adr r2, 80117c4 <LoRaMacMibSetRequestConfirm+0x38>)
 80117c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117c4:	080118ad 	.word	0x080118ad
 80117c8:	080118bd 	.word	0x080118bd
 80117cc:	080118d7 	.word	0x080118d7
 80117d0:	080118ef 	.word	0x080118ef
 80117d4:	08011907 	.word	0x08011907
 80117d8:	08011913 	.word	0x08011913
 80117dc:	0801191f 	.word	0x0801191f
 80117e0:	0801192b 	.word	0x0801192b
 80117e4:	08011951 	.word	0x08011951
 80117e8:	08011977 	.word	0x08011977
 80117ec:	0801199d 	.word	0x0801199d
 80117f0:	080119c3 	.word	0x080119c3
 80117f4:	080119e9 	.word	0x080119e9
 80117f8:	08011a0f 	.word	0x08011a0f
 80117fc:	08011a35 	.word	0x08011a35
 8011800:	08011a5b 	.word	0x08011a5b
 8011804:	08011a7b 	.word	0x08011a7b
 8011808:	08011e05 	.word	0x08011e05
 801180c:	08011a95 	.word	0x08011a95
 8011810:	08011b05 	.word	0x08011b05
 8011814:	08011b45 	.word	0x08011b45
 8011818:	08011ba7 	.word	0x08011ba7
 801181c:	08011c17 	.word	0x08011c17
 8011820:	08011be7 	.word	0x08011be7
 8011824:	08011c47 	.word	0x08011c47
 8011828:	08011c69 	.word	0x08011c69
 801182c:	08011c73 	.word	0x08011c73
 8011830:	08011c7d 	.word	0x08011c7d
 8011834:	08011c87 	.word	0x08011c87
 8011838:	08011c91 	.word	0x08011c91
 801183c:	08011e05 	.word	0x08011e05
 8011840:	08011c9b 	.word	0x08011c9b
 8011844:	08011ccd 	.word	0x08011ccd
 8011848:	08011d39 	.word	0x08011d39
 801184c:	08011d07 	.word	0x08011d07
 8011850:	08011d75 	.word	0x08011d75
 8011854:	08011d8b 	.word	0x08011d8b
 8011858:	08011da3 	.word	0x08011da3
 801185c:	08011dad 	.word	0x08011dad
 8011860:	08011db9 	.word	0x08011db9
 8011864:	08011e05 	.word	0x08011e05
 8011868:	08011dc3 	.word	0x08011dc3
 801186c:	08011e05 	.word	0x08011e05
 8011870:	08011e05 	.word	0x08011e05
 8011874:	08011e05 	.word	0x08011e05
 8011878:	08011e05 	.word	0x08011e05
 801187c:	08011e05 	.word	0x08011e05
 8011880:	08011e05 	.word	0x08011e05
 8011884:	08011e05 	.word	0x08011e05
 8011888:	08011e05 	.word	0x08011e05
 801188c:	08011e05 	.word	0x08011e05
 8011890:	08011e05 	.word	0x08011e05
 8011894:	08011e05 	.word	0x08011e05
 8011898:	08011e05 	.word	0x08011e05
 801189c:	08011e05 	.word	0x08011e05
 80118a0:	08011e05 	.word	0x08011e05
 80118a4:	08011ded 	.word	0x08011ded
 80118a8:	08011df9 	.word	0x08011df9
    {
        case MIB_DEVICE_CLASS:
        {
            status = SwitchClass( mibSet->Param.Class );
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	791b      	ldrb	r3, [r3, #4]
 80118b0:	4618      	mov	r0, r3
 80118b2:	f7fd fb75 	bl	800efa0 <SwitchClass>
 80118b6:	4603      	mov	r3, r0
 80118b8:	75fb      	strb	r3, [r7, #23]
            break;
 80118ba:	e2c4      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NETWORK_ACTIVATION:
        {
            if( mibSet->Param.NetworkActivation != ACTIVATION_TYPE_OTAA  )
 80118bc:	687b      	ldr	r3, [r7, #4]
 80118be:	791b      	ldrb	r3, [r3, #4]
 80118c0:	2b02      	cmp	r3, #2
 80118c2:	d005      	beq.n	80118d0 <LoRaMacMibSetRequestConfirm+0x144>
            {
                Nvm.MacGroup2.NetworkActivation = mibSet->Param.NetworkActivation;
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	791a      	ldrb	r2, [r3, #4]
 80118c8:	4b70      	ldr	r3, [pc, #448]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 80118ca:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
            }
            else
            {   // Do not allow to set ACTIVATION_TYPE_OTAA since the MAC will set it automatically after a successful join process.
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 80118ce:	e2ba      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118d0:	2303      	movs	r3, #3
 80118d2:	75fb      	strb	r3, [r7, #23]
            break;
 80118d4:	e2b7      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_EUI:
        {
            if( SecureElementSetDevEui( mibSet->Param.DevEui ) != SECURE_ELEMENT_SUCCESS )
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	685b      	ldr	r3, [r3, #4]
 80118da:	4618      	mov	r0, r3
 80118dc:	f7fa faac 	bl	800be38 <SecureElementSetDevEui>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	f000 8294 	beq.w	8011e10 <LoRaMacMibSetRequestConfirm+0x684>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80118e8:	2303      	movs	r3, #3
 80118ea:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80118ec:	e290      	b.n	8011e10 <LoRaMacMibSetRequestConfirm+0x684>
        }
        case MIB_JOIN_EUI:
        {
            if( SecureElementSetJoinEui( mibSet->Param.JoinEui ) != SECURE_ELEMENT_SUCCESS )
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7fa fac2 	bl	800be7c <SecureElementSetJoinEui>
 80118f8:	4603      	mov	r3, r0
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	f000 828a 	beq.w	8011e14 <LoRaMacMibSetRequestConfirm+0x688>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011900:	2303      	movs	r3, #3
 8011902:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011904:	e286      	b.n	8011e14 <LoRaMacMibSetRequestConfirm+0x688>
        }
        case MIB_ADR:
        {
            Nvm.MacGroup2.AdrCtrlOn = mibSet->Param.AdrEnable;
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	791a      	ldrb	r2, [r3, #4]
 801190a:	4b60      	ldr	r3, [pc, #384]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 801190c:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            break;
 8011910:	e299      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NET_ID:
        {
            Nvm.MacGroup2.NetID = mibSet->Param.NetID;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	4a5d      	ldr	r2, [pc, #372]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 8011918:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
            break;
 801191c:	e293      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEV_ADDR:
        {
            Nvm.MacGroup2.DevAddr = mibSet->Param.DevAddr;
 801191e:	687b      	ldr	r3, [r7, #4]
 8011920:	685b      	ldr	r3, [r3, #4]
 8011922:	4a5a      	ldr	r2, [pc, #360]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 8011924:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
            break;
 8011928:	e28d      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_APP_KEY:
        {
            if( mibSet->Param.AppKey != NULL )
 801192a:	687b      	ldr	r3, [r7, #4]
 801192c:	685b      	ldr	r3, [r3, #4]
 801192e:	2b00      	cmp	r3, #0
 8011930:	d00b      	beq.n	801194a <LoRaMacMibSetRequestConfirm+0x1be>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_KEY, mibSet->Param.AppKey ) )
 8011932:	687b      	ldr	r3, [r7, #4]
 8011934:	685b      	ldr	r3, [r3, #4]
 8011936:	4619      	mov	r1, r3
 8011938:	2000      	movs	r0, #0
 801193a:	f001 ffff 	bl	801393c <LoRaMacCryptoSetKey>
 801193e:	4603      	mov	r3, r0
 8011940:	2b00      	cmp	r3, #0
 8011942:	f000 8269 	beq.w	8011e18 <LoRaMacMibSetRequestConfirm+0x68c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011946:	2311      	movs	r3, #17
 8011948:	e288      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 801194a:	2303      	movs	r3, #3
 801194c:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801194e:	e263      	b.n	8011e18 <LoRaMacMibSetRequestConfirm+0x68c>
        }
        case MIB_NWK_KEY:
        {
            if( mibSet->Param.NwkKey != NULL )
 8011950:	687b      	ldr	r3, [r7, #4]
 8011952:	685b      	ldr	r3, [r3, #4]
 8011954:	2b00      	cmp	r3, #0
 8011956:	d00b      	beq.n	8011970 <LoRaMacMibSetRequestConfirm+0x1e4>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_KEY, mibSet->Param.NwkKey ) )
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	685b      	ldr	r3, [r3, #4]
 801195c:	4619      	mov	r1, r3
 801195e:	2001      	movs	r0, #1
 8011960:	f001 ffec 	bl	801393c <LoRaMacCryptoSetKey>
 8011964:	4603      	mov	r3, r0
 8011966:	2b00      	cmp	r3, #0
 8011968:	f000 8258 	beq.w	8011e1c <LoRaMacMibSetRequestConfirm+0x690>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 801196c:	2311      	movs	r3, #17
 801196e:	e275      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011970:	2303      	movs	r3, #3
 8011972:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011974:	e252      	b.n	8011e1c <LoRaMacMibSetRequestConfirm+0x690>
            break;
        }
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case MIB_NWK_S_KEY:
        {
            if( mibSet->Param.NwkSKey != NULL )
 8011976:	687b      	ldr	r3, [r7, #4]
 8011978:	685b      	ldr	r3, [r3, #4]
 801197a:	2b00      	cmp	r3, #0
 801197c:	d00b      	beq.n	8011996 <LoRaMacMibSetRequestConfirm+0x20a>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( NWK_S_KEY, mibSet->Param.NwkSKey ) )
 801197e:	687b      	ldr	r3, [r7, #4]
 8011980:	685b      	ldr	r3, [r3, #4]
 8011982:	4619      	mov	r1, r3
 8011984:	2002      	movs	r0, #2
 8011986:	f001 ffd9 	bl	801393c <LoRaMacCryptoSetKey>
 801198a:	4603      	mov	r3, r0
 801198c:	2b00      	cmp	r3, #0
 801198e:	f000 8247 	beq.w	8011e20 <LoRaMacMibSetRequestConfirm+0x694>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011992:	2311      	movs	r3, #17
 8011994:	e262      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011996:	2303      	movs	r3, #3
 8011998:	75fb      	strb	r3, [r7, #23]
            }
            break;
 801199a:	e241      	b.n	8011e20 <LoRaMacMibSetRequestConfirm+0x694>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        case MIB_APP_S_KEY:
        {
            if( mibSet->Param.AppSKey != NULL )
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	685b      	ldr	r3, [r3, #4]
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d00b      	beq.n	80119bc <LoRaMacMibSetRequestConfirm+0x230>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( APP_S_KEY, mibSet->Param.AppSKey ) )
 80119a4:	687b      	ldr	r3, [r7, #4]
 80119a6:	685b      	ldr	r3, [r3, #4]
 80119a8:	4619      	mov	r1, r3
 80119aa:	2003      	movs	r0, #3
 80119ac:	f001 ffc6 	bl	801393c <LoRaMacCryptoSetKey>
 80119b0:	4603      	mov	r3, r0
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	f000 8236 	beq.w	8011e24 <LoRaMacMibSetRequestConfirm+0x698>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119b8:	2311      	movs	r3, #17
 80119ba:	e24f      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119bc:	2303      	movs	r3, #3
 80119be:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119c0:	e230      	b.n	8011e24 <LoRaMacMibSetRequestConfirm+0x698>
        }
        case MIB_MC_KE_KEY:
        {
            if( mibSet->Param.McKEKey != NULL )
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	2b00      	cmp	r3, #0
 80119c8:	d00b      	beq.n	80119e2 <LoRaMacMibSetRequestConfirm+0x256>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KE_KEY, mibSet->Param.McKEKey ) )
 80119ca:	687b      	ldr	r3, [r7, #4]
 80119cc:	685b      	ldr	r3, [r3, #4]
 80119ce:	4619      	mov	r1, r3
 80119d0:	207f      	movs	r0, #127	@ 0x7f
 80119d2:	f001 ffb3 	bl	801393c <LoRaMacCryptoSetKey>
 80119d6:	4603      	mov	r3, r0
 80119d8:	2b00      	cmp	r3, #0
 80119da:	f000 8225 	beq.w	8011e28 <LoRaMacMibSetRequestConfirm+0x69c>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 80119de:	2311      	movs	r3, #17
 80119e0:	e23c      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 80119e2:	2303      	movs	r3, #3
 80119e4:	75fb      	strb	r3, [r7, #23]
            }
            break;
 80119e6:	e21f      	b.n	8011e28 <LoRaMacMibSetRequestConfirm+0x69c>
        }
#if ( LORAMAC_MAX_MC_CTX > 0 ) /* ST_WORKAROUND: reduced LORAMAC_MAX_MC_CTX */
        case MIB_MC_KEY_0:
        {
            if( mibSet->Param.McKey0 != NULL )
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	685b      	ldr	r3, [r3, #4]
 80119ec:	2b00      	cmp	r3, #0
 80119ee:	d00b      	beq.n	8011a08 <LoRaMacMibSetRequestConfirm+0x27c>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_KEY_0, mibSet->Param.McKey0 ) )
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	685b      	ldr	r3, [r3, #4]
 80119f4:	4619      	mov	r1, r3
 80119f6:	2080      	movs	r0, #128	@ 0x80
 80119f8:	f001 ffa0 	bl	801393c <LoRaMacCryptoSetKey>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	f000 8214 	beq.w	8011e2c <LoRaMacMibSetRequestConfirm+0x6a0>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a04:	2311      	movs	r3, #17
 8011a06:	e229      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a08:	2303      	movs	r3, #3
 8011a0a:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a0c:	e20e      	b.n	8011e2c <LoRaMacMibSetRequestConfirm+0x6a0>
        }
        case MIB_MC_APP_S_KEY_0:
        {
            if( mibSet->Param.McAppSKey0 != NULL )
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	685b      	ldr	r3, [r3, #4]
 8011a12:	2b00      	cmp	r3, #0
 8011a14:	d00b      	beq.n	8011a2e <LoRaMacMibSetRequestConfirm+0x2a2>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_APP_S_KEY_0, mibSet->Param.McAppSKey0 ) )
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	685b      	ldr	r3, [r3, #4]
 8011a1a:	4619      	mov	r1, r3
 8011a1c:	2081      	movs	r0, #129	@ 0x81
 8011a1e:	f001 ff8d 	bl	801393c <LoRaMacCryptoSetKey>
 8011a22:	4603      	mov	r3, r0
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	f000 8203 	beq.w	8011e30 <LoRaMacMibSetRequestConfirm+0x6a4>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a2a:	2311      	movs	r3, #17
 8011a2c:	e216      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a2e:	2303      	movs	r3, #3
 8011a30:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a32:	e1fd      	b.n	8011e30 <LoRaMacMibSetRequestConfirm+0x6a4>
        }
        case MIB_MC_NWK_S_KEY_0:
        {
            if( mibSet->Param.McNwkSKey0 != NULL )
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	685b      	ldr	r3, [r3, #4]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d00b      	beq.n	8011a54 <LoRaMacMibSetRequestConfirm+0x2c8>
            {
                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetKey( MC_NWK_S_KEY_0, mibSet->Param.McNwkSKey0 ) )
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	685b      	ldr	r3, [r3, #4]
 8011a40:	4619      	mov	r1, r3
 8011a42:	2082      	movs	r0, #130	@ 0x82
 8011a44:	f001 ff7a 	bl	801393c <LoRaMacCryptoSetKey>
 8011a48:	4603      	mov	r3, r0
 8011a4a:	2b00      	cmp	r3, #0
 8011a4c:	f000 81f2 	beq.w	8011e34 <LoRaMacMibSetRequestConfirm+0x6a8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011a50:	2311      	movs	r3, #17
 8011a52:	e203      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011a54:	2303      	movs	r3, #3
 8011a56:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011a58:	e1ec      	b.n	8011e34 <LoRaMacMibSetRequestConfirm+0x6a8>
            break;
        }
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        case MIB_PUBLIC_NETWORK:
        {
            Nvm.MacGroup2.PublicNetwork = mibSet->Param.EnablePublicNetwork;
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	791a      	ldrb	r2, [r3, #4]
 8011a5e:	4b0b      	ldr	r3, [pc, #44]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 8011a60:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
            Radio.SetPublicNetwork( Nvm.MacGroup2.PublicNetwork );
 8011a64:	4b0a      	ldr	r3, [pc, #40]	@ (8011a90 <LoRaMacMibSetRequestConfirm+0x304>)
 8011a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011a68:	4a08      	ldr	r2, [pc, #32]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 8011a6a:	f892 2105 	ldrb.w	r2, [r2, #261]	@ 0x105
 8011a6e:	4610      	mov	r0, r2
 8011a70:	4798      	blx	r3
            /* ST_WORAROUND_BEGIN: Required to avoid keeping the radio active after init */
            Radio.Sleep( );
 8011a72:	4b07      	ldr	r3, [pc, #28]	@ (8011a90 <LoRaMacMibSetRequestConfirm+0x304>)
 8011a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011a76:	4798      	blx	r3
            /* ST_WORKAROUND_END */
            break;
 8011a78:	e1e5      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case MIB_REPEATER_SUPPORT:
        {
            Nvm.MacGroup2.MacParams.RepeaterSupport = mibSet->Param.EnableRepeaterSupport;
 8011a7a:	687b      	ldr	r3, [r7, #4]
 8011a7c:	791a      	ldrb	r2, [r3, #4]
 8011a7e:	4b03      	ldr	r3, [pc, #12]	@ (8011a8c <LoRaMacMibSetRequestConfirm+0x300>)
 8011a80:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            break;
 8011a84:	e1df      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
 8011a86:	bf00      	nop
 8011a88:	20000670 	.word	0x20000670
 8011a8c:	20000b90 	.word	0x20000b90
 8011a90:	0801c500 	.word	0x0801c500
        }
        /* ST_WORKAROUND_END */
        case MIB_RX2_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011a94:	687b      	ldr	r3, [r7, #4]
 8011a96:	7a1b      	ldrb	r3, [r3, #8]
 8011a98:	b25b      	sxtb	r3, r3
 8011a9a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011a9c:	4bb3      	ldr	r3, [pc, #716]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011a9e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011aa2:	727b      	strb	r3, [r7, #9]
            /* ST_WORAROUND_BEGIN: Check also the Rx Frequency parameter */
            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) != true )
 8011aa4:	4bb1      	ldr	r3, [pc, #708]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011aa6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011aaa:	f107 0108 	add.w	r1, r7, #8
 8011aae:	2207      	movs	r2, #7
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	f002 fd62 	bl	801457a <RegionVerify>
 8011ab6:	4603      	mov	r3, r0
 8011ab8:	f083 0301 	eor.w	r3, r3, #1
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d002      	beq.n	8011ac8 <LoRaMacMibSetRequestConfirm+0x33c>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	75fb      	strb	r3, [r7, #23]
                {
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
                }
            }
            /* ST_WORKAROUND_END */
            break;
 8011ac6:	e1be      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                verify.Frequency = mibSet->Param.Rx2Channel.Frequency;
 8011ac8:	687b      	ldr	r3, [r7, #4]
 8011aca:	685b      	ldr	r3, [r3, #4]
 8011acc:	60bb      	str	r3, [r7, #8]
                if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_FREQUENCY ) != true )
 8011ace:	4ba7      	ldr	r3, [pc, #668]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ad0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ad4:	f107 0108 	add.w	r1, r7, #8
 8011ad8:	2200      	movs	r2, #0
 8011ada:	4618      	mov	r0, r3
 8011adc:	f002 fd4d 	bl	801457a <RegionVerify>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	f083 0301 	eor.w	r3, r3, #1
 8011ae6:	b2db      	uxtb	r3, r3
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d002      	beq.n	8011af2 <LoRaMacMibSetRequestConfirm+0x366>
                    status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011aec:	2303      	movs	r3, #3
 8011aee:	75fb      	strb	r3, [r7, #23]
            break;
 8011af0:	e1a9      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                    Nvm.MacGroup2.MacParams.Rx2Channel = mibSet->Param.Rx2Channel;
 8011af2:	4b9e      	ldr	r3, [pc, #632]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	3364      	adds	r3, #100	@ 0x64
 8011af8:	3204      	adds	r2, #4
 8011afa:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011afe:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8011b02:	e1a0      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RX2_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.Rx2Channel.Datarate;
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	7a1b      	ldrb	r3, [r3, #8]
 8011b08:	b25b      	sxtb	r3, r3
 8011b0a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b0c:	4b97      	ldr	r3, [pc, #604]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b0e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011b12:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b14:	4b95      	ldr	r3, [pc, #596]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b1a:	f107 0108 	add.w	r1, r7, #8
 8011b1e:	2207      	movs	r2, #7
 8011b20:	4618      	mov	r0, r3
 8011b22:	f002 fd2a 	bl	801457a <RegionVerify>
 8011b26:	4603      	mov	r3, r0
 8011b28:	2b00      	cmp	r3, #0
 8011b2a:	d008      	beq.n	8011b3e <LoRaMacMibSetRequestConfirm+0x3b2>
            {
                Nvm.MacGroup2.MacParamsDefaults.Rx2Channel = mibSet->Param.Rx2DefaultChannel;
 8011b2c:	4b8f      	ldr	r3, [pc, #572]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b2e:	687a      	ldr	r2, [r7, #4]
 8011b30:	33a8      	adds	r3, #168	@ 0xa8
 8011b32:	3204      	adds	r2, #4
 8011b34:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b38:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b3c:	e183      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011b3e:	2303      	movs	r3, #3
 8011b40:	75fb      	strb	r3, [r7, #23]
            break;
 8011b42:	e180      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RXC_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011b44:	687b      	ldr	r3, [r7, #4]
 8011b46:	7a1b      	ldrb	r3, [r3, #8]
 8011b48:	b25b      	sxtb	r3, r3
 8011b4a:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011b4c:	4b87      	ldr	r3, [pc, #540]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b4e:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011b52:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011b54:	4b85      	ldr	r3, [pc, #532]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b56:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011b5a:	f107 0108 	add.w	r1, r7, #8
 8011b5e:	2207      	movs	r2, #7
 8011b60:	4618      	mov	r0, r3
 8011b62:	f002 fd0a 	bl	801457a <RegionVerify>
 8011b66:	4603      	mov	r3, r0
 8011b68:	2b00      	cmp	r3, #0
 8011b6a:	d019      	beq.n	8011ba0 <LoRaMacMibSetRequestConfirm+0x414>
            {
                Nvm.MacGroup2.MacParams.RxCChannel = mibSet->Param.RxCChannel;
 8011b6c:	4b7f      	ldr	r3, [pc, #508]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b6e:	687a      	ldr	r2, [r7, #4]
 8011b70:	336c      	adds	r3, #108	@ 0x6c
 8011b72:	3204      	adds	r2, #4
 8011b74:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011b78:	e883 0003 	stmia.w	r3, {r0, r1}

                if( ( Nvm.MacGroup2.DeviceClass == CLASS_C ) && ( Nvm.MacGroup2.NetworkActivation != ACTIVATION_TYPE_NONE ) )
 8011b7c:	4b7b      	ldr	r3, [pc, #492]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b7e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8011b82:	2b02      	cmp	r3, #2
 8011b84:	f040 8158 	bne.w	8011e38 <LoRaMacMibSetRequestConfirm+0x6ac>
 8011b88:	4b78      	ldr	r3, [pc, #480]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011b8a:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 8011b8e:	2b00      	cmp	r3, #0
 8011b90:	f000 8152 	beq.w	8011e38 <LoRaMacMibSetRequestConfirm+0x6ac>
                {
                    // We can only compute the RX window parameters directly, if we are already
                    // in class c mode and joined. We cannot setup an RX window in case of any other
                    // class type.
                    // Set the radio into sleep mode in case we are still in RX mode
                    Radio.Sleep( );
 8011b94:	4b76      	ldr	r3, [pc, #472]	@ (8011d70 <LoRaMacMibSetRequestConfirm+0x5e4>)
 8011b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011b98:	4798      	blx	r3

                    OpenContinuousRxCWindow( );
 8011b9a:	f7fe fca7 	bl	80104ec <OpenContinuousRxCWindow>
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011b9e:	e14b      	b.n	8011e38 <LoRaMacMibSetRequestConfirm+0x6ac>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011ba0:	2303      	movs	r3, #3
 8011ba2:	75fb      	strb	r3, [r7, #23]
            break;
 8011ba4:	e148      	b.n	8011e38 <LoRaMacMibSetRequestConfirm+0x6ac>
        }
        case MIB_RXC_DEFAULT_CHANNEL:
        {
            verify.DatarateParams.Datarate = mibSet->Param.RxCChannel.Datarate;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	7a1b      	ldrb	r3, [r3, #8]
 8011baa:	b25b      	sxtb	r3, r3
 8011bac:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.DownlinkDwellTime = Nvm.MacGroup2.MacParams.DownlinkDwellTime;
 8011bae:	4b6f      	ldr	r3, [pc, #444]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bb0:	f893 3075 	ldrb.w	r3, [r3, #117]	@ 0x75
 8011bb4:	727b      	strb	r3, [r7, #9]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_RX_DR ) == true )
 8011bb6:	4b6d      	ldr	r3, [pc, #436]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bb8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011bbc:	f107 0108 	add.w	r1, r7, #8
 8011bc0:	2207      	movs	r2, #7
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	f002 fcd9 	bl	801457a <RegionVerify>
 8011bc8:	4603      	mov	r3, r0
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d008      	beq.n	8011be0 <LoRaMacMibSetRequestConfirm+0x454>
            {
                Nvm.MacGroup2.MacParamsDefaults.RxCChannel = mibSet->Param.RxCDefaultChannel;
 8011bce:	4b67      	ldr	r3, [pc, #412]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	33b0      	adds	r3, #176	@ 0xb0
 8011bd4:	3204      	adds	r2, #4
 8011bd6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011bda:	e883 0003 	stmia.w	r3, {r0, r1}
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011bde:	e132      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011be0:	2303      	movs	r3, #3
 8011be2:	75fb      	strb	r3, [r7, #23]
            break;
 8011be4:	e12f      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsDefaultMask;
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	685b      	ldr	r3, [r3, #4]
 8011bea:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_DEFAULT_MASK;
 8011bec:	2301      	movs	r3, #1
 8011bee:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011bf0:	4b5e      	ldr	r3, [pc, #376]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011bf2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011bf6:	f107 020c 	add.w	r2, r7, #12
 8011bfa:	4611      	mov	r1, r2
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f002 fce5 	bl	80145cc <RegionChanMaskSet>
 8011c02:	4603      	mov	r3, r0
 8011c04:	f083 0301 	eor.w	r3, r3, #1
 8011c08:	b2db      	uxtb	r3, r3
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	f000 8116 	beq.w	8011e3c <LoRaMacMibSetRequestConfirm+0x6b0>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c10:	2303      	movs	r3, #3
 8011c12:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c14:	e112      	b.n	8011e3c <LoRaMacMibSetRequestConfirm+0x6b0>
        }
        case MIB_CHANNELS_MASK:
        {
            chanMaskSet.ChannelsMaskIn = mibSet->Param.ChannelsMask;
 8011c16:	687b      	ldr	r3, [r7, #4]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	60fb      	str	r3, [r7, #12]
            chanMaskSet.ChannelsMaskType = CHANNELS_MASK;
 8011c1c:	2300      	movs	r3, #0
 8011c1e:	743b      	strb	r3, [r7, #16]

            if( RegionChanMaskSet( Nvm.MacGroup2.Region, &chanMaskSet ) == false )
 8011c20:	4b52      	ldr	r3, [pc, #328]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011c26:	f107 020c 	add.w	r2, r7, #12
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f002 fccd 	bl	80145cc <RegionChanMaskSet>
 8011c32:	4603      	mov	r3, r0
 8011c34:	f083 0301 	eor.w	r3, r3, #1
 8011c38:	b2db      	uxtb	r3, r3
 8011c3a:	2b00      	cmp	r3, #0
 8011c3c:	f000 8100 	beq.w	8011e40 <LoRaMacMibSetRequestConfirm+0x6b4>
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c40:	2303      	movs	r3, #3
 8011c42:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011c44:	e0fc      	b.n	8011e40 <LoRaMacMibSetRequestConfirm+0x6b4>
        }
        case MIB_CHANNELS_NB_TRANS:
        {
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011c46:	687b      	ldr	r3, [r7, #4]
 8011c48:	791b      	ldrb	r3, [r3, #4]
 8011c4a:	2b00      	cmp	r3, #0
 8011c4c:	d009      	beq.n	8011c62 <LoRaMacMibSetRequestConfirm+0x4d6>
                ( mibSet->Param.ChannelsNbTrans <= 15 ) )
 8011c4e:	687b      	ldr	r3, [r7, #4]
 8011c50:	791b      	ldrb	r3, [r3, #4]
            if( ( mibSet->Param.ChannelsNbTrans >= 1 ) &&
 8011c52:	2b0f      	cmp	r3, #15
 8011c54:	d805      	bhi.n	8011c62 <LoRaMacMibSetRequestConfirm+0x4d6>
            {
                Nvm.MacGroup2.MacParams.ChannelsNbTrans = mibSet->Param.ChannelsNbTrans;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	791a      	ldrb	r2, [r3, #4]
 8011c5a:	4b44      	ldr	r3, [pc, #272]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c5c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011c60:	e0f1      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011c62:	2303      	movs	r3, #3
 8011c64:	75fb      	strb	r3, [r7, #23]
            break;
 8011c66:	e0ee      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MAX_RX_WINDOW_DURATION:
        {
            Nvm.MacGroup2.MacParams.MaxRxWindow = mibSet->Param.MaxRxWindow;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c6e:	64d3      	str	r3, [r2, #76]	@ 0x4c
            break;
 8011c70:	e0e9      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay1 = mibSet->Param.ReceiveDelay1;
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	685b      	ldr	r3, [r3, #4]
 8011c76:	4a3d      	ldr	r2, [pc, #244]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c78:	6513      	str	r3, [r2, #80]	@ 0x50
            break;
 8011c7a:	e0e4      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_RECEIVE_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.ReceiveDelay2 = mibSet->Param.ReceiveDelay2;
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	685b      	ldr	r3, [r3, #4]
 8011c80:	4a3a      	ldr	r2, [pc, #232]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c82:	6553      	str	r3, [r2, #84]	@ 0x54
            break;
 8011c84:	e0df      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_1:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay1 = mibSet->Param.JoinAcceptDelay1;
 8011c86:	687b      	ldr	r3, [r7, #4]
 8011c88:	685b      	ldr	r3, [r3, #4]
 8011c8a:	4a38      	ldr	r2, [pc, #224]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c8c:	6593      	str	r3, [r2, #88]	@ 0x58
            break;
 8011c8e:	e0da      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_JOIN_ACCEPT_DELAY_2:
        {
            Nvm.MacGroup2.MacParams.JoinAcceptDelay2 = mibSet->Param.JoinAcceptDelay2;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	685b      	ldr	r3, [r3, #4]
 8011c94:	4a35      	ldr	r2, [pc, #212]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011c96:	65d3      	str	r3, [r2, #92]	@ 0x5c
            break;
 8011c98:	e0d5      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDefaultDatarate;
 8011c9a:	687b      	ldr	r3, [r7, #4]
 8011c9c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011ca0:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_DR ) == true )
 8011ca2:	4b32      	ldr	r3, [pc, #200]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011ca4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ca8:	f107 0108 	add.w	r1, r7, #8
 8011cac:	2206      	movs	r2, #6
 8011cae:	4618      	mov	r0, r3
 8011cb0:	f002 fc63 	bl	801457a <RegionVerify>
 8011cb4:	4603      	mov	r3, r0
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d005      	beq.n	8011cc6 <LoRaMacMibSetRequestConfirm+0x53a>
            {
                Nvm.MacGroup2.ChannelsDatarateDefault = verify.DatarateParams.Datarate;
 8011cba:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011cbe:	4b2b      	ldr	r3, [pc, #172]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cc0:	f883 20cd 	strb.w	r2, [r3, #205]	@ 0xcd
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011cc4:	e0bf      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011cc6:	2303      	movs	r3, #3
 8011cc8:	75fb      	strb	r3, [r7, #23]
            break;
 8011cca:	e0bc      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DATARATE:
        {
            verify.DatarateParams.Datarate = mibSet->Param.ChannelsDatarate;
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011cd2:	723b      	strb	r3, [r7, #8]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 8011cd4:	4b25      	ldr	r3, [pc, #148]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cd6:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8011cda:	72bb      	strb	r3, [r7, #10]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8011cdc:	4b23      	ldr	r3, [pc, #140]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cde:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011ce2:	f107 0108 	add.w	r1, r7, #8
 8011ce6:	2205      	movs	r2, #5
 8011ce8:	4618      	mov	r0, r3
 8011cea:	f002 fc46 	bl	801457a <RegionVerify>
 8011cee:	4603      	mov	r3, r0
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d005      	beq.n	8011d00 <LoRaMacMibSetRequestConfirm+0x574>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 8011cf4:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011cf8:	4b1c      	ldr	r3, [pc, #112]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011cfa:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011cfe:	e0a2      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d00:	2303      	movs	r3, #3
 8011d02:	75fb      	strb	r3, [r7, #23]
            break;
 8011d04:	e09f      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_DEFAULT_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsDefaultTxPower;
 8011d06:	687b      	ldr	r3, [r7, #4]
 8011d08:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d0c:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DEF_TX_POWER ) == true )
 8011d0e:	4b17      	ldr	r3, [pc, #92]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d10:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d14:	f107 0108 	add.w	r1, r7, #8
 8011d18:	220a      	movs	r2, #10
 8011d1a:	4618      	mov	r0, r3
 8011d1c:	f002 fc2d 	bl	801457a <RegionVerify>
 8011d20:	4603      	mov	r3, r0
 8011d22:	2b00      	cmp	r3, #0
 8011d24:	d005      	beq.n	8011d32 <LoRaMacMibSetRequestConfirm+0x5a6>
            {
                Nvm.MacGroup2.ChannelsTxPowerDefault = verify.TxPower;
 8011d26:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d2a:	4b10      	ldr	r3, [pc, #64]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d2c:	f883 20cc 	strb.w	r2, [r3, #204]	@ 0xcc
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d30:	e089      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d32:	2303      	movs	r3, #3
 8011d34:	75fb      	strb	r3, [r7, #23]
            break;
 8011d36:	e086      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_CHANNELS_TX_POWER:
        {
            verify.TxPower = mibSet->Param.ChannelsTxPower;
 8011d38:	687b      	ldr	r3, [r7, #4]
 8011d3a:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8011d3e:	723b      	strb	r3, [r7, #8]

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_POWER ) == true )
 8011d40:	4b0a      	ldr	r3, [pc, #40]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011d46:	f107 0108 	add.w	r1, r7, #8
 8011d4a:	2209      	movs	r2, #9
 8011d4c:	4618      	mov	r0, r3
 8011d4e:	f002 fc14 	bl	801457a <RegionVerify>
 8011d52:	4603      	mov	r3, r0
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d005      	beq.n	8011d64 <LoRaMacMibSetRequestConfirm+0x5d8>
            {
                Nvm.MacGroup1.ChannelsTxPower = verify.TxPower;
 8011d58:	f997 2008 	ldrsb.w	r2, [r7, #8]
 8011d5c:	4b03      	ldr	r3, [pc, #12]	@ (8011d6c <LoRaMacMibSetRequestConfirm+0x5e0>)
 8011d5e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
            }
            break;
 8011d62:	e070      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011d64:	2303      	movs	r3, #3
 8011d66:	75fb      	strb	r3, [r7, #23]
            break;
 8011d68:	e06d      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
 8011d6a:	bf00      	nop
 8011d6c:	20000b90 	.word	0x20000b90
 8011d70:	0801c500 	.word	0x0801c500
        }
        case MIB_SYSTEM_MAX_RX_ERROR:
        {
            Nvm.MacGroup2.MacParams.SystemMaxRxError = Nvm.MacGroup2.MacParamsDefaults.SystemMaxRxError = mibSet->Param.SystemMaxRxError;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	685b      	ldr	r3, [r3, #4]
 8011d78:	4a3a      	ldr	r2, [pc, #232]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d7a:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8011d7e:	4b39      	ldr	r3, [pc, #228]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011d84:	4a37      	ldr	r2, [pc, #220]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d86:	6453      	str	r3, [r2, #68]	@ 0x44
            break;
 8011d88:	e05d      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_MIN_RX_SYMBOLS:
        {
            Nvm.MacGroup2.MacParams.MinRxSymbols = Nvm.MacGroup2.MacParamsDefaults.MinRxSymbols = mibSet->Param.MinRxSymbols;
 8011d8a:	687b      	ldr	r3, [r7, #4]
 8011d8c:	791a      	ldrb	r2, [r3, #4]
 8011d8e:	4b35      	ldr	r3, [pc, #212]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d90:	f883 208c 	strb.w	r2, [r3, #140]	@ 0x8c
 8011d94:	4b33      	ldr	r3, [pc, #204]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d96:	f893 208c 	ldrb.w	r2, [r3, #140]	@ 0x8c
 8011d9a:	4b32      	ldr	r3, [pc, #200]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011d9c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48
            break;
 8011da0:	e051      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParams.AntennaGain = mibSet->Param.AntennaGain;
 8011da2:	687b      	ldr	r3, [r7, #4]
 8011da4:	685b      	ldr	r3, [r3, #4]
 8011da6:	4a2f      	ldr	r2, [pc, #188]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011da8:	67d3      	str	r3, [r2, #124]	@ 0x7c
            break;
 8011daa:	e04c      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_DEFAULT_ANTENNA_GAIN:
        {
            Nvm.MacGroup2.MacParamsDefaults.AntennaGain = mibSet->Param.DefaultAntennaGain;
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	685b      	ldr	r3, [r3, #4]
 8011db0:	4a2c      	ldr	r2, [pc, #176]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011db2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
            break;
 8011db6:	e046      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_NVM_CTXS:
        {
            status = RestoreNvmData( );
 8011db8:	f7fe fdc8 	bl	801094c <RestoreNvmData>
 8011dbc:	4603      	mov	r3, r0
 8011dbe:	75fb      	strb	r3, [r7, #23]
            break;
 8011dc0:	e041      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
        case MIB_ABP_LORAWAN_VERSION:
        {
            if( mibSet->Param.AbpLrWanVersion.Fields.Minor <= 1 )
 8011dc2:	687b      	ldr	r3, [r7, #4]
 8011dc4:	799b      	ldrb	r3, [r3, #6]
 8011dc6:	2b01      	cmp	r3, #1
 8011dc8:	d80d      	bhi.n	8011de6 <LoRaMacMibSetRequestConfirm+0x65a>
            {
                Nvm.MacGroup2.Version = mibSet->Param.AbpLrWanVersion;
 8011dca:	4a26      	ldr	r2, [pc, #152]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dcc:	687b      	ldr	r3, [r7, #4]
 8011dce:	685b      	ldr	r3, [r3, #4]
 8011dd0:	f8c2 3118 	str.w	r3, [r2, #280]	@ 0x118

                if( LORAMAC_CRYPTO_SUCCESS != LoRaMacCryptoSetLrWanVersion( mibSet->Param.AbpLrWanVersion ) )
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6858      	ldr	r0, [r3, #4]
 8011dd8:	f001 fd14 	bl	8013804 <LoRaMacCryptoSetLrWanVersion>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d030      	beq.n	8011e44 <LoRaMacMibSetRequestConfirm+0x6b8>
                {
                    return LORAMAC_STATUS_CRYPTO_ERROR;
 8011de2:	2311      	movs	r3, #17
 8011de4:	e03a      	b.n	8011e5c <LoRaMacMibSetRequestConfirm+0x6d0>
                }
            }
            else
            {
                status = LORAMAC_STATUS_PARAMETER_INVALID;
 8011de6:	2303      	movs	r3, #3
 8011de8:	75fb      	strb	r3, [r7, #23]
            }
            break;
 8011dea:	e02b      	b.n	8011e44 <LoRaMacMibSetRequestConfirm+0x6b8>
        }
        case MIB_RXB_C_TIMEOUT:
        {
            Nvm.MacGroup2.MacParams.RxBCTimeout = mibSet->Param.RxBCTimeout;
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	685b      	ldr	r3, [r3, #4]
 8011df0:	4a1c      	ldr	r2, [pc, #112]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011df2:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
            break;
 8011df6:	e026      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MIB_IS_CERT_FPORT_ON:
        {
            Nvm.MacGroup2.IsCertPortOn = mibSet->Param.IsCertPortOn;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	791a      	ldrb	r2, [r3, #4]
 8011dfc:	4b19      	ldr	r3, [pc, #100]	@ (8011e64 <LoRaMacMibSetRequestConfirm+0x6d8>)
 8011dfe:	f883 210b 	strb.w	r2, [r3, #267]	@ 0x10b
            break;
 8011e02:	e020      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
        }
#endif /* LORAMAC_VERSION */
        default:
        {
            status = LoRaMacMibClassBSetRequestConfirm( mibSet );
 8011e04:	6878      	ldr	r0, [r7, #4]
 8011e06:	f000 fc88 	bl	801271a <LoRaMacMibClassBSetRequestConfirm>
 8011e0a:	4603      	mov	r3, r0
 8011e0c:	75fb      	strb	r3, [r7, #23]
            break;
 8011e0e:	e01a      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e10:	bf00      	nop
 8011e12:	e018      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e14:	bf00      	nop
 8011e16:	e016      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e18:	bf00      	nop
 8011e1a:	e014      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e1c:	bf00      	nop
 8011e1e:	e012      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e20:	bf00      	nop
 8011e22:	e010      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e24:	bf00      	nop
 8011e26:	e00e      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e28:	bf00      	nop
 8011e2a:	e00c      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e2c:	bf00      	nop
 8011e2e:	e00a      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e30:	bf00      	nop
 8011e32:	e008      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e34:	bf00      	nop
 8011e36:	e006      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e38:	bf00      	nop
 8011e3a:	e004      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e3c:	bf00      	nop
 8011e3e:	e002      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e40:	bf00      	nop
 8011e42:	e000      	b.n	8011e46 <LoRaMacMibSetRequestConfirm+0x6ba>
            break;
 8011e44:	bf00      	nop
        }
    }

#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    if( status == LORAMAC_STATUS_OK )
 8011e46:	7dfb      	ldrb	r3, [r7, #23]
 8011e48:	2b00      	cmp	r3, #0
 8011e4a:	d106      	bne.n	8011e5a <LoRaMacMibSetRequestConfirm+0x6ce>
    {
        // Handle NVM potential changes
        MacCtx.MacFlags.Bits.NvmHandle = 1;
 8011e4c:	4a06      	ldr	r2, [pc, #24]	@ (8011e68 <LoRaMacMibSetRequestConfirm+0x6dc>)
 8011e4e:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011e52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011e56:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    }
#endif /* LORAMAC_VERSION */
    return status;
 8011e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e5c:	4618      	mov	r0, r3
 8011e5e:	3718      	adds	r7, #24
 8011e60:	46bd      	mov	sp, r7
 8011e62:	bd80      	pop	{r7, pc}
 8011e64:	20000b90 	.word	0x20000b90
 8011e68:	20000670 	.word	0x20000670

08011e6c <LoRaMacMlmeRequest>:
    }
    return LORAMAC_STATUS_OK;
}

LoRaMacStatus_t LoRaMacMlmeRequest( MlmeReq_t* mlmeRequest )
{
 8011e6c:	b580      	push	{r7, lr}
 8011e6e:	b08a      	sub	sp, #40	@ 0x28
 8011e70:	af00      	add	r7, sp, #0
 8011e72:	6078      	str	r0, [r7, #4]
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8011e74:	2302      	movs	r3, #2
 8011e76:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    MlmeConfirmQueue_t queueElement;
    uint8_t macCmdPayload[2] = { 0x00, 0x00 };
 8011e7a:	2300      	movs	r3, #0
 8011e7c:	83bb      	strh	r3, [r7, #28]

    if( mlmeRequest == NULL )
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d101      	bne.n	8011e88 <LoRaMacMlmeRequest+0x1c>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 8011e84:	2303      	movs	r3, #3
 8011e86:	e16c      	b.n	8012162 <LoRaMacMlmeRequest+0x2f6>
    }
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mlmeRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mlmeRequest->ReqReturn.DutyCycleWaitTime = 0;
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2200      	movs	r2, #0
 8011e8c:	611a      	str	r2, [r3, #16]
#endif /* LORAMAC_VERSION */

    if( LoRaMacIsBusy( ) == true )
 8011e8e:	f7fc fc5f 	bl	800e750 <LoRaMacIsBusy>
 8011e92:	4603      	mov	r3, r0
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d001      	beq.n	8011e9c <LoRaMacMlmeRequest+0x30>
    {
        return LORAMAC_STATUS_BUSY;
 8011e98:	2301      	movs	r3, #1
 8011e9a:	e162      	b.n	8012162 <LoRaMacMlmeRequest+0x2f6>
    }
    if( LoRaMacConfirmQueueIsFull( ) == true )
 8011e9c:	f001 f956 	bl	801314c <LoRaMacConfirmQueueIsFull>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d001      	beq.n	8011eaa <LoRaMacMlmeRequest+0x3e>
    {
        return LORAMAC_STATUS_BUSY;
 8011ea6:	2301      	movs	r3, #1
 8011ea8:	e15b      	b.n	8012162 <LoRaMacMlmeRequest+0x2f6>
    }

    if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8011eaa:	f001 f943 	bl	8013134 <LoRaMacConfirmQueueGetCnt>
 8011eae:	4603      	mov	r3, r0
 8011eb0:	2b00      	cmp	r3, #0
 8011eb2:	d104      	bne.n	8011ebe <LoRaMacMlmeRequest+0x52>
    {
        memset1( ( uint8_t* ) &MacCtx.MlmeConfirm, 0, sizeof( MacCtx.MlmeConfirm ) );
 8011eb4:	2214      	movs	r2, #20
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	48ac      	ldr	r0, [pc, #688]	@ (801216c <LoRaMacMlmeRequest+0x300>)
 8011eba:	f004 fe0b 	bl	8016ad4 <memset1>
    }
    MacCtx.MlmeConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011ebe:	4bac      	ldr	r3, [pc, #688]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8011ec0:	2201      	movs	r2, #1
 8011ec2:	f883 2459 	strb.w	r2, [r3, #1113]	@ 0x459

    MacCtx.MacFlags.Bits.MlmeReq = 1;
 8011ec6:	4aaa      	ldr	r2, [pc, #680]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8011ec8:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011ecc:	f043 0304 	orr.w	r3, r3, #4
 8011ed0:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
    queueElement.Request = mlmeRequest->Type;
 8011ed4:	687b      	ldr	r3, [r7, #4]
 8011ed6:	781b      	ldrb	r3, [r3, #0]
 8011ed8:	f887 3020 	strb.w	r3, [r7, #32]
    queueElement.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8011edc:	2301      	movs	r3, #1
 8011ede:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    queueElement.RestrictCommonReadyToHandle = false;
 8011ee2:	2300      	movs	r3, #0
 8011ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    queueElement.ReadyToHandle = false;
 8011ee8:	2300      	movs	r3, #0
 8011eea:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
#endif /* LORAMAC_VERSION */

    switch( mlmeRequest->Type )
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	3b01      	subs	r3, #1
 8011ef4:	2b0c      	cmp	r3, #12
 8011ef6:	f200 8108 	bhi.w	801210a <LoRaMacMlmeRequest+0x29e>
 8011efa:	a201      	add	r2, pc, #4	@ (adr r2, 8011f00 <LoRaMacMlmeRequest+0x94>)
 8011efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011f00:	08011f35 	.word	0x08011f35
 8011f04:	0801210b 	.word	0x0801210b
 8011f08:	0801210b 	.word	0x0801210b
 8011f0c:	0801200b 	.word	0x0801200b
 8011f10:	0801202d 	.word	0x0801202d
 8011f14:	0801210b 	.word	0x0801210b
 8011f18:	0801210b 	.word	0x0801210b
 8011f1c:	0801210b 	.word	0x0801210b
 8011f20:	0801204b 	.word	0x0801204b
 8011f24:	0801210b 	.word	0x0801210b
 8011f28:	080120d9 	.word	0x080120d9
 8011f2c:	0801206d 	.word	0x0801206d
 8011f30:	080120b7 	.word	0x080120b7
    {
        case MLME_JOIN:
        {
            if( ( MacCtx.MacState & LORAMAC_TX_DELAYED ) == LORAMAC_TX_DELAYED )
 8011f34:	4b8e      	ldr	r3, [pc, #568]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8011f36:	f8d3 3340 	ldr.w	r3, [r3, #832]	@ 0x340
 8011f3a:	f003 0320 	and.w	r3, r3, #32
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d001      	beq.n	8011f46 <LoRaMacMlmeRequest+0xda>
            {
                return LORAMAC_STATUS_BUSY;
 8011f42:	2301      	movs	r3, #1
 8011f44:	e10d      	b.n	8012162 <LoRaMacMlmeRequest+0x2f6>
            {
                // Revert back the previous datarate ( mainly used for US915 like regions )
                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
            }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
            if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_OTAA )
 8011f46:	687b      	ldr	r3, [r7, #4]
 8011f48:	791b      	ldrb	r3, [r3, #4]
 8011f4a:	2b02      	cmp	r3, #2
 8011f4c:	d12e      	bne.n	8011fac <LoRaMacMlmeRequest+0x140>
            {
                ResetMacParameters( );
 8011f4e:	f7fe f997 	bl	8010280 <ResetMacParameters>

                Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR );
 8011f52:	4b88      	ldr	r3, [pc, #544]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011f54:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011f58:	687b      	ldr	r3, [r7, #4]
 8011f5a:	795b      	ldrb	r3, [r3, #5]
 8011f5c:	b25b      	sxtb	r3, r3
 8011f5e:	2200      	movs	r2, #0
 8011f60:	4619      	mov	r1, r3
 8011f62:	f002 fbf2 	bl	801474a <RegionAlternateDr>
 8011f66:	4603      	mov	r3, r0
 8011f68:	461a      	mov	r2, r3
 8011f6a:	4b82      	ldr	r3, [pc, #520]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011f6c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_JOIN_FAIL;
 8011f70:	2307      	movs	r3, #7
 8011f72:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

                status = SendReJoinReq( JOIN_REQ );
 8011f76:	20ff      	movs	r0, #255	@ 0xff
 8011f78:	f7fd ff00 	bl	800fd7c <SendReJoinReq>
 8011f7c:	4603      	mov	r3, r0
 8011f7e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                if( status != LORAMAC_STATUS_OK )
 8011f82:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	f000 80c1 	beq.w	801210e <LoRaMacMlmeRequest+0x2a2>
                {
                    // Revert back the previous datarate ( mainly used for US915 like regions )
                    Nvm.MacGroup1.ChannelsDatarate = RegionAlternateDr( Nvm.MacGroup2.Region, mlmeRequest->Req.Join.Datarate, ALTERNATE_DR_RESTORE );
 8011f8c:	4b79      	ldr	r3, [pc, #484]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011f8e:	f893 0040 	ldrb.w	r0, [r3, #64]	@ 0x40
 8011f92:	687b      	ldr	r3, [r7, #4]
 8011f94:	795b      	ldrb	r3, [r3, #5]
 8011f96:	b25b      	sxtb	r3, r3
 8011f98:	2201      	movs	r2, #1
 8011f9a:	4619      	mov	r1, r3
 8011f9c:	f002 fbd5 	bl	801474a <RegionAlternateDr>
 8011fa0:	4603      	mov	r3, r0
 8011fa2:	461a      	mov	r2, r3
 8011fa4:	4b73      	ldr	r3, [pc, #460]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011fa6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
                MacCtx.MacCallbacks->MacProcessNotify( );
                MacCtx.MacFlags.Bits.MacDone = 1;
                status = LORAMAC_STATUS_OK;
            }
#endif /* LORAMAC_VERSION */
            break;
 8011faa:	e0b0      	b.n	801210e <LoRaMacMlmeRequest+0x2a2>
            else if( mlmeRequest->Req.Join.NetworkActivation == ACTIVATION_TYPE_ABP )
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	791b      	ldrb	r3, [r3, #4]
 8011fb0:	2b01      	cmp	r3, #1
 8011fb2:	f040 80ac 	bne.w	801210e <LoRaMacMlmeRequest+0x2a2>
                Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq = false;
 8011fb6:	4b6f      	ldr	r3, [pc, #444]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011fb8:	2200      	movs	r2, #0
 8011fba:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
                params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8011fbe:	2302      	movs	r3, #2
 8011fc0:	763b      	strb	r3, [r7, #24]
                RegionInitDefaults( Nvm.MacGroup2.Region, &params );
 8011fc2:	4b6c      	ldr	r3, [pc, #432]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011fc4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8011fc8:	f107 020c 	add.w	r2, r7, #12
 8011fcc:	4611      	mov	r1, r2
 8011fce:	4618      	mov	r0, r3
 8011fd0:	f002 fac1 	bl	8014556 <RegionInitDefaults>
                Nvm.MacGroup2.NetworkActivation = mlmeRequest->Req.Join.NetworkActivation;
 8011fd4:	687b      	ldr	r3, [r7, #4]
 8011fd6:	791a      	ldrb	r2, [r3, #4]
 8011fd8:	4b66      	ldr	r3, [pc, #408]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 8011fda:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                queueElement.Status = LORAMAC_EVENT_INFO_STATUS_OK;
 8011fde:	2300      	movs	r3, #0
 8011fe0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
                queueElement.ReadyToHandle = true;
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
                MacCtx.MacCallbacks->MacProcessNotify( );
 8011fea:	4b61      	ldr	r3, [pc, #388]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8011fec:	f8d3 3348 	ldr.w	r3, [r3, #840]	@ 0x348
 8011ff0:	691b      	ldr	r3, [r3, #16]
 8011ff2:	4798      	blx	r3
                MacCtx.MacFlags.Bits.MacDone = 1;
 8011ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8011ff6:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 8011ffa:	f043 0320 	orr.w	r3, r3, #32
 8011ffe:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
                status = LORAMAC_STATUS_OK;
 8012002:	2300      	movs	r3, #0
 8012004:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012008:	e081      	b.n	801210e <LoRaMacMlmeRequest+0x2a2>
        }
        case MLME_LINK_CHECK:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801200a:	2300      	movs	r3, #0
 801200c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_LINK_CHECK_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012010:	f107 031c 	add.w	r3, r7, #28
 8012014:	2200      	movs	r2, #0
 8012016:	4619      	mov	r1, r3
 8012018:	2002      	movs	r0, #2
 801201a:	f000 fcfd 	bl	8012a18 <LoRaMacCommandsAddCmd>
 801201e:	4603      	mov	r3, r0
 8012020:	2b00      	cmp	r3, #0
 8012022:	d076      	beq.n	8012112 <LoRaMacMlmeRequest+0x2a6>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012024:	2313      	movs	r3, #19
 8012026:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801202a:	e072      	b.n	8012112 <LoRaMacMlmeRequest+0x2a6>
            break;
        }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MLME_TXCW:
        {
            status = SetTxContinuousWave( mlmeRequest->Req.TxCw.Timeout, mlmeRequest->Req.TxCw.Frequency, mlmeRequest->Req.TxCw.Power );
 801202c:	687b      	ldr	r3, [r7, #4]
 801202e:	8898      	ldrh	r0, [r3, #4]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	6899      	ldr	r1, [r3, #8]
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	f993 300c 	ldrsb.w	r3, [r3, #12]
 801203a:	b2db      	uxtb	r3, r3
 801203c:	461a      	mov	r2, r3
 801203e:	f7fe fc65 	bl	801090c <SetTxContinuousWave>
 8012042:	4603      	mov	r3, r0
 8012044:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012048:	e06a      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
        }
#endif /* LORAMAC_VERSION */
        case MLME_DEVICE_TIME:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 801204a:	2300      	movs	r3, #0
 801204c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_DEVICE_TIME_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 8012050:	f107 031c 	add.w	r3, r7, #28
 8012054:	2200      	movs	r2, #0
 8012056:	4619      	mov	r1, r3
 8012058:	200d      	movs	r0, #13
 801205a:	f000 fcdd 	bl	8012a18 <LoRaMacCommandsAddCmd>
 801205e:	4603      	mov	r3, r0
 8012060:	2b00      	cmp	r3, #0
 8012062:	d058      	beq.n	8012116 <LoRaMacMlmeRequest+0x2aa>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 8012064:	2313      	movs	r3, #19
 8012066:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 801206a:	e054      	b.n	8012116 <LoRaMacMlmeRequest+0x2aa>
        }
        case MLME_PING_SLOT_INFO:
        {
            if( Nvm.MacGroup2.DeviceClass == CLASS_A )
 801206c:	4b41      	ldr	r3, [pc, #260]	@ (8012174 <LoRaMacMlmeRequest+0x308>)
 801206e:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8012072:	2b00      	cmp	r3, #0
 8012074:	d151      	bne.n	801211a <LoRaMacMlmeRequest+0x2ae>
            {
                uint8_t value = mlmeRequest->Req.PingSlotInfo.PingSlot.Value;
 8012076:	687b      	ldr	r3, [r7, #4]
 8012078:	791b      	ldrb	r3, [r3, #4]
 801207a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

                // LoRaMac will send this command piggy-pack
                LoRaMacClassBSetPingSlotInfo( mlmeRequest->Req.PingSlotInfo.PingSlot.Fields.Periodicity );
 801207e:	687b      	ldr	r3, [r7, #4]
 8012080:	791b      	ldrb	r3, [r3, #4]
 8012082:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8012086:	b2db      	uxtb	r3, r3
 8012088:	4618      	mov	r0, r3
 801208a:	f000 fb1b 	bl	80126c4 <LoRaMacClassBSetPingSlotInfo>
                macCmdPayload[0] = value;
 801208e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8012092:	773b      	strb	r3, [r7, #28]
                status = LORAMAC_STATUS_OK;
 8012094:	2300      	movs	r3, #0
 8012096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                if( LoRaMacCommandsAddCmd( MOTE_MAC_PING_SLOT_INFO_REQ, macCmdPayload, 1 ) != LORAMAC_COMMANDS_SUCCESS )
 801209a:	f107 031c 	add.w	r3, r7, #28
 801209e:	2201      	movs	r2, #1
 80120a0:	4619      	mov	r1, r3
 80120a2:	2010      	movs	r0, #16
 80120a4:	f000 fcb8 	bl	8012a18 <LoRaMacCommandsAddCmd>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d035      	beq.n	801211a <LoRaMacMlmeRequest+0x2ae>
                {
                    status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120ae:	2313      	movs	r3, #19
 80120b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                }
            }
            break;
 80120b4:	e031      	b.n	801211a <LoRaMacMlmeRequest+0x2ae>
        }
        case MLME_BEACON_TIMING:
        {
            // LoRaMac will send this command piggy-pack
            status = LORAMAC_STATUS_OK;
 80120b6:	2300      	movs	r3, #0
 80120b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            if( LoRaMacCommandsAddCmd( MOTE_MAC_BEACON_TIMING_REQ, macCmdPayload, 0 ) != LORAMAC_COMMANDS_SUCCESS )
 80120bc:	f107 031c 	add.w	r3, r7, #28
 80120c0:	2200      	movs	r2, #0
 80120c2:	4619      	mov	r1, r3
 80120c4:	2012      	movs	r0, #18
 80120c6:	f000 fca7 	bl	8012a18 <LoRaMacCommandsAddCmd>
 80120ca:	4603      	mov	r3, r0
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d026      	beq.n	801211e <LoRaMacMlmeRequest+0x2b2>
            {
                status = LORAMAC_STATUS_MAC_COMMAD_ERROR;
 80120d0:	2313      	movs	r3, #19
 80120d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            break;
 80120d6:	e022      	b.n	801211e <LoRaMacMlmeRequest+0x2b2>
        }
        case MLME_BEACON_ACQUISITION:
        {
            // Apply the request
            queueElement.RestrictCommonReadyToHandle = true;
 80120d8:	2301      	movs	r3, #1
 80120da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( LoRaMacClassBIsAcquisitionInProgress( ) == false )
 80120de:	f000 faa7 	bl	8012630 <LoRaMacClassBIsAcquisitionInProgress>
 80120e2:	4603      	mov	r3, r0
 80120e4:	f083 0301 	eor.w	r3, r3, #1
 80120e8:	b2db      	uxtb	r3, r3
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d009      	beq.n	8012102 <LoRaMacMlmeRequest+0x296>
            {
                // Start class B algorithm
                LoRaMacClassBSetBeaconState( BEACON_STATE_ACQUISITION );
 80120ee:	2000      	movs	r0, #0
 80120f0:	f000 fa80 	bl	80125f4 <LoRaMacClassBSetBeaconState>
                LoRaMacClassBBeaconTimerEvent( NULL );
 80120f4:	2000      	movs	r0, #0
 80120f6:	f000 faa2 	bl	801263e <LoRaMacClassBBeaconTimerEvent>

                status = LORAMAC_STATUS_OK;
 80120fa:	2300      	movs	r3, #0
 80120fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            }
            else
            {
                status = LORAMAC_STATUS_BUSY;
            }
            break;
 8012100:	e00e      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
                status = LORAMAC_STATUS_BUSY;
 8012102:	2301      	movs	r3, #1
 8012104:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            break;
 8012108:	e00a      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
        }
        default:
            break;
 801210a:	bf00      	nop
 801210c:	e008      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
            break;
 801210e:	bf00      	nop
 8012110:	e006      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012112:	bf00      	nop
 8012114:	e004      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
            break;
 8012116:	bf00      	nop
 8012118:	e002      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
            break;
 801211a:	bf00      	nop
 801211c:	e000      	b.n	8012120 <LoRaMacMlmeRequest+0x2b4>
            break;
 801211e:	bf00      	nop
    }

    // Fill return structure
    mlmeRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 8012120:	4b13      	ldr	r3, [pc, #76]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8012122:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	611a      	str	r2, [r3, #16]

    if( status != LORAMAC_STATUS_OK )
 801212a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801212e:	2b00      	cmp	r3, #0
 8012130:	d010      	beq.n	8012154 <LoRaMacMlmeRequest+0x2e8>
    {
        if( LoRaMacConfirmQueueGetCnt( ) == 0 )
 8012132:	f000 ffff 	bl	8013134 <LoRaMacConfirmQueueGetCnt>
 8012136:	4603      	mov	r3, r0
 8012138:	2b00      	cmp	r3, #0
 801213a:	d110      	bne.n	801215e <LoRaMacMlmeRequest+0x2f2>
        {
            MacCtx.NodeAckRequested = false;
 801213c:	4b0c      	ldr	r3, [pc, #48]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 801213e:	2200      	movs	r2, #0
 8012140:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
            MacCtx.MacFlags.Bits.MlmeReq = 0;
 8012144:	4a0a      	ldr	r2, [pc, #40]	@ (8012170 <LoRaMacMlmeRequest+0x304>)
 8012146:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 801214a:	f36f 0382 	bfc	r3, #2, #1
 801214e:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 8012152:	e004      	b.n	801215e <LoRaMacMlmeRequest+0x2f2>
        }
    }
    else
    {
        LoRaMacConfirmQueueAdd( &queueElement );
 8012154:	f107 0320 	add.w	r3, r7, #32
 8012158:	4618      	mov	r0, r3
 801215a:	f000 fe9d 	bl	8012e98 <LoRaMacConfirmQueueAdd>
    }
    return status;
 801215e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8012162:	4618      	mov	r0, r3
 8012164:	3728      	adds	r7, #40	@ 0x28
 8012166:	46bd      	mov	sp, r7
 8012168:	bd80      	pop	{r7, pc}
 801216a:	bf00      	nop
 801216c:	20000ac8 	.word	0x20000ac8
 8012170:	20000670 	.word	0x20000670
 8012174:	20000b90 	.word	0x20000b90

08012178 <LoRaMacMcpsRequest>:

/* ST_WORKAROUND_BEGIN: Update MCPS request with new input parameter to allow delayed tx */
LoRaMacStatus_t LoRaMacMcpsRequest( McpsReq_t* mcpsRequest, bool allowDelayedTx )
{
 8012178:	b5b0      	push	{r4, r5, r7, lr}
 801217a:	b092      	sub	sp, #72	@ 0x48
 801217c:	af02      	add	r7, sp, #8
 801217e:	6078      	str	r0, [r7, #4]
 8012180:	460b      	mov	r3, r1
 8012182:	70fb      	strb	r3, [r7, #3]
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    LoRaMacStatus_t status = LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012184:	2302      	movs	r3, #2
 8012186:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    LoRaMacHeader_t macHdr;
    VerifyParams_t verify;
    uint8_t fPort = 0;
 801218a:	2300      	movs	r3, #0
 801218c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
    /* ST_WORKAROUND_BEGIN: remove GCC9 warning */
    void* fBuffer = NULL;
 8012190:	2300      	movs	r3, #0
 8012192:	63bb      	str	r3, [r7, #56]	@ 0x38
    /* ST_WORKAROUND_END */
    uint16_t fBufferSize;
    int8_t datarate = DR_0;
 8012194:	2300      	movs	r3, #0
 8012196:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    bool readyToSend = false;
 801219a:	2300      	movs	r3, #0
 801219c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    if( mcpsRequest == NULL )
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2b00      	cmp	r3, #0
 80121a4:	d101      	bne.n	80121aa <LoRaMacMcpsRequest+0x32>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 80121a6:	2303      	movs	r3, #3
 80121a8:	e113      	b.n	80123d2 <LoRaMacMcpsRequest+0x25a>
        }
    }
#elif ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    // Initialize mcpsRequest->ReqReturn.DutyCycleWaitTime to 0 in order to
    // return a valid value in case the MAC is busy.
    mcpsRequest->ReqReturn.DutyCycleWaitTime = 0;
 80121aa:	687b      	ldr	r3, [r7, #4]
 80121ac:	2200      	movs	r2, #0
 80121ae:	611a      	str	r2, [r3, #16]

    if( LoRaMacIsBusy( ) == true )
 80121b0:	f7fc face 	bl	800e750 <LoRaMacIsBusy>
 80121b4:	4603      	mov	r3, r0
 80121b6:	2b00      	cmp	r3, #0
 80121b8:	d001      	beq.n	80121be <LoRaMacMcpsRequest+0x46>
    {
        return LORAMAC_STATUS_BUSY;
 80121ba:	2301      	movs	r3, #1
 80121bc:	e109      	b.n	80123d2 <LoRaMacMcpsRequest+0x25a>
    }

    McpsReq_t request = *mcpsRequest;
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	f107 040c 	add.w	r4, r7, #12
 80121c4:	461d      	mov	r5, r3
 80121c6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80121c8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80121ca:	682b      	ldr	r3, [r5, #0]
 80121cc:	6023      	str	r3, [r4, #0]

    macHdr.Value = 0;
 80121ce:	2300      	movs	r3, #0
 80121d0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    memset1( ( uint8_t* ) &MacCtx.McpsConfirm, 0, sizeof( MacCtx.McpsConfirm ) );
 80121d4:	2214      	movs	r2, #20
 80121d6:	2100      	movs	r1, #0
 80121d8:	4880      	ldr	r0, [pc, #512]	@ (80123dc <LoRaMacMcpsRequest+0x264>)
 80121da:	f004 fc7b 	bl	8016ad4 <memset1>
    MacCtx.McpsConfirm.Status = LORAMAC_EVENT_INFO_STATUS_ERROR;
 80121de:	4b80      	ldr	r3, [pc, #512]	@ (80123e0 <LoRaMacMcpsRequest+0x268>)
 80121e0:	2201      	movs	r2, #1
 80121e2:	f883 2445 	strb.w	r2, [r3, #1093]	@ 0x445

    // Apply confirmed downlinks, if the device has not received a valid
    // downlink after a join accept.
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80121e6:	4b7f      	ldr	r3, [pc, #508]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80121e8:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 80121ec:	2b02      	cmp	r3, #2
 80121ee:	d111      	bne.n	8012214 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 80121f0:	4b7c      	ldr	r3, [pc, #496]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80121f2:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
    if( ( Nvm.MacGroup2.NetworkActivation == ACTIVATION_TYPE_OTAA ) &&
 80121f6:	2b02      	cmp	r3, #2
 80121f8:	d10c      	bne.n	8012214 <LoRaMacMcpsRequest+0x9c>
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 80121fa:	4b7a      	ldr	r3, [pc, #488]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80121fc:	f893 310a 	ldrb.w	r3, [r3, #266]	@ 0x10a
 8012200:	f083 0301 	eor.w	r3, r3, #1
 8012204:	b2db      	uxtb	r3, r3
        ( Nvm.MacGroup2.DeviceClass == CLASS_C ) &&
 8012206:	2b00      	cmp	r3, #0
 8012208:	d004      	beq.n	8012214 <LoRaMacMcpsRequest+0x9c>
        ( request.Type == MCPS_UNCONFIRMED ) )
 801220a:	7b3b      	ldrb	r3, [r7, #12]
        ( Nvm.MacGroup2.DownlinkReceived == false ) &&
 801220c:	2b00      	cmp	r3, #0
 801220e:	d101      	bne.n	8012214 <LoRaMacMcpsRequest+0x9c>
    {
        request.Type = MCPS_CONFIRMED;
 8012210:	2301      	movs	r3, #1
 8012212:	733b      	strb	r3, [r7, #12]
    }

    switch( request.Type )
 8012214:	7b3b      	ldrb	r3, [r7, #12]
 8012216:	2b03      	cmp	r3, #3
 8012218:	d030      	beq.n	801227c <LoRaMacMcpsRequest+0x104>
 801221a:	2b03      	cmp	r3, #3
 801221c:	dc3f      	bgt.n	801229e <LoRaMacMcpsRequest+0x126>
 801221e:	2b00      	cmp	r3, #0
 8012220:	d002      	beq.n	8012228 <LoRaMacMcpsRequest+0xb0>
 8012222:	2b01      	cmp	r3, #1
 8012224:	d015      	beq.n	8012252 <LoRaMacMcpsRequest+0xda>
            fBufferSize = request.Req.Proprietary.fBufferSize;
            datarate = request.Req.Proprietary.Datarate;
            break;
        }
        default:
            break;
 8012226:	e03a      	b.n	801229e <LoRaMacMcpsRequest+0x126>
            readyToSend = true;
 8012228:	2301      	movs	r3, #1
 801222a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_UNCONFIRMED_UP;
 801222e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012232:	2202      	movs	r2, #2
 8012234:	f362 1347 	bfi	r3, r2, #5, #3
 8012238:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Unconfirmed.fPort;
 801223c:	7c3b      	ldrb	r3, [r7, #16]
 801223e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Unconfirmed.fBuffer;
 8012242:	697b      	ldr	r3, [r7, #20]
 8012244:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Unconfirmed.fBufferSize;
 8012246:	8b3b      	ldrh	r3, [r7, #24]
 8012248:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Unconfirmed.Datarate;
 801224a:	7ebb      	ldrb	r3, [r7, #26]
 801224c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 8012250:	e026      	b.n	80122a0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 8012252:	2301      	movs	r3, #1
 8012254:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_DATA_CONFIRMED_UP;
 8012258:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 801225c:	2204      	movs	r2, #4
 801225e:	f362 1347 	bfi	r3, r2, #5, #3
 8012262:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fPort = request.Req.Confirmed.fPort;
 8012266:	7c3b      	ldrb	r3, [r7, #16]
 8012268:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            fBuffer = request.Req.Confirmed.fBuffer;
 801226c:	697b      	ldr	r3, [r7, #20]
 801226e:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Confirmed.fBufferSize;
 8012270:	8b3b      	ldrh	r3, [r7, #24]
 8012272:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Confirmed.Datarate;
 8012274:	7ebb      	ldrb	r3, [r7, #26]
 8012276:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801227a:	e011      	b.n	80122a0 <LoRaMacMcpsRequest+0x128>
            readyToSend = true;
 801227c:	2301      	movs	r3, #1
 801227e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
            macHdr.Bits.MType = FRAME_TYPE_PROPRIETARY;
 8012282:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8012286:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 801228a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            fBuffer = request.Req.Proprietary.fBuffer;
 801228e:	693b      	ldr	r3, [r7, #16]
 8012290:	63bb      	str	r3, [r7, #56]	@ 0x38
            fBufferSize = request.Req.Proprietary.fBufferSize;
 8012292:	8abb      	ldrh	r3, [r7, #20]
 8012294:	86fb      	strh	r3, [r7, #54]	@ 0x36
            datarate = request.Req.Proprietary.Datarate;
 8012296:	7dbb      	ldrb	r3, [r7, #22]
 8012298:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
            break;
 801229c:	e000      	b.n	80122a0 <LoRaMacMcpsRequest+0x128>
            break;
 801229e:	bf00      	nop
    }

    // Make sure that the input datarate is compliant
    // to the regional specification.
    getPhy.Attribute = PHY_MIN_TX_DR;
 80122a0:	2302      	movs	r3, #2
 80122a2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    getPhy.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 80122a6:	4b4f      	ldr	r3, [pc, #316]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80122a8:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 80122ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    phyParam = RegionGetPhyParam( Nvm.MacGroup2.Region, &getPhy );
 80122b0:	4b4c      	ldr	r3, [pc, #304]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80122b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80122b6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80122ba:	4611      	mov	r1, r2
 80122bc:	4618      	mov	r0, r3
 80122be:	f002 f921 	bl	8014504 <RegionGetPhyParam>
 80122c2:	4603      	mov	r3, r0
 80122c4:	62bb      	str	r3, [r7, #40]	@ 0x28
    // Apply the minimum possible datarate.
    // Some regions have limitations for the minimum datarate.
    datarate = MAX( datarate, ( int8_t )phyParam.Value );
 80122c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122c8:	b25b      	sxtb	r3, r3
 80122ca:	f997 2035 	ldrsb.w	r2, [r7, #53]	@ 0x35
 80122ce:	4293      	cmp	r3, r2
 80122d0:	bfb8      	it	lt
 80122d2:	4613      	movlt	r3, r2
 80122d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    // Apply minimum datarate in this special case.
    if( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 80122d8:	4b42      	ldr	r3, [pc, #264]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80122da:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 80122de:	4a41      	ldr	r2, [pc, #260]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80122e0:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 80122e4:	4a3f      	ldr	r2, [pc, #252]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 80122e6:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 80122ea:	4618      	mov	r0, r3
 80122ec:	f7fc fbc8 	bl	800ea80 <CheckForMinimumAbpDatarate>
 80122f0:	4603      	mov	r3, r0
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d002      	beq.n	80122fc <LoRaMacMcpsRequest+0x184>
                                    Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true )
    {
        datarate = ( int8_t )phyParam.Value;
 80122f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122f8:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if( readyToSend == true )
 80122fc:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8012300:	2b00      	cmp	r3, #0
 8012302:	d05f      	beq.n	80123c4 <LoRaMacMcpsRequest+0x24c>
    {
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 8012304:	4b37      	ldr	r3, [pc, #220]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 8012306:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801230a:	f083 0301 	eor.w	r3, r3, #1
 801230e:	b2db      	uxtb	r3, r3
 8012310:	2b00      	cmp	r3, #0
 8012312:	d10e      	bne.n	8012332 <LoRaMacMcpsRequest+0x1ba>
            ( CheckForMinimumAbpDatarate( Nvm.MacGroup2.AdrCtrlOn, Nvm.MacGroup2.NetworkActivation,
 8012314:	4b33      	ldr	r3, [pc, #204]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 8012316:	f893 3106 	ldrb.w	r3, [r3, #262]	@ 0x106
 801231a:	4a32      	ldr	r2, [pc, #200]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 801231c:	f892 111c 	ldrb.w	r1, [r2, #284]	@ 0x11c
 8012320:	4a30      	ldr	r2, [pc, #192]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 8012322:	f892 2109 	ldrb.w	r2, [r2, #265]	@ 0x109
 8012326:	4618      	mov	r0, r3
 8012328:	f7fc fbaa 	bl	800ea80 <CheckForMinimumAbpDatarate>
 801232c:	4603      	mov	r3, r0
        if( ( Nvm.MacGroup2.AdrCtrlOn == false ) ||
 801232e:	2b00      	cmp	r3, #0
 8012330:	d01c      	beq.n	801236c <LoRaMacMcpsRequest+0x1f4>
                                          Nvm.MacGroup2.ChannelsDatarateChangedLinkAdrReq ) == true ) )
        {
            verify.DatarateParams.Datarate = datarate;
 8012332:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8012336:	f887 3020 	strb.w	r3, [r7, #32]
            verify.DatarateParams.UplinkDwellTime = Nvm.MacGroup2.MacParams.UplinkDwellTime;
 801233a:	4b2a      	ldr	r3, [pc, #168]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 801233c:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 8012340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

            if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_TX_DR ) == true )
 8012344:	4b27      	ldr	r3, [pc, #156]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 8012346:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801234a:	f107 0120 	add.w	r1, r7, #32
 801234e:	2205      	movs	r2, #5
 8012350:	4618      	mov	r0, r3
 8012352:	f002 f912 	bl	801457a <RegionVerify>
 8012356:	4603      	mov	r3, r0
 8012358:	2b00      	cmp	r3, #0
 801235a:	d005      	beq.n	8012368 <LoRaMacMcpsRequest+0x1f0>
            {
                Nvm.MacGroup1.ChannelsDatarate = verify.DatarateParams.Datarate;
 801235c:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8012360:	4b20      	ldr	r3, [pc, #128]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 8012362:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8012366:	e001      	b.n	801236c <LoRaMacMcpsRequest+0x1f4>
            }
            else
            {
                return LORAMAC_STATUS_PARAMETER_INVALID;
 8012368:	2303      	movs	r3, #3
 801236a:	e032      	b.n	80123d2 <LoRaMacMcpsRequest+0x25a>
            }
        }

        // Verification of response timeout for class b and class c
        LoRaMacHandleResponseTimeout( Nvm.MacGroup2.MacParams.RxBCTimeout,
 801236c:	4b1d      	ldr	r3, [pc, #116]	@ (80123e4 <LoRaMacMcpsRequest+0x26c>)
 801236e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012372:	4a1b      	ldr	r2, [pc, #108]	@ (80123e0 <LoRaMacMcpsRequest+0x268>)
 8012374:	f8d2 249c 	ldr.w	r2, [r2, #1180]	@ 0x49c
 8012378:	4611      	mov	r1, r2
 801237a:	4618      	mov	r0, r3
 801237c:	f7fc fc6a 	bl	800ec54 <LoRaMacHandleResponseTimeout>
                                      MacCtx.ResponseTimeoutStartTime );

        status = Send( &macHdr, fPort, fBuffer, fBufferSize, allowDelayedTx ); /* ST_WORKAROUND: Update Send request with new input parameter to allow delayed tx */
 8012380:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8012382:	f897 103e 	ldrb.w	r1, [r7, #62]	@ 0x3e
 8012386:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 801238a:	78fb      	ldrb	r3, [r7, #3]
 801238c:	9300      	str	r3, [sp, #0]
 801238e:	4613      	mov	r3, r2
 8012390:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8012392:	f7fd fc0f 	bl	800fbb4 <Send>
 8012396:	4603      	mov	r3, r0
 8012398:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        if( status == LORAMAC_STATUS_OK )
 801239c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80123a0:	2b00      	cmp	r3, #0
 80123a2:	d10b      	bne.n	80123bc <LoRaMacMcpsRequest+0x244>
        {
            MacCtx.McpsConfirm.McpsRequest = request.Type;
 80123a4:	7b3a      	ldrb	r2, [r7, #12]
 80123a6:	4b0e      	ldr	r3, [pc, #56]	@ (80123e0 <LoRaMacMcpsRequest+0x268>)
 80123a8:	f883 2444 	strb.w	r2, [r3, #1092]	@ 0x444
            MacCtx.MacFlags.Bits.McpsReq = 1;
 80123ac:	4a0c      	ldr	r2, [pc, #48]	@ (80123e0 <LoRaMacMcpsRequest+0x268>)
 80123ae:	f892 3495 	ldrb.w	r3, [r2, #1173]	@ 0x495
 80123b2:	f043 0301 	orr.w	r3, r3, #1
 80123b6:	f882 3495 	strb.w	r3, [r2, #1173]	@ 0x495
 80123ba:	e003      	b.n	80123c4 <LoRaMacMcpsRequest+0x24c>
        }
        else
        {
            MacCtx.NodeAckRequested = false;
 80123bc:	4b08      	ldr	r3, [pc, #32]	@ (80123e0 <LoRaMacMcpsRequest+0x268>)
 80123be:	2200      	movs	r2, #0
 80123c0:	f883 241e 	strb.w	r2, [r3, #1054]	@ 0x41e
        }
    }
#endif /* LORAMAC_VERSION */

    // Fill return structure
    mcpsRequest->ReqReturn.DutyCycleWaitTime = MacCtx.DutyCycleWaitTime;
 80123c4:	4b06      	ldr	r3, [pc, #24]	@ (80123e0 <LoRaMacMcpsRequest+0x268>)
 80123c6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	@ 0x498
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	611a      	str	r2, [r3, #16]

    return status;
 80123ce:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80123d2:	4618      	mov	r0, r3
 80123d4:	3740      	adds	r7, #64	@ 0x40
 80123d6:	46bd      	mov	sp, r7
 80123d8:	bdb0      	pop	{r4, r5, r7, pc}
 80123da:	bf00      	nop
 80123dc:	20000ab4 	.word	0x20000ab4
 80123e0:	20000670 	.word	0x20000670
 80123e4:	20000b90 	.word	0x20000b90

080123e8 <LoRaMacTestSetDutyCycleOn>:
/* ST_WORKAROUND_END */

void LoRaMacTestSetDutyCycleOn( bool enable )
{
 80123e8:	b580      	push	{r7, lr}
 80123ea:	b084      	sub	sp, #16
 80123ec:	af00      	add	r7, sp, #0
 80123ee:	4603      	mov	r3, r0
 80123f0:	71fb      	strb	r3, [r7, #7]
    VerifyParams_t verify;

    verify.DutyCycle = enable;
 80123f2:	79fb      	ldrb	r3, [r7, #7]
 80123f4:	733b      	strb	r3, [r7, #12]

    if( RegionVerify( Nvm.MacGroup2.Region, &verify, PHY_DUTY_CYCLE ) == true )
 80123f6:	4b0a      	ldr	r3, [pc, #40]	@ (8012420 <LoRaMacTestSetDutyCycleOn+0x38>)
 80123f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80123fc:	f107 010c 	add.w	r1, r7, #12
 8012400:	220f      	movs	r2, #15
 8012402:	4618      	mov	r0, r3
 8012404:	f002 f8b9 	bl	801457a <RegionVerify>
 8012408:	4603      	mov	r3, r0
 801240a:	2b00      	cmp	r3, #0
 801240c:	d003      	beq.n	8012416 <LoRaMacTestSetDutyCycleOn+0x2e>
    {
        Nvm.MacGroup2.DutyCycleOn = enable;
 801240e:	4a04      	ldr	r2, [pc, #16]	@ (8012420 <LoRaMacTestSetDutyCycleOn+0x38>)
 8012410:	79fb      	ldrb	r3, [r7, #7]
 8012412:	f882 3108 	strb.w	r3, [r2, #264]	@ 0x108
    }
}
 8012416:	bf00      	nop
 8012418:	3710      	adds	r7, #16
 801241a:	46bd      	mov	sp, r7
 801241c:	bd80      	pop	{r7, pc}
 801241e:	bf00      	nop
 8012420:	20000b90 	.word	0x20000b90

08012424 <LoRaMacDeInitialization>:

LoRaMacStatus_t LoRaMacDeInitialization( void )
{
 8012424:	b580      	push	{r7, lr}
 8012426:	af00      	add	r7, sp, #0
    // Check the current state of the LoRaMac
    if ( LoRaMacStop( ) == LORAMAC_STATUS_OK )
 8012428:	f7fe ff26 	bl	8011278 <LoRaMacStop>
 801242c:	4603      	mov	r3, r0
 801242e:	2b00      	cmp	r3, #0
 8012430:	d111      	bne.n	8012456 <LoRaMacDeInitialization+0x32>
    {
        // Stop Timers
        TimerStop( &MacCtx.TxDelayedTimer );
 8012432:	480a      	ldr	r0, [pc, #40]	@ (801245c <LoRaMacDeInitialization+0x38>)
 8012434:	f008 fc58 	bl	801ace8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer1 );
 8012438:	4809      	ldr	r0, [pc, #36]	@ (8012460 <LoRaMacDeInitialization+0x3c>)
 801243a:	f008 fc55 	bl	801ace8 <UTIL_TIMER_Stop>
        TimerStop( &MacCtx.RxWindowTimer2 );
 801243e:	4809      	ldr	r0, [pc, #36]	@ (8012464 <LoRaMacDeInitialization+0x40>)
 8012440:	f008 fc52 	bl	801ace8 <UTIL_TIMER_Stop>
#if ( defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
        TimerStop( &MacCtx.AckTimeoutTimer );
#endif /* LORAMAC_VERSION */

        // Take care about class B
        LoRaMacClassBHaltBeaconing( );
 8012444:	f000 f948 	bl	80126d8 <LoRaMacClassBHaltBeaconing>

        // Reset Mac parameters
        ResetMacParameters( );
 8012448:	f7fd ff1a 	bl	8010280 <ResetMacParameters>

        // Switch off Radio
        Radio.Sleep( );
 801244c:	4b06      	ldr	r3, [pc, #24]	@ (8012468 <LoRaMacDeInitialization+0x44>)
 801244e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012450:	4798      	blx	r3

        // Return success
        return LORAMAC_STATUS_OK;
 8012452:	2300      	movs	r3, #0
 8012454:	e000      	b.n	8012458 <LoRaMacDeInitialization+0x34>
    }
    else
    {
        return LORAMAC_STATUS_BUSY;
 8012456:	2301      	movs	r3, #1
    }
}
 8012458:	4618      	mov	r0, r3
 801245a:	bd80      	pop	{r7, pc}
 801245c:	200009d8 	.word	0x200009d8
 8012460:	200009f0 	.word	0x200009f0
 8012464:	20000a08 	.word	0x20000a08
 8012468:	0801c500 	.word	0x0801c500

0801246c <LoRaMacAdrCalcNext>:
    return false;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
bool LoRaMacAdrCalcNext( CalcNextAdrParams_t* adrNext, int8_t* drOut, int8_t* txPowOut,
                         uint8_t* nbTransOut, uint32_t* adrAckCounter )
{
 801246c:	b580      	push	{r7, lr}
 801246e:	b08c      	sub	sp, #48	@ 0x30
 8012470:	af00      	add	r7, sp, #0
 8012472:	60f8      	str	r0, [r7, #12]
 8012474:	60b9      	str	r1, [r7, #8]
 8012476:	607a      	str	r2, [r7, #4]
 8012478:	603b      	str	r3, [r7, #0]
    bool adrAckReq = false;
 801247a:	2300      	movs	r3, #0
 801247c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    int8_t datarate = adrNext->Datarate;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	7b1b      	ldrb	r3, [r3, #12]
 8012484:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    int8_t txPower = adrNext->TxPower;
 8012488:	68fb      	ldr	r3, [r7, #12]
 801248a:	7b5b      	ldrb	r3, [r3, #13]
 801248c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    uint8_t nbTrans = adrNext->NbTrans;
 8012490:	68fb      	ldr	r3, [r7, #12]
 8012492:	7b9b      	ldrb	r3, [r3, #14]
 8012494:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    int8_t minTxDatarate;
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;

    // Report back the adr ack counter
    *adrAckCounter = adrNext->AdrAckCounter;
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	685a      	ldr	r2, [r3, #4]
 801249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801249e:	601a      	str	r2, [r3, #0]

    if( adrNext->AdrEnabled == true )
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	785b      	ldrb	r3, [r3, #1]
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	f000 8088 	beq.w	80125ba <LoRaMacAdrCalcNext+0x14e>
    {
        // Query minimum TX Datarate
        getPhy.Attribute = PHY_MIN_TX_DR;
 80124aa:	2302      	movs	r3, #2
 80124ac:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	7bdb      	ldrb	r3, [r3, #15]
 80124b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	7c1b      	ldrb	r3, [r3, #16]
 80124bc:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80124c0:	4611      	mov	r1, r2
 80124c2:	4618      	mov	r0, r3
 80124c4:	f002 f81e 	bl	8014504 <RegionGetPhyParam>
 80124c8:	4603      	mov	r3, r0
 80124ca:	623b      	str	r3, [r7, #32]
        minTxDatarate = phyParam.Value;
 80124cc:	6a3b      	ldr	r3, [r7, #32]
 80124ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        datarate = MAX( datarate, minTxDatarate );
 80124d2:	f997 202b 	ldrsb.w	r2, [r7, #43]	@ 0x2b
 80124d6:	f997 302e 	ldrsb.w	r3, [r7, #46]	@ 0x2e
 80124da:	4293      	cmp	r3, r2
 80124dc:	bfb8      	it	lt
 80124de:	4613      	movlt	r3, r2
 80124e0:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

        // Verify if ADR ack req bit needs to be set.
        if( adrNext->AdrAckCounter >= adrNext->AdrAckLimit )
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	685b      	ldr	r3, [r3, #4]
 80124e8:	68fa      	ldr	r2, [r7, #12]
 80124ea:	8912      	ldrh	r2, [r2, #8]
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d302      	bcc.n	80124f6 <LoRaMacAdrCalcNext+0x8a>
        {
            adrAckReq = true;
 80124f0:	2301      	movs	r3, #1
 80124f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        }

        // Verify, if we need to set the TX power to default
        if( adrNext->AdrAckCounter >= ( adrNext->AdrAckLimit + adrNext->AdrAckDelay ) )
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	685b      	ldr	r3, [r3, #4]
 80124fa:	68fa      	ldr	r2, [r7, #12]
 80124fc:	8912      	ldrh	r2, [r2, #8]
 80124fe:	4611      	mov	r1, r2
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	8952      	ldrh	r2, [r2, #10]
 8012504:	440a      	add	r2, r1
 8012506:	4293      	cmp	r3, r2
 8012508:	d30f      	bcc.n	801252a <LoRaMacAdrCalcNext+0xbe>
        {
            // Set TX Power to default
            getPhy.Attribute = PHY_DEF_TX_POWER;
 801250a:	230a      	movs	r3, #10
 801250c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	7c1b      	ldrb	r3, [r3, #16]
 8012514:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8012518:	4611      	mov	r1, r2
 801251a:	4618      	mov	r0, r3
 801251c:	f001 fff2 	bl	8014504 <RegionGetPhyParam>
 8012520:	4603      	mov	r3, r0
 8012522:	623b      	str	r3, [r7, #32]
            txPower = phyParam.Value;
 8012524:	6a3b      	ldr	r3, [r7, #32]
 8012526:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        }

        // Verify, if we need to decrease the data rate
        if( adrNext->AdrAckCounter >= ( uint32_t )( adrNext->AdrAckLimit + ( adrNext->AdrAckDelay << 1 ) ) )
 801252a:	68fb      	ldr	r3, [r7, #12]
 801252c:	685b      	ldr	r3, [r3, #4]
 801252e:	68fa      	ldr	r2, [r7, #12]
 8012530:	8912      	ldrh	r2, [r2, #8]
 8012532:	4611      	mov	r1, r2
 8012534:	68fa      	ldr	r2, [r7, #12]
 8012536:	8952      	ldrh	r2, [r2, #10]
 8012538:	0052      	lsls	r2, r2, #1
 801253a:	440a      	add	r2, r1
 801253c:	4293      	cmp	r3, r2
 801253e:	d33c      	bcc.n	80125ba <LoRaMacAdrCalcNext+0x14e>
        {
            // Perform actions with every adrNext->AdrAckDelay only
            if( ( ( adrNext->AdrAckCounter - adrNext->AdrAckLimit ) % adrNext->AdrAckDelay ) == 0 )
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	685b      	ldr	r3, [r3, #4]
 8012544:	68fa      	ldr	r2, [r7, #12]
 8012546:	8912      	ldrh	r2, [r2, #8]
 8012548:	1a9b      	subs	r3, r3, r2
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	8952      	ldrh	r2, [r2, #10]
 801254e:	fbb3 f1f2 	udiv	r1, r3, r2
 8012552:	fb01 f202 	mul.w	r2, r1, r2
 8012556:	1a9b      	subs	r3, r3, r2
 8012558:	2b00      	cmp	r3, #0
 801255a:	d12e      	bne.n	80125ba <LoRaMacAdrCalcNext+0x14e>
            {
                if( datarate == minTxDatarate )
 801255c:	f997 202e 	ldrsb.w	r2, [r7, #46]	@ 0x2e
 8012560:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8012564:	429a      	cmp	r2, r3
 8012566:	d110      	bne.n	801258a <LoRaMacAdrCalcNext+0x11e>
                {
                    // Restore the channel mask
                    if( adrNext->UpdateChanMask == true )
 8012568:	68fb      	ldr	r3, [r7, #12]
 801256a:	781b      	ldrb	r3, [r3, #0]
 801256c:	2b00      	cmp	r3, #0
 801256e:	d009      	beq.n	8012584 <LoRaMacAdrCalcNext+0x118>
                    {
                        InitDefaultsParams_t params;
                        params.Type = INIT_TYPE_ACTIVATE_DEFAULT_CHANNELS;
 8012570:	2302      	movs	r3, #2
 8012572:	773b      	strb	r3, [r7, #28]
                        RegionInitDefaults( adrNext->Region, &params );
 8012574:	68fb      	ldr	r3, [r7, #12]
 8012576:	7c1b      	ldrb	r3, [r3, #16]
 8012578:	f107 0210 	add.w	r2, r7, #16
 801257c:	4611      	mov	r1, r2
 801257e:	4618      	mov	r0, r3
 8012580:	f001 ffe9 	bl	8014556 <RegionInitDefaults>
                    }

                    // Restore NbTrans
                    nbTrans = 1;
 8012584:	2301      	movs	r3, #1
 8012586:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                }

                // Decrease the datarate
                getPhy.Attribute = PHY_NEXT_LOWER_TX_DR;
 801258a:	2321      	movs	r3, #33	@ 0x21
 801258c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
                getPhy.Datarate = datarate;
 8012590:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8012594:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
                getPhy.UplinkDwellTime = adrNext->UplinkDwellTime;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	7bdb      	ldrb	r3, [r3, #15]
 801259c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
                phyParam = RegionGetPhyParam( adrNext->Region, &getPhy );
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	7c1b      	ldrb	r3, [r3, #16]
 80125a4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 80125a8:	4611      	mov	r1, r2
 80125aa:	4618      	mov	r0, r3
 80125ac:	f001 ffaa 	bl	8014504 <RegionGetPhyParam>
 80125b0:	4603      	mov	r3, r0
 80125b2:	623b      	str	r3, [r7, #32]
                datarate = phyParam.Value;
 80125b4:	6a3b      	ldr	r3, [r7, #32]
 80125b6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
            }
        }
    }

    *drOut = datarate;
 80125ba:	68bb      	ldr	r3, [r7, #8]
 80125bc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80125c0:	701a      	strb	r2, [r3, #0]
    *txPowOut = txPower;
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80125c8:	701a      	strb	r2, [r3, #0]
    *nbTransOut = nbTrans;
 80125ca:	683b      	ldr	r3, [r7, #0]
 80125cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80125d0:	701a      	strb	r2, [r3, #0]
    return adrAckReq;
 80125d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80125d6:	4618      	mov	r0, r3
 80125d8:	3730      	adds	r7, #48	@ 0x30
 80125da:	46bd      	mov	sp, r7
 80125dc:	bd80      	pop	{r7, pc}

080125de <LoRaMacClassBInit>:
#endif /* LORAMAC_VERSION */

#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBInit( LoRaMacClassBParams_t *classBParams, LoRaMacClassBCallback_t *callbacks, LoRaMacClassBNvmData_t* nvm )
{
 80125de:	b480      	push	{r7}
 80125e0:	b085      	sub	sp, #20
 80125e2:	af00      	add	r7, sp, #0
 80125e4:	60f8      	str	r0, [r7, #12]
 80125e6:	60b9      	str	r1, [r7, #8]
 80125e8:	607a      	str	r2, [r7, #4]
    TimerInit( &Ctx.PingSlotTimer, LoRaMacClassBPingSlotTimerEvent );
    TimerInit( &Ctx.MulticastSlotTimer, LoRaMacClassBMulticastSlotTimerEvent );

    InitClassB( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125ea:	bf00      	nop
 80125ec:	3714      	adds	r7, #20
 80125ee:	46bd      	mov	sp, r7
 80125f0:	bc80      	pop	{r7}
 80125f2:	4770      	bx	lr

080125f4 <LoRaMacClassBSetBeaconState>:

void LoRaMacClassBSetBeaconState( BeaconState_t beaconState )
{
 80125f4:	b480      	push	{r7}
 80125f6:	b083      	sub	sp, #12
 80125f8:	af00      	add	r7, sp, #0
 80125fa:	4603      	mov	r3, r0
 80125fc:	71fb      	strb	r3, [r7, #7]
        {
            Ctx.BeaconState = beaconState;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80125fe:	bf00      	nop
 8012600:	370c      	adds	r7, #12
 8012602:	46bd      	mov	sp, r7
 8012604:	bc80      	pop	{r7}
 8012606:	4770      	bx	lr

08012608 <LoRaMacClassBSetPingSlotState>:

void LoRaMacClassBSetPingSlotState( PingSlotState_t pingSlotState )
{
 8012608:	b480      	push	{r7}
 801260a:	b083      	sub	sp, #12
 801260c:	af00      	add	r7, sp, #0
 801260e:	4603      	mov	r3, r0
 8012610:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.PingSlotState = pingSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012612:	bf00      	nop
 8012614:	370c      	adds	r7, #12
 8012616:	46bd      	mov	sp, r7
 8012618:	bc80      	pop	{r7}
 801261a:	4770      	bx	lr

0801261c <LoRaMacClassBSetMulticastSlotState>:

void LoRaMacClassBSetMulticastSlotState( PingSlotState_t multicastSlotState )
{
 801261c:	b480      	push	{r7}
 801261e:	b083      	sub	sp, #12
 8012620:	af00      	add	r7, sp, #0
 8012622:	4603      	mov	r3, r0
 8012624:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    Ctx.MulticastSlotState = multicastSlotState;
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012626:	bf00      	nop
 8012628:	370c      	adds	r7, #12
 801262a:	46bd      	mov	sp, r7
 801262c:	bc80      	pop	{r7}
 801262e:	4770      	bx	lr

08012630 <LoRaMacClassBIsAcquisitionInProgress>:

bool LoRaMacClassBIsAcquisitionInProgress( void )
{
 8012630:	b480      	push	{r7}
 8012632:	af00      	add	r7, sp, #0
        // searches for a beacon.
        return true;
    }
    return false;
#else
    return false;
 8012634:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012636:	4618      	mov	r0, r3
 8012638:	46bd      	mov	sp, r7
 801263a:	bc80      	pop	{r7}
 801263c:	4770      	bx	lr

0801263e <LoRaMacClassBBeaconTimerEvent>:

void LoRaMacClassBBeaconTimerEvent( void* context )
{
 801263e:	b480      	push	{r7}
 8012640:	b083      	sub	sp, #12
 8012642:	af00      	add	r7, sp, #0
 8012644:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012646:	bf00      	nop
 8012648:	370c      	adds	r7, #12
 801264a:	46bd      	mov	sp, r7
 801264c:	bc80      	pop	{r7}
 801264e:	4770      	bx	lr

08012650 <LoRaMacClassBPingSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBPingSlotTimerEvent( void* context )
{
 8012650:	b480      	push	{r7}
 8012652:	b083      	sub	sp, #12
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012658:	bf00      	nop
 801265a:	370c      	adds	r7, #12
 801265c:	46bd      	mov	sp, r7
 801265e:	bc80      	pop	{r7}
 8012660:	4770      	bx	lr

08012662 <LoRaMacClassBMulticastSlotTimerEvent>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

void LoRaMacClassBMulticastSlotTimerEvent( void* context )
{
 8012662:	b480      	push	{r7}
 8012664:	b083      	sub	sp, #12
 8012666:	af00      	add	r7, sp, #0
 8012668:	6078      	str	r0, [r7, #4]
    if( Ctx.LoRaMacClassBCallbacks.MacProcessNotify != NULL )
    {
        Ctx.LoRaMacClassBCallbacks.MacProcessNotify( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 801266a:	bf00      	nop
 801266c:	370c      	adds	r7, #12
 801266e:	46bd      	mov	sp, r7
 8012670:	bc80      	pop	{r7}
 8012672:	4770      	bx	lr

08012674 <LoRaMacClassBRxBeacon>:
    }
}
#endif /* LORAMAC_CLASSB_ENABLED */

bool LoRaMacClassBRxBeacon( uint8_t *payload, uint16_t size )
{
 8012674:	b480      	push	{r7}
 8012676:	b083      	sub	sp, #12
 8012678:	af00      	add	r7, sp, #0
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	460b      	mov	r3, r1
 801267e:	807b      	strh	r3, [r7, #2]
        // valid beacon has been received.
        beaconProcessed = true;
    }
    return beaconProcessed;
#else
    return false;
 8012680:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012682:	4618      	mov	r0, r3
 8012684:	370c      	adds	r7, #12
 8012686:	46bd      	mov	sp, r7
 8012688:	bc80      	pop	{r7}
 801268a:	4770      	bx	lr

0801268c <LoRaMacClassBIsBeaconExpected>:

bool LoRaMacClassBIsBeaconExpected( void )
{
 801268c:	b480      	push	{r7}
 801268e:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 8012690:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012692:	4618      	mov	r0, r3
 8012694:	46bd      	mov	sp, r7
 8012696:	bc80      	pop	{r7}
 8012698:	4770      	bx	lr

0801269a <LoRaMacClassBIsPingExpected>:

bool LoRaMacClassBIsPingExpected( void )
{
 801269a:	b480      	push	{r7}
 801269c:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 801269e:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126a0:	4618      	mov	r0, r3
 80126a2:	46bd      	mov	sp, r7
 80126a4:	bc80      	pop	{r7}
 80126a6:	4770      	bx	lr

080126a8 <LoRaMacClassBIsMulticastExpected>:

bool LoRaMacClassBIsMulticastExpected( void )
{
 80126a8:	b480      	push	{r7}
 80126aa:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126ac:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126ae:	4618      	mov	r0, r3
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bc80      	pop	{r7}
 80126b4:	4770      	bx	lr

080126b6 <LoRaMacClassBIsBeaconModeActive>:
    return false;
#endif /* LORAMAC_CLASSB_ENABLED */
}

bool LoRaMacClassBIsBeaconModeActive( void )
{
 80126b6:	b480      	push	{r7}
 80126b8:	af00      	add	r7, sp, #0
    {
        return true;
    }
    return false;
#else
    return false;
 80126ba:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126bc:	4618      	mov	r0, r3
 80126be:	46bd      	mov	sp, r7
 80126c0:	bc80      	pop	{r7}
 80126c2:	4770      	bx	lr

080126c4 <LoRaMacClassBSetPingSlotInfo>:

void LoRaMacClassBSetPingSlotInfo( uint8_t periodicity )
{
 80126c4:	b480      	push	{r7}
 80126c6:	b083      	sub	sp, #12
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	4603      	mov	r3, r0
 80126cc:	71fb      	strb	r3, [r7, #7]
#if ( LORAMAC_CLASSB_ENABLED == 1 )
    ClassBNvm->PingSlotCtx.PingNb = CalcPingNb( periodicity );
    ClassBNvm->PingSlotCtx.PingPeriod = CalcPingPeriod( ClassBNvm->PingSlotCtx.PingNb );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126ce:	bf00      	nop
 80126d0:	370c      	adds	r7, #12
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bc80      	pop	{r7}
 80126d6:	4770      	bx	lr

080126d8 <LoRaMacClassBHaltBeaconing>:

void LoRaMacClassBHaltBeaconing( void )
{
 80126d8:	b480      	push	{r7}
 80126da:	af00      	add	r7, sp, #0

        // Halt ping and multicast slot state machines
        LoRaMacClassBStopRxSlots( );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126dc:	bf00      	nop
 80126de:	46bd      	mov	sp, r7
 80126e0:	bc80      	pop	{r7}
 80126e2:	4770      	bx	lr

080126e4 <LoRaMacClassBResumeBeaconing>:

void LoRaMacClassBResumeBeaconing( void )
{
 80126e4:	b480      	push	{r7}
 80126e6:	af00      	add	r7, sp, #0
        }

        LoRaMacClassBBeaconTimerEvent( NULL );
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126e8:	bf00      	nop
 80126ea:	46bd      	mov	sp, r7
 80126ec:	bc80      	pop	{r7}
 80126ee:	4770      	bx	lr

080126f0 <LoRaMacClassBSwitchClass>:

LoRaMacStatus_t LoRaMacClassBSwitchClass( DeviceClass_t nextClass )
{
 80126f0:	b480      	push	{r7}
 80126f2:	b083      	sub	sp, #12
 80126f4:	af00      	add	r7, sp, #0
 80126f6:	4603      	mov	r3, r0
 80126f8:	71fb      	strb	r3, [r7, #7]

        return LORAMAC_STATUS_OK;
    }
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 80126fa:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80126fc:	4618      	mov	r0, r3
 80126fe:	370c      	adds	r7, #12
 8012700:	46bd      	mov	sp, r7
 8012702:	bc80      	pop	{r7}
 8012704:	4770      	bx	lr

08012706 <LoRaMacClassBMibGetRequestConfirm>:

LoRaMacStatus_t LoRaMacClassBMibGetRequestConfirm( MibRequestConfirm_t *mibGet )
{
 8012706:	b480      	push	{r7}
 8012708:	b083      	sub	sp, #12
 801270a:	af00      	add	r7, sp, #0
 801270c:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 801270e:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012710:	4618      	mov	r0, r3
 8012712:	370c      	adds	r7, #12
 8012714:	46bd      	mov	sp, r7
 8012716:	bc80      	pop	{r7}
 8012718:	4770      	bx	lr

0801271a <LoRaMacMibClassBSetRequestConfirm>:

LoRaMacStatus_t LoRaMacMibClassBSetRequestConfirm( MibRequestConfirm_t *mibSet )
{
 801271a:	b480      	push	{r7}
 801271c:	b083      	sub	sp, #12
 801271e:	af00      	add	r7, sp, #0
 8012720:	6078      	str	r0, [r7, #4]
            break;
        }
    }
    return status;
#else
    return LORAMAC_STATUS_SERVICE_UNKNOWN;
 8012722:	2302      	movs	r3, #2
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012724:	4618      	mov	r0, r3
 8012726:	370c      	adds	r7, #12
 8012728:	46bd      	mov	sp, r7
 801272a:	bc80      	pop	{r7}
 801272c:	4770      	bx	lr

0801272e <LoRaMacClassBPingSlotInfoAns>:

void LoRaMacClassBPingSlotInfoAns( void )
{
 801272e:	b480      	push	{r7}
 8012730:	af00      	add	r7, sp, #0
    {
        LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_PING_SLOT_INFO );
        ClassBNvm->PingSlotCtx.Ctrl.Assigned = 1;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012732:	bf00      	nop
 8012734:	46bd      	mov	sp, r7
 8012736:	bc80      	pop	{r7}
 8012738:	4770      	bx	lr

0801273a <LoRaMacClassBPingSlotChannelReq>:

uint8_t LoRaMacClassBPingSlotChannelReq( uint8_t datarate, uint32_t frequency )
{
 801273a:	b480      	push	{r7}
 801273c:	b083      	sub	sp, #12
 801273e:	af00      	add	r7, sp, #0
 8012740:	4603      	mov	r3, r0
 8012742:	6039      	str	r1, [r7, #0]
 8012744:	71fb      	strb	r3, [r7, #7]
        ClassBNvm->PingSlotCtx.Datarate = datarate;
    }

    return status;
#else
    return 0;
 8012746:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012748:	4618      	mov	r0, r3
 801274a:	370c      	adds	r7, #12
 801274c:	46bd      	mov	sp, r7
 801274e:	bc80      	pop	{r7}
 8012750:	4770      	bx	lr

08012752 <LoRaMacClassBBeaconTimingAns>:

void LoRaMacClassBBeaconTimingAns( uint16_t beaconTimingDelay, uint8_t beaconTimingChannel, TimerTime_t lastRxDone )
{
 8012752:	b480      	push	{r7}
 8012754:	b083      	sub	sp, #12
 8012756:	af00      	add	r7, sp, #0
 8012758:	4603      	mov	r3, r0
 801275a:	603a      	str	r2, [r7, #0]
 801275c:	80fb      	strh	r3, [r7, #6]
 801275e:	460b      	mov	r3, r1
 8012760:	717b      	strb	r3, [r7, #5]

        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingDelay = Ctx.BeaconCtx.BeaconTimingDelay;
        Ctx.LoRaMacClassBParams.MlmeConfirm->BeaconTimingChannel = Ctx.BeaconCtx.BeaconTimingChannel;
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012762:	bf00      	nop
 8012764:	370c      	adds	r7, #12
 8012766:	46bd      	mov	sp, r7
 8012768:	bc80      	pop	{r7}
 801276a:	4770      	bx	lr

0801276c <LoRaMacClassBDeviceTimeAns>:

void LoRaMacClassBDeviceTimeAns( void )
{
 801276c:	b480      	push	{r7}
 801276e:	af00      	add	r7, sp, #0
            Ctx.BeaconCtx.BeaconTime.SubSeconds = 0;
            LoRaMacConfirmQueueSetStatus( LORAMAC_EVENT_INFO_STATUS_OK, MLME_DEVICE_TIME );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012770:	bf00      	nop
 8012772:	46bd      	mov	sp, r7
 8012774:	bc80      	pop	{r7}
 8012776:	4770      	bx	lr

08012778 <LoRaMacClassBBeaconFreqReq>:

bool LoRaMacClassBBeaconFreqReq( uint32_t frequency )
{
 8012778:	b480      	push	{r7}
 801277a:	b083      	sub	sp, #12
 801277c:	af00      	add	r7, sp, #0
 801277e:	6078      	str	r0, [r7, #4]
        ClassBNvm->BeaconCtx.Ctrl.CustomFreq = 0;
        return true;
    }
    return false;
#else
    return false;
 8012780:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012782:	4618      	mov	r0, r3
 8012784:	370c      	adds	r7, #12
 8012786:	46bd      	mov	sp, r7
 8012788:	bc80      	pop	{r7}
 801278a:	4770      	bx	lr

0801278c <LoRaMacClassBIsUplinkCollision>:

TimerTime_t LoRaMacClassBIsUplinkCollision( TimerTime_t txTimeOnAir )
{
 801278c:	b480      	push	{r7}
 801278e:	b083      	sub	sp, #12
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
    {// Next beacon will be sent during the next uplink.
        return CLASSB_BEACON_RESERVED;
    }
    return 0;
#else
    return 0;
 8012794:	2300      	movs	r3, #0
#endif /* LORAMAC_CLASSB_ENABLED */
}
 8012796:	4618      	mov	r0, r3
 8012798:	370c      	adds	r7, #12
 801279a:	46bd      	mov	sp, r7
 801279c:	bc80      	pop	{r7}
 801279e:	4770      	bx	lr

080127a0 <LoRaMacClassBStopRxSlots>:

void LoRaMacClassBStopRxSlots( void )
{
 80127a0:	b480      	push	{r7}
 80127a2:	af00      	add	r7, sp, #0
    CRITICAL_SECTION_BEGIN( );
    LoRaMacClassBEvents.Events.PingSlot = 0;
    LoRaMacClassBEvents.Events.MulticastSlot = 0;
    CRITICAL_SECTION_END( );
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127a4:	bf00      	nop
 80127a6:	46bd      	mov	sp, r7
 80127a8:	bc80      	pop	{r7}
 80127aa:	4770      	bx	lr

080127ac <LoRaMacClassBSetFPendingBit>:
#endif /* LORAMAC_CLASSB_ENABLED */
}

#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
void LoRaMacClassBSetFPendingBit( uint32_t address, uint8_t fPendingSet )
{
 80127ac:	b480      	push	{r7}
 80127ae:	b083      	sub	sp, #12
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
 80127b4:	460b      	mov	r3, r1
 80127b6:	70fb      	strb	r3, [r7, #3]
            }
            cur++;
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127b8:	bf00      	nop
 80127ba:	370c      	adds	r7, #12
 80127bc:	46bd      	mov	sp, r7
 80127be:	bc80      	pop	{r7}
 80127c0:	4770      	bx	lr

080127c2 <LoRaMacClassBProcess>:
#endif /* LORAMAC_VERSION */

void LoRaMacClassBProcess( void )
{
 80127c2:	b480      	push	{r7}
 80127c4:	af00      	add	r7, sp, #0
        {
            LoRaMacClassBProcessMulticastSlot( );
        }
    }
#endif /* LORAMAC_CLASSB_ENABLED */
}
 80127c6:	bf00      	nop
 80127c8:	46bd      	mov	sp, r7
 80127ca:	bc80      	pop	{r7}
 80127cc:	4770      	bx	lr

080127ce <IsSlotFree>:
 *
 * \param [in]    slot           - Slot to check
 * \retval                       - Status of the operation
 */
static bool IsSlotFree( const MacCommand_t* slot )
{
 80127ce:	b480      	push	{r7}
 80127d0:	b085      	sub	sp, #20
 80127d2:	af00      	add	r7, sp, #0
 80127d4:	6078      	str	r0, [r7, #4]
    uint8_t* mem = ( uint8_t* )slot;
 80127d6:	687b      	ldr	r3, [r7, #4]
 80127d8:	60bb      	str	r3, [r7, #8]

    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80127da:	2300      	movs	r3, #0
 80127dc:	81fb      	strh	r3, [r7, #14]
 80127de:	e00a      	b.n	80127f6 <IsSlotFree+0x28>
    {
        if( mem[size] != 0x00 )
 80127e0:	89fb      	ldrh	r3, [r7, #14]
 80127e2:	68ba      	ldr	r2, [r7, #8]
 80127e4:	4413      	add	r3, r2
 80127e6:	781b      	ldrb	r3, [r3, #0]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d001      	beq.n	80127f0 <IsSlotFree+0x22>
        {
            return false;
 80127ec:	2300      	movs	r3, #0
 80127ee:	e006      	b.n	80127fe <IsSlotFree+0x30>
    for( uint16_t size = 0; size < sizeof( MacCommand_t ); size++ )
 80127f0:	89fb      	ldrh	r3, [r7, #14]
 80127f2:	3301      	adds	r3, #1
 80127f4:	81fb      	strh	r3, [r7, #14]
 80127f6:	89fb      	ldrh	r3, [r7, #14]
 80127f8:	2b0f      	cmp	r3, #15
 80127fa:	d9f1      	bls.n	80127e0 <IsSlotFree+0x12>
        }
    }
    return true;
 80127fc:	2301      	movs	r3, #1
}
 80127fe:	4618      	mov	r0, r3
 8012800:	3714      	adds	r7, #20
 8012802:	46bd      	mov	sp, r7
 8012804:	bc80      	pop	{r7}
 8012806:	4770      	bx	lr

08012808 <MallocNewMacCommandSlot>:
 * \brief Allocates a new MAC command memory slot
 *
 * \retval                       - Pointer to slot
 */
static MacCommand_t* MallocNewMacCommandSlot( void )
{
 8012808:	b580      	push	{r7, lr}
 801280a:	b082      	sub	sp, #8
 801280c:	af00      	add	r7, sp, #0
    uint8_t itr = 0;
 801280e:	2300      	movs	r3, #0
 8012810:	71fb      	strb	r3, [r7, #7]

    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012812:	e007      	b.n	8012824 <MallocNewMacCommandSlot+0x1c>
    {
        itr++;
 8012814:	79fb      	ldrb	r3, [r7, #7]
 8012816:	3301      	adds	r3, #1
 8012818:	71fb      	strb	r3, [r7, #7]
        if( itr == NUM_OF_MAC_COMMANDS )
 801281a:	79fb      	ldrb	r3, [r7, #7]
 801281c:	2b20      	cmp	r3, #32
 801281e:	d101      	bne.n	8012824 <MallocNewMacCommandSlot+0x1c>
        {
            return NULL;
 8012820:	2300      	movs	r3, #0
 8012822:	e012      	b.n	801284a <MallocNewMacCommandSlot+0x42>
    while( IsSlotFree( ( const MacCommand_t* )&CommandsCtx.MacCommandSlots[itr] ) == false )
 8012824:	79fb      	ldrb	r3, [r7, #7]
 8012826:	011b      	lsls	r3, r3, #4
 8012828:	3308      	adds	r3, #8
 801282a:	4a0a      	ldr	r2, [pc, #40]	@ (8012854 <MallocNewMacCommandSlot+0x4c>)
 801282c:	4413      	add	r3, r2
 801282e:	4618      	mov	r0, r3
 8012830:	f7ff ffcd 	bl	80127ce <IsSlotFree>
 8012834:	4603      	mov	r3, r0
 8012836:	f083 0301 	eor.w	r3, r3, #1
 801283a:	b2db      	uxtb	r3, r3
 801283c:	2b00      	cmp	r3, #0
 801283e:	d1e9      	bne.n	8012814 <MallocNewMacCommandSlot+0xc>
        }
    }

    return &CommandsCtx.MacCommandSlots[itr];
 8012840:	79fb      	ldrb	r3, [r7, #7]
 8012842:	011b      	lsls	r3, r3, #4
 8012844:	3308      	adds	r3, #8
 8012846:	4a03      	ldr	r2, [pc, #12]	@ (8012854 <MallocNewMacCommandSlot+0x4c>)
 8012848:	4413      	add	r3, r2
}
 801284a:	4618      	mov	r0, r3
 801284c:	3708      	adds	r7, #8
 801284e:	46bd      	mov	sp, r7
 8012850:	bd80      	pop	{r7, pc}
 8012852:	bf00      	nop
 8012854:	20001730 	.word	0x20001730

08012858 <FreeMacCommandSlot>:
 * \param [in]    slot           - Slot to free
 *
 * \retval                       - Status of the operation
 */
static bool FreeMacCommandSlot( MacCommand_t* slot )
{
 8012858:	b580      	push	{r7, lr}
 801285a:	b082      	sub	sp, #8
 801285c:	af00      	add	r7, sp, #0
 801285e:	6078      	str	r0, [r7, #4]
    if( slot == NULL )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d101      	bne.n	801286a <FreeMacCommandSlot+0x12>
    {
        return false;
 8012866:	2300      	movs	r3, #0
 8012868:	e005      	b.n	8012876 <FreeMacCommandSlot+0x1e>
    }

    memset1( ( uint8_t* )slot, 0x00, sizeof( MacCommand_t ) );
 801286a:	2210      	movs	r2, #16
 801286c:	2100      	movs	r1, #0
 801286e:	6878      	ldr	r0, [r7, #4]
 8012870:	f004 f930 	bl	8016ad4 <memset1>

    return true;
 8012874:	2301      	movs	r3, #1
}
 8012876:	4618      	mov	r0, r3
 8012878:	3708      	adds	r7, #8
 801287a:	46bd      	mov	sp, r7
 801287c:	bd80      	pop	{r7, pc}

0801287e <LinkedListInit>:
 *
 * \param [in]    list           - List that shall be initialized
 * \retval                       - Status of the operation
 */
static bool LinkedListInit( MacCommandsList_t* list )
{
 801287e:	b480      	push	{r7}
 8012880:	b083      	sub	sp, #12
 8012882:	af00      	add	r7, sp, #0
 8012884:	6078      	str	r0, [r7, #4]
    if( list == NULL )
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	2b00      	cmp	r3, #0
 801288a:	d101      	bne.n	8012890 <LinkedListInit+0x12>
    {
        return false;
 801288c:	2300      	movs	r3, #0
 801288e:	e006      	b.n	801289e <LinkedListInit+0x20>
    }

    list->First = NULL;
 8012890:	687b      	ldr	r3, [r7, #4]
 8012892:	2200      	movs	r2, #0
 8012894:	601a      	str	r2, [r3, #0]
    list->Last = NULL;
 8012896:	687b      	ldr	r3, [r7, #4]
 8012898:	2200      	movs	r2, #0
 801289a:	605a      	str	r2, [r3, #4]

    return true;
 801289c:	2301      	movs	r3, #1
}
 801289e:	4618      	mov	r0, r3
 80128a0:	370c      	adds	r7, #12
 80128a2:	46bd      	mov	sp, r7
 80128a4:	bc80      	pop	{r7}
 80128a6:	4770      	bx	lr

080128a8 <LinkedListAdd>:
 * \param [in]    list           - List where the element shall be added.
 * \param [in]    element        - Element to add
 * \retval                       - Status of the operation
 */
static bool LinkedListAdd( MacCommandsList_t* list, MacCommand_t* element )
{
 80128a8:	b480      	push	{r7}
 80128aa:	b083      	sub	sp, #12
 80128ac:	af00      	add	r7, sp, #0
 80128ae:	6078      	str	r0, [r7, #4]
 80128b0:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	2b00      	cmp	r3, #0
 80128b6:	d002      	beq.n	80128be <LinkedListAdd+0x16>
 80128b8:	683b      	ldr	r3, [r7, #0]
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d101      	bne.n	80128c2 <LinkedListAdd+0x1a>
    {
        return false;
 80128be:	2300      	movs	r3, #0
 80128c0:	e015      	b.n	80128ee <LinkedListAdd+0x46>
    }

    // Check if this is the first entry to enter the list.
    if( list->First == NULL )
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d102      	bne.n	80128d0 <LinkedListAdd+0x28>
    {
        list->First = element;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	683a      	ldr	r2, [r7, #0]
 80128ce:	601a      	str	r2, [r3, #0]
    }

    // Check if the last entry exists and update its next point.
    if( list->Last )
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	685b      	ldr	r3, [r3, #4]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d003      	beq.n	80128e0 <LinkedListAdd+0x38>
    {
        list->Last->Next = element;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	685b      	ldr	r3, [r3, #4]
 80128dc:	683a      	ldr	r2, [r7, #0]
 80128de:	601a      	str	r2, [r3, #0]
    }

    // Update the next point of this entry.
    element->Next = NULL;
 80128e0:	683b      	ldr	r3, [r7, #0]
 80128e2:	2200      	movs	r2, #0
 80128e4:	601a      	str	r2, [r3, #0]

    // Update the last entry of the list.
    list->Last = element;
 80128e6:	687b      	ldr	r3, [r7, #4]
 80128e8:	683a      	ldr	r2, [r7, #0]
 80128ea:	605a      	str	r2, [r3, #4]

    return true;
 80128ec:	2301      	movs	r3, #1
}
 80128ee:	4618      	mov	r0, r3
 80128f0:	370c      	adds	r7, #12
 80128f2:	46bd      	mov	sp, r7
 80128f4:	bc80      	pop	{r7}
 80128f6:	4770      	bx	lr

080128f8 <LinkedListGetPrevious>:
 * \param [in]    list           - List
 * \param [in]    element        - Element where the previous element shall be searched
 * \retval                       - Status of the operation
 */
static MacCommand_t* LinkedListGetPrevious( MacCommandsList_t* list, MacCommand_t* element )
{
 80128f8:	b480      	push	{r7}
 80128fa:	b085      	sub	sp, #20
 80128fc:	af00      	add	r7, sp, #0
 80128fe:	6078      	str	r0, [r7, #4]
 8012900:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012902:	687b      	ldr	r3, [r7, #4]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d002      	beq.n	801290e <LinkedListGetPrevious+0x16>
 8012908:	683b      	ldr	r3, [r7, #0]
 801290a:	2b00      	cmp	r3, #0
 801290c:	d101      	bne.n	8012912 <LinkedListGetPrevious+0x1a>
    {
        return NULL;
 801290e:	2300      	movs	r3, #0
 8012910:	e016      	b.n	8012940 <LinkedListGetPrevious+0x48>
    }

    MacCommand_t* curElement;

    // Start at the head of the list
    curElement = list->First;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	681b      	ldr	r3, [r3, #0]
 8012916:	60fb      	str	r3, [r7, #12]

    // When current element is the first of the list, there's no previous element so we can return NULL immediately.
    if( element != curElement )
 8012918:	683a      	ldr	r2, [r7, #0]
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	429a      	cmp	r2, r3
 801291e:	d00c      	beq.n	801293a <LinkedListGetPrevious+0x42>
    {
        // Loop through all elements until the end is reached or the next of current is the current element.
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012920:	e002      	b.n	8012928 <LinkedListGetPrevious+0x30>
        {
            curElement = curElement->Next;
 8012922:	68fb      	ldr	r3, [r7, #12]
 8012924:	681b      	ldr	r3, [r3, #0]
 8012926:	60fb      	str	r3, [r7, #12]
        while( ( curElement != NULL ) && ( curElement->Next != element ) )
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	2b00      	cmp	r3, #0
 801292c:	d007      	beq.n	801293e <LinkedListGetPrevious+0x46>
 801292e:	68fb      	ldr	r3, [r7, #12]
 8012930:	681b      	ldr	r3, [r3, #0]
 8012932:	683a      	ldr	r2, [r7, #0]
 8012934:	429a      	cmp	r2, r3
 8012936:	d1f4      	bne.n	8012922 <LinkedListGetPrevious+0x2a>
 8012938:	e001      	b.n	801293e <LinkedListGetPrevious+0x46>
        }
    }
    else
    {
        curElement = NULL;
 801293a:	2300      	movs	r3, #0
 801293c:	60fb      	str	r3, [r7, #12]
    }

    return curElement;
 801293e:	68fb      	ldr	r3, [r7, #12]
}
 8012940:	4618      	mov	r0, r3
 8012942:	3714      	adds	r7, #20
 8012944:	46bd      	mov	sp, r7
 8012946:	bc80      	pop	{r7}
 8012948:	4770      	bx	lr

0801294a <LinkedListRemove>:
 * \param [in]    list           - List where the element shall be removed from.
 * \param [in]    element        - Element to remove
 * \retval                       - Status of the operation
 */
static bool LinkedListRemove( MacCommandsList_t* list, MacCommand_t* element )
{
 801294a:	b580      	push	{r7, lr}
 801294c:	b084      	sub	sp, #16
 801294e:	af00      	add	r7, sp, #0
 8012950:	6078      	str	r0, [r7, #4]
 8012952:	6039      	str	r1, [r7, #0]
    if( ( list == NULL ) || ( element == NULL ) )
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	2b00      	cmp	r3, #0
 8012958:	d002      	beq.n	8012960 <LinkedListRemove+0x16>
 801295a:	683b      	ldr	r3, [r7, #0]
 801295c:	2b00      	cmp	r3, #0
 801295e:	d101      	bne.n	8012964 <LinkedListRemove+0x1a>
    {
        return false;
 8012960:	2300      	movs	r3, #0
 8012962:	e020      	b.n	80129a6 <LinkedListRemove+0x5c>
    }

    MacCommand_t* PrevElement = LinkedListGetPrevious( list, element );
 8012964:	6839      	ldr	r1, [r7, #0]
 8012966:	6878      	ldr	r0, [r7, #4]
 8012968:	f7ff ffc6 	bl	80128f8 <LinkedListGetPrevious>
 801296c:	60f8      	str	r0, [r7, #12]

    if( list->First == element )
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	683a      	ldr	r2, [r7, #0]
 8012974:	429a      	cmp	r2, r3
 8012976:	d103      	bne.n	8012980 <LinkedListRemove+0x36>
    {
        list->First = element->Next;
 8012978:	683b      	ldr	r3, [r7, #0]
 801297a:	681a      	ldr	r2, [r3, #0]
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	601a      	str	r2, [r3, #0]
    }

    if( list->Last == element )
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	685b      	ldr	r3, [r3, #4]
 8012984:	683a      	ldr	r2, [r7, #0]
 8012986:	429a      	cmp	r2, r3
 8012988:	d102      	bne.n	8012990 <LinkedListRemove+0x46>
    {
        list->Last = PrevElement;
 801298a:	687b      	ldr	r3, [r7, #4]
 801298c:	68fa      	ldr	r2, [r7, #12]
 801298e:	605a      	str	r2, [r3, #4]
    }

    if( PrevElement != NULL )
 8012990:	68fb      	ldr	r3, [r7, #12]
 8012992:	2b00      	cmp	r3, #0
 8012994:	d003      	beq.n	801299e <LinkedListRemove+0x54>
    {
        PrevElement->Next = element->Next;
 8012996:	683b      	ldr	r3, [r7, #0]
 8012998:	681a      	ldr	r2, [r3, #0]
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	601a      	str	r2, [r3, #0]
    }

    element->Next = NULL;
 801299e:	683b      	ldr	r3, [r7, #0]
 80129a0:	2200      	movs	r2, #0
 80129a2:	601a      	str	r2, [r3, #0]

    return true;
 80129a4:	2301      	movs	r3, #1
}
 80129a6:	4618      	mov	r0, r3
 80129a8:	3710      	adds	r7, #16
 80129aa:	46bd      	mov	sp, r7
 80129ac:	bd80      	pop	{r7, pc}
	...

080129b0 <IsSticky>:
 * \param [in]  cid                - MAC command identifier
 *
 * \retval                     - Status of the operation
 */
static bool IsSticky( uint8_t cid )
{
 80129b0:	b480      	push	{r7}
 80129b2:	b083      	sub	sp, #12
 80129b4:	af00      	add	r7, sp, #0
 80129b6:	4603      	mov	r3, r0
 80129b8:	71fb      	strb	r3, [r7, #7]
    switch( cid )
 80129ba:	79fb      	ldrb	r3, [r7, #7]
 80129bc:	2b11      	cmp	r3, #17
 80129be:	bf8c      	ite	hi
 80129c0:	2201      	movhi	r2, #1
 80129c2:	2200      	movls	r2, #0
 80129c4:	b2d2      	uxtb	r2, r2
 80129c6:	2a00      	cmp	r2, #0
 80129c8:	d10d      	bne.n	80129e6 <IsSticky+0x36>
 80129ca:	4a0a      	ldr	r2, [pc, #40]	@ (80129f4 <IsSticky+0x44>)
 80129cc:	fa22 f303 	lsr.w	r3, r2, r3
 80129d0:	f003 0301 	and.w	r3, r3, #1
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	bf14      	ite	ne
 80129d8:	2301      	movne	r3, #1
 80129da:	2300      	moveq	r3, #0
 80129dc:	b2db      	uxtb	r3, r3
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d001      	beq.n	80129e6 <IsSticky+0x36>
        case MOTE_MAC_RX_TIMING_SETUP_ANS:
        case MOTE_MAC_TX_PARAM_SETUP_ANS:
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
        case MOTE_MAC_PING_SLOT_CHANNEL_ANS:
#endif /* LORAMAC_VERSION */
            return true;
 80129e2:	2301      	movs	r3, #1
 80129e4:	e000      	b.n	80129e8 <IsSticky+0x38>
        default:
            return false;
 80129e6:	2300      	movs	r3, #0
    }
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	370c      	adds	r7, #12
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bc80      	pop	{r7}
 80129f0:	4770      	bx	lr
 80129f2:	bf00      	nop
 80129f4:	00020720 	.word	0x00020720

080129f8 <LoRaMacCommandsInit>:

LoRaMacCommandStatus_t LoRaMacCommandsInit( void )
{
 80129f8:	b580      	push	{r7, lr}
 80129fa:	af00      	add	r7, sp, #0
    // Initialize with default
    memset1( ( uint8_t* )&CommandsCtx, 0, sizeof( CommandsCtx ) );
 80129fc:	f44f 7203 	mov.w	r2, #524	@ 0x20c
 8012a00:	2100      	movs	r1, #0
 8012a02:	4804      	ldr	r0, [pc, #16]	@ (8012a14 <LoRaMacCommandsInit+0x1c>)
 8012a04:	f004 f866 	bl	8016ad4 <memset1>

    LinkedListInit( &CommandsCtx.MacCommandList );
 8012a08:	4802      	ldr	r0, [pc, #8]	@ (8012a14 <LoRaMacCommandsInit+0x1c>)
 8012a0a:	f7ff ff38 	bl	801287e <LinkedListInit>

    return LORAMAC_COMMANDS_SUCCESS;
 8012a0e:	2300      	movs	r3, #0
}
 8012a10:	4618      	mov	r0, r3
 8012a12:	bd80      	pop	{r7, pc}
 8012a14:	20001730 	.word	0x20001730

08012a18 <LoRaMacCommandsAddCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsAddCmd( uint8_t cid, uint8_t* payload, size_t payloadSize )
{
 8012a18:	b580      	push	{r7, lr}
 8012a1a:	b086      	sub	sp, #24
 8012a1c:	af00      	add	r7, sp, #0
 8012a1e:	4603      	mov	r3, r0
 8012a20:	60b9      	str	r1, [r7, #8]
 8012a22:	607a      	str	r2, [r7, #4]
 8012a24:	73fb      	strb	r3, [r7, #15]
    if( payload == NULL )
 8012a26:	68bb      	ldr	r3, [r7, #8]
 8012a28:	2b00      	cmp	r3, #0
 8012a2a:	d101      	bne.n	8012a30 <LoRaMacCommandsAddCmd+0x18>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012a2c:	2301      	movs	r3, #1
 8012a2e:	e033      	b.n	8012a98 <LoRaMacCommandsAddCmd+0x80>
    }
    MacCommand_t* newCmd;

    // Allocate a memory slot
    newCmd = MallocNewMacCommandSlot( );
 8012a30:	f7ff feea 	bl	8012808 <MallocNewMacCommandSlot>
 8012a34:	6178      	str	r0, [r7, #20]

    if( newCmd == NULL )
 8012a36:	697b      	ldr	r3, [r7, #20]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d101      	bne.n	8012a40 <LoRaMacCommandsAddCmd+0x28>
    {
        return LORAMAC_COMMANDS_ERROR_MEMORY;
 8012a3c:	2302      	movs	r3, #2
 8012a3e:	e02b      	b.n	8012a98 <LoRaMacCommandsAddCmd+0x80>
    }

    // Add it to the list of Mac commands
    if( LinkedListAdd( &CommandsCtx.MacCommandList, newCmd ) == false )
 8012a40:	6979      	ldr	r1, [r7, #20]
 8012a42:	4817      	ldr	r0, [pc, #92]	@ (8012aa0 <LoRaMacCommandsAddCmd+0x88>)
 8012a44:	f7ff ff30 	bl	80128a8 <LinkedListAdd>
 8012a48:	4603      	mov	r3, r0
 8012a4a:	f083 0301 	eor.w	r3, r3, #1
 8012a4e:	b2db      	uxtb	r3, r3
 8012a50:	2b00      	cmp	r3, #0
 8012a52:	d001      	beq.n	8012a58 <LoRaMacCommandsAddCmd+0x40>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012a54:	2305      	movs	r3, #5
 8012a56:	e01f      	b.n	8012a98 <LoRaMacCommandsAddCmd+0x80>
    }

    // Set Values
    newCmd->CID = cid;
 8012a58:	697b      	ldr	r3, [r7, #20]
 8012a5a:	7bfa      	ldrb	r2, [r7, #15]
 8012a5c:	711a      	strb	r2, [r3, #4]
    newCmd->PayloadSize = payloadSize;
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	687a      	ldr	r2, [r7, #4]
 8012a62:	609a      	str	r2, [r3, #8]
    memcpy1( ( uint8_t* )newCmd->Payload, payload, payloadSize );
 8012a64:	697b      	ldr	r3, [r7, #20]
 8012a66:	3305      	adds	r3, #5
 8012a68:	687a      	ldr	r2, [r7, #4]
 8012a6a:	b292      	uxth	r2, r2
 8012a6c:	68b9      	ldr	r1, [r7, #8]
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f003 fff5 	bl	8016a5e <memcpy1>
    newCmd->IsSticky = IsSticky( cid );
 8012a74:	7bfb      	ldrb	r3, [r7, #15]
 8012a76:	4618      	mov	r0, r3
 8012a78:	f7ff ff9a 	bl	80129b0 <IsSticky>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	461a      	mov	r2, r3
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	731a      	strb	r2, [r3, #12]

    CommandsCtx.SerializedCmdsSize += ( CID_FIELD_SIZE + payloadSize );
 8012a84:	4b06      	ldr	r3, [pc, #24]	@ (8012aa0 <LoRaMacCommandsAddCmd+0x88>)
 8012a86:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	4413      	add	r3, r2
 8012a8e:	3301      	adds	r3, #1
 8012a90:	4a03      	ldr	r2, [pc, #12]	@ (8012aa0 <LoRaMacCommandsAddCmd+0x88>)
 8012a92:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    return LORAMAC_COMMANDS_SUCCESS;
 8012a96:	2300      	movs	r3, #0
}
 8012a98:	4618      	mov	r0, r3
 8012a9a:	3718      	adds	r7, #24
 8012a9c:	46bd      	mov	sp, r7
 8012a9e:	bd80      	pop	{r7, pc}
 8012aa0:	20001730 	.word	0x20001730

08012aa4 <LoRaMacCommandsRemoveCmd>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveCmd( MacCommand_t* macCmd )
{
 8012aa4:	b580      	push	{r7, lr}
 8012aa6:	b082      	sub	sp, #8
 8012aa8:	af00      	add	r7, sp, #0
 8012aaa:	6078      	str	r0, [r7, #4]
    if( macCmd == NULL )
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	2b00      	cmp	r3, #0
 8012ab0:	d101      	bne.n	8012ab6 <LoRaMacCommandsRemoveCmd+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012ab2:	2301      	movs	r3, #1
 8012ab4:	e021      	b.n	8012afa <LoRaMacCommandsRemoveCmd+0x56>
    }

    // Remove the Mac command element from MacCommandList
    if( LinkedListRemove( &CommandsCtx.MacCommandList, macCmd ) == false )
 8012ab6:	6879      	ldr	r1, [r7, #4]
 8012ab8:	4812      	ldr	r0, [pc, #72]	@ (8012b04 <LoRaMacCommandsRemoveCmd+0x60>)
 8012aba:	f7ff ff46 	bl	801294a <LinkedListRemove>
 8012abe:	4603      	mov	r3, r0
 8012ac0:	f083 0301 	eor.w	r3, r3, #1
 8012ac4:	b2db      	uxtb	r3, r3
 8012ac6:	2b00      	cmp	r3, #0
 8012ac8:	d001      	beq.n	8012ace <LoRaMacCommandsRemoveCmd+0x2a>
    {
        return LORAMAC_COMMANDS_ERROR_CMD_NOT_FOUND;
 8012aca:	2303      	movs	r3, #3
 8012acc:	e015      	b.n	8012afa <LoRaMacCommandsRemoveCmd+0x56>
    }

    CommandsCtx.SerializedCmdsSize -= ( CID_FIELD_SIZE + macCmd->PayloadSize );
 8012ace:	4b0d      	ldr	r3, [pc, #52]	@ (8012b04 <LoRaMacCommandsRemoveCmd+0x60>)
 8012ad0:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	689b      	ldr	r3, [r3, #8]
 8012ad8:	1ad3      	subs	r3, r2, r3
 8012ada:	3b01      	subs	r3, #1
 8012adc:	4a09      	ldr	r2, [pc, #36]	@ (8012b04 <LoRaMacCommandsRemoveCmd+0x60>)
 8012ade:	f8c2 3208 	str.w	r3, [r2, #520]	@ 0x208

    // Free the MacCommand Slot
    if( FreeMacCommandSlot( macCmd ) == false )
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ff feb8 	bl	8012858 <FreeMacCommandSlot>
 8012ae8:	4603      	mov	r3, r0
 8012aea:	f083 0301 	eor.w	r3, r3, #1
 8012aee:	b2db      	uxtb	r3, r3
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d001      	beq.n	8012af8 <LoRaMacCommandsRemoveCmd+0x54>
    {
        return LORAMAC_COMMANDS_ERROR;
 8012af4:	2305      	movs	r3, #5
 8012af6:	e000      	b.n	8012afa <LoRaMacCommandsRemoveCmd+0x56>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012af8:	2300      	movs	r3, #0
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3708      	adds	r7, #8
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	20001730 	.word	0x20001730

08012b08 <LoRaMacCommandsRemoveNoneStickyCmds>:
    }
    return LORAMAC_COMMANDS_SUCCESS;
}

LoRaMacCommandStatus_t LoRaMacCommandsRemoveNoneStickyCmds( void )
{
 8012b08:	b580      	push	{r7, lr}
 8012b0a:	b082      	sub	sp, #8
 8012b0c:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012b0e:	4b0f      	ldr	r3, [pc, #60]	@ (8012b4c <LoRaMacCommandsRemoveNoneStickyCmds+0x44>)
 8012b10:	681b      	ldr	r3, [r3, #0]
 8012b12:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012b14:	e012      	b.n	8012b3c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
    {
        if( curElement->IsSticky == false )
 8012b16:	687b      	ldr	r3, [r7, #4]
 8012b18:	7b1b      	ldrb	r3, [r3, #12]
 8012b1a:	f083 0301 	eor.w	r3, r3, #1
 8012b1e:	b2db      	uxtb	r3, r3
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d008      	beq.n	8012b36 <LoRaMacCommandsRemoveNoneStickyCmds+0x2e>
        {
            nexElement = curElement->Next;
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	681b      	ldr	r3, [r3, #0]
 8012b28:	603b      	str	r3, [r7, #0]
            LoRaMacCommandsRemoveCmd( curElement );
 8012b2a:	6878      	ldr	r0, [r7, #4]
 8012b2c:	f7ff ffba 	bl	8012aa4 <LoRaMacCommandsRemoveCmd>
            curElement = nexElement;
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	607b      	str	r3, [r7, #4]
 8012b34:	e002      	b.n	8012b3c <LoRaMacCommandsRemoveNoneStickyCmds+0x34>
        }
        else
        {
            curElement = curElement->Next;
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d1e9      	bne.n	8012b16 <LoRaMacCommandsRemoveNoneStickyCmds+0xe>
        }
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b42:	2300      	movs	r3, #0
}
 8012b44:	4618      	mov	r0, r3
 8012b46:	3708      	adds	r7, #8
 8012b48:	46bd      	mov	sp, r7
 8012b4a:	bd80      	pop	{r7, pc}
 8012b4c:	20001730 	.word	0x20001730

08012b50 <LoRaMacCommandsRemoveStickyAnsCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsRemoveStickyAnsCmds( void )
{
 8012b50:	b580      	push	{r7, lr}
 8012b52:	b082      	sub	sp, #8
 8012b54:	af00      	add	r7, sp, #0
    MacCommand_t* curElement;
    MacCommand_t* nexElement;

    // Start at the head of the list
    curElement = CommandsCtx.MacCommandList.First;
 8012b56:	4b0e      	ldr	r3, [pc, #56]	@ (8012b90 <LoRaMacCommandsRemoveStickyAnsCmds+0x40>)
 8012b58:	681b      	ldr	r3, [r3, #0]
 8012b5a:	607b      	str	r3, [r7, #4]

    // Loop through all elements
    while( curElement != NULL )
 8012b5c:	e00f      	b.n	8012b7e <LoRaMacCommandsRemoveStickyAnsCmds+0x2e>
    {
        nexElement = curElement->Next;
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	603b      	str	r3, [r7, #0]
        if( IsSticky( curElement->CID ) == true )
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	791b      	ldrb	r3, [r3, #4]
 8012b68:	4618      	mov	r0, r3
 8012b6a:	f7ff ff21 	bl	80129b0 <IsSticky>
 8012b6e:	4603      	mov	r3, r0
 8012b70:	2b00      	cmp	r3, #0
 8012b72:	d002      	beq.n	8012b7a <LoRaMacCommandsRemoveStickyAnsCmds+0x2a>
        {
            LoRaMacCommandsRemoveCmd( curElement );
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f7ff ff95 	bl	8012aa4 <LoRaMacCommandsRemoveCmd>
        }
        curElement = nexElement;
 8012b7a:	683b      	ldr	r3, [r7, #0]
 8012b7c:	607b      	str	r3, [r7, #4]
    while( curElement != NULL )
 8012b7e:	687b      	ldr	r3, [r7, #4]
 8012b80:	2b00      	cmp	r3, #0
 8012b82:	d1ec      	bne.n	8012b5e <LoRaMacCommandsRemoveStickyAnsCmds+0xe>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012b84:	2300      	movs	r3, #0
}
 8012b86:	4618      	mov	r0, r3
 8012b88:	3708      	adds	r7, #8
 8012b8a:	46bd      	mov	sp, r7
 8012b8c:	bd80      	pop	{r7, pc}
 8012b8e:	bf00      	nop
 8012b90:	20001730 	.word	0x20001730

08012b94 <LoRaMacCommandsGetSizeSerializedCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsGetSizeSerializedCmds( size_t* size )
{
 8012b94:	b480      	push	{r7}
 8012b96:	b083      	sub	sp, #12
 8012b98:	af00      	add	r7, sp, #0
 8012b9a:	6078      	str	r0, [r7, #4]
    if( size == NULL )
 8012b9c:	687b      	ldr	r3, [r7, #4]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d101      	bne.n	8012ba6 <LoRaMacCommandsGetSizeSerializedCmds+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012ba2:	2301      	movs	r3, #1
 8012ba4:	e005      	b.n	8012bb2 <LoRaMacCommandsGetSizeSerializedCmds+0x1e>
    }
    *size = CommandsCtx.SerializedCmdsSize;
 8012ba6:	4b05      	ldr	r3, [pc, #20]	@ (8012bbc <LoRaMacCommandsGetSizeSerializedCmds+0x28>)
 8012ba8:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	601a      	str	r2, [r3, #0]
    return LORAMAC_COMMANDS_SUCCESS;
 8012bb0:	2300      	movs	r3, #0
}
 8012bb2:	4618      	mov	r0, r3
 8012bb4:	370c      	adds	r7, #12
 8012bb6:	46bd      	mov	sp, r7
 8012bb8:	bc80      	pop	{r7}
 8012bba:	4770      	bx	lr
 8012bbc:	20001730 	.word	0x20001730

08012bc0 <LoRaMacCommandsSerializeCmds>:

LoRaMacCommandStatus_t LoRaMacCommandsSerializeCmds( size_t availableSize, size_t* effectiveSize, uint8_t* buffer )
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b088      	sub	sp, #32
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	60f8      	str	r0, [r7, #12]
 8012bc8:	60b9      	str	r1, [r7, #8]
 8012bca:	607a      	str	r2, [r7, #4]
    MacCommand_t* curElement = CommandsCtx.MacCommandList.First;
 8012bcc:	4b25      	ldr	r3, [pc, #148]	@ (8012c64 <LoRaMacCommandsSerializeCmds+0xa4>)
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	61fb      	str	r3, [r7, #28]
    MacCommand_t* nextElement;
    uint8_t itr = 0;
 8012bd2:	2300      	movs	r3, #0
 8012bd4:	76fb      	strb	r3, [r7, #27]

    if( ( buffer == NULL ) || ( effectiveSize == NULL ) )
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	2b00      	cmp	r3, #0
 8012bda:	d002      	beq.n	8012be2 <LoRaMacCommandsSerializeCmds+0x22>
 8012bdc:	68bb      	ldr	r3, [r7, #8]
 8012bde:	2b00      	cmp	r3, #0
 8012be0:	d126      	bne.n	8012c30 <LoRaMacCommandsSerializeCmds+0x70>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012be2:	2301      	movs	r3, #1
 8012be4:	e039      	b.n	8012c5a <LoRaMacCommandsSerializeCmds+0x9a>

    // Loop through all elements which fits into the buffer
    while( curElement != NULL )
    {
        // If the next MAC command still fits into the buffer, add it.
        if( ( availableSize - itr ) >= ( CID_FIELD_SIZE + curElement->PayloadSize ) )
 8012be6:	7efb      	ldrb	r3, [r7, #27]
 8012be8:	68fa      	ldr	r2, [r7, #12]
 8012bea:	1ad2      	subs	r2, r2, r3
 8012bec:	69fb      	ldr	r3, [r7, #28]
 8012bee:	689b      	ldr	r3, [r3, #8]
 8012bf0:	3301      	adds	r3, #1
 8012bf2:	429a      	cmp	r2, r3
 8012bf4:	d320      	bcc.n	8012c38 <LoRaMacCommandsSerializeCmds+0x78>
        {
            buffer[itr++] = curElement->CID;
 8012bf6:	7efb      	ldrb	r3, [r7, #27]
 8012bf8:	1c5a      	adds	r2, r3, #1
 8012bfa:	76fa      	strb	r2, [r7, #27]
 8012bfc:	461a      	mov	r2, r3
 8012bfe:	687b      	ldr	r3, [r7, #4]
 8012c00:	4413      	add	r3, r2
 8012c02:	69fa      	ldr	r2, [r7, #28]
 8012c04:	7912      	ldrb	r2, [r2, #4]
 8012c06:	701a      	strb	r2, [r3, #0]
            memcpy1( &buffer[itr], curElement->Payload, curElement->PayloadSize );
 8012c08:	7efb      	ldrb	r3, [r7, #27]
 8012c0a:	687a      	ldr	r2, [r7, #4]
 8012c0c:	18d0      	adds	r0, r2, r3
 8012c0e:	69fb      	ldr	r3, [r7, #28]
 8012c10:	1d59      	adds	r1, r3, #5
 8012c12:	69fb      	ldr	r3, [r7, #28]
 8012c14:	689b      	ldr	r3, [r3, #8]
 8012c16:	b29b      	uxth	r3, r3
 8012c18:	461a      	mov	r2, r3
 8012c1a:	f003 ff20 	bl	8016a5e <memcpy1>
            itr += curElement->PayloadSize;
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	689b      	ldr	r3, [r3, #8]
 8012c22:	b2da      	uxtb	r2, r3
 8012c24:	7efb      	ldrb	r3, [r7, #27]
 8012c26:	4413      	add	r3, r2
 8012c28:	76fb      	strb	r3, [r7, #27]
        }
        else
        {
            break;
        }
        curElement = curElement->Next;
 8012c2a:	69fb      	ldr	r3, [r7, #28]
 8012c2c:	681b      	ldr	r3, [r3, #0]
 8012c2e:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012c30:	69fb      	ldr	r3, [r7, #28]
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	d1d7      	bne.n	8012be6 <LoRaMacCommandsSerializeCmds+0x26>
 8012c36:	e009      	b.n	8012c4c <LoRaMacCommandsSerializeCmds+0x8c>
            break;
 8012c38:	bf00      	nop
    }

    // Remove all commands which do not fit into the buffer
    while( curElement != NULL )
 8012c3a:	e007      	b.n	8012c4c <LoRaMacCommandsSerializeCmds+0x8c>
    {
        // Store the next element before removing the current one
        nextElement = curElement->Next;
 8012c3c:	69fb      	ldr	r3, [r7, #28]
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	617b      	str	r3, [r7, #20]
        LoRaMacCommandsRemoveCmd( curElement );
 8012c42:	69f8      	ldr	r0, [r7, #28]
 8012c44:	f7ff ff2e 	bl	8012aa4 <LoRaMacCommandsRemoveCmd>
        curElement = nextElement;
 8012c48:	697b      	ldr	r3, [r7, #20]
 8012c4a:	61fb      	str	r3, [r7, #28]
    while( curElement != NULL )
 8012c4c:	69fb      	ldr	r3, [r7, #28]
 8012c4e:	2b00      	cmp	r3, #0
 8012c50:	d1f4      	bne.n	8012c3c <LoRaMacCommandsSerializeCmds+0x7c>
    }

    // Fetch the effective size of the mac commands
    LoRaMacCommandsGetSizeSerializedCmds( effectiveSize );
 8012c52:	68b8      	ldr	r0, [r7, #8]
 8012c54:	f7ff ff9e 	bl	8012b94 <LoRaMacCommandsGetSizeSerializedCmds>

    return LORAMAC_COMMANDS_SUCCESS;
 8012c58:	2300      	movs	r3, #0
}
 8012c5a:	4618      	mov	r0, r3
 8012c5c:	3720      	adds	r7, #32
 8012c5e:	46bd      	mov	sp, r7
 8012c60:	bd80      	pop	{r7, pc}
 8012c62:	bf00      	nop
 8012c64:	20001730 	.word	0x20001730

08012c68 <LoRaMacCommandsStickyCmdsPending>:

LoRaMacCommandStatus_t LoRaMacCommandsStickyCmdsPending( bool* cmdsPending )
{
 8012c68:	b480      	push	{r7}
 8012c6a:	b085      	sub	sp, #20
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
    if( cmdsPending == NULL )
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2b00      	cmp	r3, #0
 8012c74:	d101      	bne.n	8012c7a <LoRaMacCommandsStickyCmdsPending+0x12>
    {
        return LORAMAC_COMMANDS_ERROR_NPE;
 8012c76:	2301      	movs	r3, #1
 8012c78:	e016      	b.n	8012ca8 <LoRaMacCommandsStickyCmdsPending+0x40>
    }
    MacCommand_t* curElement;
    curElement = CommandsCtx.MacCommandList.First;
 8012c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8012cb4 <LoRaMacCommandsStickyCmdsPending+0x4c>)
 8012c7c:	681b      	ldr	r3, [r3, #0]
 8012c7e:	60fb      	str	r3, [r7, #12]

    *cmdsPending = false;
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2200      	movs	r2, #0
 8012c84:	701a      	strb	r2, [r3, #0]

    // Loop through all elements
    while( curElement != NULL )
 8012c86:	e00b      	b.n	8012ca0 <LoRaMacCommandsStickyCmdsPending+0x38>
    {
        if( curElement->IsSticky == true )
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	7b1b      	ldrb	r3, [r3, #12]
 8012c8c:	2b00      	cmp	r3, #0
 8012c8e:	d004      	beq.n	8012c9a <LoRaMacCommandsStickyCmdsPending+0x32>
        {
            // Found one sticky MAC command
            *cmdsPending = true;
 8012c90:	687b      	ldr	r3, [r7, #4]
 8012c92:	2201      	movs	r2, #1
 8012c94:	701a      	strb	r2, [r3, #0]
            return LORAMAC_COMMANDS_SUCCESS;
 8012c96:	2300      	movs	r3, #0
 8012c98:	e006      	b.n	8012ca8 <LoRaMacCommandsStickyCmdsPending+0x40>
        }
        curElement = curElement->Next;
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	681b      	ldr	r3, [r3, #0]
 8012c9e:	60fb      	str	r3, [r7, #12]
    while( curElement != NULL )
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	2b00      	cmp	r3, #0
 8012ca4:	d1f0      	bne.n	8012c88 <LoRaMacCommandsStickyCmdsPending+0x20>
    }

    return LORAMAC_COMMANDS_SUCCESS;
 8012ca6:	2300      	movs	r3, #0
}
 8012ca8:	4618      	mov	r0, r3
 8012caa:	3714      	adds	r7, #20
 8012cac:	46bd      	mov	sp, r7
 8012cae:	bc80      	pop	{r7}
 8012cb0:	4770      	bx	lr
 8012cb2:	bf00      	nop
 8012cb4:	20001730 	.word	0x20001730

08012cb8 <LoRaMacCommandsGetCmdSize>:

uint8_t LoRaMacCommandsGetCmdSize( uint8_t cid )
{
 8012cb8:	b480      	push	{r7}
 8012cba:	b085      	sub	sp, #20
 8012cbc:	af00      	add	r7, sp, #0
 8012cbe:	4603      	mov	r3, r0
 8012cc0:	71fb      	strb	r3, [r7, #7]
    uint8_t cidSize = 0;
 8012cc2:	2300      	movs	r3, #0
 8012cc4:	73fb      	strb	r3, [r7, #15]

    // Decode Frame MAC commands
    switch( cid )
 8012cc6:	79fb      	ldrb	r3, [r7, #7]
 8012cc8:	3b02      	subs	r3, #2
 8012cca:	2b11      	cmp	r3, #17
 8012ccc:	d850      	bhi.n	8012d70 <LoRaMacCommandsGetCmdSize+0xb8>
 8012cce:	a201      	add	r2, pc, #4	@ (adr r2, 8012cd4 <LoRaMacCommandsGetCmdSize+0x1c>)
 8012cd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012cd4:	08012d1d 	.word	0x08012d1d
 8012cd8:	08012d23 	.word	0x08012d23
 8012cdc:	08012d29 	.word	0x08012d29
 8012ce0:	08012d2f 	.word	0x08012d2f
 8012ce4:	08012d35 	.word	0x08012d35
 8012ce8:	08012d3b 	.word	0x08012d3b
 8012cec:	08012d41 	.word	0x08012d41
 8012cf0:	08012d47 	.word	0x08012d47
 8012cf4:	08012d4d 	.word	0x08012d4d
 8012cf8:	08012d71 	.word	0x08012d71
 8012cfc:	08012d71 	.word	0x08012d71
 8012d00:	08012d53 	.word	0x08012d53
 8012d04:	08012d71 	.word	0x08012d71
 8012d08:	08012d71 	.word	0x08012d71
 8012d0c:	08012d59 	.word	0x08012d59
 8012d10:	08012d5f 	.word	0x08012d5f
 8012d14:	08012d65 	.word	0x08012d65
 8012d18:	08012d6b 	.word	0x08012d6b
    {
        case SRV_MAC_LINK_CHECK_ANS:
        {
            // cid + Margin + GwCnt
            cidSize = 3;
 8012d1c:	2303      	movs	r3, #3
 8012d1e:	73fb      	strb	r3, [r7, #15]
            break;
 8012d20:	e027      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_LINK_ADR_REQ:
        {
            // cid + DataRate_TXPower + ChMask (2) + Redundancy
            cidSize = 5;
 8012d22:	2305      	movs	r3, #5
 8012d24:	73fb      	strb	r3, [r7, #15]
            break;
 8012d26:	e024      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DUTY_CYCLE_REQ:
        {
            // cid + DutyCyclePL
            cidSize = 2;
 8012d28:	2302      	movs	r3, #2
 8012d2a:	73fb      	strb	r3, [r7, #15]
            break;
 8012d2c:	e021      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_PARAM_SETUP_REQ:
        {
            // cid + DLsettings + Frequency (3)
            cidSize = 5;
 8012d2e:	2305      	movs	r3, #5
 8012d30:	73fb      	strb	r3, [r7, #15]
            break;
 8012d32:	e01e      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEV_STATUS_REQ:
        {
            // cid
            cidSize = 1;
 8012d34:	2301      	movs	r3, #1
 8012d36:	73fb      	strb	r3, [r7, #15]
            break;
 8012d38:	e01b      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_NEW_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3) + DrRange
            cidSize = 6;
 8012d3a:	2306      	movs	r3, #6
 8012d3c:	73fb      	strb	r3, [r7, #15]
            break;
 8012d3e:	e018      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_RX_TIMING_SETUP_REQ:
        {
            // cid + Settings
            cidSize = 2;
 8012d40:	2302      	movs	r3, #2
 8012d42:	73fb      	strb	r3, [r7, #15]
            break;
 8012d44:	e015      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_TX_PARAM_SETUP_REQ:
        {
            // cid + EIRP_DwellTime
            cidSize = 2;
 8012d46:	2302      	movs	r3, #2
 8012d48:	73fb      	strb	r3, [r7, #15]
            break;
 8012d4a:	e012      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DL_CHANNEL_REQ:
        {
            // cid + ChIndex + Frequency (3)
            cidSize = 5;
 8012d4c:	2305      	movs	r3, #5
 8012d4e:	73fb      	strb	r3, [r7, #15]
            break;
 8012d50:	e00f      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_DEVICE_TIME_ANS:
        {
            // cid + Seconds (4) + Fractional seconds (1)
            cidSize = 6;
 8012d52:	2306      	movs	r3, #6
 8012d54:	73fb      	strb	r3, [r7, #15]
            break;
 8012d56:	e00c      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_INFO_ANS:
        {
            // cid
            cidSize = 1;
 8012d58:	2301      	movs	r3, #1
 8012d5a:	73fb      	strb	r3, [r7, #15]
            break;
 8012d5c:	e009      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_PING_SLOT_CHANNEL_REQ:
        {
            // cid + Frequency (3) + DR
            cidSize = 5;
 8012d5e:	2305      	movs	r3, #5
 8012d60:	73fb      	strb	r3, [r7, #15]
            break;
 8012d62:	e006      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_TIMING_ANS:
        {
            // cid + TimingDelay (2) + Channel
            cidSize = 4;
 8012d64:	2304      	movs	r3, #4
 8012d66:	73fb      	strb	r3, [r7, #15]
            break;
 8012d68:	e003      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        case SRV_MAC_BEACON_FREQ_REQ:
        {
            // cid + Frequency (3)
            cidSize = 4;
 8012d6a:	2304      	movs	r3, #4
 8012d6c:	73fb      	strb	r3, [r7, #15]
            break;
 8012d6e:	e000      	b.n	8012d72 <LoRaMacCommandsGetCmdSize+0xba>
        }
        default:
        {
            // Unknown command. ABORT MAC commands processing
            break;
 8012d70:	bf00      	nop
        }
    }
    return cidSize;
 8012d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8012d74:	4618      	mov	r0, r3
 8012d76:	3714      	adds	r7, #20
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bc80      	pop	{r7}
 8012d7c:	4770      	bx	lr
 8012d7e:	bf00      	nop

08012d80 <IncreaseBufferPointer>:
 * Module context.
 */
static LoRaMacConfirmQueueCtx_t ConfirmQueueCtx;

static MlmeConfirmQueue_t* IncreaseBufferPointer( MlmeConfirmQueue_t* bufferPointer )
{
 8012d80:	b480      	push	{r7}
 8012d82:	b083      	sub	sp, #12
 8012d84:	af00      	add	r7, sp, #0
 8012d86:	6078      	str	r0, [r7, #4]
    if( bufferPointer == &ConfirmQueueCtx.Nvm.MlmeConfirmQueue[LORA_MAC_MLME_CONFIRM_QUEUE_LEN - 1] )
 8012d88:	687b      	ldr	r3, [r7, #4]
 8012d8a:	4a07      	ldr	r2, [pc, #28]	@ (8012da8 <IncreaseBufferPointer+0x28>)
 8012d8c:	4293      	cmp	r3, r2
 8012d8e:	d102      	bne.n	8012d96 <IncreaseBufferPointer+0x16>
    {
        // Reset to the first element
        bufferPointer = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012d90:	4b06      	ldr	r3, [pc, #24]	@ (8012dac <IncreaseBufferPointer+0x2c>)
 8012d92:	607b      	str	r3, [r7, #4]
 8012d94:	e002      	b.n	8012d9c <IncreaseBufferPointer+0x1c>
    }
    else
    {
        // Increase
        bufferPointer++;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	3304      	adds	r3, #4
 8012d9a:	607b      	str	r3, [r7, #4]
    }
    return bufferPointer;
 8012d9c:	687b      	ldr	r3, [r7, #4]
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	370c      	adds	r7, #12
 8012da2:	46bd      	mov	sp, r7
 8012da4:	bc80      	pop	{r7}
 8012da6:	4770      	bx	lr
 8012da8:	20001958 	.word	0x20001958
 8012dac:	20001948 	.word	0x20001948

08012db0 <IsListEmpty>:
    }
    return bufferPointer;
}

static bool IsListEmpty( uint8_t count )
{
 8012db0:	b480      	push	{r7}
 8012db2:	b083      	sub	sp, #12
 8012db4:	af00      	add	r7, sp, #0
 8012db6:	4603      	mov	r3, r0
 8012db8:	71fb      	strb	r3, [r7, #7]
    if( count == 0 )
 8012dba:	79fb      	ldrb	r3, [r7, #7]
 8012dbc:	2b00      	cmp	r3, #0
 8012dbe:	d101      	bne.n	8012dc4 <IsListEmpty+0x14>
    {
        return true;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	e000      	b.n	8012dc6 <IsListEmpty+0x16>
    }
    return false;
 8012dc4:	2300      	movs	r3, #0
}
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	370c      	adds	r7, #12
 8012dca:	46bd      	mov	sp, r7
 8012dcc:	bc80      	pop	{r7}
 8012dce:	4770      	bx	lr

08012dd0 <IsListFull>:

static bool IsListFull( uint8_t count )
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b083      	sub	sp, #12
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	4603      	mov	r3, r0
 8012dd8:	71fb      	strb	r3, [r7, #7]
    if( count >= LORA_MAC_MLME_CONFIRM_QUEUE_LEN )
 8012dda:	79fb      	ldrb	r3, [r7, #7]
 8012ddc:	2b04      	cmp	r3, #4
 8012dde:	d901      	bls.n	8012de4 <IsListFull+0x14>
    {
        return true;
 8012de0:	2301      	movs	r3, #1
 8012de2:	e000      	b.n	8012de6 <IsListFull+0x16>
    }
    return false;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	370c      	adds	r7, #12
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bc80      	pop	{r7}
 8012dee:	4770      	bx	lr

08012df0 <GetElement>:

static MlmeConfirmQueue_t* GetElement( Mlme_t request, MlmeConfirmQueue_t* bufferStart, MlmeConfirmQueue_t* bufferEnd )
{
 8012df0:	b580      	push	{r7, lr}
 8012df2:	b086      	sub	sp, #24
 8012df4:	af00      	add	r7, sp, #0
 8012df6:	4603      	mov	r3, r0
 8012df8:	60b9      	str	r1, [r7, #8]
 8012dfa:	607a      	str	r2, [r7, #4]
 8012dfc:	73fb      	strb	r3, [r7, #15]
    MlmeConfirmQueue_t* element = bufferStart;
 8012dfe:	68bb      	ldr	r3, [r7, #8]
 8012e00:	617b      	str	r3, [r7, #20]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012e02:	4b13      	ldr	r3, [pc, #76]	@ (8012e50 <GetElement+0x60>)
 8012e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e08:	4618      	mov	r0, r3
 8012e0a:	f7ff ffd1 	bl	8012db0 <IsListEmpty>
 8012e0e:	4603      	mov	r3, r0
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	d001      	beq.n	8012e18 <GetElement+0x28>
    {
        return NULL;
 8012e14:	2300      	movs	r3, #0
 8012e16:	e017      	b.n	8012e48 <GetElement+0x58>
    }

    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012e18:	2300      	movs	r3, #0
 8012e1a:	74fb      	strb	r3, [r7, #19]
 8012e1c:	e00d      	b.n	8012e3a <GetElement+0x4a>
    {
        if( element->Request == request )
 8012e1e:	697b      	ldr	r3, [r7, #20]
 8012e20:	781b      	ldrb	r3, [r3, #0]
 8012e22:	7bfa      	ldrb	r2, [r7, #15]
 8012e24:	429a      	cmp	r2, r3
 8012e26:	d101      	bne.n	8012e2c <GetElement+0x3c>
        {
            // We have found the element
            return element;
 8012e28:	697b      	ldr	r3, [r7, #20]
 8012e2a:	e00d      	b.n	8012e48 <GetElement+0x58>
        }
        element = IncreaseBufferPointer( element );
 8012e2c:	6978      	ldr	r0, [r7, #20]
 8012e2e:	f7ff ffa7 	bl	8012d80 <IncreaseBufferPointer>
 8012e32:	6178      	str	r0, [r7, #20]
    for( uint8_t elementCnt = 0; elementCnt < ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt; elementCnt++ )
 8012e34:	7cfb      	ldrb	r3, [r7, #19]
 8012e36:	3301      	adds	r3, #1
 8012e38:	74fb      	strb	r3, [r7, #19]
 8012e3a:	4b05      	ldr	r3, [pc, #20]	@ (8012e50 <GetElement+0x60>)
 8012e3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012e40:	7cfa      	ldrb	r2, [r7, #19]
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d3eb      	bcc.n	8012e1e <GetElement+0x2e>
    }

    return NULL;
 8012e46:	2300      	movs	r3, #0
}
 8012e48:	4618      	mov	r0, r3
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	2000193c 	.word	0x2000193c

08012e54 <LoRaMacConfirmQueueInit>:

void LoRaMacConfirmQueueInit( LoRaMacPrimitives_t* primitives )
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	6078      	str	r0, [r7, #4]
    ConfirmQueueCtx.Primitives = primitives;
 8012e5c:	4a0c      	ldr	r2, [pc, #48]	@ (8012e90 <LoRaMacConfirmQueueInit+0x3c>)
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	6013      	str	r3, [r2, #0]

    // Init counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt = 0;
 8012e62:	4b0b      	ldr	r3, [pc, #44]	@ (8012e90 <LoRaMacConfirmQueueInit+0x3c>)
 8012e64:	2200      	movs	r2, #0
 8012e66:	f883 2020 	strb.w	r2, [r3, #32]

    // Init buffer
    ConfirmQueueCtx.BufferStart = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e6a:	4b09      	ldr	r3, [pc, #36]	@ (8012e90 <LoRaMacConfirmQueueInit+0x3c>)
 8012e6c:	4a09      	ldr	r2, [pc, #36]	@ (8012e94 <LoRaMacConfirmQueueInit+0x40>)
 8012e6e:	605a      	str	r2, [r3, #4]
    ConfirmQueueCtx.BufferEnd = ConfirmQueueCtx.Nvm.MlmeConfirmQueue;
 8012e70:	4b07      	ldr	r3, [pc, #28]	@ (8012e90 <LoRaMacConfirmQueueInit+0x3c>)
 8012e72:	4a08      	ldr	r2, [pc, #32]	@ (8012e94 <LoRaMacConfirmQueueInit+0x40>)
 8012e74:	609a      	str	r2, [r3, #8]

    memset1( ( uint8_t* )ConfirmQueueCtx.Nvm.MlmeConfirmQueue, 0xFF, sizeof( ConfirmQueueCtx.Nvm.MlmeConfirmQueue ) );
 8012e76:	2214      	movs	r2, #20
 8012e78:	21ff      	movs	r1, #255	@ 0xff
 8012e7a:	4806      	ldr	r0, [pc, #24]	@ (8012e94 <LoRaMacConfirmQueueInit+0x40>)
 8012e7c:	f003 fe2a 	bl	8016ad4 <memset1>

    // Common status
    ConfirmQueueCtx.Nvm.CommonStatus = LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012e80:	4b03      	ldr	r3, [pc, #12]	@ (8012e90 <LoRaMacConfirmQueueInit+0x3c>)
 8012e82:	2201      	movs	r2, #1
 8012e84:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
}
 8012e88:	bf00      	nop
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}
 8012e90:	2000193c 	.word	0x2000193c
 8012e94:	20001948 	.word	0x20001948

08012e98 <LoRaMacConfirmQueueAdd>:

bool LoRaMacConfirmQueueAdd( MlmeConfirmQueue_t* mlmeConfirm )
{
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b082      	sub	sp, #8
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	6078      	str	r0, [r7, #4]
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012ea0:	4b19      	ldr	r3, [pc, #100]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012ea2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ea6:	4618      	mov	r0, r3
 8012ea8:	f7ff ff92 	bl	8012dd0 <IsListFull>
 8012eac:	4603      	mov	r3, r0
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d001      	beq.n	8012eb6 <LoRaMacConfirmQueueAdd+0x1e>
    {
        // Protect the buffer against overwrites
        return false;
 8012eb2:	2300      	movs	r3, #0
 8012eb4:	e024      	b.n	8012f00 <LoRaMacConfirmQueueAdd+0x68>
    }

    // Add the element to the ring buffer
    ConfirmQueueCtx.BufferEnd->Request = mlmeConfirm->Request;
 8012eb6:	4b14      	ldr	r3, [pc, #80]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012eb8:	689b      	ldr	r3, [r3, #8]
 8012eba:	687a      	ldr	r2, [r7, #4]
 8012ebc:	7812      	ldrb	r2, [r2, #0]
 8012ebe:	701a      	strb	r2, [r3, #0]
    ConfirmQueueCtx.BufferEnd->Status = mlmeConfirm->Status;
 8012ec0:	4b11      	ldr	r3, [pc, #68]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012ec2:	689b      	ldr	r3, [r3, #8]
 8012ec4:	687a      	ldr	r2, [r7, #4]
 8012ec6:	7852      	ldrb	r2, [r2, #1]
 8012ec8:	705a      	strb	r2, [r3, #1]
    ConfirmQueueCtx.BufferEnd->RestrictCommonReadyToHandle = mlmeConfirm->RestrictCommonReadyToHandle;
 8012eca:	4b0f      	ldr	r3, [pc, #60]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012ecc:	689b      	ldr	r3, [r3, #8]
 8012ece:	687a      	ldr	r2, [r7, #4]
 8012ed0:	78d2      	ldrb	r2, [r2, #3]
 8012ed2:	70da      	strb	r2, [r3, #3]
#if (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000300 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = false;
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
    ConfirmQueueCtx.BufferEnd->ReadyToHandle = mlmeConfirm->ReadyToHandle;
 8012ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012ed6:	689b      	ldr	r3, [r3, #8]
 8012ed8:	687a      	ldr	r2, [r7, #4]
 8012eda:	7892      	ldrb	r2, [r2, #2]
 8012edc:	709a      	strb	r2, [r3, #2]
#endif /* LORAMAC_VERSION */
    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt++;
 8012ede:	4b0a      	ldr	r3, [pc, #40]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012ee0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	b2da      	uxtb	r2, r3
 8012ee8:	4b07      	ldr	r3, [pc, #28]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012eea:	f883 2020 	strb.w	r2, [r3, #32]
    // Update end pointer
    ConfirmQueueCtx.BufferEnd = IncreaseBufferPointer( ConfirmQueueCtx.BufferEnd );
 8012eee:	4b06      	ldr	r3, [pc, #24]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012ef0:	689b      	ldr	r3, [r3, #8]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7ff ff44 	bl	8012d80 <IncreaseBufferPointer>
 8012ef8:	4603      	mov	r3, r0
 8012efa:	4a03      	ldr	r2, [pc, #12]	@ (8012f08 <LoRaMacConfirmQueueAdd+0x70>)
 8012efc:	6093      	str	r3, [r2, #8]

    return true;
 8012efe:	2301      	movs	r3, #1
}
 8012f00:	4618      	mov	r0, r3
 8012f02:	3708      	adds	r7, #8
 8012f04:	46bd      	mov	sp, r7
 8012f06:	bd80      	pop	{r7, pc}
 8012f08:	2000193c 	.word	0x2000193c

08012f0c <LoRaMacConfirmQueueRemoveFirst>:

    return true;
}

bool LoRaMacConfirmQueueRemoveFirst( void )
{
 8012f0c:	b580      	push	{r7, lr}
 8012f0e:	af00      	add	r7, sp, #0
    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8012f10:	4b0e      	ldr	r3, [pc, #56]	@ (8012f4c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f12:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f16:	4618      	mov	r0, r3
 8012f18:	f7ff ff4a 	bl	8012db0 <IsListEmpty>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	2b00      	cmp	r3, #0
 8012f20:	d001      	beq.n	8012f26 <LoRaMacConfirmQueueRemoveFirst+0x1a>
    {
        return false;
 8012f22:	2300      	movs	r3, #0
 8012f24:	e010      	b.n	8012f48 <LoRaMacConfirmQueueRemoveFirst+0x3c>
    }

    // Increase counter
    ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt--;
 8012f26:	4b09      	ldr	r3, [pc, #36]	@ (8012f4c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f2c:	3b01      	subs	r3, #1
 8012f2e:	b2da      	uxtb	r2, r3
 8012f30:	4b06      	ldr	r3, [pc, #24]	@ (8012f4c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f32:	f883 2020 	strb.w	r2, [r3, #32]
    // Update start pointer
    ConfirmQueueCtx.BufferStart = IncreaseBufferPointer( ConfirmQueueCtx.BufferStart );
 8012f36:	4b05      	ldr	r3, [pc, #20]	@ (8012f4c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f38:	685b      	ldr	r3, [r3, #4]
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	f7ff ff20 	bl	8012d80 <IncreaseBufferPointer>
 8012f40:	4603      	mov	r3, r0
 8012f42:	4a02      	ldr	r2, [pc, #8]	@ (8012f4c <LoRaMacConfirmQueueRemoveFirst+0x40>)
 8012f44:	6053      	str	r3, [r2, #4]

    return true;
 8012f46:	2301      	movs	r3, #1
}
 8012f48:	4618      	mov	r0, r3
 8012f4a:	bd80      	pop	{r7, pc}
 8012f4c:	2000193c 	.word	0x2000193c

08012f50 <LoRaMacConfirmQueueSetStatus>:

void LoRaMacConfirmQueueSetStatus( LoRaMacEventInfoStatus_t status, Mlme_t request )
{
 8012f50:	b580      	push	{r7, lr}
 8012f52:	b084      	sub	sp, #16
 8012f54:	af00      	add	r7, sp, #0
 8012f56:	4603      	mov	r3, r0
 8012f58:	460a      	mov	r2, r1
 8012f5a:	71fb      	strb	r3, [r7, #7]
 8012f5c:	4613      	mov	r3, r2
 8012f5e:	71bb      	strb	r3, [r7, #6]
    MlmeConfirmQueue_t* element = NULL;
 8012f60:	2300      	movs	r3, #0
 8012f62:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012f64:	4b10      	ldr	r3, [pc, #64]	@ (8012fa8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7ff ff20 	bl	8012db0 <IsListEmpty>
 8012f70:	4603      	mov	r3, r0
 8012f72:	f083 0301 	eor.w	r3, r3, #1
 8012f76:	b2db      	uxtb	r3, r3
 8012f78:	2b00      	cmp	r3, #0
 8012f7a:	d011      	beq.n	8012fa0 <LoRaMacConfirmQueueSetStatus+0x50>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8012fa8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f7e:	6859      	ldr	r1, [r3, #4]
 8012f80:	4b09      	ldr	r3, [pc, #36]	@ (8012fa8 <LoRaMacConfirmQueueSetStatus+0x58>)
 8012f82:	689a      	ldr	r2, [r3, #8]
 8012f84:	79bb      	ldrb	r3, [r7, #6]
 8012f86:	4618      	mov	r0, r3
 8012f88:	f7ff ff32 	bl	8012df0 <GetElement>
 8012f8c:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d005      	beq.n	8012fa0 <LoRaMacConfirmQueueSetStatus+0x50>
        {
            element->Status = status;
 8012f94:	68fb      	ldr	r3, [r7, #12]
 8012f96:	79fa      	ldrb	r2, [r7, #7]
 8012f98:	705a      	strb	r2, [r3, #1]
            element->ReadyToHandle = true;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	2201      	movs	r2, #1
 8012f9e:	709a      	strb	r2, [r3, #2]
        }
    }
}
 8012fa0:	bf00      	nop
 8012fa2:	3710      	adds	r7, #16
 8012fa4:	46bd      	mov	sp, r7
 8012fa6:	bd80      	pop	{r7, pc}
 8012fa8:	2000193c 	.word	0x2000193c

08012fac <LoRaMacConfirmQueueGetStatus>:

LoRaMacEventInfoStatus_t LoRaMacConfirmQueueGetStatus( Mlme_t request )
{
 8012fac:	b580      	push	{r7, lr}
 8012fae:	b084      	sub	sp, #16
 8012fb0:	af00      	add	r7, sp, #0
 8012fb2:	4603      	mov	r3, r0
 8012fb4:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = NULL;
 8012fb6:	2300      	movs	r3, #0
 8012fb8:	60fb      	str	r3, [r7, #12]

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8012fba:	4b10      	ldr	r3, [pc, #64]	@ (8012ffc <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fbc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f7ff fef5 	bl	8012db0 <IsListEmpty>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	f083 0301 	eor.w	r3, r3, #1
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d00e      	beq.n	8012ff0 <LoRaMacConfirmQueueGetStatus+0x44>
    {
        element = GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd );
 8012fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8012ffc <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fd4:	6859      	ldr	r1, [r3, #4]
 8012fd6:	4b09      	ldr	r3, [pc, #36]	@ (8012ffc <LoRaMacConfirmQueueGetStatus+0x50>)
 8012fd8:	689a      	ldr	r2, [r3, #8]
 8012fda:	79fb      	ldrb	r3, [r7, #7]
 8012fdc:	4618      	mov	r0, r3
 8012fde:	f7ff ff07 	bl	8012df0 <GetElement>
 8012fe2:	60f8      	str	r0, [r7, #12]
        if( element != NULL )
 8012fe4:	68fb      	ldr	r3, [r7, #12]
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d002      	beq.n	8012ff0 <LoRaMacConfirmQueueGetStatus+0x44>
        {
            return element->Status;
 8012fea:	68fb      	ldr	r3, [r7, #12]
 8012fec:	785b      	ldrb	r3, [r3, #1]
 8012fee:	e000      	b.n	8012ff2 <LoRaMacConfirmQueueGetStatus+0x46>
        }
    }
    return LORAMAC_EVENT_INFO_STATUS_ERROR;
 8012ff0:	2301      	movs	r3, #1
}
 8012ff2:	4618      	mov	r0, r3
 8012ff4:	3710      	adds	r7, #16
 8012ff6:	46bd      	mov	sp, r7
 8012ff8:	bd80      	pop	{r7, pc}
 8012ffa:	bf00      	nop
 8012ffc:	2000193c 	.word	0x2000193c

08013000 <LoRaMacConfirmQueueSetStatusCmn>:

void LoRaMacConfirmQueueSetStatusCmn( LoRaMacEventInfoStatus_t status )
{
 8013000:	b580      	push	{r7, lr}
 8013002:	b084      	sub	sp, #16
 8013004:	af00      	add	r7, sp, #0
 8013006:	4603      	mov	r3, r0
 8013008:	71fb      	strb	r3, [r7, #7]
    MlmeConfirmQueue_t* element = ConfirmQueueCtx.BufferStart;
 801300a:	4b16      	ldr	r3, [pc, #88]	@ (8013064 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	60fb      	str	r3, [r7, #12]

    ConfirmQueueCtx.Nvm.CommonStatus = status;
 8013010:	4a14      	ldr	r2, [pc, #80]	@ (8013064 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013012:	79fb      	ldrb	r3, [r7, #7]
 8013014:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

    if( IsListEmpty( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == false )
 8013018:	4b12      	ldr	r3, [pc, #72]	@ (8013064 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 801301a:	f893 3020 	ldrb.w	r3, [r3, #32]
 801301e:	4618      	mov	r0, r3
 8013020:	f7ff fec6 	bl	8012db0 <IsListEmpty>
 8013024:	4603      	mov	r3, r0
 8013026:	f083 0301 	eor.w	r3, r3, #1
 801302a:	b2db      	uxtb	r3, r3
 801302c:	2b00      	cmp	r3, #0
 801302e:	d015      	beq.n	801305c <LoRaMacConfirmQueueSetStatusCmn+0x5c>
    {
        do
        {
            element->Status = status;
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	79fa      	ldrb	r2, [r7, #7]
 8013034:	705a      	strb	r2, [r3, #1]
            // Set the status if it is allowed to set it with a call to
            // LoRaMacConfirmQueueSetStatusCmn.
            if( element->RestrictCommonReadyToHandle == false )
 8013036:	68fb      	ldr	r3, [r7, #12]
 8013038:	78db      	ldrb	r3, [r3, #3]
 801303a:	f083 0301 	eor.w	r3, r3, #1
 801303e:	b2db      	uxtb	r3, r3
 8013040:	2b00      	cmp	r3, #0
 8013042:	d002      	beq.n	801304a <LoRaMacConfirmQueueSetStatusCmn+0x4a>
            {
                element->ReadyToHandle = true;
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	2201      	movs	r2, #1
 8013048:	709a      	strb	r2, [r3, #2]
            }
            element = IncreaseBufferPointer( element );
 801304a:	68f8      	ldr	r0, [r7, #12]
 801304c:	f7ff fe98 	bl	8012d80 <IncreaseBufferPointer>
 8013050:	60f8      	str	r0, [r7, #12]
        }while( element != ConfirmQueueCtx.BufferEnd );
 8013052:	4b04      	ldr	r3, [pc, #16]	@ (8013064 <LoRaMacConfirmQueueSetStatusCmn+0x64>)
 8013054:	689b      	ldr	r3, [r3, #8]
 8013056:	68fa      	ldr	r2, [r7, #12]
 8013058:	429a      	cmp	r2, r3
 801305a:	d1e9      	bne.n	8013030 <LoRaMacConfirmQueueSetStatusCmn+0x30>
    }
}
 801305c:	bf00      	nop
 801305e:	3710      	adds	r7, #16
 8013060:	46bd      	mov	sp, r7
 8013062:	bd80      	pop	{r7, pc}
 8013064:	2000193c 	.word	0x2000193c

08013068 <LoRaMacConfirmQueueIsCmdActive>:
{
    return ConfirmQueueCtx.Nvm.CommonStatus;
}

bool LoRaMacConfirmQueueIsCmdActive( Mlme_t request )
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b082      	sub	sp, #8
 801306c:	af00      	add	r7, sp, #0
 801306e:	4603      	mov	r3, r0
 8013070:	71fb      	strb	r3, [r7, #7]
    if( GetElement( request, ConfirmQueueCtx.BufferStart, ConfirmQueueCtx.BufferEnd ) != NULL )
 8013072:	4b09      	ldr	r3, [pc, #36]	@ (8013098 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013074:	6859      	ldr	r1, [r3, #4]
 8013076:	4b08      	ldr	r3, [pc, #32]	@ (8013098 <LoRaMacConfirmQueueIsCmdActive+0x30>)
 8013078:	689a      	ldr	r2, [r3, #8]
 801307a:	79fb      	ldrb	r3, [r7, #7]
 801307c:	4618      	mov	r0, r3
 801307e:	f7ff feb7 	bl	8012df0 <GetElement>
 8013082:	4603      	mov	r3, r0
 8013084:	2b00      	cmp	r3, #0
 8013086:	d001      	beq.n	801308c <LoRaMacConfirmQueueIsCmdActive+0x24>
    {
        return true;
 8013088:	2301      	movs	r3, #1
 801308a:	e000      	b.n	801308e <LoRaMacConfirmQueueIsCmdActive+0x26>
    }
    return false;
 801308c:	2300      	movs	r3, #0
}
 801308e:	4618      	mov	r0, r3
 8013090:	3708      	adds	r7, #8
 8013092:	46bd      	mov	sp, r7
 8013094:	bd80      	pop	{r7, pc}
 8013096:	bf00      	nop
 8013098:	2000193c 	.word	0x2000193c

0801309c <LoRaMacConfirmQueueHandleCb>:

void LoRaMacConfirmQueueHandleCb( MlmeConfirm_t* mlmeConfirm )
{
 801309c:	b580      	push	{r7, lr}
 801309e:	b084      	sub	sp, #16
 80130a0:	af00      	add	r7, sp, #0
 80130a2:	6078      	str	r0, [r7, #4]
    uint8_t nbElements = ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 80130a4:	4b22      	ldr	r3, [pc, #136]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130a6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80130aa:	73bb      	strb	r3, [r7, #14]
    bool readyToHandle = false;
 80130ac:	2300      	movs	r3, #0
 80130ae:	737b      	strb	r3, [r7, #13]
    MlmeConfirmQueue_t mlmeConfirmToStore;

    for( uint8_t i = 0; i < nbElements; i++ )
 80130b0:	2300      	movs	r3, #0
 80130b2:	73fb      	strb	r3, [r7, #15]
 80130b4:	e032      	b.n	801311c <LoRaMacConfirmQueueHandleCb+0x80>
    {
        mlmeConfirm->MlmeRequest = ConfirmQueueCtx.BufferStart->Request;
 80130b6:	4b1e      	ldr	r3, [pc, #120]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130b8:	685b      	ldr	r3, [r3, #4]
 80130ba:	781a      	ldrb	r2, [r3, #0]
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	701a      	strb	r2, [r3, #0]
        mlmeConfirm->Status = ConfirmQueueCtx.BufferStart->Status;
 80130c0:	4b1b      	ldr	r3, [pc, #108]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130c2:	685b      	ldr	r3, [r3, #4]
 80130c4:	785a      	ldrb	r2, [r3, #1]
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	705a      	strb	r2, [r3, #1]
        readyToHandle = ConfirmQueueCtx.BufferStart->ReadyToHandle;
 80130ca:	4b19      	ldr	r3, [pc, #100]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130cc:	685b      	ldr	r3, [r3, #4]
 80130ce:	789b      	ldrb	r3, [r3, #2]
 80130d0:	737b      	strb	r3, [r7, #13]

        if( readyToHandle == true )
 80130d2:	7b7b      	ldrb	r3, [r7, #13]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d005      	beq.n	80130e4 <LoRaMacConfirmQueueHandleCb+0x48>
        {
            ConfirmQueueCtx.Primitives->MacMlmeConfirm( mlmeConfirm );
 80130d8:	4b15      	ldr	r3, [pc, #84]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	689b      	ldr	r3, [r3, #8]
 80130de:	6878      	ldr	r0, [r7, #4]
 80130e0:	4798      	blx	r3
 80130e2:	e00b      	b.n	80130fc <LoRaMacConfirmQueueHandleCb+0x60>
        }
        else
        {
            // The request is not processed yet. Store the state.
            mlmeConfirmToStore.Request = ConfirmQueueCtx.BufferStart->Request;
 80130e4:	4b12      	ldr	r3, [pc, #72]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130e6:	685b      	ldr	r3, [r3, #4]
 80130e8:	781b      	ldrb	r3, [r3, #0]
 80130ea:	723b      	strb	r3, [r7, #8]
            mlmeConfirmToStore.Status = ConfirmQueueCtx.BufferStart->Status;
 80130ec:	4b10      	ldr	r3, [pc, #64]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130ee:	685b      	ldr	r3, [r3, #4]
 80130f0:	785b      	ldrb	r3, [r3, #1]
 80130f2:	727b      	strb	r3, [r7, #9]
            mlmeConfirmToStore.RestrictCommonReadyToHandle = ConfirmQueueCtx.BufferStart->RestrictCommonReadyToHandle;
 80130f4:	4b0e      	ldr	r3, [pc, #56]	@ (8013130 <LoRaMacConfirmQueueHandleCb+0x94>)
 80130f6:	685b      	ldr	r3, [r3, #4]
 80130f8:	78db      	ldrb	r3, [r3, #3]
 80130fa:	72fb      	strb	r3, [r7, #11]
        }

        // Increase the pointer afterwards to prevent overwrites
        LoRaMacConfirmQueueRemoveFirst( );
 80130fc:	f7ff ff06 	bl	8012f0c <LoRaMacConfirmQueueRemoveFirst>

        if( readyToHandle == false )
 8013100:	7b7b      	ldrb	r3, [r7, #13]
 8013102:	f083 0301 	eor.w	r3, r3, #1
 8013106:	b2db      	uxtb	r3, r3
 8013108:	2b00      	cmp	r3, #0
 801310a:	d004      	beq.n	8013116 <LoRaMacConfirmQueueHandleCb+0x7a>
        {
            // Add a request which has not been finished again to the queue
            LoRaMacConfirmQueueAdd( &mlmeConfirmToStore );
 801310c:	f107 0308 	add.w	r3, r7, #8
 8013110:	4618      	mov	r0, r3
 8013112:	f7ff fec1 	bl	8012e98 <LoRaMacConfirmQueueAdd>
    for( uint8_t i = 0; i < nbElements; i++ )
 8013116:	7bfb      	ldrb	r3, [r7, #15]
 8013118:	3301      	adds	r3, #1
 801311a:	73fb      	strb	r3, [r7, #15]
 801311c:	7bfa      	ldrb	r2, [r7, #15]
 801311e:	7bbb      	ldrb	r3, [r7, #14]
 8013120:	429a      	cmp	r2, r3
 8013122:	d3c8      	bcc.n	80130b6 <LoRaMacConfirmQueueHandleCb+0x1a>
        }
    }
}
 8013124:	bf00      	nop
 8013126:	bf00      	nop
 8013128:	3710      	adds	r7, #16
 801312a:	46bd      	mov	sp, r7
 801312c:	bd80      	pop	{r7, pc}
 801312e:	bf00      	nop
 8013130:	2000193c 	.word	0x2000193c

08013134 <LoRaMacConfirmQueueGetCnt>:

uint8_t LoRaMacConfirmQueueGetCnt( void )
{
 8013134:	b480      	push	{r7}
 8013136:	af00      	add	r7, sp, #0
    return ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt;
 8013138:	4b03      	ldr	r3, [pc, #12]	@ (8013148 <LoRaMacConfirmQueueGetCnt+0x14>)
 801313a:	f893 3020 	ldrb.w	r3, [r3, #32]
}
 801313e:	4618      	mov	r0, r3
 8013140:	46bd      	mov	sp, r7
 8013142:	bc80      	pop	{r7}
 8013144:	4770      	bx	lr
 8013146:	bf00      	nop
 8013148:	2000193c 	.word	0x2000193c

0801314c <LoRaMacConfirmQueueIsFull>:

bool LoRaMacConfirmQueueIsFull( void )
{
 801314c:	b580      	push	{r7, lr}
 801314e:	af00      	add	r7, sp, #0
    if( IsListFull( ConfirmQueueCtx.Nvm.MlmeConfirmQueueCnt ) == true )
 8013150:	4b06      	ldr	r3, [pc, #24]	@ (801316c <LoRaMacConfirmQueueIsFull+0x20>)
 8013152:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013156:	4618      	mov	r0, r3
 8013158:	f7ff fe3a 	bl	8012dd0 <IsListFull>
 801315c:	4603      	mov	r3, r0
 801315e:	2b00      	cmp	r3, #0
 8013160:	d001      	beq.n	8013166 <LoRaMacConfirmQueueIsFull+0x1a>
    {
        return true;
 8013162:	2301      	movs	r3, #1
 8013164:	e000      	b.n	8013168 <LoRaMacConfirmQueueIsFull+0x1c>
    }
    else
    {
        return false;
 8013166:	2300      	movs	r3, #0
    }
}
 8013168:	4618      	mov	r0, r3
 801316a:	bd80      	pop	{r7, pc}
 801316c:	2000193c 	.word	0x2000193c

08013170 <PayloadEncrypt>:
 * \param [in] size             - Size of data
 * \param [in,out] buffer       - Data buffer
 * \retval                      - Status of the operation
 */
static LoRaMacCryptoStatus_t PayloadEncrypt( uint8_t* buffer, int16_t size, KeyIdentifier_t keyID, uint32_t address, uint8_t dir, uint32_t frameCounter )
{
 8013170:	b580      	push	{r7, lr}
 8013172:	b08e      	sub	sp, #56	@ 0x38
 8013174:	af00      	add	r7, sp, #0
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	607b      	str	r3, [r7, #4]
 801317a:	460b      	mov	r3, r1
 801317c:	817b      	strh	r3, [r7, #10]
 801317e:	4613      	mov	r3, r2
 8013180:	727b      	strb	r3, [r7, #9]
    if( buffer == 0 )
 8013182:	68fb      	ldr	r3, [r7, #12]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d101      	bne.n	801318c <PayloadEncrypt+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013188:	2309      	movs	r3, #9
 801318a:	e086      	b.n	801329a <PayloadEncrypt+0x12a>
    }

    uint8_t bufferIndex = 0;
 801318c:	2300      	movs	r3, #0
 801318e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint16_t ctr = 1;
 8013192:	2301      	movs	r3, #1
 8013194:	86bb      	strh	r3, [r7, #52]	@ 0x34
    uint8_t sBlock[16] = { 0 };
 8013196:	2300      	movs	r3, #0
 8013198:	623b      	str	r3, [r7, #32]
 801319a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801319e:	2200      	movs	r2, #0
 80131a0:	601a      	str	r2, [r3, #0]
 80131a2:	605a      	str	r2, [r3, #4]
 80131a4:	609a      	str	r2, [r3, #8]
    uint8_t aBlock[16] = { 0 };
 80131a6:	2300      	movs	r3, #0
 80131a8:	613b      	str	r3, [r7, #16]
 80131aa:	f107 0314 	add.w	r3, r7, #20
 80131ae:	2200      	movs	r2, #0
 80131b0:	601a      	str	r2, [r3, #0]
 80131b2:	605a      	str	r2, [r3, #4]
 80131b4:	609a      	str	r2, [r3, #8]

    aBlock[0] = 0x01;
 80131b6:	2301      	movs	r3, #1
 80131b8:	743b      	strb	r3, [r7, #16]

    aBlock[5] = dir;
 80131ba:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80131be:	757b      	strb	r3, [r7, #21]

    aBlock[6] = address & 0xFF;
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	b2db      	uxtb	r3, r3
 80131c4:	75bb      	strb	r3, [r7, #22]
    aBlock[7] = ( address >> 8 ) & 0xFF;
 80131c6:	687b      	ldr	r3, [r7, #4]
 80131c8:	0a1b      	lsrs	r3, r3, #8
 80131ca:	b2db      	uxtb	r3, r3
 80131cc:	75fb      	strb	r3, [r7, #23]
    aBlock[8] = ( address >> 16 ) & 0xFF;
 80131ce:	687b      	ldr	r3, [r7, #4]
 80131d0:	0c1b      	lsrs	r3, r3, #16
 80131d2:	b2db      	uxtb	r3, r3
 80131d4:	763b      	strb	r3, [r7, #24]
    aBlock[9] = ( address >> 24 ) & 0xFF;
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	0e1b      	lsrs	r3, r3, #24
 80131da:	b2db      	uxtb	r3, r3
 80131dc:	767b      	strb	r3, [r7, #25]

    aBlock[10] = frameCounter & 0xFF;
 80131de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131e0:	b2db      	uxtb	r3, r3
 80131e2:	76bb      	strb	r3, [r7, #26]
    aBlock[11] = ( frameCounter >> 8 ) & 0xFF;
 80131e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131e6:	0a1b      	lsrs	r3, r3, #8
 80131e8:	b2db      	uxtb	r3, r3
 80131ea:	76fb      	strb	r3, [r7, #27]
    aBlock[12] = ( frameCounter >> 16 ) & 0xFF;
 80131ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131ee:	0c1b      	lsrs	r3, r3, #16
 80131f0:	b2db      	uxtb	r3, r3
 80131f2:	773b      	strb	r3, [r7, #28]
    aBlock[13] = ( frameCounter >> 24 ) & 0xFF;
 80131f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131f6:	0e1b      	lsrs	r3, r3, #24
 80131f8:	b2db      	uxtb	r3, r3
 80131fa:	777b      	strb	r3, [r7, #29]

    while( size > 0 )
 80131fc:	e048      	b.n	8013290 <PayloadEncrypt+0x120>
    {
        aBlock[15] = ctr & 0xFF;
 80131fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013200:	b2db      	uxtb	r3, r3
 8013202:	77fb      	strb	r3, [r7, #31]
        ctr++;
 8013204:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8013206:	3301      	adds	r3, #1
 8013208:	86bb      	strh	r3, [r7, #52]	@ 0x34
        if( SecureElementAesEncrypt( aBlock, 16, keyID, sBlock ) != SECURE_ELEMENT_SUCCESS )
 801320a:	f107 0320 	add.w	r3, r7, #32
 801320e:	7a7a      	ldrb	r2, [r7, #9]
 8013210:	f107 0010 	add.w	r0, r7, #16
 8013214:	2110      	movs	r1, #16
 8013216:	f7f8 fcea 	bl	800bbee <SecureElementAesEncrypt>
 801321a:	4603      	mov	r3, r0
 801321c:	2b00      	cmp	r3, #0
 801321e:	d001      	beq.n	8013224 <PayloadEncrypt+0xb4>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013220:	230e      	movs	r3, #14
 8013222:	e03a      	b.n	801329a <PayloadEncrypt+0x12a>
        }

        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013224:	2300      	movs	r3, #0
 8013226:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801322a:	e01e      	b.n	801326a <PayloadEncrypt+0xfa>
        {
            buffer[bufferIndex + i] = buffer[bufferIndex + i] ^ sBlock[i];
 801322c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8013230:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013234:	4413      	add	r3, r2
 8013236:	461a      	mov	r2, r3
 8013238:	68fb      	ldr	r3, [r7, #12]
 801323a:	4413      	add	r3, r2
 801323c:	7819      	ldrb	r1, [r3, #0]
 801323e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013242:	3338      	adds	r3, #56	@ 0x38
 8013244:	443b      	add	r3, r7
 8013246:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 801324a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 801324e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013252:	4403      	add	r3, r0
 8013254:	4618      	mov	r0, r3
 8013256:	68fb      	ldr	r3, [r7, #12]
 8013258:	4403      	add	r3, r0
 801325a:	404a      	eors	r2, r1
 801325c:	b2d2      	uxtb	r2, r2
 801325e:	701a      	strb	r2, [r3, #0]
        for( uint8_t i = 0; i < ( ( size > 16 ) ? 16 : size ); i++ )
 8013260:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013264:	3301      	adds	r3, #1
 8013266:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 801326a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 801326e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8013272:	2a10      	cmp	r2, #16
 8013274:	bfa8      	it	ge
 8013276:	2210      	movge	r2, #16
 8013278:	b212      	sxth	r2, r2
 801327a:	4293      	cmp	r3, r2
 801327c:	dbd6      	blt.n	801322c <PayloadEncrypt+0xbc>
        }
        size -= 16;
 801327e:	897b      	ldrh	r3, [r7, #10]
 8013280:	3b10      	subs	r3, #16
 8013282:	b29b      	uxth	r3, r3
 8013284:	817b      	strh	r3, [r7, #10]
        bufferIndex += 16;
 8013286:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801328a:	3310      	adds	r3, #16
 801328c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    while( size > 0 )
 8013290:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8013294:	2b00      	cmp	r3, #0
 8013296:	dcb2      	bgt.n	80131fe <PayloadEncrypt+0x8e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013298:	2300      	movs	r3, #0
}
 801329a:	4618      	mov	r0, r3
 801329c:	3738      	adds	r7, #56	@ 0x38
 801329e:	46bd      	mov	sp, r7
 80132a0:	bd80      	pop	{r7, pc}

080132a2 <PrepareB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in,out] b0         - B0 block
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t PrepareB0( uint16_t msgLen, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint8_t* b0 )
{
 80132a2:	b490      	push	{r4, r7}
 80132a4:	b082      	sub	sp, #8
 80132a6:	af00      	add	r7, sp, #0
 80132a8:	4604      	mov	r4, r0
 80132aa:	4608      	mov	r0, r1
 80132ac:	4611      	mov	r1, r2
 80132ae:	461a      	mov	r2, r3
 80132b0:	4623      	mov	r3, r4
 80132b2:	80fb      	strh	r3, [r7, #6]
 80132b4:	4603      	mov	r3, r0
 80132b6:	717b      	strb	r3, [r7, #5]
 80132b8:	460b      	mov	r3, r1
 80132ba:	713b      	strb	r3, [r7, #4]
 80132bc:	4613      	mov	r3, r2
 80132be:	70fb      	strb	r3, [r7, #3]
    if( b0 == 0 )
 80132c0:	69bb      	ldr	r3, [r7, #24]
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	d101      	bne.n	80132ca <PrepareB0+0x28>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80132c6:	2309      	movs	r3, #9
 80132c8:	e04e      	b.n	8013368 <PrepareB0+0xc6>
    }

    b0[0] = 0x49;
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	2249      	movs	r2, #73	@ 0x49
 80132ce:	701a      	strb	r2, [r3, #0]
    }
    else
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    /* ST_WORAROUND_END */
    {
        b0[1] = 0x00;
 80132d0:	69bb      	ldr	r3, [r7, #24]
 80132d2:	3301      	adds	r3, #1
 80132d4:	2200      	movs	r2, #0
 80132d6:	701a      	strb	r2, [r3, #0]
        b0[2] = 0x00;
 80132d8:	69bb      	ldr	r3, [r7, #24]
 80132da:	3302      	adds	r3, #2
 80132dc:	2200      	movs	r2, #0
 80132de:	701a      	strb	r2, [r3, #0]
    }

    b0[3] = 0x00;
 80132e0:	69bb      	ldr	r3, [r7, #24]
 80132e2:	3303      	adds	r3, #3
 80132e4:	2200      	movs	r2, #0
 80132e6:	701a      	strb	r2, [r3, #0]
    b0[4] = 0x00;
 80132e8:	69bb      	ldr	r3, [r7, #24]
 80132ea:	3304      	adds	r3, #4
 80132ec:	2200      	movs	r2, #0
 80132ee:	701a      	strb	r2, [r3, #0]

    b0[5] = dir;
 80132f0:	69bb      	ldr	r3, [r7, #24]
 80132f2:	3305      	adds	r3, #5
 80132f4:	78fa      	ldrb	r2, [r7, #3]
 80132f6:	701a      	strb	r2, [r3, #0]

    b0[6] = devAddr & 0xFF;
 80132f8:	69bb      	ldr	r3, [r7, #24]
 80132fa:	3306      	adds	r3, #6
 80132fc:	693a      	ldr	r2, [r7, #16]
 80132fe:	b2d2      	uxtb	r2, r2
 8013300:	701a      	strb	r2, [r3, #0]
    b0[7] = ( devAddr >> 8 ) & 0xFF;
 8013302:	693b      	ldr	r3, [r7, #16]
 8013304:	0a1a      	lsrs	r2, r3, #8
 8013306:	69bb      	ldr	r3, [r7, #24]
 8013308:	3307      	adds	r3, #7
 801330a:	b2d2      	uxtb	r2, r2
 801330c:	701a      	strb	r2, [r3, #0]
    b0[8] = ( devAddr >> 16 ) & 0xFF;
 801330e:	693b      	ldr	r3, [r7, #16]
 8013310:	0c1a      	lsrs	r2, r3, #16
 8013312:	69bb      	ldr	r3, [r7, #24]
 8013314:	3308      	adds	r3, #8
 8013316:	b2d2      	uxtb	r2, r2
 8013318:	701a      	strb	r2, [r3, #0]
    b0[9] = ( devAddr >> 24 ) & 0xFF;
 801331a:	693b      	ldr	r3, [r7, #16]
 801331c:	0e1a      	lsrs	r2, r3, #24
 801331e:	69bb      	ldr	r3, [r7, #24]
 8013320:	3309      	adds	r3, #9
 8013322:	b2d2      	uxtb	r2, r2
 8013324:	701a      	strb	r2, [r3, #0]

    b0[10] = fCnt & 0xFF;
 8013326:	69bb      	ldr	r3, [r7, #24]
 8013328:	330a      	adds	r3, #10
 801332a:	697a      	ldr	r2, [r7, #20]
 801332c:	b2d2      	uxtb	r2, r2
 801332e:	701a      	strb	r2, [r3, #0]
    b0[11] = ( fCnt >> 8 ) & 0xFF;
 8013330:	697b      	ldr	r3, [r7, #20]
 8013332:	0a1a      	lsrs	r2, r3, #8
 8013334:	69bb      	ldr	r3, [r7, #24]
 8013336:	330b      	adds	r3, #11
 8013338:	b2d2      	uxtb	r2, r2
 801333a:	701a      	strb	r2, [r3, #0]
    b0[12] = ( fCnt >> 16 ) & 0xFF;
 801333c:	697b      	ldr	r3, [r7, #20]
 801333e:	0c1a      	lsrs	r2, r3, #16
 8013340:	69bb      	ldr	r3, [r7, #24]
 8013342:	330c      	adds	r3, #12
 8013344:	b2d2      	uxtb	r2, r2
 8013346:	701a      	strb	r2, [r3, #0]
    b0[13] = ( fCnt >> 24 ) & 0xFF;
 8013348:	697b      	ldr	r3, [r7, #20]
 801334a:	0e1a      	lsrs	r2, r3, #24
 801334c:	69bb      	ldr	r3, [r7, #24]
 801334e:	330d      	adds	r3, #13
 8013350:	b2d2      	uxtb	r2, r2
 8013352:	701a      	strb	r2, [r3, #0]

    b0[14] = 0x00;
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	330e      	adds	r3, #14
 8013358:	2200      	movs	r2, #0
 801335a:	701a      	strb	r2, [r3, #0]

    b0[15] = msgLen & 0xFF;
 801335c:	69bb      	ldr	r3, [r7, #24]
 801335e:	330f      	adds	r3, #15
 8013360:	88fa      	ldrh	r2, [r7, #6]
 8013362:	b2d2      	uxtb	r2, r2
 8013364:	701a      	strb	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013366:	2300      	movs	r3, #0
}
 8013368:	4618      	mov	r0, r3
 801336a:	3708      	adds	r7, #8
 801336c:	46bd      	mov	sp, r7
 801336e:	bc90      	pop	{r4, r7}
 8013370:	4770      	bx	lr

08013372 <ComputeCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [out] cmac          - Computed cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t ComputeCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t* cmac )
{
 8013372:	b590      	push	{r4, r7, lr}
 8013374:	b08b      	sub	sp, #44	@ 0x2c
 8013376:	af04      	add	r7, sp, #16
 8013378:	6078      	str	r0, [r7, #4]
 801337a:	4608      	mov	r0, r1
 801337c:	4611      	mov	r1, r2
 801337e:	461a      	mov	r2, r3
 8013380:	4603      	mov	r3, r0
 8013382:	807b      	strh	r3, [r7, #2]
 8013384:	460b      	mov	r3, r1
 8013386:	707b      	strb	r3, [r7, #1]
 8013388:	4613      	mov	r3, r2
 801338a:	703b      	strb	r3, [r7, #0]
    if( ( msg == 0 ) || ( cmac == 0 ) )
 801338c:	687b      	ldr	r3, [r7, #4]
 801338e:	2b00      	cmp	r3, #0
 8013390:	d002      	beq.n	8013398 <ComputeCmacB0+0x26>
 8013392:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013394:	2b00      	cmp	r3, #0
 8013396:	d101      	bne.n	801339c <ComputeCmacB0+0x2a>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013398:	2309      	movs	r3, #9
 801339a:	e024      	b.n	80133e6 <ComputeCmacB0+0x74>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801339c:	887b      	ldrh	r3, [r7, #2]
 801339e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80133a2:	d901      	bls.n	80133a8 <ComputeCmacB0+0x36>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 80133a4:	230d      	movs	r3, #13
 80133a6:	e01e      	b.n	80133e6 <ComputeCmacB0+0x74>
    }

    uint8_t micBuff[MIC_BLOCK_BX_SIZE];

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 80133a8:	f897 4028 	ldrb.w	r4, [r7, #40]	@ 0x28
 80133ac:	783a      	ldrb	r2, [r7, #0]
 80133ae:	7879      	ldrb	r1, [r7, #1]
 80133b0:	8878      	ldrh	r0, [r7, #2]
 80133b2:	f107 0308 	add.w	r3, r7, #8
 80133b6:	9302      	str	r3, [sp, #8]
 80133b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80133ba:	9301      	str	r3, [sp, #4]
 80133bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80133be:	9300      	str	r3, [sp, #0]
 80133c0:	4623      	mov	r3, r4
 80133c2:	f7ff ff6e 	bl	80132a2 <PrepareB0>

    if( SecureElementComputeAesCmac( micBuff, msg, len, keyID, cmac ) != SECURE_ELEMENT_SUCCESS )
 80133c6:	7879      	ldrb	r1, [r7, #1]
 80133c8:	887a      	ldrh	r2, [r7, #2]
 80133ca:	f107 0008 	add.w	r0, r7, #8
 80133ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80133d0:	9300      	str	r3, [sp, #0]
 80133d2:	460b      	mov	r3, r1
 80133d4:	6879      	ldr	r1, [r7, #4]
 80133d6:	f7f8 fbbd 	bl	800bb54 <SecureElementComputeAesCmac>
 80133da:	4603      	mov	r3, r0
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d001      	beq.n	80133e4 <ComputeCmacB0+0x72>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80133e0:	230e      	movs	r3, #14
 80133e2:	e000      	b.n	80133e6 <ComputeCmacB0+0x74>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 80133e4:	2300      	movs	r3, #0
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	371c      	adds	r7, #28
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd90      	pop	{r4, r7, pc}

080133ee <VerifyCmacB0>:
 * \param [in] fCnt           - Frame counter
 * \param [in] expectedCmac   - Expected cmac
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t VerifyCmacB0( uint8_t* msg, uint16_t len, KeyIdentifier_t keyID, bool isAck, uint8_t dir, uint32_t devAddr, uint32_t fCnt, uint32_t expectedCmac )
{
 80133ee:	b590      	push	{r4, r7, lr}
 80133f0:	b0cd      	sub	sp, #308	@ 0x134
 80133f2:	af04      	add	r7, sp, #16
 80133f4:	f507 7490 	add.w	r4, r7, #288	@ 0x120
 80133f8:	f5a4 748e 	sub.w	r4, r4, #284	@ 0x11c
 80133fc:	6020      	str	r0, [r4, #0]
 80133fe:	460c      	mov	r4, r1
 8013400:	4610      	mov	r0, r2
 8013402:	4619      	mov	r1, r3
 8013404:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013408:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801340c:	4622      	mov	r2, r4
 801340e:	801a      	strh	r2, [r3, #0]
 8013410:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013414:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013418:	4602      	mov	r2, r0
 801341a:	701a      	strb	r2, [r3, #0]
 801341c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013420:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8013424:	460a      	mov	r2, r1
 8013426:	701a      	strb	r2, [r3, #0]
    if( msg == 0 )
 8013428:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801342c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d101      	bne.n	801343a <VerifyCmacB0+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013436:	2309      	movs	r3, #9
 8013438:	e063      	b.n	8013502 <VerifyCmacB0+0x114>
    }
    if( len > CRYPTO_MAXMESSAGE_SIZE )
 801343a:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801343e:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 8013442:	881b      	ldrh	r3, [r3, #0]
 8013444:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013448:	d901      	bls.n	801344e <VerifyCmacB0+0x60>
    {
        return LORAMAC_CRYPTO_ERROR_BUF_SIZE;
 801344a:	230d      	movs	r3, #13
 801344c:	e059      	b.n	8013502 <VerifyCmacB0+0x114>
    }

    uint8_t micBuff[CRYPTO_BUFFER_SIZE];
    memset1( micBuff, 0, CRYPTO_BUFFER_SIZE );
 801344e:	f107 030c 	add.w	r3, r7, #12
 8013452:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8013456:	2100      	movs	r1, #0
 8013458:	4618      	mov	r0, r3
 801345a:	f003 fb3b 	bl	8016ad4 <memset1>

    // Initialize the first Block
    PrepareB0( len, keyID, isAck, dir, devAddr, fCnt, micBuff );
 801345e:	f897 4130 	ldrb.w	r4, [r7, #304]	@ 0x130
 8013462:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013466:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 801346a:	781a      	ldrb	r2, [r3, #0]
 801346c:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 8013470:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 8013474:	7819      	ldrb	r1, [r3, #0]
 8013476:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 801347a:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 801347e:	8818      	ldrh	r0, [r3, #0]
 8013480:	f107 030c 	add.w	r3, r7, #12
 8013484:	9302      	str	r3, [sp, #8]
 8013486:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 801348a:	9301      	str	r3, [sp, #4]
 801348c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	4623      	mov	r3, r4
 8013494:	f7ff ff05 	bl	80132a2 <PrepareB0>

    // Copy the given data to the mic computation buffer
    memcpy1( ( micBuff + MIC_BLOCK_BX_SIZE ), msg, len );
 8013498:	f107 030c 	add.w	r3, r7, #12
 801349c:	3310      	adds	r3, #16
 801349e:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 80134a2:	f5a2 728f 	sub.w	r2, r2, #286	@ 0x11e
 80134a6:	8812      	ldrh	r2, [r2, #0]
 80134a8:	f507 7190 	add.w	r1, r7, #288	@ 0x120
 80134ac:	f5a1 718e 	sub.w	r1, r1, #284	@ 0x11c
 80134b0:	6809      	ldr	r1, [r1, #0]
 80134b2:	4618      	mov	r0, r3
 80134b4:	f003 fad3 	bl	8016a5e <memcpy1>

    SecureElementStatus_t retval = SECURE_ELEMENT_ERROR;
 80134b8:	2306      	movs	r3, #6
 80134ba:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
    retval = SecureElementVerifyAesCmac( micBuff, ( len + MIC_BLOCK_BX_SIZE ), expectedCmac, keyID );
 80134be:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134c2:	f5a3 738f 	sub.w	r3, r3, #286	@ 0x11e
 80134c6:	881b      	ldrh	r3, [r3, #0]
 80134c8:	3310      	adds	r3, #16
 80134ca:	b299      	uxth	r1, r3
 80134cc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 80134d0:	f2a3 131f 	subw	r3, r3, #287	@ 0x11f
 80134d4:	781b      	ldrb	r3, [r3, #0]
 80134d6:	f107 000c 	add.w	r0, r7, #12
 80134da:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80134de:	f7f8 fb57 	bl	800bb90 <SecureElementVerifyAesCmac>
 80134e2:	4603      	mov	r3, r0
 80134e4:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

    if( retval == SECURE_ELEMENT_SUCCESS )
 80134e8:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d101      	bne.n	80134f4 <VerifyCmacB0+0x106>
    {
        return LORAMAC_CRYPTO_SUCCESS;
 80134f0:	2300      	movs	r3, #0
 80134f2:	e006      	b.n	8013502 <VerifyCmacB0+0x114>
    }
    else if( retval == SECURE_ELEMENT_FAIL_CMAC )
 80134f4:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 80134f8:	2b01      	cmp	r3, #1
 80134fa:	d101      	bne.n	8013500 <VerifyCmacB0+0x112>
    {
        return LORAMAC_CRYPTO_FAIL_MIC;
 80134fc:	2301      	movs	r3, #1
 80134fe:	e000      	b.n	8013502 <VerifyCmacB0+0x114>
    }

    return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013500:	230e      	movs	r3, #14
}
 8013502:	4618      	mov	r0, r3
 8013504:	f507 7792 	add.w	r7, r7, #292	@ 0x124
 8013508:	46bd      	mov	sp, r7
 801350a:	bd90      	pop	{r4, r7, pc}

0801350c <GetKeyAddrItem>:
 * \param [in] addrID         - Address identifier
 * \param [out] keyItem       - Key item reference
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t GetKeyAddrItem( AddressIdentifier_t addrID, KeyAddr_t** item )
{
 801350c:	b480      	push	{r7}
 801350e:	b085      	sub	sp, #20
 8013510:	af00      	add	r7, sp, #0
 8013512:	4603      	mov	r3, r0
 8013514:	6039      	str	r1, [r7, #0]
 8013516:	71fb      	strb	r3, [r7, #7]
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 8013518:	2300      	movs	r3, #0
 801351a:	73fb      	strb	r3, [r7, #15]
 801351c:	e011      	b.n	8013542 <GetKeyAddrItem+0x36>
    {
        if( KeyAddrList[i].AddrID == addrID )
 801351e:	7bfb      	ldrb	r3, [r7, #15]
 8013520:	4a0c      	ldr	r2, [pc, #48]	@ (8013554 <GetKeyAddrItem+0x48>)
 8013522:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013526:	79fa      	ldrb	r2, [r7, #7]
 8013528:	429a      	cmp	r2, r3
 801352a:	d107      	bne.n	801353c <GetKeyAddrItem+0x30>
        {
            *item = &( KeyAddrList[i] );
 801352c:	7bfb      	ldrb	r3, [r7, #15]
 801352e:	009b      	lsls	r3, r3, #2
 8013530:	4a08      	ldr	r2, [pc, #32]	@ (8013554 <GetKeyAddrItem+0x48>)
 8013532:	441a      	add	r2, r3
 8013534:	683b      	ldr	r3, [r7, #0]
 8013536:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_SUCCESS;
 8013538:	2300      	movs	r3, #0
 801353a:	e006      	b.n	801354a <GetKeyAddrItem+0x3e>
    for( uint8_t i = 0; i < NUM_OF_SEC_CTX; i++ )
 801353c:	7bfb      	ldrb	r3, [r7, #15]
 801353e:	3301      	adds	r3, #1
 8013540:	73fb      	strb	r3, [r7, #15]
 8013542:	7bfb      	ldrb	r3, [r7, #15]
 8013544:	2b01      	cmp	r3, #1
 8013546:	d9ea      	bls.n	801351e <GetKeyAddrItem+0x12>
        }
    }
    return LORAMAC_CRYPTO_ERROR_INVALID_ADDR_ID;
 8013548:	230b      	movs	r3, #11
}
 801354a:	4618      	mov	r0, r3
 801354c:	3714      	adds	r7, #20
 801354e:	46bd      	mov	sp, r7
 8013550:	bc80      	pop	{r7}
 8013552:	4770      	bx	lr
 8013554:	20000120 	.word	0x20000120

08013558 <DeriveSessionKey10x>:
 * \param [in] netID          - Network Identifier
 * \param [in] deviceNonce    - Device nonce
 * \retval                    - Status of the operation
 */
static LoRaMacCryptoStatus_t DeriveSessionKey10x( KeyIdentifier_t keyID, uint32_t joinNonce, uint32_t netID, uint16_t devNonce )
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b088      	sub	sp, #32
 801355c:	af00      	add	r7, sp, #0
 801355e:	60b9      	str	r1, [r7, #8]
 8013560:	607a      	str	r2, [r7, #4]
 8013562:	461a      	mov	r2, r3
 8013564:	4603      	mov	r3, r0
 8013566:	73fb      	strb	r3, [r7, #15]
 8013568:	4613      	mov	r3, r2
 801356a:	81bb      	strh	r3, [r7, #12]
    uint8_t compBase[16] = { 0 };
 801356c:	2300      	movs	r3, #0
 801356e:	613b      	str	r3, [r7, #16]
 8013570:	f107 0314 	add.w	r3, r7, #20
 8013574:	2200      	movs	r2, #0
 8013576:	601a      	str	r2, [r3, #0]
 8013578:	605a      	str	r2, [r3, #4]
 801357a:	609a      	str	r2, [r3, #8]

    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
    switch( keyID )
 801357c:	7bfb      	ldrb	r3, [r7, #15]
 801357e:	2b02      	cmp	r3, #2
 8013580:	d002      	beq.n	8013588 <DeriveSessionKey10x+0x30>
 8013582:	2b03      	cmp	r3, #3
 8013584:	d003      	beq.n	801358e <DeriveSessionKey10x+0x36>
 8013586:	e005      	b.n	8013594 <DeriveSessionKey10x+0x3c>
        case S_NWK_S_INT_KEY:
        case NWK_S_ENC_KEY:
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        case NWK_S_KEY:
#endif /* USE_LRWAN_1_1_X_CRYPTO */
            compBase[0] = 0x01;
 8013588:	2301      	movs	r3, #1
 801358a:	743b      	strb	r3, [r7, #16]
            break;
 801358c:	e004      	b.n	8013598 <DeriveSessionKey10x+0x40>
        case APP_S_KEY:
            compBase[0] = 0x02;
 801358e:	2302      	movs	r3, #2
 8013590:	743b      	strb	r3, [r7, #16]
            break;
 8013592:	e001      	b.n	8013598 <DeriveSessionKey10x+0x40>
        default:
            return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013594:	230a      	movs	r3, #10
 8013596:	e02a      	b.n	80135ee <DeriveSessionKey10x+0x96>
    }
   /* ST_WORKAROUND_END */

    compBase[1] = ( uint8_t )( ( joinNonce >> 0 ) & 0xFF );
 8013598:	68bb      	ldr	r3, [r7, #8]
 801359a:	b2db      	uxtb	r3, r3
 801359c:	747b      	strb	r3, [r7, #17]
    compBase[2] = ( uint8_t )( ( joinNonce >> 8 ) & 0xFF );
 801359e:	68bb      	ldr	r3, [r7, #8]
 80135a0:	0a1b      	lsrs	r3, r3, #8
 80135a2:	b2db      	uxtb	r3, r3
 80135a4:	74bb      	strb	r3, [r7, #18]
    compBase[3] = ( uint8_t )( ( joinNonce >> 16 ) & 0xFF );
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	0c1b      	lsrs	r3, r3, #16
 80135aa:	b2db      	uxtb	r3, r3
 80135ac:	74fb      	strb	r3, [r7, #19]

    compBase[4] = ( uint8_t )( ( netID >> 0 ) & 0xFF );
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	753b      	strb	r3, [r7, #20]
    compBase[5] = ( uint8_t )( ( netID >> 8 ) & 0xFF );
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	0a1b      	lsrs	r3, r3, #8
 80135b8:	b2db      	uxtb	r3, r3
 80135ba:	757b      	strb	r3, [r7, #21]
    compBase[6] = ( uint8_t )( ( netID >> 16 ) & 0xFF );
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	0c1b      	lsrs	r3, r3, #16
 80135c0:	b2db      	uxtb	r3, r3
 80135c2:	75bb      	strb	r3, [r7, #22]

    compBase[7] = ( uint8_t )( ( devNonce >> 0 ) & 0xFF );
 80135c4:	89bb      	ldrh	r3, [r7, #12]
 80135c6:	b2db      	uxtb	r3, r3
 80135c8:	75fb      	strb	r3, [r7, #23]
    compBase[8] = ( uint8_t )( ( devNonce >> 8 ) & 0xFF );
 80135ca:	89bb      	ldrh	r3, [r7, #12]
 80135cc:	0a1b      	lsrs	r3, r3, #8
 80135ce:	b29b      	uxth	r3, r3
 80135d0:	b2db      	uxtb	r3, r3
 80135d2:	763b      	strb	r3, [r7, #24]

    if( SecureElementDeriveAndStoreKey( compBase, NWK_KEY, keyID ) != SECURE_ELEMENT_SUCCESS )
 80135d4:	7bfa      	ldrb	r2, [r7, #15]
 80135d6:	f107 0310 	add.w	r3, r7, #16
 80135da:	2101      	movs	r1, #1
 80135dc:	4618      	mov	r0, r3
 80135de:	f7f8 fb6d 	bl	800bcbc <SecureElementDeriveAndStoreKey>
 80135e2:	4603      	mov	r3, r0
 80135e4:	2b00      	cmp	r3, #0
 80135e6:	d001      	beq.n	80135ec <DeriveSessionKey10x+0x94>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80135e8:	230e      	movs	r3, #14
 80135ea:	e000      	b.n	80135ee <DeriveSessionKey10x+0x96>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80135ec:	2300      	movs	r3, #0
}
 80135ee:	4618      	mov	r0, r3
 80135f0:	3720      	adds	r7, #32
 80135f2:	46bd      	mov	sp, r7
 80135f4:	bd80      	pop	{r7, pc}
	...

080135f8 <GetLastFcntDown>:
 * \param [in]    lastDown     - Last downlink counter value
 *
 * \retval                     - Status of the operation
 */
static LoRaMacCryptoStatus_t GetLastFcntDown( FCntIdentifier_t fCntID, uint32_t* lastDown )
{
 80135f8:	b480      	push	{r7}
 80135fa:	b083      	sub	sp, #12
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	4603      	mov	r3, r0
 8013600:	6039      	str	r1, [r7, #0]
 8013602:	71fb      	strb	r3, [r7, #7]
    if( lastDown == NULL )
 8013604:	683b      	ldr	r3, [r7, #0]
 8013606:	2b00      	cmp	r3, #0
 8013608:	d101      	bne.n	801360e <GetLastFcntDown+0x16>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 801360a:	2309      	movs	r3, #9
 801360c:	e03b      	b.n	8013686 <GetLastFcntDown+0x8e>
    }
    switch( fCntID )
 801360e:	79fb      	ldrb	r3, [r7, #7]
 8013610:	3b01      	subs	r3, #1
 8013612:	2b03      	cmp	r3, #3
 8013614:	d834      	bhi.n	8013680 <GetLastFcntDown+0x88>
 8013616:	a201      	add	r2, pc, #4	@ (adr r2, 801361c <GetLastFcntDown+0x24>)
 8013618:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801361c:	0801362d 	.word	0x0801362d
 8013620:	08013645 	.word	0x08013645
 8013624:	0801365d 	.word	0x0801365d
 8013628:	08013675 	.word	0x08013675
    {
        case N_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.NFCntDown;
 801362c:	4b18      	ldr	r3, [pc, #96]	@ (8013690 <GetLastFcntDown+0x98>)
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	691a      	ldr	r2, [r3, #16]
 8013632:	683b      	ldr	r3, [r7, #0]
 8013634:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.NFCntDown;
 8013636:	4b16      	ldr	r3, [pc, #88]	@ (8013690 <GetLastFcntDown+0x98>)
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	4b15      	ldr	r3, [pc, #84]	@ (8013690 <GetLastFcntDown+0x98>)
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	6912      	ldr	r2, [r2, #16]
 8013640:	621a      	str	r2, [r3, #32]
            break;
 8013642:	e01f      	b.n	8013684 <GetLastFcntDown+0x8c>
        case A_FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.AFCntDown;
 8013644:	4b12      	ldr	r3, [pc, #72]	@ (8013690 <GetLastFcntDown+0x98>)
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	695a      	ldr	r2, [r3, #20]
 801364a:	683b      	ldr	r3, [r7, #0]
 801364c:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.AFCntDown;
 801364e:	4b10      	ldr	r3, [pc, #64]	@ (8013690 <GetLastFcntDown+0x98>)
 8013650:	681a      	ldr	r2, [r3, #0]
 8013652:	4b0f      	ldr	r3, [pc, #60]	@ (8013690 <GetLastFcntDown+0x98>)
 8013654:	681b      	ldr	r3, [r3, #0]
 8013656:	6952      	ldr	r2, [r2, #20]
 8013658:	621a      	str	r2, [r3, #32]
            break;
 801365a:	e013      	b.n	8013684 <GetLastFcntDown+0x8c>
        case FCNT_DOWN:
            *lastDown = CryptoNvm->FCntList.FCntDown;
 801365c:	4b0c      	ldr	r3, [pc, #48]	@ (8013690 <GetLastFcntDown+0x98>)
 801365e:	681b      	ldr	r3, [r3, #0]
 8013660:	699a      	ldr	r2, [r3, #24]
 8013662:	683b      	ldr	r3, [r7, #0]
 8013664:	601a      	str	r2, [r3, #0]
            CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 8013666:	4b0a      	ldr	r3, [pc, #40]	@ (8013690 <GetLastFcntDown+0x98>)
 8013668:	681a      	ldr	r2, [r3, #0]
 801366a:	4b09      	ldr	r3, [pc, #36]	@ (8013690 <GetLastFcntDown+0x98>)
 801366c:	681b      	ldr	r3, [r3, #0]
 801366e:	6992      	ldr	r2, [r2, #24]
 8013670:	621a      	str	r2, [r3, #32]
            break;
 8013672:	e007      	b.n	8013684 <GetLastFcntDown+0x8c>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            *lastDown = CryptoNvm->FCntList.McFCntDown[0];
 8013674:	4b06      	ldr	r3, [pc, #24]	@ (8013690 <GetLastFcntDown+0x98>)
 8013676:	681b      	ldr	r3, [r3, #0]
 8013678:	69da      	ldr	r2, [r3, #28]
 801367a:	683b      	ldr	r3, [r7, #0]
 801367c:	601a      	str	r2, [r3, #0]
            break;
 801367e:	e001      	b.n	8013684 <GetLastFcntDown+0x8c>
        case MC_FCNT_DOWN_3:
            *lastDown = CryptoNvm->FCntList.McFCntDown[3];
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            return LORAMAC_CRYPTO_FAIL_FCNT_ID;
 8013680:	2305      	movs	r3, #5
 8013682:	e000      	b.n	8013686 <GetLastFcntDown+0x8e>
    }
    return LORAMAC_CRYPTO_SUCCESS;
 8013684:	2300      	movs	r3, #0
}
 8013686:	4618      	mov	r0, r3
 8013688:	370c      	adds	r7, #12
 801368a:	46bd      	mov	sp, r7
 801368c:	bc80      	pop	{r7}
 801368e:	4770      	bx	lr
 8013690:	20001960 	.word	0x20001960

08013694 <CheckFCntDown>:
 * \param [in]    currentDown  - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static bool CheckFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 8013694:	b580      	push	{r7, lr}
 8013696:	b084      	sub	sp, #16
 8013698:	af00      	add	r7, sp, #0
 801369a:	4603      	mov	r3, r0
 801369c:	6039      	str	r1, [r7, #0]
 801369e:	71fb      	strb	r3, [r7, #7]
    uint32_t lastDown = 0;
 80136a0:	2300      	movs	r3, #0
 80136a2:	60fb      	str	r3, [r7, #12]
    if( GetLastFcntDown( fCntID, &lastDown ) != LORAMAC_CRYPTO_SUCCESS )
 80136a4:	f107 020c 	add.w	r2, r7, #12
 80136a8:	79fb      	ldrb	r3, [r7, #7]
 80136aa:	4611      	mov	r1, r2
 80136ac:	4618      	mov	r0, r3
 80136ae:	f7ff ffa3 	bl	80135f8 <GetLastFcntDown>
 80136b2:	4603      	mov	r3, r0
 80136b4:	2b00      	cmp	r3, #0
 80136b6:	d001      	beq.n	80136bc <CheckFCntDown+0x28>
    {
        return false;
 80136b8:	2300      	movs	r3, #0
 80136ba:	e00a      	b.n	80136d2 <CheckFCntDown+0x3e>
    }
    if( ( currentDown > lastDown ) ||
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	683a      	ldr	r2, [r7, #0]
 80136c0:	429a      	cmp	r2, r3
 80136c2:	d803      	bhi.n	80136cc <CheckFCntDown+0x38>
        // For LoRaWAN 1.0.X only. Allow downlink frames of 0
        ( lastDown == FCNT_DOWN_INITAL_VALUE ) )
 80136c4:	68fb      	ldr	r3, [r7, #12]
    if( ( currentDown > lastDown ) ||
 80136c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80136ca:	d101      	bne.n	80136d0 <CheckFCntDown+0x3c>
    {
        return true;
 80136cc:	2301      	movs	r3, #1
 80136ce:	e000      	b.n	80136d2 <CheckFCntDown+0x3e>
    }
    else
    {
        return false;
 80136d0:	2300      	movs	r3, #0
    }
}
 80136d2:	4618      	mov	r0, r3
 80136d4:	3710      	adds	r7, #16
 80136d6:	46bd      	mov	sp, r7
 80136d8:	bd80      	pop	{r7, pc}
	...

080136dc <UpdateFCntDown>:
 * \param [in]    currentDown   - Current downlink counter value
 *
 * \retval                     - Status of the operation
 */
static void UpdateFCntDown( FCntIdentifier_t fCntID, uint32_t currentDown )
{
 80136dc:	b480      	push	{r7}
 80136de:	b083      	sub	sp, #12
 80136e0:	af00      	add	r7, sp, #0
 80136e2:	4603      	mov	r3, r0
 80136e4:	6039      	str	r1, [r7, #0]
 80136e6:	71fb      	strb	r3, [r7, #7]
    switch( fCntID )
 80136e8:	79fb      	ldrb	r3, [r7, #7]
 80136ea:	3b01      	subs	r3, #1
 80136ec:	2b03      	cmp	r3, #3
 80136ee:	d81f      	bhi.n	8013730 <UpdateFCntDown+0x54>
 80136f0:	a201      	add	r2, pc, #4	@ (adr r2, 80136f8 <UpdateFCntDown+0x1c>)
 80136f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80136f6:	bf00      	nop
 80136f8:	08013709 	.word	0x08013709
 80136fc:	08013713 	.word	0x08013713
 8013700:	0801371d 	.word	0x0801371d
 8013704:	08013727 	.word	0x08013727
    {
        case N_FCNT_DOWN:
            CryptoNvm->FCntList.NFCntDown = currentDown;
 8013708:	4b0c      	ldr	r3, [pc, #48]	@ (801373c <UpdateFCntDown+0x60>)
 801370a:	681b      	ldr	r3, [r3, #0]
 801370c:	683a      	ldr	r2, [r7, #0]
 801370e:	611a      	str	r2, [r3, #16]
            break;
 8013710:	e00f      	b.n	8013732 <UpdateFCntDown+0x56>
        case A_FCNT_DOWN:
            CryptoNvm->FCntList.AFCntDown = currentDown;
 8013712:	4b0a      	ldr	r3, [pc, #40]	@ (801373c <UpdateFCntDown+0x60>)
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	683a      	ldr	r2, [r7, #0]
 8013718:	615a      	str	r2, [r3, #20]
            break;
 801371a:	e00a      	b.n	8013732 <UpdateFCntDown+0x56>
        case FCNT_DOWN:
            CryptoNvm->FCntList.FCntDown = currentDown;
 801371c:	4b07      	ldr	r3, [pc, #28]	@ (801373c <UpdateFCntDown+0x60>)
 801371e:	681b      	ldr	r3, [r3, #0]
 8013720:	683a      	ldr	r2, [r7, #0]
 8013722:	619a      	str	r2, [r3, #24]
            break;
 8013724:	e005      	b.n	8013732 <UpdateFCntDown+0x56>
#if ( LORAMAC_MAX_MC_CTX > 0 )
        case MC_FCNT_DOWN_0:
            CryptoNvm->FCntList.McFCntDown[0] = currentDown;
 8013726:	4b05      	ldr	r3, [pc, #20]	@ (801373c <UpdateFCntDown+0x60>)
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	683a      	ldr	r2, [r7, #0]
 801372c:	61da      	str	r2, [r3, #28]
            break;
 801372e:	e000      	b.n	8013732 <UpdateFCntDown+0x56>
        case MC_FCNT_DOWN_3:
            CryptoNvm->FCntList.McFCntDown[3] = currentDown;
            break;
#endif /* LORAMAC_MAX_MC_CTX > 3 */
        default:
            break;
 8013730:	bf00      	nop
    }
}
 8013732:	bf00      	nop
 8013734:	370c      	adds	r7, #12
 8013736:	46bd      	mov	sp, r7
 8013738:	bc80      	pop	{r7}
 801373a:	4770      	bx	lr
 801373c:	20001960 	.word	0x20001960

08013740 <ResetFCnts>:

/*!
 * Resets the frame counters
 */
static void ResetFCnts( void )
{
 8013740:	b480      	push	{r7}
 8013742:	b083      	sub	sp, #12
 8013744:	af00      	add	r7, sp, #0
    CryptoNvm->FCntList.FCntUp = 0;
 8013746:	4b18      	ldr	r3, [pc, #96]	@ (80137a8 <ResetFCnts+0x68>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	2200      	movs	r2, #0
 801374c:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 801374e:	4b16      	ldr	r3, [pc, #88]	@ (80137a8 <ResetFCnts+0x68>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	f04f 32ff 	mov.w	r2, #4294967295
 8013756:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013758:	4b13      	ldr	r3, [pc, #76]	@ (80137a8 <ResetFCnts+0x68>)
 801375a:	681b      	ldr	r3, [r3, #0]
 801375c:	f04f 32ff 	mov.w	r2, #4294967295
 8013760:	615a      	str	r2, [r3, #20]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013762:	4b11      	ldr	r3, [pc, #68]	@ (80137a8 <ResetFCnts+0x68>)
 8013764:	681b      	ldr	r3, [r3, #0]
 8013766:	f04f 32ff 	mov.w	r2, #4294967295
 801376a:	619a      	str	r2, [r3, #24]
    CryptoNvm->LastDownFCnt = CryptoNvm->FCntList.FCntDown;
 801376c:	4b0e      	ldr	r3, [pc, #56]	@ (80137a8 <ResetFCnts+0x68>)
 801376e:	681a      	ldr	r2, [r3, #0]
 8013770:	4b0d      	ldr	r3, [pc, #52]	@ (80137a8 <ResetFCnts+0x68>)
 8013772:	681b      	ldr	r3, [r3, #0]
 8013774:	6992      	ldr	r2, [r2, #24]
 8013776:	621a      	str	r2, [r3, #32]

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013778:	2300      	movs	r3, #0
 801377a:	607b      	str	r3, [r7, #4]
 801377c:	e00b      	b.n	8013796 <ResetFCnts+0x56>
    {
        CryptoNvm->FCntList.McFCntDown[i] = FCNT_DOWN_INITAL_VALUE;
 801377e:	4b0a      	ldr	r3, [pc, #40]	@ (80137a8 <ResetFCnts+0x68>)
 8013780:	681a      	ldr	r2, [r3, #0]
 8013782:	687b      	ldr	r3, [r7, #4]
 8013784:	3306      	adds	r3, #6
 8013786:	009b      	lsls	r3, r3, #2
 8013788:	4413      	add	r3, r2
 801378a:	f04f 32ff 	mov.w	r2, #4294967295
 801378e:	605a      	str	r2, [r3, #4]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	3301      	adds	r3, #1
 8013794:	607b      	str	r3, [r7, #4]
 8013796:	687b      	ldr	r3, [r7, #4]
 8013798:	2b00      	cmp	r3, #0
 801379a:	ddf0      	ble.n	801377e <ResetFCnts+0x3e>
    }
}
 801379c:	bf00      	nop
 801379e:	bf00      	nop
 80137a0:	370c      	adds	r7, #12
 80137a2:	46bd      	mov	sp, r7
 80137a4:	bc80      	pop	{r7}
 80137a6:	4770      	bx	lr
 80137a8:	20001960 	.word	0x20001960

080137ac <LoRaMacCryptoInit>:

/*
 *  API functions
 */
LoRaMacCryptoStatus_t LoRaMacCryptoInit( LoRaMacCryptoNvmData_t* nvm )
{
 80137ac:	b580      	push	{r7, lr}
 80137ae:	b082      	sub	sp, #8
 80137b0:	af00      	add	r7, sp, #0
 80137b2:	6078      	str	r0, [r7, #4]
    if( nvm == NULL )
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d101      	bne.n	80137be <LoRaMacCryptoInit+0x12>
    {
        return LORAMAC_CRYPTO_FAIL_PARAM;
 80137ba:	2308      	movs	r3, #8
 80137bc:	e01c      	b.n	80137f8 <LoRaMacCryptoInit+0x4c>
    }

    // Assign non volatile context
    CryptoNvm = nvm;
 80137be:	4a10      	ldr	r2, [pc, #64]	@ (8013800 <LoRaMacCryptoInit+0x54>)
 80137c0:	687b      	ldr	r3, [r7, #4]
 80137c2:	6013      	str	r3, [r2, #0]

    // Initialize with default
    memset1( ( uint8_t* )CryptoNvm, 0, sizeof( LoRaMacCryptoNvmData_t ) );
 80137c4:	4b0e      	ldr	r3, [pc, #56]	@ (8013800 <LoRaMacCryptoInit+0x54>)
 80137c6:	681b      	ldr	r3, [r3, #0]
 80137c8:	2228      	movs	r2, #40	@ 0x28
 80137ca:	2100      	movs	r1, #0
 80137cc:	4618      	mov	r0, r3
 80137ce:	f003 f981 	bl	8016ad4 <memset1>

    // Set default LoRaWAN version
    CryptoNvm->LrWanVersion.Fields.Major = 1;
 80137d2:	4b0b      	ldr	r3, [pc, #44]	@ (8013800 <LoRaMacCryptoInit+0x54>)
 80137d4:	681b      	ldr	r3, [r3, #0]
 80137d6:	2201      	movs	r2, #1
 80137d8:	70da      	strb	r2, [r3, #3]
    CryptoNvm->LrWanVersion.Fields.Minor = 1;
 80137da:	4b09      	ldr	r3, [pc, #36]	@ (8013800 <LoRaMacCryptoInit+0x54>)
 80137dc:	681b      	ldr	r3, [r3, #0]
 80137de:	2201      	movs	r2, #1
 80137e0:	709a      	strb	r2, [r3, #2]
    CryptoNvm->LrWanVersion.Fields.Patch = 1;
 80137e2:	4b07      	ldr	r3, [pc, #28]	@ (8013800 <LoRaMacCryptoInit+0x54>)
 80137e4:	681b      	ldr	r3, [r3, #0]
 80137e6:	2201      	movs	r2, #1
 80137e8:	705a      	strb	r2, [r3, #1]
    CryptoNvm->LrWanVersion.Fields.Revision = 0;
 80137ea:	4b05      	ldr	r3, [pc, #20]	@ (8013800 <LoRaMacCryptoInit+0x54>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	2200      	movs	r2, #0
 80137f0:	701a      	strb	r2, [r3, #0]

    // Reset frame counters
    ResetFCnts( );
 80137f2:	f7ff ffa5 	bl	8013740 <ResetFCnts>

    return LORAMAC_CRYPTO_SUCCESS;
 80137f6:	2300      	movs	r3, #0
}
 80137f8:	4618      	mov	r0, r3
 80137fa:	3708      	adds	r7, #8
 80137fc:	46bd      	mov	sp, r7
 80137fe:	bd80      	pop	{r7, pc}
 8013800:	20001960 	.word	0x20001960

08013804 <LoRaMacCryptoSetLrWanVersion>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetLrWanVersion( Version_t version )
{
 8013804:	b480      	push	{r7}
 8013806:	b083      	sub	sp, #12
 8013808:	af00      	add	r7, sp, #0
 801380a:	6078      	str	r0, [r7, #4]
    CryptoNvm->LrWanVersion = version;
 801380c:	4b04      	ldr	r3, [pc, #16]	@ (8013820 <LoRaMacCryptoSetLrWanVersion+0x1c>)
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	687a      	ldr	r2, [r7, #4]
 8013812:	601a      	str	r2, [r3, #0]
    return LORAMAC_CRYPTO_SUCCESS;
 8013814:	2300      	movs	r3, #0
}
 8013816:	4618      	mov	r0, r3
 8013818:	370c      	adds	r7, #12
 801381a:	46bd      	mov	sp, r7
 801381c:	bc80      	pop	{r7}
 801381e:	4770      	bx	lr
 8013820:	20001960 	.word	0x20001960

08013824 <LoRaMacCryptoGetFCntUp>:

LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntUp( uint32_t* currentUp )
{
 8013824:	b480      	push	{r7}
 8013826:	b083      	sub	sp, #12
 8013828:	af00      	add	r7, sp, #0
 801382a:	6078      	str	r0, [r7, #4]
    if( currentUp == NULL )
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	2b00      	cmp	r3, #0
 8013830:	d101      	bne.n	8013836 <LoRaMacCryptoGetFCntUp+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013832:	2309      	movs	r3, #9
 8013834:	e006      	b.n	8013844 <LoRaMacCryptoGetFCntUp+0x20>
    }

    *currentUp = CryptoNvm->FCntList.FCntUp + 1;
 8013836:	4b06      	ldr	r3, [pc, #24]	@ (8013850 <LoRaMacCryptoGetFCntUp+0x2c>)
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	68db      	ldr	r3, [r3, #12]
 801383c:	1c5a      	adds	r2, r3, #1
 801383e:	687b      	ldr	r3, [r7, #4]
 8013840:	601a      	str	r2, [r3, #0]

    return LORAMAC_CRYPTO_SUCCESS;
 8013842:	2300      	movs	r3, #0
}
 8013844:	4618      	mov	r0, r3
 8013846:	370c      	adds	r7, #12
 8013848:	46bd      	mov	sp, r7
 801384a:	bc80      	pop	{r7}
 801384c:	4770      	bx	lr
 801384e:	bf00      	nop
 8013850:	20001960 	.word	0x20001960

08013854 <LoRaMacCryptoGetFCntDown>:

    return LORAMAC_CRYPTO_SUCCESS;
}
#elif (defined( LORAMAC_VERSION ) && ( LORAMAC_VERSION == 0x01000400 ))
LoRaMacCryptoStatus_t LoRaMacCryptoGetFCntDown( FCntIdentifier_t fCntID, uint32_t frameFcnt, uint32_t* currentDown )
{
 8013854:	b580      	push	{r7, lr}
 8013856:	b088      	sub	sp, #32
 8013858:	af00      	add	r7, sp, #0
 801385a:	4603      	mov	r3, r0
 801385c:	60b9      	str	r1, [r7, #8]
 801385e:	607a      	str	r2, [r7, #4]
 8013860:	73fb      	strb	r3, [r7, #15]
    uint32_t lastDown = 0;
 8013862:	2300      	movs	r3, #0
 8013864:	617b      	str	r3, [r7, #20]
    int32_t fCntDiff = 0;
 8013866:	2300      	movs	r3, #0
 8013868:	61fb      	str	r3, [r7, #28]
    LoRaMacCryptoStatus_t cryptoStatus = LORAMAC_CRYPTO_ERROR;
 801386a:	2312      	movs	r3, #18
 801386c:	76fb      	strb	r3, [r7, #27]

    if( currentDown == NULL )
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	2b00      	cmp	r3, #0
 8013872:	d101      	bne.n	8013878 <LoRaMacCryptoGetFCntDown+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013874:	2309      	movs	r3, #9
 8013876:	e035      	b.n	80138e4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    cryptoStatus = GetLastFcntDown( fCntID, &lastDown );
 8013878:	f107 0214 	add.w	r2, r7, #20
 801387c:	7bfb      	ldrb	r3, [r7, #15]
 801387e:	4611      	mov	r1, r2
 8013880:	4618      	mov	r0, r3
 8013882:	f7ff feb9 	bl	80135f8 <GetLastFcntDown>
 8013886:	4603      	mov	r3, r0
 8013888:	76fb      	strb	r3, [r7, #27]
    if( cryptoStatus != LORAMAC_CRYPTO_SUCCESS )
 801388a:	7efb      	ldrb	r3, [r7, #27]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d001      	beq.n	8013894 <LoRaMacCryptoGetFCntDown+0x40>
    {
        return cryptoStatus;
 8013890:	7efb      	ldrb	r3, [r7, #27]
 8013892:	e027      	b.n	80138e4 <LoRaMacCryptoGetFCntDown+0x90>
    }

    // For LoRaWAN 1.0.X only, allow downlink frames of 0
    if( lastDown == FCNT_DOWN_INITAL_VALUE )
 8013894:	697b      	ldr	r3, [r7, #20]
 8013896:	f1b3 3fff 	cmp.w	r3, #4294967295
 801389a:	d103      	bne.n	80138a4 <LoRaMacCryptoGetFCntDown+0x50>
    {
        *currentDown = frameFcnt;
 801389c:	687b      	ldr	r3, [r7, #4]
 801389e:	68ba      	ldr	r2, [r7, #8]
 80138a0:	601a      	str	r2, [r3, #0]
 80138a2:	e01e      	b.n	80138e2 <LoRaMacCryptoGetFCntDown+0x8e>
    }
    else
    {
        // Add difference, consider roll-over
        fCntDiff = ( int32_t )( ( int64_t )frameFcnt - ( int64_t )( lastDown & 0x0000FFFF ) );
 80138a4:	697b      	ldr	r3, [r7, #20]
 80138a6:	b29b      	uxth	r3, r3
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	1ad3      	subs	r3, r2, r3
 80138ac:	61fb      	str	r3, [r7, #28]

        if( fCntDiff > 0 )
 80138ae:	69fb      	ldr	r3, [r7, #28]
 80138b0:	2b00      	cmp	r3, #0
 80138b2:	dd05      	ble.n	80138c0 <LoRaMacCryptoGetFCntDown+0x6c>
        {  // Positive difference
            *currentDown = lastDown + fCntDiff;
 80138b4:	697a      	ldr	r2, [r7, #20]
 80138b6:	69fb      	ldr	r3, [r7, #28]
 80138b8:	441a      	add	r2, r3
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	601a      	str	r2, [r3, #0]
 80138be:	e010      	b.n	80138e2 <LoRaMacCryptoGetFCntDown+0x8e>
        }
        else if( fCntDiff == 0 )
 80138c0:	69fb      	ldr	r3, [r7, #28]
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	d104      	bne.n	80138d0 <LoRaMacCryptoGetFCntDown+0x7c>
        {  // Duplicate FCnt value, keep the current value.
            *currentDown = lastDown;
 80138c6:	697a      	ldr	r2, [r7, #20]
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	601a      	str	r2, [r3, #0]
            return LORAMAC_CRYPTO_FAIL_FCNT_DUPLICATED;
 80138cc:	2307      	movs	r3, #7
 80138ce:	e009      	b.n	80138e4 <LoRaMacCryptoGetFCntDown+0x90>
        }
        else
        {  // Negative difference, assume a roll-over of one uint16_t
            *currentDown = ( lastDown & 0xFFFF0000 ) + 0x10000 + frameFcnt;
 80138d0:	697b      	ldr	r3, [r7, #20]
 80138d2:	0c1b      	lsrs	r3, r3, #16
 80138d4:	041b      	lsls	r3, r3, #16
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	4413      	add	r3, r2
 80138da:	f503 3280 	add.w	r2, r3, #65536	@ 0x10000
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	601a      	str	r2, [r3, #0]
        }
    }

    return LORAMAC_CRYPTO_SUCCESS;
 80138e2:	2300      	movs	r3, #0
}
 80138e4:	4618      	mov	r0, r3
 80138e6:	3720      	adds	r7, #32
 80138e8:	46bd      	mov	sp, r7
 80138ea:	bd80      	pop	{r7, pc}

080138ec <LoRaMacCryptoSetMulticastReference>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoSetMulticastReference( MulticastCtx_t* multicastList )
{
 80138ec:	b480      	push	{r7}
 80138ee:	b085      	sub	sp, #20
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	6078      	str	r0, [r7, #4]
    if( multicastList == NULL )
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	2b00      	cmp	r3, #0
 80138f8:	d101      	bne.n	80138fe <LoRaMacCryptoSetMulticastReference+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80138fa:	2309      	movs	r3, #9
 80138fc:	e017      	b.n	801392e <LoRaMacCryptoSetMulticastReference+0x42>
    }

    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 80138fe:	2300      	movs	r3, #0
 8013900:	60fb      	str	r3, [r7, #12]
 8013902:	e010      	b.n	8013926 <LoRaMacCryptoSetMulticastReference+0x3a>
    {
        multicastList[i].DownLinkCounter = &CryptoNvm->FCntList.McFCntDown[i];
 8013904:	4b0c      	ldr	r3, [pc, #48]	@ (8013938 <LoRaMacCryptoSetMulticastReference+0x4c>)
 8013906:	6819      	ldr	r1, [r3, #0]
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	222c      	movs	r2, #44	@ 0x2c
 801390c:	fb02 f303 	mul.w	r3, r2, r3
 8013910:	687a      	ldr	r2, [r7, #4]
 8013912:	4413      	add	r3, r2
 8013914:	68fa      	ldr	r2, [r7, #12]
 8013916:	3206      	adds	r2, #6
 8013918:	0092      	lsls	r2, r2, #2
 801391a:	440a      	add	r2, r1
 801391c:	3204      	adds	r2, #4
 801391e:	621a      	str	r2, [r3, #32]
    for( int32_t i = 0; i < LORAMAC_MAX_MC_CTX; i++ )
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	3301      	adds	r3, #1
 8013924:	60fb      	str	r3, [r7, #12]
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	2b00      	cmp	r3, #0
 801392a:	ddeb      	ble.n	8013904 <LoRaMacCryptoSetMulticastReference+0x18>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 801392c:	2300      	movs	r3, #0
}
 801392e:	4618      	mov	r0, r3
 8013930:	3714      	adds	r7, #20
 8013932:	46bd      	mov	sp, r7
 8013934:	bc80      	pop	{r7}
 8013936:	4770      	bx	lr
 8013938:	20001960 	.word	0x20001960

0801393c <LoRaMacCryptoSetKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoSetKey( KeyIdentifier_t keyID, uint8_t* key )
{
 801393c:	b580      	push	{r7, lr}
 801393e:	b082      	sub	sp, #8
 8013940:	af00      	add	r7, sp, #0
 8013942:	4603      	mov	r3, r0
 8013944:	6039      	str	r1, [r7, #0]
 8013946:	71fb      	strb	r3, [r7, #7]
    if( SecureElementSetKey( keyID, key ) != SECURE_ELEMENT_SUCCESS )
 8013948:	79fb      	ldrb	r3, [r7, #7]
 801394a:	6839      	ldr	r1, [r7, #0]
 801394c:	4618      	mov	r0, r3
 801394e:	f7f8 f8a3 	bl	800ba98 <SecureElementSetKey>
 8013952:	4603      	mov	r3, r0
 8013954:	2b00      	cmp	r3, #0
 8013956:	d001      	beq.n	801395c <LoRaMacCryptoSetKey+0x20>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013958:	230e      	movs	r3, #14
 801395a:	e018      	b.n	801398e <LoRaMacCryptoSetKey+0x52>
    }
    if( keyID == APP_KEY )
 801395c:	79fb      	ldrb	r3, [r7, #7]
 801395e:	2b00      	cmp	r3, #0
 8013960:	d114      	bne.n	801398c <LoRaMacCryptoSetKey+0x50>
    {
        // Derive lifetime keys
        if( LoRaMacCryptoDeriveMcRootKey( CryptoNvm->LrWanVersion.Fields.Minor, keyID ) != LORAMAC_CRYPTO_SUCCESS )
 8013962:	4b0d      	ldr	r3, [pc, #52]	@ (8013998 <LoRaMacCryptoSetKey+0x5c>)
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	789b      	ldrb	r3, [r3, #2]
 8013968:	79fa      	ldrb	r2, [r7, #7]
 801396a:	4611      	mov	r1, r2
 801396c:	4618      	mov	r0, r3
 801396e:	f000 fa37 	bl	8013de0 <LoRaMacCryptoDeriveMcRootKey>
 8013972:	4603      	mov	r3, r0
 8013974:	2b00      	cmp	r3, #0
 8013976:	d001      	beq.n	801397c <LoRaMacCryptoSetKey+0x40>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013978:	230e      	movs	r3, #14
 801397a:	e008      	b.n	801398e <LoRaMacCryptoSetKey+0x52>
        }
        if( LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY ) != LORAMAC_CRYPTO_SUCCESS )
 801397c:	2004      	movs	r0, #4
 801397e:	f000 fa5a 	bl	8013e36 <LoRaMacCryptoDeriveMcKEKey>
 8013982:	4603      	mov	r3, r0
 8013984:	2b00      	cmp	r3, #0
 8013986:	d001      	beq.n	801398c <LoRaMacCryptoSetKey+0x50>
        {
            return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013988:	230e      	movs	r3, #14
 801398a:	e000      	b.n	801398e <LoRaMacCryptoSetKey+0x52>
        }
    }
    return LORAMAC_CRYPTO_SUCCESS;
 801398c:	2300      	movs	r3, #0
}
 801398e:	4618      	mov	r0, r3
 8013990:	3708      	adds	r7, #8
 8013992:	46bd      	mov	sp, r7
 8013994:	bd80      	pop	{r7, pc}
 8013996:	bf00      	nop
 8013998:	20001960 	.word	0x20001960

0801399c <LoRaMacCryptoPrepareJoinRequest>:

LoRaMacCryptoStatus_t LoRaMacCryptoPrepareJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 801399c:	b580      	push	{r7, lr}
 801399e:	b086      	sub	sp, #24
 80139a0:	af02      	add	r7, sp, #8
 80139a2:	6078      	str	r0, [r7, #4]
    if( macMsg == 0 )
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	d101      	bne.n	80139ae <LoRaMacCryptoPrepareJoinRequest+0x12>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 80139aa:	2309      	movs	r3, #9
 80139ac:	e02d      	b.n	8013a0a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }
    KeyIdentifier_t micComputationKeyID = NWK_KEY;
 80139ae:	2301      	movs	r3, #1
 80139b0:	73fb      	strb	r3, [r7, #15]
#if ( USE_RANDOM_DEV_NONCE == 1 )
    uint32_t devNonce = 0;
    SecureElementRandomNumber( &devNonce );
    CryptoNvm->DevNonce = devNonce;
#else
    CryptoNvm->DevNonce++;
 80139b2:	4b18      	ldr	r3, [pc, #96]	@ (8013a14 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80139b4:	681b      	ldr	r3, [r3, #0]
 80139b6:	889a      	ldrh	r2, [r3, #4]
 80139b8:	3201      	adds	r2, #1
 80139ba:	b292      	uxth	r2, r2
 80139bc:	809a      	strh	r2, [r3, #4]
#endif /* USE_RANDOM_DEV_NONCE */
    macMsg->DevNonce = CryptoNvm->DevNonce;
 80139be:	4b15      	ldr	r3, [pc, #84]	@ (8013a14 <LoRaMacCryptoPrepareJoinRequest+0x78>)
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	889a      	ldrh	r2, [r3, #4]
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	82da      	strh	r2, [r3, #22]
        return LORAMAC_CRYPTO_ERROR;
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    // Serialize message
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139c8:	6878      	ldr	r0, [r7, #4]
 80139ca:	f000 fc14 	bl	80141f6 <LoRaMacSerializerJoinRequest>
 80139ce:	4603      	mov	r3, r0
 80139d0:	2b00      	cmp	r3, #0
 80139d2:	d001      	beq.n	80139d8 <LoRaMacCryptoPrepareJoinRequest+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 80139d4:	2310      	movs	r3, #16
 80139d6:	e018      	b.n	8013a0a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Compute mic
    if( SecureElementComputeAesCmac( NULL, macMsg->Buffer, ( LORAMAC_JOIN_REQ_MSG_SIZE - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, &macMsg->MIC ) != SECURE_ELEMENT_SUCCESS )
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6819      	ldr	r1, [r3, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	3318      	adds	r3, #24
 80139e0:	7bfa      	ldrb	r2, [r7, #15]
 80139e2:	9300      	str	r3, [sp, #0]
 80139e4:	4613      	mov	r3, r2
 80139e6:	2213      	movs	r2, #19
 80139e8:	2000      	movs	r0, #0
 80139ea:	f7f8 f8b3 	bl	800bb54 <SecureElementComputeAesCmac>
 80139ee:	4603      	mov	r3, r0
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d001      	beq.n	80139f8 <LoRaMacCryptoPrepareJoinRequest+0x5c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 80139f4:	230e      	movs	r3, #14
 80139f6:	e008      	b.n	8013a0a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    // Reserialize message to add the MIC
    if( LoRaMacSerializerJoinRequest( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 80139f8:	6878      	ldr	r0, [r7, #4]
 80139fa:	f000 fbfc 	bl	80141f6 <LoRaMacSerializerJoinRequest>
 80139fe:	4603      	mov	r3, r0
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d001      	beq.n	8013a08 <LoRaMacCryptoPrepareJoinRequest+0x6c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013a04:	2310      	movs	r3, #16
 8013a06:	e000      	b.n	8013a0a <LoRaMacCryptoPrepareJoinRequest+0x6e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3710      	adds	r7, #16
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	bd80      	pop	{r7, pc}
 8013a12:	bf00      	nop
 8013a14:	20001960 	.word	0x20001960

08013a18 <LoRaMacCryptoHandleJoinAccept>:
    return LORAMAC_CRYPTO_SUCCESS;
}
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

LoRaMacCryptoStatus_t LoRaMacCryptoHandleJoinAccept( JoinReqIdentifier_t joinReqType, uint8_t* joinEUI, LoRaMacMessageJoinAccept_t* macMsg )
{
 8013a18:	b590      	push	{r4, r7, lr}
 8013a1a:	b097      	sub	sp, #92	@ 0x5c
 8013a1c:	af04      	add	r7, sp, #16
 8013a1e:	4603      	mov	r3, r0
 8013a20:	60b9      	str	r1, [r7, #8]
 8013a22:	607a      	str	r2, [r7, #4]
 8013a24:	73fb      	strb	r3, [r7, #15]
    if( ( macMsg == 0 ) || ( joinEUI == 0 ) )
 8013a26:	687b      	ldr	r3, [r7, #4]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d002      	beq.n	8013a32 <LoRaMacCryptoHandleJoinAccept+0x1a>
 8013a2c:	68bb      	ldr	r3, [r7, #8]
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d101      	bne.n	8013a36 <LoRaMacCryptoHandleJoinAccept+0x1e>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013a32:	2309      	movs	r3, #9
 8013a34:	e0bd      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013a36:	2312      	movs	r3, #18
 8013a38:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    uint8_t decJoinAccept[LORAMAC_JOIN_ACCEPT_FRAME_MAX_SIZE] = { 0 };
 8013a3c:	2300      	movs	r3, #0
 8013a3e:	61bb      	str	r3, [r7, #24]
 8013a40:	f107 031c 	add.w	r3, r7, #28
 8013a44:	221d      	movs	r2, #29
 8013a46:	2100      	movs	r1, #0
 8013a48:	4618      	mov	r0, r3
 8013a4a:	f007 fdcf 	bl	801b5ec <memset>
    uint8_t versionMinor         = 0;
 8013a4e:	2300      	movs	r3, #0
 8013a50:	75fb      	strb	r3, [r7, #23]
    uint16_t nonce               = CryptoNvm->DevNonce;
 8013a52:	4b5a      	ldr	r3, [pc, #360]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013a54:	681b      	ldr	r3, [r3, #0]
 8013a56:	889b      	ldrh	r3, [r3, #4]
 8013a58:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
            nonce = CryptoNvm->FCntList.RJcount1;
        }
    }
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */

    if( SecureElementProcessJoinAccept( joinReqType, joinEUI, nonce, macMsg->Buffer,
 8013a5c:	687b      	ldr	r3, [r7, #4]
 8013a5e:	681c      	ldr	r4, [r3, #0]
 8013a60:	687b      	ldr	r3, [r7, #4]
 8013a62:	791b      	ldrb	r3, [r3, #4]
 8013a64:	f8b7 1044 	ldrh.w	r1, [r7, #68]	@ 0x44
 8013a68:	7bf8      	ldrb	r0, [r7, #15]
 8013a6a:	f107 0217 	add.w	r2, r7, #23
 8013a6e:	9202      	str	r2, [sp, #8]
 8013a70:	f107 0218 	add.w	r2, r7, #24
 8013a74:	9201      	str	r2, [sp, #4]
 8013a76:	9300      	str	r3, [sp, #0]
 8013a78:	4623      	mov	r3, r4
 8013a7a:	460a      	mov	r2, r1
 8013a7c:	68b9      	ldr	r1, [r7, #8]
 8013a7e:	f7f8 f95d 	bl	800bd3c <SecureElementProcessJoinAccept>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <LoRaMacCryptoHandleJoinAccept+0x74>
                                        macMsg->BufSize, decJoinAccept,
                                        &versionMinor ) != SECURE_ELEMENT_SUCCESS )
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013a88:	230e      	movs	r3, #14
 8013a8a:	e092      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    memcpy1( macMsg->Buffer, decJoinAccept, macMsg->BufSize );
 8013a8c:	687b      	ldr	r3, [r7, #4]
 8013a8e:	6818      	ldr	r0, [r3, #0]
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	791b      	ldrb	r3, [r3, #4]
 8013a94:	461a      	mov	r2, r3
 8013a96:	f107 0318 	add.w	r3, r7, #24
 8013a9a:	4619      	mov	r1, r3
 8013a9c:	f002 ffdf 	bl	8016a5e <memcpy1>

    // Parse the message
    if( LoRaMacParserJoinAccept( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013aa0:	6878      	ldr	r0, [r7, #4]
 8013aa2:	f000 f9eb 	bl	8013e7c <LoRaMacParserJoinAccept>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d001      	beq.n	8013ab0 <LoRaMacCryptoHandleJoinAccept+0x98>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013aac:	230f      	movs	r3, #15
 8013aae:	e080      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    uint32_t currentJoinNonce;

    currentJoinNonce = ( uint32_t )macMsg->JoinNonce[0];
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	799b      	ldrb	r3, [r3, #6]
 8013ab4:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[1] << 8 );
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	79db      	ldrb	r3, [r3, #7]
 8013aba:	021b      	lsls	r3, r3, #8
 8013abc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013abe:	4313      	orrs	r3, r2
 8013ac0:	643b      	str	r3, [r7, #64]	@ 0x40
    currentJoinNonce |= ( ( uint32_t )macMsg->JoinNonce[2] << 16 );
 8013ac2:	687b      	ldr	r3, [r7, #4]
 8013ac4:	7a1b      	ldrb	r3, [r3, #8]
 8013ac6:	041b      	lsls	r3, r3, #16
 8013ac8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013aca:	4313      	orrs	r3, r2
 8013acc:	643b      	str	r3, [r7, #64]	@ 0x40
#if( USE_JOIN_NONCE_COUNTER_CHECK == 1 )
    // Check if the JoinNonce is greater as the previous one
    if( currentJoinNonce > CryptoNvm->JoinNonce )
#else
    // Check if the JoinNonce is different from the previous one
    if( currentJoinNonce != CryptoNvm->JoinNonce )
 8013ace:	4b3b      	ldr	r3, [pc, #236]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	689b      	ldr	r3, [r3, #8]
 8013ad4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013ad6:	429a      	cmp	r2, r3
 8013ad8:	d010      	beq.n	8013afc <LoRaMacCryptoHandleJoinAccept+0xe4>
#endif /* USE_JOIN_NONCE_COUNTER_CHECK */
    {
        CryptoNvm->JoinNonce = currentJoinNonce;
 8013ada:	4b38      	ldr	r3, [pc, #224]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013adc:	681b      	ldr	r3, [r3, #0]
 8013ade:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8013ae0:	609a      	str	r2, [r3, #8]
    {
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
    }

    // Derive lifetime keys
    retval = LoRaMacCryptoDeriveMcRootKey( versionMinor, APP_KEY );
 8013ae2:	7dfb      	ldrb	r3, [r7, #23]
 8013ae4:	2100      	movs	r1, #0
 8013ae6:	4618      	mov	r0, r3
 8013ae8:	f000 f97a 	bl	8013de0 <LoRaMacCryptoDeriveMcRootKey>
 8013aec:	4603      	mov	r3, r0
 8013aee:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013af2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013af6:	2b00      	cmp	r3, #0
 8013af8:	d005      	beq.n	8013b06 <LoRaMacCryptoHandleJoinAccept+0xee>
 8013afa:	e001      	b.n	8013b00 <LoRaMacCryptoHandleJoinAccept+0xe8>
        return LORAMAC_CRYPTO_FAIL_JOIN_NONCE;
 8013afc:	2303      	movs	r3, #3
 8013afe:	e058      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        return retval;
 8013b00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b04:	e055      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    }

    retval = LoRaMacCryptoDeriveMcKEKey( MC_ROOT_KEY );
 8013b06:	2004      	movs	r0, #4
 8013b08:	f000 f995 	bl	8013e36 <LoRaMacCryptoDeriveMcKEKey>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b12:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d002      	beq.n	8013b20 <LoRaMacCryptoHandleJoinAccept+0x108>
    {
        return retval;
 8013b1a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b1e:	e048      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
    {
        // Operating in LoRaWAN 1.0.x mode

        uint32_t netID;

        netID = ( uint32_t )macMsg->NetID[0];
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	7a5b      	ldrb	r3, [r3, #9]
 8013b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[1] << 8 );
 8013b26:	687b      	ldr	r3, [r7, #4]
 8013b28:	7a9b      	ldrb	r3, [r3, #10]
 8013b2a:	021b      	lsls	r3, r3, #8
 8013b2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b2e:	4313      	orrs	r3, r2
 8013b30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        netID |= ( ( uint32_t )macMsg->NetID[2] << 16 );
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	7adb      	ldrb	r3, [r3, #11]
 8013b36:	041b      	lsls	r3, r3, #16
 8013b38:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b3a:	4313      	orrs	r3, r2
 8013b3c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        retval = DeriveSessionKey10x( APP_S_KEY, currentJoinNonce, netID, nonce );
 8013b3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013b42:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b44:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b46:	2003      	movs	r0, #3
 8013b48:	f7ff fd06 	bl	8013558 <DeriveSessionKey10x>
 8013b4c:	4603      	mov	r3, r0
 8013b4e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b52:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d002      	beq.n	8013b60 <LoRaMacCryptoHandleJoinAccept+0x148>
        {
            return retval;
 8013b5a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b5e:	e028      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
            return retval;
        }

        retval = DeriveSessionKey10x( S_NWK_S_INT_KEY, currentJoinNonce, netID, nonce );
#else
        retval = DeriveSessionKey10x( NWK_S_KEY, currentJoinNonce, netID, nonce );
 8013b60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8013b64:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8013b66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8013b68:	2002      	movs	r0, #2
 8013b6a:	f7ff fcf5 	bl	8013558 <DeriveSessionKey10x>
 8013b6e:	4603      	mov	r3, r0
 8013b70:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013b74:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d002      	beq.n	8013b82 <LoRaMacCryptoHandleJoinAccept+0x16a>
        {
            return retval;
 8013b7c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8013b80:	e017      	b.n	8013bb2 <LoRaMacCryptoHandleJoinAccept+0x19a>
        }
    }

    // Join-Accept is successfully processed
    // Save LoRaWAN specification version
    CryptoNvm->LrWanVersion.Fields.Minor = versionMinor;
 8013b82:	4b0e      	ldr	r3, [pc, #56]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	7dfa      	ldrb	r2, [r7, #23]
 8013b88:	709a      	strb	r2, [r3, #2]

    // Reset frame counters
#if( USE_LRWAN_1_1_X_CRYPTO == 1 )
    RJcount0 = 0;
#endif /* USE_LRWAN_1_1_X_CRYPTO == 1 */
    CryptoNvm->FCntList.FCntUp = 0;
 8013b8a:	4b0c      	ldr	r3, [pc, #48]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	2200      	movs	r2, #0
 8013b90:	60da      	str	r2, [r3, #12]
    CryptoNvm->FCntList.FCntDown = FCNT_DOWN_INITAL_VALUE;
 8013b92:	4b0a      	ldr	r3, [pc, #40]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	f04f 32ff 	mov.w	r2, #4294967295
 8013b9a:	619a      	str	r2, [r3, #24]
    CryptoNvm->FCntList.NFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013b9c:	4b07      	ldr	r3, [pc, #28]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8013ba4:	611a      	str	r2, [r3, #16]
    CryptoNvm->FCntList.AFCntDown = FCNT_DOWN_INITAL_VALUE;
 8013ba6:	4b05      	ldr	r3, [pc, #20]	@ (8013bbc <LoRaMacCryptoHandleJoinAccept+0x1a4>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	f04f 32ff 	mov.w	r2, #4294967295
 8013bae:	615a      	str	r2, [r3, #20]

    return LORAMAC_CRYPTO_SUCCESS;
 8013bb0:	2300      	movs	r3, #0
}
 8013bb2:	4618      	mov	r0, r3
 8013bb4:	374c      	adds	r7, #76	@ 0x4c
 8013bb6:	46bd      	mov	sp, r7
 8013bb8:	bd90      	pop	{r4, r7, pc}
 8013bba:	bf00      	nop
 8013bbc:	20001960 	.word	0x20001960

08013bc0 <LoRaMacCryptoSecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoSecureMessage( uint32_t fCntUp, uint8_t txDr, uint8_t txCh, LoRaMacMessageData_t* macMsg )
{
 8013bc0:	b590      	push	{r4, r7, lr}
 8013bc2:	b08b      	sub	sp, #44	@ 0x2c
 8013bc4:	af04      	add	r7, sp, #16
 8013bc6:	60f8      	str	r0, [r7, #12]
 8013bc8:	607b      	str	r3, [r7, #4]
 8013bca:	460b      	mov	r3, r1
 8013bcc:	72fb      	strb	r3, [r7, #11]
 8013bce:	4613      	mov	r3, r2
 8013bd0:	72bb      	strb	r3, [r7, #10]
    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013bd2:	2312      	movs	r3, #18
 8013bd4:	75bb      	strb	r3, [r7, #22]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013bd6:	2303      	movs	r3, #3
 8013bd8:	75fb      	strb	r3, [r7, #23]

    if( macMsg == NULL )
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	2b00      	cmp	r3, #0
 8013bde:	d101      	bne.n	8013be4 <LoRaMacCryptoSecureMessage+0x24>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013be0:	2309      	movs	r3, #9
 8013be2:	e05e      	b.n	8013ca2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    if( fCntUp < CryptoNvm->FCntList.FCntUp )
 8013be4:	4b31      	ldr	r3, [pc, #196]	@ (8013cac <LoRaMacCryptoSecureMessage+0xec>)
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	68db      	ldr	r3, [r3, #12]
 8013bea:	68fa      	ldr	r2, [r7, #12]
 8013bec:	429a      	cmp	r2, r3
 8013bee:	d201      	bcs.n	8013bf4 <LoRaMacCryptoSecureMessage+0x34>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013bf0:	2306      	movs	r3, #6
 8013bf2:	e056      	b.n	8013ca2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    // Encrypt payload
    if( macMsg->FPort == 0 )
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d101      	bne.n	8013c02 <LoRaMacCryptoSecureMessage+0x42>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013bfe:	2302      	movs	r3, #2
 8013c00:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }

    if( fCntUp > CryptoNvm->FCntList.FCntUp )
 8013c02:	4b2a      	ldr	r3, [pc, #168]	@ (8013cac <LoRaMacCryptoSecureMessage+0xec>)
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	68db      	ldr	r3, [r3, #12]
 8013c08:	68fa      	ldr	r2, [r7, #12]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	d916      	bls.n	8013c3c <LoRaMacCryptoSecureMessage+0x7c>
    {
        retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, macMsg->FHDR.DevAddr, UPLINK, fCntUp );
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013c18:	b219      	sxth	r1, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	689c      	ldr	r4, [r3, #8]
 8013c1e:	7dfa      	ldrb	r2, [r7, #23]
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	9301      	str	r3, [sp, #4]
 8013c24:	2300      	movs	r3, #0
 8013c26:	9300      	str	r3, [sp, #0]
 8013c28:	4623      	mov	r3, r4
 8013c2a:	f7ff faa1 	bl	8013170 <PayloadEncrypt>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c32:	7dbb      	ldrb	r3, [r7, #22]
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d001      	beq.n	8013c3c <LoRaMacCryptoSecureMessage+0x7c>
        {
            return retval;
 8013c38:	7dbb      	ldrb	r3, [r7, #22]
 8013c3a:	e032      	b.n	8013ca2 <LoRaMacCryptoSecureMessage+0xe2>
        }
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    }

    // Serialize message
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c3c:	6878      	ldr	r0, [r7, #4]
 8013c3e:	f000 fb5c 	bl	80142fa <LoRaMacSerializerData>
 8013c42:	4603      	mov	r3, r0
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	d001      	beq.n	8013c4c <LoRaMacCryptoSecureMessage+0x8c>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013c48:	2310      	movs	r3, #16
 8013c4a:	e02a      	b.n	8013ca2 <LoRaMacCryptoSecureMessage+0xe2>
        // Use network session key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013c4c:	2302      	movs	r3, #2
 8013c4e:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
        // MIC = cmacF[0..3]
        // The IsAck parameter is every time false since the ConfFCnt field is not used in legacy mode.
        retval = ComputeCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), payloadDecryptionKeyID, false, UPLINK, macMsg->FHDR.DevAddr, fCntUp, &macMsg->MIC );
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	6818      	ldr	r0, [r3, #0]
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	791b      	ldrb	r3, [r3, #4]
 8013c58:	3b04      	subs	r3, #4
 8013c5a:	b299      	uxth	r1, r3
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	689b      	ldr	r3, [r3, #8]
 8013c60:	687a      	ldr	r2, [r7, #4]
 8013c62:	322c      	adds	r2, #44	@ 0x2c
 8013c64:	7dfc      	ldrb	r4, [r7, #23]
 8013c66:	9203      	str	r2, [sp, #12]
 8013c68:	68fa      	ldr	r2, [r7, #12]
 8013c6a:	9202      	str	r2, [sp, #8]
 8013c6c:	9301      	str	r3, [sp, #4]
 8013c6e:	2300      	movs	r3, #0
 8013c70:	9300      	str	r3, [sp, #0]
 8013c72:	2300      	movs	r3, #0
 8013c74:	4622      	mov	r2, r4
 8013c76:	f7ff fb7c 	bl	8013372 <ComputeCmacB0>
 8013c7a:	4603      	mov	r3, r0
 8013c7c:	75bb      	strb	r3, [r7, #22]
        if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013c7e:	7dbb      	ldrb	r3, [r7, #22]
 8013c80:	2b00      	cmp	r3, #0
 8013c82:	d001      	beq.n	8013c88 <LoRaMacCryptoSecureMessage+0xc8>
        {
            return retval;
 8013c84:	7dbb      	ldrb	r3, [r7, #22]
 8013c86:	e00c      	b.n	8013ca2 <LoRaMacCryptoSecureMessage+0xe2>
        }
    }

    // Re-serialize message to add the MIC
    if( LoRaMacSerializerData( macMsg ) != LORAMAC_SERIALIZER_SUCCESS )
 8013c88:	6878      	ldr	r0, [r7, #4]
 8013c8a:	f000 fb36 	bl	80142fa <LoRaMacSerializerData>
 8013c8e:	4603      	mov	r3, r0
 8013c90:	2b00      	cmp	r3, #0
 8013c92:	d001      	beq.n	8013c98 <LoRaMacCryptoSecureMessage+0xd8>
    {
        return LORAMAC_CRYPTO_ERROR_SERIALIZER;
 8013c94:	2310      	movs	r3, #16
 8013c96:	e004      	b.n	8013ca2 <LoRaMacCryptoSecureMessage+0xe2>
    }

    CryptoNvm->FCntList.FCntUp = fCntUp;
 8013c98:	4b04      	ldr	r3, [pc, #16]	@ (8013cac <LoRaMacCryptoSecureMessage+0xec>)
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	68fa      	ldr	r2, [r7, #12]
 8013c9e:	60da      	str	r2, [r3, #12]

    return LORAMAC_CRYPTO_SUCCESS;
 8013ca0:	2300      	movs	r3, #0
}
 8013ca2:	4618      	mov	r0, r3
 8013ca4:	371c      	adds	r7, #28
 8013ca6:	46bd      	mov	sp, r7
 8013ca8:	bd90      	pop	{r4, r7, pc}
 8013caa:	bf00      	nop
 8013cac:	20001960 	.word	0x20001960

08013cb0 <LoRaMacCryptoUnsecureMessage>:

LoRaMacCryptoStatus_t LoRaMacCryptoUnsecureMessage( AddressIdentifier_t addrID, uint32_t address, FCntIdentifier_t fCntID, uint32_t fCntDown, LoRaMacMessageData_t* macMsg )
{
 8013cb0:	b590      	push	{r4, r7, lr}
 8013cb2:	b08b      	sub	sp, #44	@ 0x2c
 8013cb4:	af04      	add	r7, sp, #16
 8013cb6:	60b9      	str	r1, [r7, #8]
 8013cb8:	607b      	str	r3, [r7, #4]
 8013cba:	4603      	mov	r3, r0
 8013cbc:	73fb      	strb	r3, [r7, #15]
 8013cbe:	4613      	mov	r3, r2
 8013cc0:	73bb      	strb	r3, [r7, #14]
    if( macMsg == 0 )
 8013cc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d101      	bne.n	8013ccc <LoRaMacCryptoUnsecureMessage+0x1c>
    {
        return LORAMAC_CRYPTO_ERROR_NPE;
 8013cc8:	2309      	movs	r3, #9
 8013cca:	e083      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    if( CheckFCntDown( fCntID, fCntDown ) == false )
 8013ccc:	7bbb      	ldrb	r3, [r7, #14]
 8013cce:	6879      	ldr	r1, [r7, #4]
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7ff fcdf 	bl	8013694 <CheckFCntDown>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	f083 0301 	eor.w	r3, r3, #1
 8013cdc:	b2db      	uxtb	r3, r3
 8013cde:	2b00      	cmp	r3, #0
 8013ce0:	d001      	beq.n	8013ce6 <LoRaMacCryptoUnsecureMessage+0x36>
    {
        return LORAMAC_CRYPTO_FAIL_FCNT_SMALLER;
 8013ce2:	2306      	movs	r3, #6
 8013ce4:	e076      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    LoRaMacCryptoStatus_t retval = LORAMAC_CRYPTO_ERROR;
 8013ce6:	2312      	movs	r3, #18
 8013ce8:	757b      	strb	r3, [r7, #21]
    KeyIdentifier_t payloadDecryptionKeyID = APP_S_KEY;
 8013cea:	2303      	movs	r3, #3
 8013cec:	75fb      	strb	r3, [r7, #23]
    /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
    KeyIdentifier_t micComputationKeyID = S_NWK_S_INT_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
    KeyIdentifier_t micComputationKeyID = NWK_S_KEY;
 8013cee:	2302      	movs	r3, #2
 8013cf0:	753b      	strb	r3, [r7, #20]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
    /* ST_WORKAROUND_END */
    KeyAddr_t* curItem;

    // Parse the message
    if( LoRaMacParserData( macMsg ) != LORAMAC_PARSER_SUCCESS )
 8013cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013cf4:	f000 f98d 	bl	8014012 <LoRaMacParserData>
 8013cf8:	4603      	mov	r3, r0
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d001      	beq.n	8013d02 <LoRaMacCryptoUnsecureMessage+0x52>
    {
        return LORAMAC_CRYPTO_ERROR_PARSER;
 8013cfe:	230f      	movs	r3, #15
 8013d00:	e068      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Determine current security context
    retval = GetKeyAddrItem( addrID, &curItem );
 8013d02:	f107 0210 	add.w	r2, r7, #16
 8013d06:	7bfb      	ldrb	r3, [r7, #15]
 8013d08:	4611      	mov	r1, r2
 8013d0a:	4618      	mov	r0, r3
 8013d0c:	f7ff fbfe 	bl	801350c <GetKeyAddrItem>
 8013d10:	4603      	mov	r3, r0
 8013d12:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d14:	7d7b      	ldrb	r3, [r7, #21]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d001      	beq.n	8013d1e <LoRaMacCryptoUnsecureMessage+0x6e>
    {
        return retval;
 8013d1a:	7d7b      	ldrb	r3, [r7, #21]
 8013d1c:	e05a      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    payloadDecryptionKeyID = curItem->AppSkey;
 8013d1e:	693b      	ldr	r3, [r7, #16]
 8013d20:	785b      	ldrb	r3, [r3, #1]
 8013d22:	75fb      	strb	r3, [r7, #23]
    micComputationKeyID = curItem->NwkSkey;
 8013d24:	693b      	ldr	r3, [r7, #16]
 8013d26:	789b      	ldrb	r3, [r3, #2]
 8013d28:	753b      	strb	r3, [r7, #20]

    // Check if it is our address
    if( address != macMsg->FHDR.DevAddr )
 8013d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d2c:	689b      	ldr	r3, [r3, #8]
 8013d2e:	68ba      	ldr	r2, [r7, #8]
 8013d30:	429a      	cmp	r2, r3
 8013d32:	d001      	beq.n	8013d38 <LoRaMacCryptoUnsecureMessage+0x88>
    {
        return LORAMAC_CRYPTO_FAIL_ADDRESS;
 8013d34:	2302      	movs	r3, #2
 8013d36:	e04d      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Compute mic
    bool isAck = macMsg->FHDR.FCtrl.Bits.Ack;
 8013d38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d3a:	7b1b      	ldrb	r3, [r3, #12]
 8013d3c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8013d40:	b2db      	uxtb	r3, r3
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	bf14      	ite	ne
 8013d46:	2301      	movne	r3, #1
 8013d48:	2300      	moveq	r3, #0
 8013d4a:	75bb      	strb	r3, [r7, #22]
    if( CryptoNvm->LrWanVersion.Fields.Minor == 0 )
 8013d4c:	4b23      	ldr	r3, [pc, #140]	@ (8013ddc <LoRaMacCryptoUnsecureMessage+0x12c>)
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	789b      	ldrb	r3, [r3, #2]
 8013d52:	2b00      	cmp	r3, #0
 8013d54:	d101      	bne.n	8013d5a <LoRaMacCryptoUnsecureMessage+0xaa>
    {
        // In legacy mode the IsAck parameter is forced to be false since the ConfFCnt field is not used.
        isAck = false;
 8013d56:	2300      	movs	r3, #0
 8013d58:	75bb      	strb	r3, [r7, #22]
    }

    // Verify mic
    retval = VerifyCmacB0( macMsg->Buffer, ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ), micComputationKeyID, isAck, DOWNLINK, address, fCntDown, macMsg->MIC );
 8013d5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d5c:	6818      	ldr	r0, [r3, #0]
 8013d5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d60:	791b      	ldrb	r3, [r3, #4]
 8013d62:	3b04      	subs	r3, #4
 8013d64:	b299      	uxth	r1, r3
 8013d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d6a:	7dbc      	ldrb	r4, [r7, #22]
 8013d6c:	7d3a      	ldrb	r2, [r7, #20]
 8013d6e:	9303      	str	r3, [sp, #12]
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	9302      	str	r3, [sp, #8]
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	9301      	str	r3, [sp, #4]
 8013d78:	2301      	movs	r3, #1
 8013d7a:	9300      	str	r3, [sp, #0]
 8013d7c:	4623      	mov	r3, r4
 8013d7e:	f7ff fb36 	bl	80133ee <VerifyCmacB0>
 8013d82:	4603      	mov	r3, r0
 8013d84:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013d86:	7d7b      	ldrb	r3, [r7, #21]
 8013d88:	2b00      	cmp	r3, #0
 8013d8a:	d001      	beq.n	8013d90 <LoRaMacCryptoUnsecureMessage+0xe0>
    {
        return retval;
 8013d8c:	7d7b      	ldrb	r3, [r7, #21]
 8013d8e:	e021      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
    }

    // Decrypt payload
    if( macMsg->FPort == 0 )
 8013d90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013d92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d101      	bne.n	8013d9e <LoRaMacCryptoUnsecureMessage+0xee>
        // Use network session encryption key
        /* ST_WORKAROUND_BEGIN: integrate 1.1.x keys only if required */
#if ( USE_LRWAN_1_1_X_CRYPTO == 1 )
        payloadDecryptionKeyID = NWK_S_ENC_KEY;
#else /* USE_LRWAN_1_1_X_CRYPTO == 0 */
        payloadDecryptionKeyID = NWK_S_KEY;
 8013d9a:	2302      	movs	r3, #2
 8013d9c:	75fb      	strb	r3, [r7, #23]
#endif /* USE_LRWAN_1_1_X_CRYPTO */
        /* ST_WORKAROUND_END */
    }
    retval = PayloadEncrypt( macMsg->FRMPayload, macMsg->FRMPayloadSize, payloadDecryptionKeyID, address, DOWNLINK, fCntDown );
 8013d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013da0:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8013da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013da4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8013da8:	b219      	sxth	r1, r3
 8013daa:	7dfa      	ldrb	r2, [r7, #23]
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	9301      	str	r3, [sp, #4]
 8013db0:	2301      	movs	r3, #1
 8013db2:	9300      	str	r3, [sp, #0]
 8013db4:	68bb      	ldr	r3, [r7, #8]
 8013db6:	f7ff f9db 	bl	8013170 <PayloadEncrypt>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	757b      	strb	r3, [r7, #21]
    if( retval != LORAMAC_CRYPTO_SUCCESS )
 8013dbe:	7d7b      	ldrb	r3, [r7, #21]
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d001      	beq.n	8013dc8 <LoRaMacCryptoUnsecureMessage+0x118>
    {
        return retval;
 8013dc4:	7d7b      	ldrb	r3, [r7, #21]
 8013dc6:	e005      	b.n	8013dd4 <LoRaMacCryptoUnsecureMessage+0x124>
            }
        }
    }
#endif

    UpdateFCntDown( fCntID, fCntDown );
 8013dc8:	7bbb      	ldrb	r3, [r7, #14]
 8013dca:	6879      	ldr	r1, [r7, #4]
 8013dcc:	4618      	mov	r0, r3
 8013dce:	f7ff fc85 	bl	80136dc <UpdateFCntDown>

    return LORAMAC_CRYPTO_SUCCESS;
 8013dd2:	2300      	movs	r3, #0
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	371c      	adds	r7, #28
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bd90      	pop	{r4, r7, pc}
 8013ddc:	20001960 	.word	0x20001960

08013de0 <LoRaMacCryptoDeriveMcRootKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcRootKey( uint8_t versionMinor, KeyIdentifier_t keyID )
{
 8013de0:	b580      	push	{r7, lr}
 8013de2:	b086      	sub	sp, #24
 8013de4:	af00      	add	r7, sp, #0
 8013de6:	4603      	mov	r3, r0
 8013de8:	460a      	mov	r2, r1
 8013dea:	71fb      	strb	r3, [r7, #7]
 8013dec:	4613      	mov	r3, r2
 8013dee:	71bb      	strb	r3, [r7, #6]
    // Prevent other keys than AppKey
    if( keyID != APP_KEY )
 8013df0:	79bb      	ldrb	r3, [r7, #6]
 8013df2:	2b00      	cmp	r3, #0
 8013df4:	d001      	beq.n	8013dfa <LoRaMacCryptoDeriveMcRootKey+0x1a>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013df6:	230a      	movs	r3, #10
 8013df8:	e019      	b.n	8013e2e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }
    uint8_t compBase[16] = { 0 };
 8013dfa:	2300      	movs	r3, #0
 8013dfc:	60bb      	str	r3, [r7, #8]
 8013dfe:	f107 030c 	add.w	r3, r7, #12
 8013e02:	2200      	movs	r2, #0
 8013e04:	601a      	str	r2, [r3, #0]
 8013e06:	605a      	str	r2, [r3, #4]
 8013e08:	609a      	str	r2, [r3, #8]

    if( versionMinor == 1 )
 8013e0a:	79fb      	ldrb	r3, [r7, #7]
 8013e0c:	2b01      	cmp	r3, #1
 8013e0e:	d101      	bne.n	8013e14 <LoRaMacCryptoDeriveMcRootKey+0x34>
    {
        compBase[0] = 0x20;
 8013e10:	2320      	movs	r3, #32
 8013e12:	723b      	strb	r3, [r7, #8]
    }
    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_ROOT_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e14:	79b9      	ldrb	r1, [r7, #6]
 8013e16:	f107 0308 	add.w	r3, r7, #8
 8013e1a:	2204      	movs	r2, #4
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7f7 ff4d 	bl	800bcbc <SecureElementDeriveAndStoreKey>
 8013e22:	4603      	mov	r3, r0
 8013e24:	2b00      	cmp	r3, #0
 8013e26:	d001      	beq.n	8013e2c <LoRaMacCryptoDeriveMcRootKey+0x4c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e28:	230e      	movs	r3, #14
 8013e2a:	e000      	b.n	8013e2e <LoRaMacCryptoDeriveMcRootKey+0x4e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e2c:	2300      	movs	r3, #0
}
 8013e2e:	4618      	mov	r0, r3
 8013e30:	3718      	adds	r7, #24
 8013e32:	46bd      	mov	sp, r7
 8013e34:	bd80      	pop	{r7, pc}

08013e36 <LoRaMacCryptoDeriveMcKEKey>:

LoRaMacCryptoStatus_t LoRaMacCryptoDeriveMcKEKey( KeyIdentifier_t keyID )
{
 8013e36:	b580      	push	{r7, lr}
 8013e38:	b086      	sub	sp, #24
 8013e3a:	af00      	add	r7, sp, #0
 8013e3c:	4603      	mov	r3, r0
 8013e3e:	71fb      	strb	r3, [r7, #7]
    // Prevent other keys than McRootKey
    if( keyID != MC_ROOT_KEY )
 8013e40:	79fb      	ldrb	r3, [r7, #7]
 8013e42:	2b04      	cmp	r3, #4
 8013e44:	d001      	beq.n	8013e4a <LoRaMacCryptoDeriveMcKEKey+0x14>
    {
        return LORAMAC_CRYPTO_ERROR_INVALID_KEY_ID;
 8013e46:	230a      	movs	r3, #10
 8013e48:	e014      	b.n	8013e74 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }
    uint8_t compBase[16] = { 0 };
 8013e4a:	2300      	movs	r3, #0
 8013e4c:	60bb      	str	r3, [r7, #8]
 8013e4e:	f107 030c 	add.w	r3, r7, #12
 8013e52:	2200      	movs	r2, #0
 8013e54:	601a      	str	r2, [r3, #0]
 8013e56:	605a      	str	r2, [r3, #4]
 8013e58:	609a      	str	r2, [r3, #8]

    if( SecureElementDeriveAndStoreKey( compBase, keyID, MC_KE_KEY ) != SECURE_ELEMENT_SUCCESS )
 8013e5a:	79f9      	ldrb	r1, [r7, #7]
 8013e5c:	f107 0308 	add.w	r3, r7, #8
 8013e60:	227f      	movs	r2, #127	@ 0x7f
 8013e62:	4618      	mov	r0, r3
 8013e64:	f7f7 ff2a 	bl	800bcbc <SecureElementDeriveAndStoreKey>
 8013e68:	4603      	mov	r3, r0
 8013e6a:	2b00      	cmp	r3, #0
 8013e6c:	d001      	beq.n	8013e72 <LoRaMacCryptoDeriveMcKEKey+0x3c>
    {
        return LORAMAC_CRYPTO_ERROR_SECURE_ELEMENT_FUNC;
 8013e6e:	230e      	movs	r3, #14
 8013e70:	e000      	b.n	8013e74 <LoRaMacCryptoDeriveMcKEKey+0x3e>
    }

    return LORAMAC_CRYPTO_SUCCESS;
 8013e72:	2300      	movs	r3, #0
}
 8013e74:	4618      	mov	r0, r3
 8013e76:	3718      	adds	r7, #24
 8013e78:	46bd      	mov	sp, r7
 8013e7a:	bd80      	pop	{r7, pc}

08013e7c <LoRaMacParserJoinAccept>:
 */
#include "LoRaMacParser.h"
#include "utilities.h"

LoRaMacParserStatus_t LoRaMacParserJoinAccept( LoRaMacMessageJoinAccept_t* macMsg )
{
 8013e7c:	b580      	push	{r7, lr}
 8013e7e:	b084      	sub	sp, #16
 8013e80:	af00      	add	r7, sp, #0
 8013e82:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8013e84:	687b      	ldr	r3, [r7, #4]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d003      	beq.n	8013e92 <LoRaMacParserJoinAccept+0x16>
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	2b00      	cmp	r3, #0
 8013e90:	d101      	bne.n	8013e96 <LoRaMacParserJoinAccept+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8013e92:	2302      	movs	r3, #2
 8013e94:	e0b9      	b.n	801400a <LoRaMacParserJoinAccept+0x18e>
    }

    uint16_t bufItr = 0;
 8013e96:	2300      	movs	r3, #0
 8013e98:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681a      	ldr	r2, [r3, #0]
 8013e9e:	89fb      	ldrh	r3, [r7, #14]
 8013ea0:	1c59      	adds	r1, r3, #1
 8013ea2:	81f9      	strh	r1, [r7, #14]
 8013ea4:	4413      	add	r3, r2
 8013ea6:	781a      	ldrb	r2, [r3, #0]
 8013ea8:	687b      	ldr	r3, [r7, #4]
 8013eaa:	715a      	strb	r2, [r3, #5]

    memcpy1( macMsg->JoinNonce, &macMsg->Buffer[bufItr], 3 );
 8013eac:	687b      	ldr	r3, [r7, #4]
 8013eae:	1d98      	adds	r0, r3, #6
 8013eb0:	687b      	ldr	r3, [r7, #4]
 8013eb2:	681a      	ldr	r2, [r3, #0]
 8013eb4:	89fb      	ldrh	r3, [r7, #14]
 8013eb6:	4413      	add	r3, r2
 8013eb8:	2203      	movs	r2, #3
 8013eba:	4619      	mov	r1, r3
 8013ebc:	f002 fdcf 	bl	8016a5e <memcpy1>
    bufItr = bufItr + 3;
 8013ec0:	89fb      	ldrh	r3, [r7, #14]
 8013ec2:	3303      	adds	r3, #3
 8013ec4:	81fb      	strh	r3, [r7, #14]

    memcpy1( macMsg->NetID, &macMsg->Buffer[bufItr], 3 );
 8013ec6:	687b      	ldr	r3, [r7, #4]
 8013ec8:	f103 0009 	add.w	r0, r3, #9
 8013ecc:	687b      	ldr	r3, [r7, #4]
 8013ece:	681a      	ldr	r2, [r3, #0]
 8013ed0:	89fb      	ldrh	r3, [r7, #14]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	2203      	movs	r2, #3
 8013ed6:	4619      	mov	r1, r3
 8013ed8:	f002 fdc1 	bl	8016a5e <memcpy1>
    bufItr = bufItr + 3;
 8013edc:	89fb      	ldrh	r3, [r7, #14]
 8013ede:	3303      	adds	r3, #3
 8013ee0:	81fb      	strh	r3, [r7, #14]

    macMsg->DevAddr = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013ee2:	687b      	ldr	r3, [r7, #4]
 8013ee4:	681a      	ldr	r2, [r3, #0]
 8013ee6:	89fb      	ldrh	r3, [r7, #14]
 8013ee8:	1c59      	adds	r1, r3, #1
 8013eea:	81f9      	strh	r1, [r7, #14]
 8013eec:	4413      	add	r3, r2
 8013eee:	781b      	ldrb	r3, [r3, #0]
 8013ef0:	461a      	mov	r2, r3
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	681a      	ldr	r2, [r3, #0]
 8013efa:	89fb      	ldrh	r3, [r7, #14]
 8013efc:	1c59      	adds	r1, r3, #1
 8013efe:	81f9      	strh	r1, [r7, #14]
 8013f00:	4413      	add	r3, r2
 8013f02:	781b      	ldrb	r3, [r3, #0]
 8013f04:	021a      	lsls	r2, r3, #8
 8013f06:	687b      	ldr	r3, [r7, #4]
 8013f08:	68db      	ldr	r3, [r3, #12]
 8013f0a:	431a      	orrs	r2, r3
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	681a      	ldr	r2, [r3, #0]
 8013f14:	89fb      	ldrh	r3, [r7, #14]
 8013f16:	1c59      	adds	r1, r3, #1
 8013f18:	81f9      	strh	r1, [r7, #14]
 8013f1a:	4413      	add	r3, r2
 8013f1c:	781b      	ldrb	r3, [r3, #0]
 8013f1e:	041a      	lsls	r2, r3, #16
 8013f20:	687b      	ldr	r3, [r7, #4]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	431a      	orrs	r2, r3
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	60da      	str	r2, [r3, #12]
    macMsg->DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	681a      	ldr	r2, [r3, #0]
 8013f2e:	89fb      	ldrh	r3, [r7, #14]
 8013f30:	1c59      	adds	r1, r3, #1
 8013f32:	81f9      	strh	r1, [r7, #14]
 8013f34:	4413      	add	r3, r2
 8013f36:	781b      	ldrb	r3, [r3, #0]
 8013f38:	061a      	lsls	r2, r3, #24
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	68db      	ldr	r3, [r3, #12]
 8013f3e:	431a      	orrs	r2, r3
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	60da      	str	r2, [r3, #12]

    macMsg->DLSettings.Value = macMsg->Buffer[bufItr++];
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681a      	ldr	r2, [r3, #0]
 8013f48:	89fb      	ldrh	r3, [r7, #14]
 8013f4a:	1c59      	adds	r1, r3, #1
 8013f4c:	81f9      	strh	r1, [r7, #14]
 8013f4e:	4413      	add	r3, r2
 8013f50:	781a      	ldrb	r2, [r3, #0]
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	741a      	strb	r2, [r3, #16]

    macMsg->RxDelay = macMsg->Buffer[bufItr++];
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	681a      	ldr	r2, [r3, #0]
 8013f5a:	89fb      	ldrh	r3, [r7, #14]
 8013f5c:	1c59      	adds	r1, r3, #1
 8013f5e:	81f9      	strh	r1, [r7, #14]
 8013f60:	4413      	add	r3, r2
 8013f62:	781a      	ldrb	r2, [r3, #0]
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	745a      	strb	r2, [r3, #17]

    if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) == LORAMAC_CF_LIST_FIELD_SIZE )
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	791b      	ldrb	r3, [r3, #4]
 8013f6c:	1f1a      	subs	r2, r3, #4
 8013f6e:	89fb      	ldrh	r3, [r7, #14]
 8013f70:	1ad3      	subs	r3, r2, r3
 8013f72:	2b10      	cmp	r3, #16
 8013f74:	d10e      	bne.n	8013f94 <LoRaMacParserJoinAccept+0x118>
    {
        memcpy1( macMsg->CFList, &macMsg->Buffer[bufItr], LORAMAC_CF_LIST_FIELD_SIZE );
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	f103 0012 	add.w	r0, r3, #18
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	681a      	ldr	r2, [r3, #0]
 8013f80:	89fb      	ldrh	r3, [r7, #14]
 8013f82:	4413      	add	r3, r2
 8013f84:	2210      	movs	r2, #16
 8013f86:	4619      	mov	r1, r3
 8013f88:	f002 fd69 	bl	8016a5e <memcpy1>
        bufItr = bufItr + LORAMAC_CF_LIST_FIELD_SIZE;
 8013f8c:	89fb      	ldrh	r3, [r7, #14]
 8013f8e:	3310      	adds	r3, #16
 8013f90:	81fb      	strh	r3, [r7, #14]
 8013f92:	e008      	b.n	8013fa6 <LoRaMacParserJoinAccept+0x12a>
    }
    else if( ( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE - bufItr ) > 0 )
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	791b      	ldrb	r3, [r3, #4]
 8013f98:	1f1a      	subs	r2, r3, #4
 8013f9a:	89fb      	ldrh	r3, [r7, #14]
 8013f9c:	1ad3      	subs	r3, r2, r3
 8013f9e:	2b00      	cmp	r3, #0
 8013fa0:	dd01      	ble.n	8013fa6 <LoRaMacParserJoinAccept+0x12a>
    {
        return LORAMAC_PARSER_FAIL;
 8013fa2:	2301      	movs	r3, #1
 8013fa4:	e031      	b.n	801400a <LoRaMacParserJoinAccept+0x18e>
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[bufItr++];
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	681a      	ldr	r2, [r3, #0]
 8013faa:	89fb      	ldrh	r3, [r7, #14]
 8013fac:	1c59      	adds	r1, r3, #1
 8013fae:	81f9      	strh	r1, [r7, #14]
 8013fb0:	4413      	add	r3, r2
 8013fb2:	781b      	ldrb	r3, [r3, #0]
 8013fb4:	461a      	mov	r2, r3
 8013fb6:	687b      	ldr	r3, [r7, #4]
 8013fb8:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	681a      	ldr	r2, [r3, #0]
 8013fbe:	89fb      	ldrh	r3, [r7, #14]
 8013fc0:	1c59      	adds	r1, r3, #1
 8013fc2:	81f9      	strh	r1, [r7, #14]
 8013fc4:	4413      	add	r3, r2
 8013fc6:	781b      	ldrb	r3, [r3, #0]
 8013fc8:	021a      	lsls	r2, r3, #8
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fce:	431a      	orrs	r2, r3
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8013fd4:	687b      	ldr	r3, [r7, #4]
 8013fd6:	681a      	ldr	r2, [r3, #0]
 8013fd8:	89fb      	ldrh	r3, [r7, #14]
 8013fda:	1c59      	adds	r1, r3, #1
 8013fdc:	81f9      	strh	r1, [r7, #14]
 8013fde:	4413      	add	r3, r2
 8013fe0:	781b      	ldrb	r3, [r3, #0]
 8013fe2:	041a      	lsls	r2, r3, #16
 8013fe4:	687b      	ldr	r3, [r7, #4]
 8013fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fe8:	431a      	orrs	r2, r3
 8013fea:	687b      	ldr	r3, [r7, #4]
 8013fec:	625a      	str	r2, [r3, #36]	@ 0x24
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 8013fee:	687b      	ldr	r3, [r7, #4]
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	89fb      	ldrh	r3, [r7, #14]
 8013ff4:	1c59      	adds	r1, r3, #1
 8013ff6:	81f9      	strh	r1, [r7, #14]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	781b      	ldrb	r3, [r3, #0]
 8013ffc:	061a      	lsls	r2, r3, #24
 8013ffe:	687b      	ldr	r3, [r7, #4]
 8014000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014002:	431a      	orrs	r2, r3
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	625a      	str	r2, [r3, #36]	@ 0x24

    return LORAMAC_PARSER_SUCCESS;
 8014008:	2300      	movs	r3, #0
}
 801400a:	4618      	mov	r0, r3
 801400c:	3710      	adds	r7, #16
 801400e:	46bd      	mov	sp, r7
 8014010:	bd80      	pop	{r7, pc}

08014012 <LoRaMacParserData>:

LoRaMacParserStatus_t LoRaMacParserData( LoRaMacMessageData_t* macMsg )
{
 8014012:	b580      	push	{r7, lr}
 8014014:	b084      	sub	sp, #16
 8014016:	af00      	add	r7, sp, #0
 8014018:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d003      	beq.n	8014028 <LoRaMacParserData+0x16>
 8014020:	687b      	ldr	r3, [r7, #4]
 8014022:	681b      	ldr	r3, [r3, #0]
 8014024:	2b00      	cmp	r3, #0
 8014026:	d101      	bne.n	801402c <LoRaMacParserData+0x1a>
    {
        return LORAMAC_PARSER_ERROR_NPE;
 8014028:	2302      	movs	r3, #2
 801402a:	e0e0      	b.n	80141ee <LoRaMacParserData+0x1dc>
    }

    uint16_t bufItr = 0;
 801402c:	2300      	movs	r3, #0
 801402e:	81fb      	strh	r3, [r7, #14]

    macMsg->MHDR.Value = macMsg->Buffer[bufItr++];
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681a      	ldr	r2, [r3, #0]
 8014034:	89fb      	ldrh	r3, [r7, #14]
 8014036:	1c59      	adds	r1, r3, #1
 8014038:	81f9      	strh	r1, [r7, #14]
 801403a:	4413      	add	r3, r2
 801403c:	781a      	ldrb	r2, [r3, #0]
 801403e:	687b      	ldr	r3, [r7, #4]
 8014040:	715a      	strb	r2, [r3, #5]

    macMsg->FHDR.DevAddr = macMsg->Buffer[bufItr++];
 8014042:	687b      	ldr	r3, [r7, #4]
 8014044:	681a      	ldr	r2, [r3, #0]
 8014046:	89fb      	ldrh	r3, [r7, #14]
 8014048:	1c59      	adds	r1, r3, #1
 801404a:	81f9      	strh	r1, [r7, #14]
 801404c:	4413      	add	r3, r2
 801404e:	781b      	ldrb	r3, [r3, #0]
 8014050:	461a      	mov	r2, r3
 8014052:	687b      	ldr	r3, [r7, #4]
 8014054:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 8 );
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681a      	ldr	r2, [r3, #0]
 801405a:	89fb      	ldrh	r3, [r7, #14]
 801405c:	1c59      	adds	r1, r3, #1
 801405e:	81f9      	strh	r1, [r7, #14]
 8014060:	4413      	add	r3, r2
 8014062:	781b      	ldrb	r3, [r3, #0]
 8014064:	021a      	lsls	r2, r3, #8
 8014066:	687b      	ldr	r3, [r7, #4]
 8014068:	689b      	ldr	r3, [r3, #8]
 801406a:	431a      	orrs	r2, r3
 801406c:	687b      	ldr	r3, [r7, #4]
 801406e:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 16 );
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	681a      	ldr	r2, [r3, #0]
 8014074:	89fb      	ldrh	r3, [r7, #14]
 8014076:	1c59      	adds	r1, r3, #1
 8014078:	81f9      	strh	r1, [r7, #14]
 801407a:	4413      	add	r3, r2
 801407c:	781b      	ldrb	r3, [r3, #0]
 801407e:	041a      	lsls	r2, r3, #16
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	689b      	ldr	r3, [r3, #8]
 8014084:	431a      	orrs	r2, r3
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	609a      	str	r2, [r3, #8]
    macMsg->FHDR.DevAddr |= ( ( uint32_t ) macMsg->Buffer[bufItr++] << 24 );
 801408a:	687b      	ldr	r3, [r7, #4]
 801408c:	681a      	ldr	r2, [r3, #0]
 801408e:	89fb      	ldrh	r3, [r7, #14]
 8014090:	1c59      	adds	r1, r3, #1
 8014092:	81f9      	strh	r1, [r7, #14]
 8014094:	4413      	add	r3, r2
 8014096:	781b      	ldrb	r3, [r3, #0]
 8014098:	061a      	lsls	r2, r3, #24
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	689b      	ldr	r3, [r3, #8]
 801409e:	431a      	orrs	r2, r3
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	609a      	str	r2, [r3, #8]

    macMsg->FHDR.FCtrl.Value = macMsg->Buffer[bufItr++];
 80140a4:	687b      	ldr	r3, [r7, #4]
 80140a6:	681a      	ldr	r2, [r3, #0]
 80140a8:	89fb      	ldrh	r3, [r7, #14]
 80140aa:	1c59      	adds	r1, r3, #1
 80140ac:	81f9      	strh	r1, [r7, #14]
 80140ae:	4413      	add	r3, r2
 80140b0:	781a      	ldrb	r2, [r3, #0]
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	731a      	strb	r2, [r3, #12]

    macMsg->FHDR.FCnt = macMsg->Buffer[bufItr++];
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	681a      	ldr	r2, [r3, #0]
 80140ba:	89fb      	ldrh	r3, [r7, #14]
 80140bc:	1c59      	adds	r1, r3, #1
 80140be:	81f9      	strh	r1, [r7, #14]
 80140c0:	4413      	add	r3, r2
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	461a      	mov	r2, r3
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	81da      	strh	r2, [r3, #14]
    macMsg->FHDR.FCnt |= macMsg->Buffer[bufItr++] << 8;
 80140ca:	687b      	ldr	r3, [r7, #4]
 80140cc:	681a      	ldr	r2, [r3, #0]
 80140ce:	89fb      	ldrh	r3, [r7, #14]
 80140d0:	1c59      	adds	r1, r3, #1
 80140d2:	81f9      	strh	r1, [r7, #14]
 80140d4:	4413      	add	r3, r2
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	0219      	lsls	r1, r3, #8
 80140da:	687b      	ldr	r3, [r7, #4]
 80140dc:	89db      	ldrh	r3, [r3, #14]
 80140de:	b21a      	sxth	r2, r3
 80140e0:	b20b      	sxth	r3, r1
 80140e2:	4313      	orrs	r3, r2
 80140e4:	b21b      	sxth	r3, r3
 80140e6:	b29a      	uxth	r2, r3
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	81da      	strh	r2, [r3, #14]

    if( macMsg->FHDR.FCtrl.Bits.FOptsLen <= 15 )
    {
        memcpy1( macMsg->FHDR.FOpts, &macMsg->Buffer[bufItr], macMsg->FHDR.FCtrl.Bits.FOptsLen );
 80140ec:	687b      	ldr	r3, [r7, #4]
 80140ee:	f103 0010 	add.w	r0, r3, #16
 80140f2:	687b      	ldr	r3, [r7, #4]
 80140f4:	681a      	ldr	r2, [r3, #0]
 80140f6:	89fb      	ldrh	r3, [r7, #14]
 80140f8:	18d1      	adds	r1, r2, r3
 80140fa:	687b      	ldr	r3, [r7, #4]
 80140fc:	7b1b      	ldrb	r3, [r3, #12]
 80140fe:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014102:	b2db      	uxtb	r3, r3
 8014104:	461a      	mov	r2, r3
 8014106:	f002 fcaa 	bl	8016a5e <memcpy1>
        bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801410a:	687b      	ldr	r3, [r7, #4]
 801410c:	7b1b      	ldrb	r3, [r3, #12]
 801410e:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014112:	b2db      	uxtb	r3, r3
 8014114:	461a      	mov	r2, r3
 8014116:	89fb      	ldrh	r3, [r7, #14]
 8014118:	4413      	add	r3, r2
 801411a:	81fb      	strh	r3, [r7, #14]
    {
        return LORAMAC_PARSER_FAIL;
    }

    // Initialize anyway with zero.
    macMsg->FPort = 0;
 801411c:	687b      	ldr	r3, [r7, #4]
 801411e:	2200      	movs	r2, #0
 8014120:	f883 2020 	strb.w	r2, [r3, #32]
    macMsg->FRMPayloadSize = 0;
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	2200      	movs	r2, #0
 8014128:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

    if( ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE ) > 0 )
 801412c:	687b      	ldr	r3, [r7, #4]
 801412e:	791b      	ldrb	r3, [r3, #4]
 8014130:	461a      	mov	r2, r3
 8014132:	89fb      	ldrh	r3, [r7, #14]
 8014134:	1ad3      	subs	r3, r2, r3
 8014136:	2b04      	cmp	r3, #4
 8014138:	dd27      	ble.n	801418a <LoRaMacParserData+0x178>
    {
        macMsg->FPort = macMsg->Buffer[bufItr++];
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681a      	ldr	r2, [r3, #0]
 801413e:	89fb      	ldrh	r3, [r7, #14]
 8014140:	1c59      	adds	r1, r3, #1
 8014142:	81f9      	strh	r1, [r7, #14]
 8014144:	4413      	add	r3, r2
 8014146:	781a      	ldrb	r2, [r3, #0]
 8014148:	687b      	ldr	r3, [r7, #4]
 801414a:	f883 2020 	strb.w	r2, [r3, #32]

        macMsg->FRMPayloadSize = ( macMsg->BufSize - bufItr - LORAMAC_MIC_FIELD_SIZE );
 801414e:	687b      	ldr	r3, [r7, #4]
 8014150:	791a      	ldrb	r2, [r3, #4]
 8014152:	89fb      	ldrh	r3, [r7, #14]
 8014154:	b2db      	uxtb	r3, r3
 8014156:	1ad3      	subs	r3, r2, r3
 8014158:	b2db      	uxtb	r3, r3
 801415a:	3b04      	subs	r3, #4
 801415c:	b2da      	uxtb	r2, r3
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        memcpy1( macMsg->FRMPayload, &macMsg->Buffer[bufItr], macMsg->FRMPayloadSize );
 8014164:	687b      	ldr	r3, [r7, #4]
 8014166:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681a      	ldr	r2, [r3, #0]
 801416c:	89fb      	ldrh	r3, [r7, #14]
 801416e:	18d1      	adds	r1, r2, r3
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014176:	461a      	mov	r2, r3
 8014178:	f002 fc71 	bl	8016a5e <memcpy1>
        bufItr = bufItr + macMsg->FRMPayloadSize;
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014182:	461a      	mov	r2, r3
 8014184:	89fb      	ldrh	r3, [r7, #14]
 8014186:	4413      	add	r3, r2
 8014188:	81fb      	strh	r3, [r7, #14]
    }

    macMsg->MIC = ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE )];
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	681a      	ldr	r2, [r3, #0]
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	791b      	ldrb	r3, [r3, #4]
 8014192:	3b04      	subs	r3, #4
 8014194:	4413      	add	r3, r2
 8014196:	781b      	ldrb	r3, [r3, #0]
 8014198:	461a      	mov	r2, r3
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 1] << 8 );
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	6819      	ldr	r1, [r3, #0]
 80141a6:	687b      	ldr	r3, [r7, #4]
 80141a8:	791b      	ldrb	r3, [r3, #4]
 80141aa:	3b03      	subs	r3, #3
 80141ac:	440b      	add	r3, r1
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	021b      	lsls	r3, r3, #8
 80141b2:	431a      	orrs	r2, r3
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 2] << 16 );
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141bc:	687b      	ldr	r3, [r7, #4]
 80141be:	6819      	ldr	r1, [r3, #0]
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	791b      	ldrb	r3, [r3, #4]
 80141c4:	3b02      	subs	r3, #2
 80141c6:	440b      	add	r3, r1
 80141c8:	781b      	ldrb	r3, [r3, #0]
 80141ca:	041b      	lsls	r3, r3, #16
 80141cc:	431a      	orrs	r2, r3
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	62da      	str	r2, [r3, #44]	@ 0x2c
    macMsg->MIC |= ( ( uint32_t ) macMsg->Buffer[( macMsg->BufSize - LORAMAC_MIC_FIELD_SIZE ) + 3] << 24 );
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	6819      	ldr	r1, [r3, #0]
 80141da:	687b      	ldr	r3, [r7, #4]
 80141dc:	791b      	ldrb	r3, [r3, #4]
 80141de:	3b01      	subs	r3, #1
 80141e0:	440b      	add	r3, r1
 80141e2:	781b      	ldrb	r3, [r3, #0]
 80141e4:	061b      	lsls	r3, r3, #24
 80141e6:	431a      	orrs	r2, r3
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    return LORAMAC_PARSER_SUCCESS;
 80141ec:	2300      	movs	r3, #0
}
 80141ee:	4618      	mov	r0, r3
 80141f0:	3710      	adds	r7, #16
 80141f2:	46bd      	mov	sp, r7
 80141f4:	bd80      	pop	{r7, pc}

080141f6 <LoRaMacSerializerJoinRequest>:
 */
#include "LoRaMacSerializer.h"
#include "utilities.h"

LoRaMacSerializerStatus_t LoRaMacSerializerJoinRequest( LoRaMacMessageJoinRequest_t* macMsg )
{
 80141f6:	b580      	push	{r7, lr}
 80141f8:	b084      	sub	sp, #16
 80141fa:	af00      	add	r7, sp, #0
 80141fc:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d003      	beq.n	801420c <LoRaMacSerializerJoinRequest+0x16>
 8014204:	687b      	ldr	r3, [r7, #4]
 8014206:	681b      	ldr	r3, [r3, #0]
 8014208:	2b00      	cmp	r3, #0
 801420a:	d101      	bne.n	8014210 <LoRaMacSerializerJoinRequest+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 801420c:	2301      	movs	r3, #1
 801420e:	e070      	b.n	80142f2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    uint16_t bufItr = 0;
 8014210:	2300      	movs	r3, #0
 8014212:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    if( macMsg->BufSize < LORAMAC_JOIN_REQ_MSG_SIZE )
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	791b      	ldrb	r3, [r3, #4]
 8014218:	2b16      	cmp	r3, #22
 801421a:	d801      	bhi.n	8014220 <LoRaMacSerializerJoinRequest+0x2a>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801421c:	2302      	movs	r3, #2
 801421e:	e068      	b.n	80142f2 <LoRaMacSerializerJoinRequest+0xfc>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681a      	ldr	r2, [r3, #0]
 8014224:	89fb      	ldrh	r3, [r7, #14]
 8014226:	1c59      	adds	r1, r3, #1
 8014228:	81f9      	strh	r1, [r7, #14]
 801422a:	4413      	add	r3, r2
 801422c:	687a      	ldr	r2, [r7, #4]
 801422e:	7952      	ldrb	r2, [r2, #5]
 8014230:	701a      	strb	r2, [r3, #0]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->JoinEUI, LORAMAC_JOIN_EUI_FIELD_SIZE );
 8014232:	687b      	ldr	r3, [r7, #4]
 8014234:	681a      	ldr	r2, [r3, #0]
 8014236:	89fb      	ldrh	r3, [r7, #14]
 8014238:	18d0      	adds	r0, r2, r3
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	3306      	adds	r3, #6
 801423e:	2208      	movs	r2, #8
 8014240:	4619      	mov	r1, r3
 8014242:	f002 fc27 	bl	8016a94 <memcpyr>
    bufItr += LORAMAC_JOIN_EUI_FIELD_SIZE;
 8014246:	89fb      	ldrh	r3, [r7, #14]
 8014248:	3308      	adds	r3, #8
 801424a:	81fb      	strh	r3, [r7, #14]

    memcpyr( &macMsg->Buffer[bufItr], macMsg->DevEUI, LORAMAC_DEV_EUI_FIELD_SIZE );
 801424c:	687b      	ldr	r3, [r7, #4]
 801424e:	681a      	ldr	r2, [r3, #0]
 8014250:	89fb      	ldrh	r3, [r7, #14]
 8014252:	18d0      	adds	r0, r2, r3
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	330e      	adds	r3, #14
 8014258:	2208      	movs	r2, #8
 801425a:	4619      	mov	r1, r3
 801425c:	f002 fc1a 	bl	8016a94 <memcpyr>
    bufItr += LORAMAC_DEV_EUI_FIELD_SIZE;
 8014260:	89fb      	ldrh	r3, [r7, #14]
 8014262:	3308      	adds	r3, #8
 8014264:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->DevNonce & 0xFF;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	8ad9      	ldrh	r1, [r3, #22]
 801426a:	687b      	ldr	r3, [r7, #4]
 801426c:	681a      	ldr	r2, [r3, #0]
 801426e:	89fb      	ldrh	r3, [r7, #14]
 8014270:	1c58      	adds	r0, r3, #1
 8014272:	81f8      	strh	r0, [r7, #14]
 8014274:	4413      	add	r3, r2
 8014276:	b2ca      	uxtb	r2, r1
 8014278:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->DevNonce >> 8 ) & 0xFF;
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	8adb      	ldrh	r3, [r3, #22]
 801427e:	0a1b      	lsrs	r3, r3, #8
 8014280:	b299      	uxth	r1, r3
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	681a      	ldr	r2, [r3, #0]
 8014286:	89fb      	ldrh	r3, [r7, #14]
 8014288:	1c58      	adds	r0, r3, #1
 801428a:	81f8      	strh	r0, [r7, #14]
 801428c:	4413      	add	r3, r2
 801428e:	b2ca      	uxtb	r2, r1
 8014290:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	6999      	ldr	r1, [r3, #24]
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	681a      	ldr	r2, [r3, #0]
 801429a:	89fb      	ldrh	r3, [r7, #14]
 801429c:	1c58      	adds	r0, r3, #1
 801429e:	81f8      	strh	r0, [r7, #14]
 80142a0:	4413      	add	r3, r2
 80142a2:	b2ca      	uxtb	r2, r1
 80142a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 80142a6:	687b      	ldr	r3, [r7, #4]
 80142a8:	699b      	ldr	r3, [r3, #24]
 80142aa:	0a19      	lsrs	r1, r3, #8
 80142ac:	687b      	ldr	r3, [r7, #4]
 80142ae:	681a      	ldr	r2, [r3, #0]
 80142b0:	89fb      	ldrh	r3, [r7, #14]
 80142b2:	1c58      	adds	r0, r3, #1
 80142b4:	81f8      	strh	r0, [r7, #14]
 80142b6:	4413      	add	r3, r2
 80142b8:	b2ca      	uxtb	r2, r1
 80142ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80142bc:	687b      	ldr	r3, [r7, #4]
 80142be:	699b      	ldr	r3, [r3, #24]
 80142c0:	0c19      	lsrs	r1, r3, #16
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	681a      	ldr	r2, [r3, #0]
 80142c6:	89fb      	ldrh	r3, [r7, #14]
 80142c8:	1c58      	adds	r0, r3, #1
 80142ca:	81f8      	strh	r0, [r7, #14]
 80142cc:	4413      	add	r3, r2
 80142ce:	b2ca      	uxtb	r2, r1
 80142d0:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80142d2:	687b      	ldr	r3, [r7, #4]
 80142d4:	699b      	ldr	r3, [r3, #24]
 80142d6:	0e19      	lsrs	r1, r3, #24
 80142d8:	687b      	ldr	r3, [r7, #4]
 80142da:	681a      	ldr	r2, [r3, #0]
 80142dc:	89fb      	ldrh	r3, [r7, #14]
 80142de:	1c58      	adds	r0, r3, #1
 80142e0:	81f8      	strh	r0, [r7, #14]
 80142e2:	4413      	add	r3, r2
 80142e4:	b2ca      	uxtb	r2, r1
 80142e6:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80142e8:	89fb      	ldrh	r3, [r7, #14]
 80142ea:	b2da      	uxtb	r2, r3
 80142ec:	687b      	ldr	r3, [r7, #4]
 80142ee:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80142f0:	2300      	movs	r3, #0
}
 80142f2:	4618      	mov	r0, r3
 80142f4:	3710      	adds	r7, #16
 80142f6:	46bd      	mov	sp, r7
 80142f8:	bd80      	pop	{r7, pc}

080142fa <LoRaMacSerializerData>:

    return LORAMAC_SERIALIZER_SUCCESS;
}

LoRaMacSerializerStatus_t LoRaMacSerializerData( LoRaMacMessageData_t* macMsg )
{
 80142fa:	b580      	push	{r7, lr}
 80142fc:	b084      	sub	sp, #16
 80142fe:	af00      	add	r7, sp, #0
 8014300:	6078      	str	r0, [r7, #4]
    if( ( macMsg == 0 ) || ( macMsg->Buffer == 0 ) )
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	2b00      	cmp	r3, #0
 8014306:	d003      	beq.n	8014310 <LoRaMacSerializerData+0x16>
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	681b      	ldr	r3, [r3, #0]
 801430c:	2b00      	cmp	r3, #0
 801430e:	d101      	bne.n	8014314 <LoRaMacSerializerData+0x1a>
    {
        return LORAMAC_SERIALIZER_ERROR_NPE;
 8014310:	2301      	movs	r3, #1
 8014312:	e0e3      	b.n	80144dc <LoRaMacSerializerData+0x1e2>
    }

    uint16_t bufItr = 0;
 8014314:	2300      	movs	r3, #0
 8014316:	81fb      	strh	r3, [r7, #14]

    // Check macMsg->BufSize
    uint16_t computedBufSize =   LORAMAC_MHDR_FIELD_SIZE
 8014318:	2308      	movs	r3, #8
 801431a:	81bb      	strh	r3, [r7, #12]
                               + LORAMAC_FHDR_DEV_ADDR_FIELD_SIZE
                               + LORAMAC_FHDR_F_CTRL_FIELD_SIZE
                               + LORAMAC_FHDR_F_CNT_FIELD_SIZE;

    computedBufSize += macMsg->FHDR.FCtrl.Bits.FOptsLen;
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	7b1b      	ldrb	r3, [r3, #12]
 8014320:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8014324:	b2db      	uxtb	r3, r3
 8014326:	461a      	mov	r2, r3
 8014328:	89bb      	ldrh	r3, [r7, #12]
 801432a:	4413      	add	r3, r2
 801432c:	81bb      	strh	r3, [r7, #12]

    if( macMsg->FRMPayloadSize > 0 )
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014334:	2b00      	cmp	r3, #0
 8014336:	d002      	beq.n	801433e <LoRaMacSerializerData+0x44>
    {
        computedBufSize += LORAMAC_F_PORT_FIELD_SIZE;
 8014338:	89bb      	ldrh	r3, [r7, #12]
 801433a:	3301      	adds	r3, #1
 801433c:	81bb      	strh	r3, [r7, #12]
    }

    computedBufSize += macMsg->FRMPayloadSize;
 801433e:	687b      	ldr	r3, [r7, #4]
 8014340:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014344:	461a      	mov	r2, r3
 8014346:	89bb      	ldrh	r3, [r7, #12]
 8014348:	4413      	add	r3, r2
 801434a:	81bb      	strh	r3, [r7, #12]
    computedBufSize += LORAMAC_MIC_FIELD_SIZE;
 801434c:	89bb      	ldrh	r3, [r7, #12]
 801434e:	3304      	adds	r3, #4
 8014350:	81bb      	strh	r3, [r7, #12]

    if( macMsg->BufSize < computedBufSize )
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	791b      	ldrb	r3, [r3, #4]
 8014356:	461a      	mov	r2, r3
 8014358:	89bb      	ldrh	r3, [r7, #12]
 801435a:	4293      	cmp	r3, r2
 801435c:	d901      	bls.n	8014362 <LoRaMacSerializerData+0x68>
    {
        return LORAMAC_SERIALIZER_ERROR_BUF_SIZE;
 801435e:	2302      	movs	r3, #2
 8014360:	e0bc      	b.n	80144dc <LoRaMacSerializerData+0x1e2>
    }

    macMsg->Buffer[bufItr++] = macMsg->MHDR.Value;
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	681a      	ldr	r2, [r3, #0]
 8014366:	89fb      	ldrh	r3, [r7, #14]
 8014368:	1c59      	adds	r1, r3, #1
 801436a:	81f9      	strh	r1, [r7, #14]
 801436c:	4413      	add	r3, r2
 801436e:	687a      	ldr	r2, [r7, #4]
 8014370:	7952      	ldrb	r2, [r2, #5]
 8014372:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr ) & 0xFF;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6899      	ldr	r1, [r3, #8]
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681a      	ldr	r2, [r3, #0]
 801437c:	89fb      	ldrh	r3, [r7, #14]
 801437e:	1c58      	adds	r0, r3, #1
 8014380:	81f8      	strh	r0, [r7, #14]
 8014382:	4413      	add	r3, r2
 8014384:	b2ca      	uxtb	r2, r1
 8014386:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 8 ) & 0xFF;
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	689b      	ldr	r3, [r3, #8]
 801438c:	0a19      	lsrs	r1, r3, #8
 801438e:	687b      	ldr	r3, [r7, #4]
 8014390:	681a      	ldr	r2, [r3, #0]
 8014392:	89fb      	ldrh	r3, [r7, #14]
 8014394:	1c58      	adds	r0, r3, #1
 8014396:	81f8      	strh	r0, [r7, #14]
 8014398:	4413      	add	r3, r2
 801439a:	b2ca      	uxtb	r2, r1
 801439c:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 16 ) & 0xFF;
 801439e:	687b      	ldr	r3, [r7, #4]
 80143a0:	689b      	ldr	r3, [r3, #8]
 80143a2:	0c19      	lsrs	r1, r3, #16
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	681a      	ldr	r2, [r3, #0]
 80143a8:	89fb      	ldrh	r3, [r7, #14]
 80143aa:	1c58      	adds	r0, r3, #1
 80143ac:	81f8      	strh	r0, [r7, #14]
 80143ae:	4413      	add	r3, r2
 80143b0:	b2ca      	uxtb	r2, r1
 80143b2:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.DevAddr >> 24 ) & 0xFF;
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	689b      	ldr	r3, [r3, #8]
 80143b8:	0e19      	lsrs	r1, r3, #24
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	681a      	ldr	r2, [r3, #0]
 80143be:	89fb      	ldrh	r3, [r7, #14]
 80143c0:	1c58      	adds	r0, r3, #1
 80143c2:	81f8      	strh	r0, [r7, #14]
 80143c4:	4413      	add	r3, r2
 80143c6:	b2ca      	uxtb	r2, r1
 80143c8:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCtrl.Value;
 80143ca:	687b      	ldr	r3, [r7, #4]
 80143cc:	681a      	ldr	r2, [r3, #0]
 80143ce:	89fb      	ldrh	r3, [r7, #14]
 80143d0:	1c59      	adds	r1, r3, #1
 80143d2:	81f9      	strh	r1, [r7, #14]
 80143d4:	4413      	add	r3, r2
 80143d6:	687a      	ldr	r2, [r7, #4]
 80143d8:	7b12      	ldrb	r2, [r2, #12]
 80143da:	701a      	strb	r2, [r3, #0]

    macMsg->Buffer[bufItr++] = macMsg->FHDR.FCnt & 0xFF;
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	89d9      	ldrh	r1, [r3, #14]
 80143e0:	687b      	ldr	r3, [r7, #4]
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	89fb      	ldrh	r3, [r7, #14]
 80143e6:	1c58      	adds	r0, r3, #1
 80143e8:	81f8      	strh	r0, [r7, #14]
 80143ea:	4413      	add	r3, r2
 80143ec:	b2ca      	uxtb	r2, r1
 80143ee:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->FHDR.FCnt >> 8 ) & 0xFF;
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	89db      	ldrh	r3, [r3, #14]
 80143f4:	0a1b      	lsrs	r3, r3, #8
 80143f6:	b299      	uxth	r1, r3
 80143f8:	687b      	ldr	r3, [r7, #4]
 80143fa:	681a      	ldr	r2, [r3, #0]
 80143fc:	89fb      	ldrh	r3, [r7, #14]
 80143fe:	1c58      	adds	r0, r3, #1
 8014400:	81f8      	strh	r0, [r7, #14]
 8014402:	4413      	add	r3, r2
 8014404:	b2ca      	uxtb	r2, r1
 8014406:	701a      	strb	r2, [r3, #0]

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FHDR.FOpts, macMsg->FHDR.FCtrl.Bits.FOptsLen );
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	681a      	ldr	r2, [r3, #0]
 801440c:	89fb      	ldrh	r3, [r7, #14]
 801440e:	18d0      	adds	r0, r2, r3
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f103 0110 	add.w	r1, r3, #16
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	7b1b      	ldrb	r3, [r3, #12]
 801441a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801441e:	b2db      	uxtb	r3, r3
 8014420:	461a      	mov	r2, r3
 8014422:	f002 fb1c 	bl	8016a5e <memcpy1>
    bufItr = bufItr + macMsg->FHDR.FCtrl.Bits.FOptsLen;
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	7b1b      	ldrb	r3, [r3, #12]
 801442a:	f3c3 0303 	ubfx	r3, r3, #0, #4
 801442e:	b2db      	uxtb	r3, r3
 8014430:	461a      	mov	r2, r3
 8014432:	89fb      	ldrh	r3, [r7, #14]
 8014434:	4413      	add	r3, r2
 8014436:	81fb      	strh	r3, [r7, #14]

    if( macMsg->FRMPayloadSize > 0 )
 8014438:	687b      	ldr	r3, [r7, #4]
 801443a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801443e:	2b00      	cmp	r3, #0
 8014440:	d009      	beq.n	8014456 <LoRaMacSerializerData+0x15c>
    {
        macMsg->Buffer[bufItr++] = macMsg->FPort;
 8014442:	687b      	ldr	r3, [r7, #4]
 8014444:	681a      	ldr	r2, [r3, #0]
 8014446:	89fb      	ldrh	r3, [r7, #14]
 8014448:	1c59      	adds	r1, r3, #1
 801444a:	81f9      	strh	r1, [r7, #14]
 801444c:	4413      	add	r3, r2
 801444e:	687a      	ldr	r2, [r7, #4]
 8014450:	f892 2020 	ldrb.w	r2, [r2, #32]
 8014454:	701a      	strb	r2, [r3, #0]
    }

    memcpy1( &macMsg->Buffer[bufItr], macMsg->FRMPayload, macMsg->FRMPayloadSize );
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681a      	ldr	r2, [r3, #0]
 801445a:	89fb      	ldrh	r3, [r7, #14]
 801445c:	18d0      	adds	r0, r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8014462:	687b      	ldr	r3, [r7, #4]
 8014464:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014468:	461a      	mov	r2, r3
 801446a:	f002 faf8 	bl	8016a5e <memcpy1>
    bufItr = bufItr + macMsg->FRMPayloadSize;
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8014474:	461a      	mov	r2, r3
 8014476:	89fb      	ldrh	r3, [r7, #14]
 8014478:	4413      	add	r3, r2
 801447a:	81fb      	strh	r3, [r7, #14]

    macMsg->Buffer[bufItr++] = macMsg->MIC & 0xFF;
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681a      	ldr	r2, [r3, #0]
 8014484:	89fb      	ldrh	r3, [r7, #14]
 8014486:	1c58      	adds	r0, r3, #1
 8014488:	81f8      	strh	r0, [r7, #14]
 801448a:	4413      	add	r3, r2
 801448c:	b2ca      	uxtb	r2, r1
 801448e:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 8 ) & 0xFF;
 8014490:	687b      	ldr	r3, [r7, #4]
 8014492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014494:	0a19      	lsrs	r1, r3, #8
 8014496:	687b      	ldr	r3, [r7, #4]
 8014498:	681a      	ldr	r2, [r3, #0]
 801449a:	89fb      	ldrh	r3, [r7, #14]
 801449c:	1c58      	adds	r0, r3, #1
 801449e:	81f8      	strh	r0, [r7, #14]
 80144a0:	4413      	add	r3, r2
 80144a2:	b2ca      	uxtb	r2, r1
 80144a4:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 16 ) & 0xFF;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144aa:	0c19      	lsrs	r1, r3, #16
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	681a      	ldr	r2, [r3, #0]
 80144b0:	89fb      	ldrh	r3, [r7, #14]
 80144b2:	1c58      	adds	r0, r3, #1
 80144b4:	81f8      	strh	r0, [r7, #14]
 80144b6:	4413      	add	r3, r2
 80144b8:	b2ca      	uxtb	r2, r1
 80144ba:	701a      	strb	r2, [r3, #0]
    macMsg->Buffer[bufItr++] = ( macMsg->MIC >> 24 ) & 0xFF;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80144c0:	0e19      	lsrs	r1, r3, #24
 80144c2:	687b      	ldr	r3, [r7, #4]
 80144c4:	681a      	ldr	r2, [r3, #0]
 80144c6:	89fb      	ldrh	r3, [r7, #14]
 80144c8:	1c58      	adds	r0, r3, #1
 80144ca:	81f8      	strh	r0, [r7, #14]
 80144cc:	4413      	add	r3, r2
 80144ce:	b2ca      	uxtb	r2, r1
 80144d0:	701a      	strb	r2, [r3, #0]

    macMsg->BufSize = bufItr;
 80144d2:	89fb      	ldrh	r3, [r7, #14]
 80144d4:	b2da      	uxtb	r2, r3
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	711a      	strb	r2, [r3, #4]

    return LORAMAC_SERIALIZER_SUCCESS;
 80144da:	2300      	movs	r3, #0
}
 80144dc:	4618      	mov	r0, r3
 80144de:	3710      	adds	r7, #16
 80144e0:	46bd      	mov	sp, r7
 80144e2:	bd80      	pop	{r7, pc}

080144e4 <RegionIsActive>:
#define RU864_APPLY_DR_OFFSET( )
#define RU864_RX_BEACON_SETUP( )
#endif

bool RegionIsActive( LoRaMacRegion_t region )
{
 80144e4:	b480      	push	{r7}
 80144e6:	b083      	sub	sp, #12
 80144e8:	af00      	add	r7, sp, #0
 80144ea:	4603      	mov	r3, r0
 80144ec:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80144ee:	79fb      	ldrb	r3, [r7, #7]
 80144f0:	2b05      	cmp	r3, #5
 80144f2:	d101      	bne.n	80144f8 <RegionIsActive+0x14>
        AS923_IS_ACTIVE( );
        AU915_IS_ACTIVE( );
        CN470_IS_ACTIVE( );
        CN779_IS_ACTIVE( );
        EU433_IS_ACTIVE( );
        EU868_IS_ACTIVE( );
 80144f4:	2301      	movs	r3, #1
 80144f6:	e000      	b.n	80144fa <RegionIsActive+0x16>
        IN865_IS_ACTIVE( );
        US915_IS_ACTIVE( );
        RU864_IS_ACTIVE( );
        default:
        {
            return false;
 80144f8:	2300      	movs	r3, #0
        }
    }
}
 80144fa:	4618      	mov	r0, r3
 80144fc:	370c      	adds	r7, #12
 80144fe:	46bd      	mov	sp, r7
 8014500:	bc80      	pop	{r7}
 8014502:	4770      	bx	lr

08014504 <RegionGetPhyParam>:

PhyParam_t RegionGetPhyParam( LoRaMacRegion_t region, GetPhyParams_t* getPhy )
{
 8014504:	b580      	push	{r7, lr}
 8014506:	b084      	sub	sp, #16
 8014508:	af00      	add	r7, sp, #0
 801450a:	4603      	mov	r3, r0
 801450c:	6039      	str	r1, [r7, #0]
 801450e:	71fb      	strb	r3, [r7, #7]
    PhyParam_t phyParam = { 0 };
 8014510:	2300      	movs	r3, #0
 8014512:	60bb      	str	r3, [r7, #8]
    switch( region )
 8014514:	79fb      	ldrb	r3, [r7, #7]
 8014516:	2b05      	cmp	r3, #5
 8014518:	d105      	bne.n	8014526 <RegionGetPhyParam+0x22>
        AS923_GET_PHY_PARAM( );
        AU915_GET_PHY_PARAM( );
        CN470_GET_PHY_PARAM( );
        CN779_GET_PHY_PARAM( );
        EU433_GET_PHY_PARAM( );
        EU868_GET_PHY_PARAM( );
 801451a:	6838      	ldr	r0, [r7, #0]
 801451c:	f001 f982 	bl	8015824 <RegionEU868GetPhyParam>
 8014520:	4603      	mov	r3, r0
 8014522:	60fb      	str	r3, [r7, #12]
 8014524:	e001      	b.n	801452a <RegionGetPhyParam+0x26>
        IN865_GET_PHY_PARAM( );
        US915_GET_PHY_PARAM( );
        RU864_GET_PHY_PARAM( );
        default:
        {
            return phyParam;
 8014526:	68bb      	ldr	r3, [r7, #8]
 8014528:	60fb      	str	r3, [r7, #12]
        }
    }
}
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	4618      	mov	r0, r3
 801452e:	3710      	adds	r7, #16
 8014530:	46bd      	mov	sp, r7
 8014532:	bd80      	pop	{r7, pc}

08014534 <RegionSetBandTxDone>:

void RegionSetBandTxDone( LoRaMacRegion_t region, SetBandTxDoneParams_t* txDone )
{
 8014534:	b580      	push	{r7, lr}
 8014536:	b082      	sub	sp, #8
 8014538:	af00      	add	r7, sp, #0
 801453a:	4603      	mov	r3, r0
 801453c:	6039      	str	r1, [r7, #0]
 801453e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014540:	79fb      	ldrb	r3, [r7, #7]
 8014542:	2b05      	cmp	r3, #5
 8014544:	d103      	bne.n	801454e <RegionSetBandTxDone+0x1a>
        AS923_SET_BAND_TX_DONE( );
        AU915_SET_BAND_TX_DONE( );
        CN470_SET_BAND_TX_DONE( );
        CN779_SET_BAND_TX_DONE( );
        EU433_SET_BAND_TX_DONE( );
        EU868_SET_BAND_TX_DONE( );
 8014546:	6838      	ldr	r0, [r7, #0]
 8014548:	f001 fab2 	bl	8015ab0 <RegionEU868SetBandTxDone>
 801454c:	e000      	b.n	8014550 <RegionSetBandTxDone+0x1c>
        IN865_SET_BAND_TX_DONE( );
        US915_SET_BAND_TX_DONE( );
        RU864_SET_BAND_TX_DONE( );
        default:
        {
            return;
 801454e:	bf00      	nop
        }
    }
}
 8014550:	3708      	adds	r7, #8
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}

08014556 <RegionInitDefaults>:

void RegionInitDefaults( LoRaMacRegion_t region, InitDefaultsParams_t* params )
{
 8014556:	b580      	push	{r7, lr}
 8014558:	b082      	sub	sp, #8
 801455a:	af00      	add	r7, sp, #0
 801455c:	4603      	mov	r3, r0
 801455e:	6039      	str	r1, [r7, #0]
 8014560:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014562:	79fb      	ldrb	r3, [r7, #7]
 8014564:	2b05      	cmp	r3, #5
 8014566:	d103      	bne.n	8014570 <RegionInitDefaults+0x1a>
        AS923_INIT_DEFAULTS( );
        AU915_INIT_DEFAULTS( );
        CN470_INIT_DEFAULTS( );
        CN779_INIT_DEFAULTS( );
        EU433_INIT_DEFAULTS( );
        EU868_INIT_DEFAULTS( );
 8014568:	6838      	ldr	r0, [r7, #0]
 801456a:	f001 facd 	bl	8015b08 <RegionEU868InitDefaults>
 801456e:	e000      	b.n	8014572 <RegionInitDefaults+0x1c>
        IN865_INIT_DEFAULTS( );
        US915_INIT_DEFAULTS( );
        RU864_INIT_DEFAULTS( );
        default:
        {
            break;
 8014570:	bf00      	nop
        }
    }
}
 8014572:	bf00      	nop
 8014574:	3708      	adds	r7, #8
 8014576:	46bd      	mov	sp, r7
 8014578:	bd80      	pop	{r7, pc}

0801457a <RegionVerify>:

bool RegionVerify( LoRaMacRegion_t region, VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 801457a:	b580      	push	{r7, lr}
 801457c:	b082      	sub	sp, #8
 801457e:	af00      	add	r7, sp, #0
 8014580:	4603      	mov	r3, r0
 8014582:	6039      	str	r1, [r7, #0]
 8014584:	71fb      	strb	r3, [r7, #7]
 8014586:	4613      	mov	r3, r2
 8014588:	71bb      	strb	r3, [r7, #6]
    switch( region )
 801458a:	79fb      	ldrb	r3, [r7, #7]
 801458c:	2b05      	cmp	r3, #5
 801458e:	d106      	bne.n	801459e <RegionVerify+0x24>
        AS923_VERIFY( );
        AU915_VERIFY( );
        CN470_VERIFY( );
        CN779_VERIFY( );
        EU433_VERIFY( );
        EU868_VERIFY( );
 8014590:	79bb      	ldrb	r3, [r7, #6]
 8014592:	4619      	mov	r1, r3
 8014594:	6838      	ldr	r0, [r7, #0]
 8014596:	f001 fb55 	bl	8015c44 <RegionEU868Verify>
 801459a:	4603      	mov	r3, r0
 801459c:	e000      	b.n	80145a0 <RegionVerify+0x26>
        IN865_VERIFY( );
        US915_VERIFY( );
        RU864_VERIFY( );
        default:
        {
            return false;
 801459e:	2300      	movs	r3, #0
        }
    }
}
 80145a0:	4618      	mov	r0, r3
 80145a2:	3708      	adds	r7, #8
 80145a4:	46bd      	mov	sp, r7
 80145a6:	bd80      	pop	{r7, pc}

080145a8 <RegionApplyCFList>:

void RegionApplyCFList( LoRaMacRegion_t region, ApplyCFListParams_t* applyCFList )
{
 80145a8:	b580      	push	{r7, lr}
 80145aa:	b082      	sub	sp, #8
 80145ac:	af00      	add	r7, sp, #0
 80145ae:	4603      	mov	r3, r0
 80145b0:	6039      	str	r1, [r7, #0]
 80145b2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145b4:	79fb      	ldrb	r3, [r7, #7]
 80145b6:	2b05      	cmp	r3, #5
 80145b8:	d103      	bne.n	80145c2 <RegionApplyCFList+0x1a>
        AS923_APPLY_CF_LIST( );
        AU915_APPLY_CF_LIST( );
        CN470_APPLY_CF_LIST( );
        CN779_APPLY_CF_LIST( );
        EU433_APPLY_CF_LIST( );
        EU868_APPLY_CF_LIST( );
 80145ba:	6838      	ldr	r0, [r7, #0]
 80145bc:	f001 fbbe 	bl	8015d3c <RegionEU868ApplyCFList>
 80145c0:	e000      	b.n	80145c4 <RegionApplyCFList+0x1c>
        IN865_APPLY_CF_LIST( );
        US915_APPLY_CF_LIST( );
        RU864_APPLY_CF_LIST( );
        default:
        {
            break;
 80145c2:	bf00      	nop
        }
    }
}
 80145c4:	bf00      	nop
 80145c6:	3708      	adds	r7, #8
 80145c8:	46bd      	mov	sp, r7
 80145ca:	bd80      	pop	{r7, pc}

080145cc <RegionChanMaskSet>:

bool RegionChanMaskSet( LoRaMacRegion_t region, ChanMaskSetParams_t* chanMaskSet )
{
 80145cc:	b580      	push	{r7, lr}
 80145ce:	b082      	sub	sp, #8
 80145d0:	af00      	add	r7, sp, #0
 80145d2:	4603      	mov	r3, r0
 80145d4:	6039      	str	r1, [r7, #0]
 80145d6:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80145d8:	79fb      	ldrb	r3, [r7, #7]
 80145da:	2b05      	cmp	r3, #5
 80145dc:	d104      	bne.n	80145e8 <RegionChanMaskSet+0x1c>
        AS923_CHAN_MASK_SET( );
        AU915_CHAN_MASK_SET( );
        CN470_CHAN_MASK_SET( );
        CN779_CHAN_MASK_SET( );
        EU433_CHAN_MASK_SET( );
        EU868_CHAN_MASK_SET( );
 80145de:	6838      	ldr	r0, [r7, #0]
 80145e0:	f001 fc20 	bl	8015e24 <RegionEU868ChanMaskSet>
 80145e4:	4603      	mov	r3, r0
 80145e6:	e000      	b.n	80145ea <RegionChanMaskSet+0x1e>
        IN865_CHAN_MASK_SET( );
        US915_CHAN_MASK_SET( );
        RU864_CHAN_MASK_SET( );
        default:
        {
            return false;
 80145e8:	2300      	movs	r3, #0
        }
    }
}
 80145ea:	4618      	mov	r0, r3
 80145ec:	3708      	adds	r7, #8
 80145ee:	46bd      	mov	sp, r7
 80145f0:	bd80      	pop	{r7, pc}

080145f2 <RegionComputeRxWindowParameters>:

void RegionComputeRxWindowParameters( LoRaMacRegion_t region, int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 80145f2:	b580      	push	{r7, lr}
 80145f4:	b082      	sub	sp, #8
 80145f6:	af00      	add	r7, sp, #0
 80145f8:	603b      	str	r3, [r7, #0]
 80145fa:	4603      	mov	r3, r0
 80145fc:	71fb      	strb	r3, [r7, #7]
 80145fe:	460b      	mov	r3, r1
 8014600:	71bb      	strb	r3, [r7, #6]
 8014602:	4613      	mov	r3, r2
 8014604:	717b      	strb	r3, [r7, #5]
    switch( region )
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	2b05      	cmp	r3, #5
 801460a:	d107      	bne.n	801461c <RegionComputeRxWindowParameters+0x2a>
        AS923_COMPUTE_RX_WINDOW_PARAMETERS( );
        AU915_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN470_COMPUTE_RX_WINDOW_PARAMETERS( );
        CN779_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU433_COMPUTE_RX_WINDOW_PARAMETERS( );
        EU868_COMPUTE_RX_WINDOW_PARAMETERS( );
 801460c:	7979      	ldrb	r1, [r7, #5]
 801460e:	f997 0006 	ldrsb.w	r0, [r7, #6]
 8014612:	693b      	ldr	r3, [r7, #16]
 8014614:	683a      	ldr	r2, [r7, #0]
 8014616:	f001 fc2f 	bl	8015e78 <RegionEU868ComputeRxWindowParameters>
 801461a:	e000      	b.n	801461e <RegionComputeRxWindowParameters+0x2c>
        IN865_COMPUTE_RX_WINDOW_PARAMETERS( );
        US915_COMPUTE_RX_WINDOW_PARAMETERS( );
        RU864_COMPUTE_RX_WINDOW_PARAMETERS( );
        default:
        {
            break;
 801461c:	bf00      	nop
        }
    }
}
 801461e:	bf00      	nop
 8014620:	3708      	adds	r7, #8
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}

08014626 <RegionRxConfig>:

bool RegionRxConfig( LoRaMacRegion_t region, RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8014626:	b580      	push	{r7, lr}
 8014628:	b084      	sub	sp, #16
 801462a:	af00      	add	r7, sp, #0
 801462c:	4603      	mov	r3, r0
 801462e:	60b9      	str	r1, [r7, #8]
 8014630:	607a      	str	r2, [r7, #4]
 8014632:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014634:	7bfb      	ldrb	r3, [r7, #15]
 8014636:	2b05      	cmp	r3, #5
 8014638:	d105      	bne.n	8014646 <RegionRxConfig+0x20>
        AS923_RX_CONFIG( );
        AU915_RX_CONFIG( );
        CN470_RX_CONFIG( );
        CN779_RX_CONFIG( );
        EU433_RX_CONFIG( );
        EU868_RX_CONFIG( );
 801463a:	6879      	ldr	r1, [r7, #4]
 801463c:	68b8      	ldr	r0, [r7, #8]
 801463e:	f001 fc75 	bl	8015f2c <RegionEU868RxConfig>
 8014642:	4603      	mov	r3, r0
 8014644:	e000      	b.n	8014648 <RegionRxConfig+0x22>
        IN865_RX_CONFIG( );
        US915_RX_CONFIG( );
        RU864_RX_CONFIG( );
        default:
        {
            return false;
 8014646:	2300      	movs	r3, #0
        }
    }
}
 8014648:	4618      	mov	r0, r3
 801464a:	3710      	adds	r7, #16
 801464c:	46bd      	mov	sp, r7
 801464e:	bd80      	pop	{r7, pc}

08014650 <RegionTxConfig>:

bool RegionTxConfig( LoRaMacRegion_t region, TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 8014650:	b580      	push	{r7, lr}
 8014652:	b084      	sub	sp, #16
 8014654:	af00      	add	r7, sp, #0
 8014656:	60b9      	str	r1, [r7, #8]
 8014658:	607a      	str	r2, [r7, #4]
 801465a:	603b      	str	r3, [r7, #0]
 801465c:	4603      	mov	r3, r0
 801465e:	73fb      	strb	r3, [r7, #15]
    switch( region )
 8014660:	7bfb      	ldrb	r3, [r7, #15]
 8014662:	2b05      	cmp	r3, #5
 8014664:	d106      	bne.n	8014674 <RegionTxConfig+0x24>
        AS923_TX_CONFIG( );
        AU915_TX_CONFIG( );
        CN470_TX_CONFIG( );
        CN779_TX_CONFIG( );
        EU433_TX_CONFIG( );
        EU868_TX_CONFIG( );
 8014666:	683a      	ldr	r2, [r7, #0]
 8014668:	6879      	ldr	r1, [r7, #4]
 801466a:	68b8      	ldr	r0, [r7, #8]
 801466c:	f001 fd2e 	bl	80160cc <RegionEU868TxConfig>
 8014670:	4603      	mov	r3, r0
 8014672:	e000      	b.n	8014676 <RegionTxConfig+0x26>
        IN865_TX_CONFIG( );
        US915_TX_CONFIG( );
        RU864_TX_CONFIG( );
        default:
        {
            return false;
 8014674:	2300      	movs	r3, #0
        }
    }
}
 8014676:	4618      	mov	r0, r3
 8014678:	3710      	adds	r7, #16
 801467a:	46bd      	mov	sp, r7
 801467c:	bd80      	pop	{r7, pc}

0801467e <RegionLinkAdrReq>:

uint8_t RegionLinkAdrReq( LoRaMacRegion_t region, LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801467e:	b580      	push	{r7, lr}
 8014680:	b086      	sub	sp, #24
 8014682:	af02      	add	r7, sp, #8
 8014684:	60b9      	str	r1, [r7, #8]
 8014686:	607a      	str	r2, [r7, #4]
 8014688:	603b      	str	r3, [r7, #0]
 801468a:	4603      	mov	r3, r0
 801468c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801468e:	7bfb      	ldrb	r3, [r7, #15]
 8014690:	2b05      	cmp	r3, #5
 8014692:	d109      	bne.n	80146a8 <RegionLinkAdrReq+0x2a>
        AS923_LINK_ADR_REQ( );
        AU915_LINK_ADR_REQ( );
        CN470_LINK_ADR_REQ( );
        CN779_LINK_ADR_REQ( );
        EU433_LINK_ADR_REQ( );
        EU868_LINK_ADR_REQ( );
 8014694:	69fb      	ldr	r3, [r7, #28]
 8014696:	9300      	str	r3, [sp, #0]
 8014698:	69bb      	ldr	r3, [r7, #24]
 801469a:	683a      	ldr	r2, [r7, #0]
 801469c:	6879      	ldr	r1, [r7, #4]
 801469e:	68b8      	ldr	r0, [r7, #8]
 80146a0:	f001 fde4 	bl	801626c <RegionEU868LinkAdrReq>
 80146a4:	4603      	mov	r3, r0
 80146a6:	e000      	b.n	80146aa <RegionLinkAdrReq+0x2c>
        IN865_LINK_ADR_REQ( );
        US915_LINK_ADR_REQ( );
        RU864_LINK_ADR_REQ( );
        default:
        {
            return 0;
 80146a8:	2300      	movs	r3, #0
        }
    }
}
 80146aa:	4618      	mov	r0, r3
 80146ac:	3710      	adds	r7, #16
 80146ae:	46bd      	mov	sp, r7
 80146b0:	bd80      	pop	{r7, pc}

080146b2 <RegionRxParamSetupReq>:

uint8_t RegionRxParamSetupReq( LoRaMacRegion_t region, RxParamSetupReqParams_t* rxParamSetupReq )
{
 80146b2:	b580      	push	{r7, lr}
 80146b4:	b082      	sub	sp, #8
 80146b6:	af00      	add	r7, sp, #0
 80146b8:	4603      	mov	r3, r0
 80146ba:	6039      	str	r1, [r7, #0]
 80146bc:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146be:	79fb      	ldrb	r3, [r7, #7]
 80146c0:	2b05      	cmp	r3, #5
 80146c2:	d104      	bne.n	80146ce <RegionRxParamSetupReq+0x1c>
        AS923_RX_PARAM_SETUP_REQ( );
        AU915_RX_PARAM_SETUP_REQ( );
        CN470_RX_PARAM_SETUP_REQ( );
        CN779_RX_PARAM_SETUP_REQ( );
        EU433_RX_PARAM_SETUP_REQ( );
        EU868_RX_PARAM_SETUP_REQ( );
 80146c4:	6838      	ldr	r0, [r7, #0]
 80146c6:	f001 fef3 	bl	80164b0 <RegionEU868RxParamSetupReq>
 80146ca:	4603      	mov	r3, r0
 80146cc:	e000      	b.n	80146d0 <RegionRxParamSetupReq+0x1e>
        IN865_RX_PARAM_SETUP_REQ( );
        US915_RX_PARAM_SETUP_REQ( );
        RU864_RX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 80146ce:	2300      	movs	r3, #0
        }
    }
}
 80146d0:	4618      	mov	r0, r3
 80146d2:	3708      	adds	r7, #8
 80146d4:	46bd      	mov	sp, r7
 80146d6:	bd80      	pop	{r7, pc}

080146d8 <RegionNewChannelReq>:

int8_t RegionNewChannelReq( LoRaMacRegion_t region, NewChannelReqParams_t* newChannelReq )
{
 80146d8:	b580      	push	{r7, lr}
 80146da:	b082      	sub	sp, #8
 80146dc:	af00      	add	r7, sp, #0
 80146de:	4603      	mov	r3, r0
 80146e0:	6039      	str	r1, [r7, #0]
 80146e2:	71fb      	strb	r3, [r7, #7]
    switch( region )
 80146e4:	79fb      	ldrb	r3, [r7, #7]
 80146e6:	2b05      	cmp	r3, #5
 80146e8:	d104      	bne.n	80146f4 <RegionNewChannelReq+0x1c>
        AS923_NEW_CHANNEL_REQ( );
        AU915_NEW_CHANNEL_REQ( );
        CN470_NEW_CHANNEL_REQ( );
        CN779_NEW_CHANNEL_REQ( );
        EU433_NEW_CHANNEL_REQ( );
        EU868_NEW_CHANNEL_REQ( );
 80146ea:	6838      	ldr	r0, [r7, #0]
 80146ec:	f001 ff1e 	bl	801652c <RegionEU868NewChannelReq>
 80146f0:	4603      	mov	r3, r0
 80146f2:	e000      	b.n	80146f6 <RegionNewChannelReq+0x1e>
        IN865_NEW_CHANNEL_REQ( );
        US915_NEW_CHANNEL_REQ( );
        RU864_NEW_CHANNEL_REQ( );
        default:
        {
            return 0;
 80146f4:	2300      	movs	r3, #0
        }
    }
}
 80146f6:	4618      	mov	r0, r3
 80146f8:	3708      	adds	r7, #8
 80146fa:	46bd      	mov	sp, r7
 80146fc:	bd80      	pop	{r7, pc}

080146fe <RegionTxParamSetupReq>:

int8_t RegionTxParamSetupReq( LoRaMacRegion_t region, TxParamSetupReqParams_t* txParamSetupReq )
{
 80146fe:	b580      	push	{r7, lr}
 8014700:	b082      	sub	sp, #8
 8014702:	af00      	add	r7, sp, #0
 8014704:	4603      	mov	r3, r0
 8014706:	6039      	str	r1, [r7, #0]
 8014708:	71fb      	strb	r3, [r7, #7]
    switch( region )
 801470a:	79fb      	ldrb	r3, [r7, #7]
 801470c:	2b05      	cmp	r3, #5
 801470e:	d104      	bne.n	801471a <RegionTxParamSetupReq+0x1c>
        AS923_TX_PARAM_SETUP_REQ( );
        AU915_TX_PARAM_SETUP_REQ( );
        CN470_TX_PARAM_SETUP_REQ( );
        CN779_TX_PARAM_SETUP_REQ( );
        EU433_TX_PARAM_SETUP_REQ( );
        EU868_TX_PARAM_SETUP_REQ( );
 8014710:	6838      	ldr	r0, [r7, #0]
 8014712:	f001 ff69 	bl	80165e8 <RegionEU868TxParamSetupReq>
 8014716:	4603      	mov	r3, r0
 8014718:	e000      	b.n	801471c <RegionTxParamSetupReq+0x1e>
        IN865_TX_PARAM_SETUP_REQ( );
        US915_TX_PARAM_SETUP_REQ( );
        RU864_TX_PARAM_SETUP_REQ( );
        default:
        {
            return 0;
 801471a:	2300      	movs	r3, #0
        }
    }
}
 801471c:	4618      	mov	r0, r3
 801471e:	3708      	adds	r7, #8
 8014720:	46bd      	mov	sp, r7
 8014722:	bd80      	pop	{r7, pc}

08014724 <RegionDlChannelReq>:

int8_t RegionDlChannelReq( LoRaMacRegion_t region, DlChannelReqParams_t* dlChannelReq )
{
 8014724:	b580      	push	{r7, lr}
 8014726:	b082      	sub	sp, #8
 8014728:	af00      	add	r7, sp, #0
 801472a:	4603      	mov	r3, r0
 801472c:	6039      	str	r1, [r7, #0]
 801472e:	71fb      	strb	r3, [r7, #7]
    switch( region )
 8014730:	79fb      	ldrb	r3, [r7, #7]
 8014732:	2b05      	cmp	r3, #5
 8014734:	d104      	bne.n	8014740 <RegionDlChannelReq+0x1c>
        AS923_DL_CHANNEL_REQ( );
        AU915_DL_CHANNEL_REQ( );
        CN470_DL_CHANNEL_REQ( );
        CN779_DL_CHANNEL_REQ( );
        EU433_DL_CHANNEL_REQ( );
        EU868_DL_CHANNEL_REQ( );
 8014736:	6838      	ldr	r0, [r7, #0]
 8014738:	f001 ff62 	bl	8016600 <RegionEU868DlChannelReq>
 801473c:	4603      	mov	r3, r0
 801473e:	e000      	b.n	8014742 <RegionDlChannelReq+0x1e>
        IN865_DL_CHANNEL_REQ( );
        US915_DL_CHANNEL_REQ( );
        RU864_DL_CHANNEL_REQ( );
        default:
        {
            return 0;
 8014740:	2300      	movs	r3, #0
        }
    }
}
 8014742:	4618      	mov	r0, r3
 8014744:	3708      	adds	r7, #8
 8014746:	46bd      	mov	sp, r7
 8014748:	bd80      	pop	{r7, pc}

0801474a <RegionAlternateDr>:

int8_t RegionAlternateDr( LoRaMacRegion_t region, int8_t currentDr, AlternateDrType_t type )
{
 801474a:	b580      	push	{r7, lr}
 801474c:	b082      	sub	sp, #8
 801474e:	af00      	add	r7, sp, #0
 8014750:	4603      	mov	r3, r0
 8014752:	71fb      	strb	r3, [r7, #7]
 8014754:	460b      	mov	r3, r1
 8014756:	71bb      	strb	r3, [r7, #6]
 8014758:	4613      	mov	r3, r2
 801475a:	717b      	strb	r3, [r7, #5]
    switch( region )
 801475c:	79fb      	ldrb	r3, [r7, #7]
 801475e:	2b05      	cmp	r3, #5
 8014760:	d108      	bne.n	8014774 <RegionAlternateDr+0x2a>
        AS923_ALTERNATE_DR( );
        AU915_ALTERNATE_DR( );
        CN470_ALTERNATE_DR( );
        CN779_ALTERNATE_DR( );
        EU433_ALTERNATE_DR( );
        EU868_ALTERNATE_DR( );
 8014762:	797a      	ldrb	r2, [r7, #5]
 8014764:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014768:	4611      	mov	r1, r2
 801476a:	4618      	mov	r0, r3
 801476c:	f001 ff8c 	bl	8016688 <RegionEU868AlternateDr>
 8014770:	4603      	mov	r3, r0
 8014772:	e000      	b.n	8014776 <RegionAlternateDr+0x2c>
        IN865_ALTERNATE_DR( );
        US915_ALTERNATE_DR( );
        RU864_ALTERNATE_DR( );
        default:
        {
            return 0;
 8014774:	2300      	movs	r3, #0
        }
    }
}
 8014776:	4618      	mov	r0, r3
 8014778:	3708      	adds	r7, #8
 801477a:	46bd      	mov	sp, r7
 801477c:	bd80      	pop	{r7, pc}

0801477e <RegionNextChannel>:

LoRaMacStatus_t RegionNextChannel( LoRaMacRegion_t region, NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 801477e:	b580      	push	{r7, lr}
 8014780:	b084      	sub	sp, #16
 8014782:	af00      	add	r7, sp, #0
 8014784:	60b9      	str	r1, [r7, #8]
 8014786:	607a      	str	r2, [r7, #4]
 8014788:	603b      	str	r3, [r7, #0]
 801478a:	4603      	mov	r3, r0
 801478c:	73fb      	strb	r3, [r7, #15]
    switch( region )
 801478e:	7bfb      	ldrb	r3, [r7, #15]
 8014790:	2b05      	cmp	r3, #5
 8014792:	d107      	bne.n	80147a4 <RegionNextChannel+0x26>
        AS923_NEXT_CHANNEL( );
        AU915_NEXT_CHANNEL( );
        CN470_NEXT_CHANNEL( );
        CN779_NEXT_CHANNEL( );
        EU433_NEXT_CHANNEL( );
        EU868_NEXT_CHANNEL( );
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	683a      	ldr	r2, [r7, #0]
 8014798:	6879      	ldr	r1, [r7, #4]
 801479a:	68b8      	ldr	r0, [r7, #8]
 801479c:	f001 ff84 	bl	80166a8 <RegionEU868NextChannel>
 80147a0:	4603      	mov	r3, r0
 80147a2:	e000      	b.n	80147a6 <RegionNextChannel+0x28>
        IN865_NEXT_CHANNEL( );
        US915_NEXT_CHANNEL( );
        RU864_NEXT_CHANNEL( );
        default:
        {
            return LORAMAC_STATUS_REGION_NOT_SUPPORTED;
 80147a4:	2309      	movs	r3, #9
        }
    }
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3710      	adds	r7, #16
 80147aa:	46bd      	mov	sp, r7
 80147ac:	bd80      	pop	{r7, pc}

080147ae <RegionApplyDrOffset>:
    }
}
#endif /* REGION_VERSION */

uint8_t RegionApplyDrOffset( LoRaMacRegion_t region, uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 80147ae:	b590      	push	{r4, r7, lr}
 80147b0:	b083      	sub	sp, #12
 80147b2:	af00      	add	r7, sp, #0
 80147b4:	4604      	mov	r4, r0
 80147b6:	4608      	mov	r0, r1
 80147b8:	4611      	mov	r1, r2
 80147ba:	461a      	mov	r2, r3
 80147bc:	4623      	mov	r3, r4
 80147be:	71fb      	strb	r3, [r7, #7]
 80147c0:	4603      	mov	r3, r0
 80147c2:	71bb      	strb	r3, [r7, #6]
 80147c4:	460b      	mov	r3, r1
 80147c6:	717b      	strb	r3, [r7, #5]
 80147c8:	4613      	mov	r3, r2
 80147ca:	713b      	strb	r3, [r7, #4]
    switch( region )
 80147cc:	79fb      	ldrb	r3, [r7, #7]
 80147ce:	2b05      	cmp	r3, #5
 80147d0:	d109      	bne.n	80147e6 <RegionApplyDrOffset+0x38>
        AS923_APPLY_DR_OFFSET( );
        AU915_APPLY_DR_OFFSET( );
        CN470_APPLY_DR_OFFSET( );
        CN779_APPLY_DR_OFFSET( );
        EU433_APPLY_DR_OFFSET( );
        EU868_APPLY_DR_OFFSET( );
 80147d2:	f997 2004 	ldrsb.w	r2, [r7, #4]
 80147d6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 80147da:	79bb      	ldrb	r3, [r7, #6]
 80147dc:	4618      	mov	r0, r3
 80147de:	f002 f8dd 	bl	801699c <RegionEU868ApplyDrOffset>
 80147e2:	4603      	mov	r3, r0
 80147e4:	e000      	b.n	80147e8 <RegionApplyDrOffset+0x3a>
        IN865_APPLY_DR_OFFSET( );
        US915_APPLY_DR_OFFSET( );
        RU864_APPLY_DR_OFFSET( );
        default:
        {
            return dr;
 80147e6:	797b      	ldrb	r3, [r7, #5]
        }
    }
}
 80147e8:	4618      	mov	r0, r3
 80147ea:	370c      	adds	r7, #12
 80147ec:	46bd      	mov	sp, r7
 80147ee:	bd90      	pop	{r4, r7, pc}

080147f0 <RegionGetVersion>:
        }
    }
}

Version_t RegionGetVersion( void )
{
 80147f0:	b480      	push	{r7}
 80147f2:	b083      	sub	sp, #12
 80147f4:	af00      	add	r7, sp, #0
    Version_t version;

    version.Value = REGION_VERSION;
 80147f6:	4b04      	ldr	r3, [pc, #16]	@ (8014808 <RegionGetVersion+0x18>)
 80147f8:	607b      	str	r3, [r7, #4]

    return version;
 80147fa:	687b      	ldr	r3, [r7, #4]
}
 80147fc:	4618      	mov	r0, r3
 80147fe:	370c      	adds	r7, #12
 8014800:	46bd      	mov	sp, r7
 8014802:	bc80      	pop	{r7}
 8014804:	4770      	bx	lr
 8014806:	bf00      	nop
 8014808:	02010001 	.word	0x02010001

0801480c <GetDutyCycle>:
#ifdef MW_LOG_ENABLED
static const char *EventRXSlotStrings[] = { "1", "2", "C", "Multi_C", "P", "Multi_P" };
#endif

static uint16_t GetDutyCycle( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 801480c:	b480      	push	{r7}
 801480e:	b087      	sub	sp, #28
 8014810:	af00      	add	r7, sp, #0
 8014812:	60f8      	str	r0, [r7, #12]
 8014814:	4608      	mov	r0, r1
 8014816:	4639      	mov	r1, r7
 8014818:	e881 000c 	stmia.w	r1, {r2, r3}
 801481c:	4603      	mov	r3, r0
 801481e:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	82fb      	strh	r3, [r7, #22]

    if( joined == false )
 8014826:	7afb      	ldrb	r3, [r7, #11]
 8014828:	f083 0301 	eor.w	r3, r3, #1
 801482c:	b2db      	uxtb	r3, r3
 801482e:	2b00      	cmp	r3, #0
 8014830:	d01b      	beq.n	801486a <GetDutyCycle+0x5e>
    {
        uint16_t joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014832:	f242 7310 	movw	r3, #10000	@ 0x2710
 8014836:	82bb      	strh	r3, [r7, #20]

        if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_1_HOUR_IN_S )
 8014838:	683b      	ldr	r3, [r7, #0]
 801483a:	f5b3 6f61 	cmp.w	r3, #3600	@ 0xe10
 801483e:	d202      	bcs.n	8014846 <GetDutyCycle+0x3a>
        {
            joinDutyCycle = BACKOFF_DC_1_HOUR;
 8014840:	2364      	movs	r3, #100	@ 0x64
 8014842:	82bb      	strh	r3, [r7, #20]
 8014844:	e00b      	b.n	801485e <GetDutyCycle+0x52>
        }
        else if( elapsedTimeSinceStartup.Seconds < BACKOFF_DUTY_CYCLE_10_HOURS_IN_S )
 8014846:	683b      	ldr	r3, [r7, #0]
 8014848:	f649 22af 	movw	r2, #39599	@ 0x9aaf
 801484c:	4293      	cmp	r3, r2
 801484e:	d803      	bhi.n	8014858 <GetDutyCycle+0x4c>
        {
            joinDutyCycle = BACKOFF_DC_10_HOURS;
 8014850:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8014854:	82bb      	strh	r3, [r7, #20]
 8014856:	e002      	b.n	801485e <GetDutyCycle+0x52>
        }
        else
        {
            joinDutyCycle = BACKOFF_DC_24_HOURS;
 8014858:	f242 7310 	movw	r3, #10000	@ 0x2710
 801485c:	82bb      	strh	r3, [r7, #20]
        }
        // Take the most restrictive duty cycle
        dutyCycle = MAX( dutyCycle, joinDutyCycle );
 801485e:	8aba      	ldrh	r2, [r7, #20]
 8014860:	8afb      	ldrh	r3, [r7, #22]
 8014862:	4293      	cmp	r3, r2
 8014864:	bf38      	it	cc
 8014866:	4613      	movcc	r3, r2
 8014868:	82fb      	strh	r3, [r7, #22]
    }

    // Prevent value of 0
    if( dutyCycle == 0 )
 801486a:	8afb      	ldrh	r3, [r7, #22]
 801486c:	2b00      	cmp	r3, #0
 801486e:	d101      	bne.n	8014874 <GetDutyCycle+0x68>
    {
        dutyCycle = 1;
 8014870:	2301      	movs	r3, #1
 8014872:	82fb      	strh	r3, [r7, #22]
    }

    return dutyCycle;
 8014874:	8afb      	ldrh	r3, [r7, #22]
}
 8014876:	4618      	mov	r0, r3
 8014878:	371c      	adds	r7, #28
 801487a:	46bd      	mov	sp, r7
 801487c:	bc80      	pop	{r7}
 801487e:	4770      	bx	lr

08014880 <SetMaxTimeCredits>:

static uint16_t SetMaxTimeCredits( Band_t* band, bool joined, SysTime_t elapsedTimeSinceStartup,
                                   bool dutyCycleEnabled, bool lastTxIsJoinRequest )
{
 8014880:	b580      	push	{r7, lr}
 8014882:	b08e      	sub	sp, #56	@ 0x38
 8014884:	af02      	add	r7, sp, #8
 8014886:	60f8      	str	r0, [r7, #12]
 8014888:	4608      	mov	r0, r1
 801488a:	4639      	mov	r1, r7
 801488c:	e881 000c 	stmia.w	r1, {r2, r3}
 8014890:	4603      	mov	r3, r0
 8014892:	72fb      	strb	r3, [r7, #11]
    uint16_t dutyCycle = band->DCycle;
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	881b      	ldrh	r3, [r3, #0]
 8014898:	857b      	strh	r3, [r7, #42]	@ 0x2a
    TimerTime_t maxCredits = DUTY_CYCLE_TIME_PERIOD;
 801489a:	4b4b      	ldr	r3, [pc, #300]	@ (80149c8 <SetMaxTimeCredits+0x148>)
 801489c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimerTime_t elapsedTime = SysTimeToMs( elapsedTimeSinceStartup );
 801489e:	463b      	mov	r3, r7
 80148a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80148a4:	f005 fd12 	bl	801a2cc <SysTimeToMs>
 80148a8:	6278      	str	r0, [r7, #36]	@ 0x24
    SysTime_t timeDiff = { 0 };
 80148aa:	f107 0314 	add.w	r3, r7, #20
 80148ae:	2200      	movs	r2, #0
 80148b0:	601a      	str	r2, [r3, #0]
 80148b2:	605a      	str	r2, [r3, #4]

    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 80148b4:	7af9      	ldrb	r1, [r7, #11]
 80148b6:	463b      	mov	r3, r7
 80148b8:	cb0c      	ldmia	r3, {r2, r3}
 80148ba:	68f8      	ldr	r0, [r7, #12]
 80148bc:	f7ff ffa6 	bl	801480c <GetDutyCycle>
 80148c0:	4603      	mov	r3, r0
 80148c2:	857b      	strh	r3, [r7, #42]	@ 0x2a

    if( joined == false )
 80148c4:	7afb      	ldrb	r3, [r7, #11]
 80148c6:	f083 0301 	eor.w	r3, r3, #1
 80148ca:	b2db      	uxtb	r3, r3
 80148cc:	2b00      	cmp	r3, #0
 80148ce:	d062      	beq.n	8014996 <SetMaxTimeCredits+0x116>
    {
        if( dutyCycle == BACKOFF_DC_1_HOUR )
 80148d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80148d2:	2b64      	cmp	r3, #100	@ 0x64
 80148d4:	d105      	bne.n	80148e2 <SetMaxTimeCredits+0x62>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD;
 80148d6:	4b3c      	ldr	r3, [pc, #240]	@ (80149c8 <SetMaxTimeCredits+0x148>)
 80148d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148de:	609a      	str	r2, [r3, #8]
 80148e0:	e00b      	b.n	80148fa <SetMaxTimeCredits+0x7a>
        }
        else if( dutyCycle == BACKOFF_DC_10_HOURS )
 80148e2:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80148e4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80148e8:	d105      	bne.n	80148f6 <SetMaxTimeCredits+0x76>
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 10;
 80148ea:	4b38      	ldr	r3, [pc, #224]	@ (80149cc <SetMaxTimeCredits+0x14c>)
 80148ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
            band->LastMaxCreditAssignTime = elapsedTime;
 80148ee:	68fb      	ldr	r3, [r7, #12]
 80148f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80148f2:	609a      	str	r2, [r3, #8]
 80148f4:	e001      	b.n	80148fa <SetMaxTimeCredits+0x7a>
        }
        else
        {
            maxCredits = DUTY_CYCLE_TIME_PERIOD * 24;
 80148f6:	4b36      	ldr	r3, [pc, #216]	@ (80149d0 <SetMaxTimeCredits+0x150>)
 80148f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        timeDiff = SysTimeSub( elapsedTimeSinceStartup, SysTimeFromMs( band->LastMaxCreditAssignTime ) );
 80148fa:	68fb      	ldr	r3, [r7, #12]
 80148fc:	689a      	ldr	r2, [r3, #8]
 80148fe:	f107 031c 	add.w	r3, r7, #28
 8014902:	4611      	mov	r1, r2
 8014904:	4618      	mov	r0, r3
 8014906:	f005 fd09 	bl	801a31c <SysTimeFromMs>
 801490a:	f107 0014 	add.w	r0, r7, #20
 801490e:	6a3b      	ldr	r3, [r7, #32]
 8014910:	9300      	str	r3, [sp, #0]
 8014912:	69fb      	ldr	r3, [r7, #28]
 8014914:	463a      	mov	r2, r7
 8014916:	ca06      	ldmia	r2, {r1, r2}
 8014918:	f005 fc19 	bl	801a14e <SysTimeSub>

        // Verify if we have to assign the maximum credits in cases
        // of the preconditions have changed.
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801491c:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8014920:	f083 0301 	eor.w	r3, r3, #1
 8014924:	b2db      	uxtb	r3, r3
 8014926:	2b00      	cmp	r3, #0
 8014928:	d006      	beq.n	8014938 <SetMaxTimeCredits+0xb8>
 801492a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 801492e:	f083 0301 	eor.w	r3, r3, #1
 8014932:	b2db      	uxtb	r3, r3
 8014934:	2b00      	cmp	r3, #0
 8014936:	d108      	bne.n	801494a <SetMaxTimeCredits+0xca>
            ( band->MaxTimeCredits != maxCredits ) ||
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	691b      	ldr	r3, [r3, #16]
        if( ( ( dutyCycleEnabled == false ) && ( lastTxIsJoinRequest == false ) ) ||
 801493c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801493e:	429a      	cmp	r2, r3
 8014940:	d103      	bne.n	801494a <SetMaxTimeCredits+0xca>
            ( timeDiff.Seconds >= BACKOFF_24_HOURS_IN_S ) )
 8014942:	697b      	ldr	r3, [r7, #20]
            ( band->MaxTimeCredits != maxCredits ) ||
 8014944:	4a23      	ldr	r2, [pc, #140]	@ (80149d4 <SetMaxTimeCredits+0x154>)
 8014946:	4293      	cmp	r3, r2
 8014948:	d92f      	bls.n	80149aa <SetMaxTimeCredits+0x12a>
        {
            band->TimeCredits = maxCredits;
 801494a:	68fb      	ldr	r3, [r7, #12]
 801494c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801494e:	60da      	str	r2, [r3, #12]

            if( elapsedTimeSinceStartup.Seconds >= BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014950:	683b      	ldr	r3, [r7, #0]
 8014952:	4a21      	ldr	r2, [pc, #132]	@ (80149d8 <SetMaxTimeCredits+0x158>)
 8014954:	4293      	cmp	r3, r2
 8014956:	d928      	bls.n	80149aa <SetMaxTimeCredits+0x12a>
            {
                timeDiff.Seconds = ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S;
 8014958:	683b      	ldr	r3, [r7, #0]
 801495a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 801495e:	3b30      	subs	r3, #48	@ 0x30
 8014960:	4a1e      	ldr	r2, [pc, #120]	@ (80149dc <SetMaxTimeCredits+0x15c>)
 8014962:	fba2 2303 	umull	r2, r3, r2, r3
 8014966:	0c1b      	lsrs	r3, r3, #16
 8014968:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds *= BACKOFF_24_HOURS_IN_S;
 801496a:	697b      	ldr	r3, [r7, #20]
 801496c:	4a1c      	ldr	r2, [pc, #112]	@ (80149e0 <SetMaxTimeCredits+0x160>)
 801496e:	fb02 f303 	mul.w	r3, r2, r3
 8014972:	617b      	str	r3, [r7, #20]
                timeDiff.Seconds += BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014974:	697b      	ldr	r3, [r7, #20]
 8014976:	f503 33f6 	add.w	r3, r3, #125952	@ 0x1ec00
 801497a:	3330      	adds	r3, #48	@ 0x30
 801497c:	617b      	str	r3, [r7, #20]
                timeDiff.SubSeconds = 0;
 801497e:	2300      	movs	r3, #0
 8014980:	833b      	strh	r3, [r7, #24]
                band->LastMaxCreditAssignTime = SysTimeToMs( timeDiff );
 8014982:	f107 0314 	add.w	r3, r7, #20
 8014986:	e893 0003 	ldmia.w	r3, {r0, r1}
 801498a:	f005 fc9f 	bl	801a2cc <SysTimeToMs>
 801498e:	4602      	mov	r2, r0
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	609a      	str	r2, [r3, #8]
 8014994:	e009      	b.n	80149aa <SetMaxTimeCredits+0x12a>
            }
        }
    }
    else
    {
        if( dutyCycleEnabled == false )
 8014996:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 801499a:	f083 0301 	eor.w	r3, r3, #1
 801499e:	b2db      	uxtb	r3, r3
 80149a0:	2b00      	cmp	r3, #0
 80149a2:	d002      	beq.n	80149aa <SetMaxTimeCredits+0x12a>
        {
            // Assign max credits when the duty cycle is disabled.
            band->TimeCredits = maxCredits;
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149a8:	60da      	str	r2, [r3, #12]
        }
    }

    // Assign the max credits if its the first time
    if( band->LastBandUpdateTime == 0 )
 80149aa:	68fb      	ldr	r3, [r7, #12]
 80149ac:	685b      	ldr	r3, [r3, #4]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d102      	bne.n	80149b8 <SetMaxTimeCredits+0x138>
    {
        band->TimeCredits = maxCredits;
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149b6:	60da      	str	r2, [r3, #12]
    }

    // Setup the maximum allowed credits. We can assign them
    // safely all the time.
    band->MaxTimeCredits = maxCredits;
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80149bc:	611a      	str	r2, [r3, #16]

    return dutyCycle;
 80149be:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
}
 80149c0:	4618      	mov	r0, r3
 80149c2:	3730      	adds	r7, #48	@ 0x30
 80149c4:	46bd      	mov	sp, r7
 80149c6:	bd80      	pop	{r7, pc}
 80149c8:	001b7740 	.word	0x001b7740
 80149cc:	0112a880 	.word	0x0112a880
 80149d0:	02932e00 	.word	0x02932e00
 80149d4:	0001517f 	.word	0x0001517f
 80149d8:	0001ec2f 	.word	0x0001ec2f
 80149dc:	c22e4507 	.word	0xc22e4507
 80149e0:	00015180 	.word	0x00015180

080149e4 <UpdateTimeCredits>:

static uint16_t UpdateTimeCredits( Band_t* band, bool joined, bool dutyCycleEnabled,
                                   bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                   TimerTime_t currentTime )
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	b086      	sub	sp, #24
 80149e8:	af02      	add	r7, sp, #8
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	4608      	mov	r0, r1
 80149ee:	4611      	mov	r1, r2
 80149f0:	461a      	mov	r2, r3
 80149f2:	4603      	mov	r3, r0
 80149f4:	70fb      	strb	r3, [r7, #3]
 80149f6:	460b      	mov	r3, r1
 80149f8:	70bb      	strb	r3, [r7, #2]
 80149fa:	4613      	mov	r3, r2
 80149fc:	707b      	strb	r3, [r7, #1]
    uint16_t dutyCycle = SetMaxTimeCredits( band, joined, elapsedTimeSinceStartup,
 80149fe:	78f9      	ldrb	r1, [r7, #3]
 8014a00:	787b      	ldrb	r3, [r7, #1]
 8014a02:	9301      	str	r3, [sp, #4]
 8014a04:	78bb      	ldrb	r3, [r7, #2]
 8014a06:	9300      	str	r3, [sp, #0]
 8014a08:	f107 0318 	add.w	r3, r7, #24
 8014a0c:	cb0c      	ldmia	r3, {r2, r3}
 8014a0e:	6878      	ldr	r0, [r7, #4]
 8014a10:	f7ff ff36 	bl	8014880 <SetMaxTimeCredits>
 8014a14:	4603      	mov	r3, r0
 8014a16:	81fb      	strh	r3, [r7, #14]
                                            dutyCycleEnabled, lastTxIsJoinRequest );

    if( joined == true )
 8014a18:	78fb      	ldrb	r3, [r7, #3]
 8014a1a:	2b00      	cmp	r3, #0
 8014a1c:	d00a      	beq.n	8014a34 <UpdateTimeCredits+0x50>
    {
        // Apply a sliding window for the duty cycle with collection and speding
        // credits.
        band->TimeCredits += TimerGetElapsedTime( band->LastBandUpdateTime );
 8014a1e:	687b      	ldr	r3, [r7, #4]
 8014a20:	685b      	ldr	r3, [r3, #4]
 8014a22:	4618      	mov	r0, r3
 8014a24:	f006 fa8c 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 8014a28:	4602      	mov	r2, r0
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	68db      	ldr	r3, [r3, #12]
 8014a2e:	441a      	add	r2, r3
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	60da      	str	r2, [r3, #12]
    }

    // Limit band credits to maximum
    if( band->TimeCredits > band->MaxTimeCredits )
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	68da      	ldr	r2, [r3, #12]
 8014a38:	687b      	ldr	r3, [r7, #4]
 8014a3a:	691b      	ldr	r3, [r3, #16]
 8014a3c:	429a      	cmp	r2, r3
 8014a3e:	d903      	bls.n	8014a48 <UpdateTimeCredits+0x64>
    {
        band->TimeCredits = band->MaxTimeCredits;
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	691a      	ldr	r2, [r3, #16]
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	60da      	str	r2, [r3, #12]
    }

    // Synchronize update time
    band->LastBandUpdateTime = currentTime;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	6a3a      	ldr	r2, [r7, #32]
 8014a4c:	605a      	str	r2, [r3, #4]

    return dutyCycle;
 8014a4e:	89fb      	ldrh	r3, [r7, #14]
}
 8014a50:	4618      	mov	r0, r3
 8014a52:	3710      	adds	r7, #16
 8014a54:	46bd      	mov	sp, r7
 8014a56:	bd80      	pop	{r7, pc}

08014a58 <CountChannels>:

static uint8_t CountChannels( uint16_t mask, uint8_t nbBits )
{
 8014a58:	b480      	push	{r7}
 8014a5a:	b085      	sub	sp, #20
 8014a5c:	af00      	add	r7, sp, #0
 8014a5e:	4603      	mov	r3, r0
 8014a60:	460a      	mov	r2, r1
 8014a62:	80fb      	strh	r3, [r7, #6]
 8014a64:	4613      	mov	r3, r2
 8014a66:	717b      	strb	r3, [r7, #5]
    uint8_t nbActiveBits = 0;
 8014a68:	2300      	movs	r3, #0
 8014a6a:	73fb      	strb	r3, [r7, #15]

    for( uint8_t j = 0; j < nbBits; j++ )
 8014a6c:	2300      	movs	r3, #0
 8014a6e:	73bb      	strb	r3, [r7, #14]
 8014a70:	e011      	b.n	8014a96 <CountChannels+0x3e>
    {
        if( ( mask & ( 1 << j ) ) == ( 1 << j ) )
 8014a72:	88fa      	ldrh	r2, [r7, #6]
 8014a74:	7bbb      	ldrb	r3, [r7, #14]
 8014a76:	2101      	movs	r1, #1
 8014a78:	fa01 f303 	lsl.w	r3, r1, r3
 8014a7c:	401a      	ands	r2, r3
 8014a7e:	7bbb      	ldrb	r3, [r7, #14]
 8014a80:	2101      	movs	r1, #1
 8014a82:	fa01 f303 	lsl.w	r3, r1, r3
 8014a86:	429a      	cmp	r2, r3
 8014a88:	d102      	bne.n	8014a90 <CountChannels+0x38>
        {
            nbActiveBits++;
 8014a8a:	7bfb      	ldrb	r3, [r7, #15]
 8014a8c:	3301      	adds	r3, #1
 8014a8e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t j = 0; j < nbBits; j++ )
 8014a90:	7bbb      	ldrb	r3, [r7, #14]
 8014a92:	3301      	adds	r3, #1
 8014a94:	73bb      	strb	r3, [r7, #14]
 8014a96:	7bba      	ldrb	r2, [r7, #14]
 8014a98:	797b      	ldrb	r3, [r7, #5]
 8014a9a:	429a      	cmp	r2, r3
 8014a9c:	d3e9      	bcc.n	8014a72 <CountChannels+0x1a>
        }
    }
    return nbActiveBits;
 8014a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014aa0:	4618      	mov	r0, r3
 8014aa2:	3714      	adds	r7, #20
 8014aa4:	46bd      	mov	sp, r7
 8014aa6:	bc80      	pop	{r7}
 8014aa8:	4770      	bx	lr

08014aaa <RegionCommonChanVerifyDr>:

bool RegionCommonChanVerifyDr( uint8_t nbChannels, uint16_t* channelsMask, int8_t dr, int8_t minDr, int8_t maxDr, ChannelParams_t* channels )
{
 8014aaa:	b580      	push	{r7, lr}
 8014aac:	b084      	sub	sp, #16
 8014aae:	af00      	add	r7, sp, #0
 8014ab0:	6039      	str	r1, [r7, #0]
 8014ab2:	4611      	mov	r1, r2
 8014ab4:	461a      	mov	r2, r3
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	71fb      	strb	r3, [r7, #7]
 8014aba:	460b      	mov	r3, r1
 8014abc:	71bb      	strb	r3, [r7, #6]
 8014abe:	4613      	mov	r3, r2
 8014ac0:	717b      	strb	r3, [r7, #5]
    if( RegionCommonValueInRange( dr, minDr, maxDr ) == 0 )
 8014ac2:	f997 2018 	ldrsb.w	r2, [r7, #24]
 8014ac6:	f997 1005 	ldrsb.w	r1, [r7, #5]
 8014aca:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014ace:	4618      	mov	r0, r3
 8014ad0:	f000 f85d 	bl	8014b8e <RegionCommonValueInRange>
 8014ad4:	4603      	mov	r3, r0
 8014ad6:	2b00      	cmp	r3, #0
 8014ad8:	d101      	bne.n	8014ade <RegionCommonChanVerifyDr+0x34>
    {
        return false;
 8014ada:	2300      	movs	r3, #0
 8014adc:	e053      	b.n	8014b86 <RegionCommonChanVerifyDr+0xdc>
    }

    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014ade:	2300      	movs	r3, #0
 8014ae0:	73fb      	strb	r3, [r7, #15]
 8014ae2:	2300      	movs	r3, #0
 8014ae4:	73bb      	strb	r3, [r7, #14]
 8014ae6:	e049      	b.n	8014b7c <RegionCommonChanVerifyDr+0xd2>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8014ae8:	2300      	movs	r3, #0
 8014aea:	737b      	strb	r3, [r7, #13]
 8014aec:	e03d      	b.n	8014b6a <RegionCommonChanVerifyDr+0xc0>
        {
            if( ( ( channelsMask[k] & ( 1 << j ) ) != 0 ) )
 8014aee:	7bbb      	ldrb	r3, [r7, #14]
 8014af0:	005b      	lsls	r3, r3, #1
 8014af2:	683a      	ldr	r2, [r7, #0]
 8014af4:	4413      	add	r3, r2
 8014af6:	881b      	ldrh	r3, [r3, #0]
 8014af8:	461a      	mov	r2, r3
 8014afa:	7b7b      	ldrb	r3, [r7, #13]
 8014afc:	fa42 f303 	asr.w	r3, r2, r3
 8014b00:	f003 0301 	and.w	r3, r3, #1
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d02d      	beq.n	8014b64 <RegionCommonChanVerifyDr+0xba>
            {// Check datarate validity for enabled channels
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014b08:	7bfa      	ldrb	r2, [r7, #15]
 8014b0a:	7b7b      	ldrb	r3, [r7, #13]
 8014b0c:	4413      	add	r3, r2
 8014b0e:	461a      	mov	r2, r3
 8014b10:	4613      	mov	r3, r2
 8014b12:	005b      	lsls	r3, r3, #1
 8014b14:	4413      	add	r3, r2
 8014b16:	009b      	lsls	r3, r3, #2
 8014b18:	461a      	mov	r2, r3
 8014b1a:	69fb      	ldr	r3, [r7, #28]
 8014b1c:	4413      	add	r3, r2
 8014b1e:	7a1b      	ldrb	r3, [r3, #8]
 8014b20:	f343 0303 	sbfx	r3, r3, #0, #4
 8014b24:	b25b      	sxtb	r3, r3
 8014b26:	f003 030f 	and.w	r3, r3, #15
 8014b2a:	b259      	sxtb	r1, r3
                                                  ( channels[i + j].DrRange.Fields.Max & 0x0F ) ) == 1 )
 8014b2c:	7bfa      	ldrb	r2, [r7, #15]
 8014b2e:	7b7b      	ldrb	r3, [r7, #13]
 8014b30:	4413      	add	r3, r2
 8014b32:	461a      	mov	r2, r3
 8014b34:	4613      	mov	r3, r2
 8014b36:	005b      	lsls	r3, r3, #1
 8014b38:	4413      	add	r3, r2
 8014b3a:	009b      	lsls	r3, r3, #2
 8014b3c:	461a      	mov	r2, r3
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	4413      	add	r3, r2
 8014b42:	7a1b      	ldrb	r3, [r3, #8]
 8014b44:	f343 1303 	sbfx	r3, r3, #4, #4
 8014b48:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( dr, ( channels[i + j].DrRange.Fields.Min & 0x0F ),
 8014b4a:	f003 030f 	and.w	r3, r3, #15
 8014b4e:	b25a      	sxtb	r2, r3
 8014b50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014b54:	4618      	mov	r0, r3
 8014b56:	f000 f81a 	bl	8014b8e <RegionCommonValueInRange>
 8014b5a:	4603      	mov	r3, r0
 8014b5c:	2b01      	cmp	r3, #1
 8014b5e:	d101      	bne.n	8014b64 <RegionCommonChanVerifyDr+0xba>
                {
                    // At least 1 channel has been found we can return OK.
                    return true;
 8014b60:	2301      	movs	r3, #1
 8014b62:	e010      	b.n	8014b86 <RegionCommonChanVerifyDr+0xdc>
        for( uint8_t j = 0; j < 16; j++ )
 8014b64:	7b7b      	ldrb	r3, [r7, #13]
 8014b66:	3301      	adds	r3, #1
 8014b68:	737b      	strb	r3, [r7, #13]
 8014b6a:	7b7b      	ldrb	r3, [r7, #13]
 8014b6c:	2b0f      	cmp	r3, #15
 8014b6e:	d9be      	bls.n	8014aee <RegionCommonChanVerifyDr+0x44>
    for( uint8_t i = 0, k = 0; i < nbChannels; i += 16, k++ )
 8014b70:	7bfb      	ldrb	r3, [r7, #15]
 8014b72:	3310      	adds	r3, #16
 8014b74:	73fb      	strb	r3, [r7, #15]
 8014b76:	7bbb      	ldrb	r3, [r7, #14]
 8014b78:	3301      	adds	r3, #1
 8014b7a:	73bb      	strb	r3, [r7, #14]
 8014b7c:	7bfa      	ldrb	r2, [r7, #15]
 8014b7e:	79fb      	ldrb	r3, [r7, #7]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	d3b1      	bcc.n	8014ae8 <RegionCommonChanVerifyDr+0x3e>
                }
            }
        }
    }
    return false;
 8014b84:	2300      	movs	r3, #0
}
 8014b86:	4618      	mov	r0, r3
 8014b88:	3710      	adds	r7, #16
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	bd80      	pop	{r7, pc}

08014b8e <RegionCommonValueInRange>:

uint8_t RegionCommonValueInRange( int8_t value, int8_t min, int8_t max )
{
 8014b8e:	b480      	push	{r7}
 8014b90:	b083      	sub	sp, #12
 8014b92:	af00      	add	r7, sp, #0
 8014b94:	4603      	mov	r3, r0
 8014b96:	71fb      	strb	r3, [r7, #7]
 8014b98:	460b      	mov	r3, r1
 8014b9a:	71bb      	strb	r3, [r7, #6]
 8014b9c:	4613      	mov	r3, r2
 8014b9e:	717b      	strb	r3, [r7, #5]
    if( ( value >= min ) && ( value <= max ) )
 8014ba0:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014ba4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8014ba8:	429a      	cmp	r2, r3
 8014baa:	db07      	blt.n	8014bbc <RegionCommonValueInRange+0x2e>
 8014bac:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8014bb0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	dc01      	bgt.n	8014bbc <RegionCommonValueInRange+0x2e>
    {
        return 1;
 8014bb8:	2301      	movs	r3, #1
 8014bba:	e000      	b.n	8014bbe <RegionCommonValueInRange+0x30>
    }
    return 0;
 8014bbc:	2300      	movs	r3, #0
}
 8014bbe:	4618      	mov	r0, r3
 8014bc0:	370c      	adds	r7, #12
 8014bc2:	46bd      	mov	sp, r7
 8014bc4:	bc80      	pop	{r7}
 8014bc6:	4770      	bx	lr

08014bc8 <RegionCommonChanDisable>:

bool RegionCommonChanDisable( uint16_t* channelsMask, uint8_t id, uint8_t maxChannels )
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	6078      	str	r0, [r7, #4]
 8014bd0:	460b      	mov	r3, r1
 8014bd2:	70fb      	strb	r3, [r7, #3]
 8014bd4:	4613      	mov	r3, r2
 8014bd6:	70bb      	strb	r3, [r7, #2]
    uint8_t index = id / 16;
 8014bd8:	78fb      	ldrb	r3, [r7, #3]
 8014bda:	091b      	lsrs	r3, r3, #4
 8014bdc:	73fb      	strb	r3, [r7, #15]

    if( ( index > ( maxChannels / 16 ) ) || ( id >= maxChannels ) )
 8014bde:	78bb      	ldrb	r3, [r7, #2]
 8014be0:	091b      	lsrs	r3, r3, #4
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	7bfa      	ldrb	r2, [r7, #15]
 8014be6:	429a      	cmp	r2, r3
 8014be8:	d803      	bhi.n	8014bf2 <RegionCommonChanDisable+0x2a>
 8014bea:	78fa      	ldrb	r2, [r7, #3]
 8014bec:	78bb      	ldrb	r3, [r7, #2]
 8014bee:	429a      	cmp	r2, r3
 8014bf0:	d301      	bcc.n	8014bf6 <RegionCommonChanDisable+0x2e>
    {
        return false;
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	e017      	b.n	8014c26 <RegionCommonChanDisable+0x5e>
    }

    // Deactivate channel
    channelsMask[index] &= ~( 1 << ( id % 16 ) );
 8014bf6:	7bfb      	ldrb	r3, [r7, #15]
 8014bf8:	005b      	lsls	r3, r3, #1
 8014bfa:	687a      	ldr	r2, [r7, #4]
 8014bfc:	4413      	add	r3, r2
 8014bfe:	881b      	ldrh	r3, [r3, #0]
 8014c00:	b21a      	sxth	r2, r3
 8014c02:	78fb      	ldrb	r3, [r7, #3]
 8014c04:	f003 030f 	and.w	r3, r3, #15
 8014c08:	2101      	movs	r1, #1
 8014c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8014c0e:	b21b      	sxth	r3, r3
 8014c10:	43db      	mvns	r3, r3
 8014c12:	b21b      	sxth	r3, r3
 8014c14:	4013      	ands	r3, r2
 8014c16:	b219      	sxth	r1, r3
 8014c18:	7bfb      	ldrb	r3, [r7, #15]
 8014c1a:	005b      	lsls	r3, r3, #1
 8014c1c:	687a      	ldr	r2, [r7, #4]
 8014c1e:	4413      	add	r3, r2
 8014c20:	b28a      	uxth	r2, r1
 8014c22:	801a      	strh	r2, [r3, #0]

    return true;
 8014c24:	2301      	movs	r3, #1
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3714      	adds	r7, #20
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bc80      	pop	{r7}
 8014c2e:	4770      	bx	lr

08014c30 <RegionCommonCountChannels>:

uint8_t RegionCommonCountChannels( uint16_t* channelsMask, uint8_t startIdx, uint8_t stopIdx )
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b084      	sub	sp, #16
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	6078      	str	r0, [r7, #4]
 8014c38:	460b      	mov	r3, r1
 8014c3a:	70fb      	strb	r3, [r7, #3]
 8014c3c:	4613      	mov	r3, r2
 8014c3e:	70bb      	strb	r3, [r7, #2]
    uint8_t nbChannels = 0;
 8014c40:	2300      	movs	r3, #0
 8014c42:	73fb      	strb	r3, [r7, #15]

    if( channelsMask == NULL )
 8014c44:	687b      	ldr	r3, [r7, #4]
 8014c46:	2b00      	cmp	r3, #0
 8014c48:	d101      	bne.n	8014c4e <RegionCommonCountChannels+0x1e>
    {
        return 0;
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	e018      	b.n	8014c80 <RegionCommonCountChannels+0x50>
    }

    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014c4e:	78fb      	ldrb	r3, [r7, #3]
 8014c50:	73bb      	strb	r3, [r7, #14]
 8014c52:	e010      	b.n	8014c76 <RegionCommonCountChannels+0x46>
    {
        nbChannels += CountChannels( channelsMask[i], 16 );
 8014c54:	7bbb      	ldrb	r3, [r7, #14]
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	687a      	ldr	r2, [r7, #4]
 8014c5a:	4413      	add	r3, r2
 8014c5c:	881b      	ldrh	r3, [r3, #0]
 8014c5e:	2110      	movs	r1, #16
 8014c60:	4618      	mov	r0, r3
 8014c62:	f7ff fef9 	bl	8014a58 <CountChannels>
 8014c66:	4603      	mov	r3, r0
 8014c68:	461a      	mov	r2, r3
 8014c6a:	7bfb      	ldrb	r3, [r7, #15]
 8014c6c:	4413      	add	r3, r2
 8014c6e:	73fb      	strb	r3, [r7, #15]
    for( uint8_t i = startIdx; i < stopIdx; i++ )
 8014c70:	7bbb      	ldrb	r3, [r7, #14]
 8014c72:	3301      	adds	r3, #1
 8014c74:	73bb      	strb	r3, [r7, #14]
 8014c76:	7bba      	ldrb	r2, [r7, #14]
 8014c78:	78bb      	ldrb	r3, [r7, #2]
 8014c7a:	429a      	cmp	r2, r3
 8014c7c:	d3ea      	bcc.n	8014c54 <RegionCommonCountChannels+0x24>
    }

    return nbChannels;
 8014c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3710      	adds	r7, #16
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}

08014c88 <RegionCommonChanMaskCopy>:

void RegionCommonChanMaskCopy( uint16_t* channelsMaskDest, uint16_t* channelsMaskSrc, uint8_t len )
{
 8014c88:	b480      	push	{r7}
 8014c8a:	b087      	sub	sp, #28
 8014c8c:	af00      	add	r7, sp, #0
 8014c8e:	60f8      	str	r0, [r7, #12]
 8014c90:	60b9      	str	r1, [r7, #8]
 8014c92:	4613      	mov	r3, r2
 8014c94:	71fb      	strb	r3, [r7, #7]
    if( ( channelsMaskDest != NULL ) && ( channelsMaskSrc != NULL ) )
 8014c96:	68fb      	ldr	r3, [r7, #12]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d016      	beq.n	8014cca <RegionCommonChanMaskCopy+0x42>
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d013      	beq.n	8014cca <RegionCommonChanMaskCopy+0x42>
    {
        for( uint8_t i = 0; i < len; i++ )
 8014ca2:	2300      	movs	r3, #0
 8014ca4:	75fb      	strb	r3, [r7, #23]
 8014ca6:	e00c      	b.n	8014cc2 <RegionCommonChanMaskCopy+0x3a>
        {
            channelsMaskDest[i] = channelsMaskSrc[i];
 8014ca8:	7dfb      	ldrb	r3, [r7, #23]
 8014caa:	005b      	lsls	r3, r3, #1
 8014cac:	68ba      	ldr	r2, [r7, #8]
 8014cae:	441a      	add	r2, r3
 8014cb0:	7dfb      	ldrb	r3, [r7, #23]
 8014cb2:	005b      	lsls	r3, r3, #1
 8014cb4:	68f9      	ldr	r1, [r7, #12]
 8014cb6:	440b      	add	r3, r1
 8014cb8:	8812      	ldrh	r2, [r2, #0]
 8014cba:	801a      	strh	r2, [r3, #0]
        for( uint8_t i = 0; i < len; i++ )
 8014cbc:	7dfb      	ldrb	r3, [r7, #23]
 8014cbe:	3301      	adds	r3, #1
 8014cc0:	75fb      	strb	r3, [r7, #23]
 8014cc2:	7dfa      	ldrb	r2, [r7, #23]
 8014cc4:	79fb      	ldrb	r3, [r7, #7]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d3ee      	bcc.n	8014ca8 <RegionCommonChanMaskCopy+0x20>
        }
    }
}
 8014cca:	bf00      	nop
 8014ccc:	371c      	adds	r7, #28
 8014cce:	46bd      	mov	sp, r7
 8014cd0:	bc80      	pop	{r7}
 8014cd2:	4770      	bx	lr

08014cd4 <RegionCommonSetBandTxDone>:

void RegionCommonSetBandTxDone( Band_t* band, TimerTime_t lastTxAirTime, bool joined, SysTime_t elapsedTimeSinceStartup )
{
 8014cd4:	b082      	sub	sp, #8
 8014cd6:	b580      	push	{r7, lr}
 8014cd8:	b086      	sub	sp, #24
 8014cda:	af00      	add	r7, sp, #0
 8014cdc:	60f8      	str	r0, [r7, #12]
 8014cde:	60b9      	str	r1, [r7, #8]
 8014ce0:	627b      	str	r3, [r7, #36]	@ 0x24
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	71fb      	strb	r3, [r7, #7]
    // Get the band duty cycle. If not joined, the function either returns the join duty cycle
    // or the band duty cycle, whichever is more restrictive.
    uint16_t dutyCycle = GetDutyCycle( band, joined, elapsedTimeSinceStartup );
 8014ce6:	79f9      	ldrb	r1, [r7, #7]
 8014ce8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8014cec:	cb0c      	ldmia	r3, {r2, r3}
 8014cee:	68f8      	ldr	r0, [r7, #12]
 8014cf0:	f7ff fd8c 	bl	801480c <GetDutyCycle>
 8014cf4:	4603      	mov	r3, r0
 8014cf6:	82fb      	strh	r3, [r7, #22]

    // Reduce with transmission time
    if( band->TimeCredits > ( lastTxAirTime * dutyCycle ) )
 8014cf8:	68fb      	ldr	r3, [r7, #12]
 8014cfa:	68da      	ldr	r2, [r3, #12]
 8014cfc:	8afb      	ldrh	r3, [r7, #22]
 8014cfe:	68b9      	ldr	r1, [r7, #8]
 8014d00:	fb01 f303 	mul.w	r3, r1, r3
 8014d04:	429a      	cmp	r2, r3
 8014d06:	d909      	bls.n	8014d1c <RegionCommonSetBandTxDone+0x48>
    {
        // Reduce time credits by the time of air
        band->TimeCredits -= ( lastTxAirTime * dutyCycle );
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	68da      	ldr	r2, [r3, #12]
 8014d0c:	8afb      	ldrh	r3, [r7, #22]
 8014d0e:	68b9      	ldr	r1, [r7, #8]
 8014d10:	fb01 f303 	mul.w	r3, r1, r3
 8014d14:	1ad2      	subs	r2, r2, r3
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	60da      	str	r2, [r3, #12]
    }
    else
    {
        band->TimeCredits = 0;
    }
}
 8014d1a:	e002      	b.n	8014d22 <RegionCommonSetBandTxDone+0x4e>
        band->TimeCredits = 0;
 8014d1c:	68fb      	ldr	r3, [r7, #12]
 8014d1e:	2200      	movs	r2, #0
 8014d20:	60da      	str	r2, [r3, #12]
}
 8014d22:	bf00      	nop
 8014d24:	3718      	adds	r7, #24
 8014d26:	46bd      	mov	sp, r7
 8014d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8014d2c:	b002      	add	sp, #8
 8014d2e:	4770      	bx	lr

08014d30 <RegionCommonUpdateBandTimeOff>:

TimerTime_t RegionCommonUpdateBandTimeOff( bool joined, Band_t* bands,
                                           uint8_t nbBands, bool dutyCycleEnabled,
                                           bool lastTxIsJoinRequest, SysTime_t elapsedTimeSinceStartup,
                                           TimerTime_t expectedTimeOnAir )
{
 8014d30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d32:	b08f      	sub	sp, #60	@ 0x3c
 8014d34:	af04      	add	r7, sp, #16
 8014d36:	6039      	str	r1, [r7, #0]
 8014d38:	4611      	mov	r1, r2
 8014d3a:	461a      	mov	r2, r3
 8014d3c:	4603      	mov	r3, r0
 8014d3e:	71fb      	strb	r3, [r7, #7]
 8014d40:	460b      	mov	r3, r1
 8014d42:	71bb      	strb	r3, [r7, #6]
 8014d44:	4613      	mov	r3, r2
 8014d46:	717b      	strb	r3, [r7, #5]
    TimerTime_t minTimeToWait = TIMERTIME_T_MAX;
 8014d48:	f04f 33ff 	mov.w	r3, #4294967295
 8014d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimerTime_t currentTime = TimerGetCurrentTime( );
 8014d4e:	f006 f8e5 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 8014d52:	61f8      	str	r0, [r7, #28]
    TimerTime_t creditCosts = 0;
 8014d54:	2300      	movs	r3, #0
 8014d56:	61bb      	str	r3, [r7, #24]
    uint16_t dutyCycle = 1;
 8014d58:	2301      	movs	r3, #1
 8014d5a:	82fb      	strh	r3, [r7, #22]
    uint8_t validBands = 0;
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    for( uint8_t i = 0; i < nbBands; i++ )
 8014d62:	2300      	movs	r3, #0
 8014d64:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014d68:	e0ba      	b.n	8014ee0 <RegionCommonUpdateBandTimeOff+0x1b0>
    {
        // Synchronization of bands and credits
        dutyCycle = UpdateTimeCredits( &bands[i], joined, dutyCycleEnabled,
 8014d6a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014d6e:	4613      	mov	r3, r2
 8014d70:	005b      	lsls	r3, r3, #1
 8014d72:	4413      	add	r3, r2
 8014d74:	00db      	lsls	r3, r3, #3
 8014d76:	461a      	mov	r2, r3
 8014d78:	683b      	ldr	r3, [r7, #0]
 8014d7a:	189c      	adds	r4, r3, r2
 8014d7c:	f897 6040 	ldrb.w	r6, [r7, #64]	@ 0x40
 8014d80:	797a      	ldrb	r2, [r7, #5]
 8014d82:	79fd      	ldrb	r5, [r7, #7]
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	9302      	str	r3, [sp, #8]
 8014d88:	46ec      	mov	ip, sp
 8014d8a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8014d8e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014d92:	e88c 0003 	stmia.w	ip, {r0, r1}
 8014d96:	4633      	mov	r3, r6
 8014d98:	4629      	mov	r1, r5
 8014d9a:	4620      	mov	r0, r4
 8014d9c:	f7ff fe22 	bl	80149e4 <UpdateTimeCredits>
 8014da0:	4603      	mov	r3, r0
 8014da2:	82fb      	strh	r3, [r7, #22]
                                       lastTxIsJoinRequest, elapsedTimeSinceStartup,
                                       currentTime );

        // Calculate the credit costs for the next transmission
        // with the duty cycle and the expected time on air
        creditCosts = expectedTimeOnAir * dutyCycle;
 8014da4:	8afa      	ldrh	r2, [r7, #22]
 8014da6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014da8:	fb02 f303 	mul.w	r3, r2, r3
 8014dac:	61bb      	str	r3, [r7, #24]

        // Check if the band is ready for transmission. Its ready,
        // when the duty cycle is off, or the TimeCredits of the band
        // is higher than the credit costs for the transmission.
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014dae:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014db2:	4613      	mov	r3, r2
 8014db4:	005b      	lsls	r3, r3, #1
 8014db6:	4413      	add	r3, r2
 8014db8:	00db      	lsls	r3, r3, #3
 8014dba:	461a      	mov	r2, r3
 8014dbc:	683b      	ldr	r3, [r7, #0]
 8014dbe:	4413      	add	r3, r2
 8014dc0:	68db      	ldr	r3, [r3, #12]
 8014dc2:	69ba      	ldr	r2, [r7, #24]
 8014dc4:	429a      	cmp	r2, r3
 8014dc6:	d308      	bcc.n	8014dda <RegionCommonUpdateBandTimeOff+0xaa>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014dc8:	797b      	ldrb	r3, [r7, #5]
 8014dca:	f083 0301 	eor.w	r3, r3, #1
 8014dce:	b2db      	uxtb	r3, r3
        if( ( bands[i].TimeCredits > creditCosts ) ||
 8014dd0:	2b00      	cmp	r3, #0
 8014dd2:	d013      	beq.n	8014dfc <RegionCommonUpdateBandTimeOff+0xcc>
            ( ( dutyCycleEnabled == false ) && ( joined == true ) ) )
 8014dd4:	79fb      	ldrb	r3, [r7, #7]
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d010      	beq.n	8014dfc <RegionCommonUpdateBandTimeOff+0xcc>
        {
            bands[i].ReadyForTransmission = true;
 8014dda:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014dde:	4613      	mov	r3, r2
 8014de0:	005b      	lsls	r3, r3, #1
 8014de2:	4413      	add	r3, r2
 8014de4:	00db      	lsls	r3, r3, #3
 8014de6:	461a      	mov	r2, r3
 8014de8:	683b      	ldr	r3, [r7, #0]
 8014dea:	4413      	add	r3, r2
 8014dec:	2201      	movs	r2, #1
 8014dee:	751a      	strb	r2, [r3, #20]
            // This band is a potential candidate for an
            // upcoming transmission, so increase the counter.
            validBands++;
 8014df0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014df4:	3301      	adds	r3, #1
 8014df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8014dfa:	e06c      	b.n	8014ed6 <RegionCommonUpdateBandTimeOff+0x1a6>
        }
        else
        {
            // In this case, the band has not enough credits
            // for the next transmission.
            bands[i].ReadyForTransmission = false;
 8014dfc:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e00:	4613      	mov	r3, r2
 8014e02:	005b      	lsls	r3, r3, #1
 8014e04:	4413      	add	r3, r2
 8014e06:	00db      	lsls	r3, r3, #3
 8014e08:	461a      	mov	r2, r3
 8014e0a:	683b      	ldr	r3, [r7, #0]
 8014e0c:	4413      	add	r3, r2
 8014e0e:	2200      	movs	r2, #0
 8014e10:	751a      	strb	r2, [r3, #20]

            if( bands[i].MaxTimeCredits > creditCosts )
 8014e12:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e16:	4613      	mov	r3, r2
 8014e18:	005b      	lsls	r3, r3, #1
 8014e1a:	4413      	add	r3, r2
 8014e1c:	00db      	lsls	r3, r3, #3
 8014e1e:	461a      	mov	r2, r3
 8014e20:	683b      	ldr	r3, [r7, #0]
 8014e22:	4413      	add	r3, r2
 8014e24:	691b      	ldr	r3, [r3, #16]
 8014e26:	69ba      	ldr	r2, [r7, #24]
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d215      	bcs.n	8014e58 <RegionCommonUpdateBandTimeOff+0x128>
                // The band can only be taken into account, if the maximum credits
                // of the band are higher than the credit costs.
                // We calculate the minTimeToWait among the bands which are not
                // ready for transmission and which are potentially available
                // for a transmission in the future.
                minTimeToWait = MIN( minTimeToWait, ( creditCosts - bands[i].TimeCredits ) );
 8014e2c:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014e30:	4613      	mov	r3, r2
 8014e32:	005b      	lsls	r3, r3, #1
 8014e34:	4413      	add	r3, r2
 8014e36:	00db      	lsls	r3, r3, #3
 8014e38:	461a      	mov	r2, r3
 8014e3a:	683b      	ldr	r3, [r7, #0]
 8014e3c:	4413      	add	r3, r2
 8014e3e:	68db      	ldr	r3, [r3, #12]
 8014e40:	69ba      	ldr	r2, [r7, #24]
 8014e42:	1ad3      	subs	r3, r2, r3
 8014e44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e46:	4293      	cmp	r3, r2
 8014e48:	bf28      	it	cs
 8014e4a:	4613      	movcs	r3, r2
 8014e4c:	627b      	str	r3, [r7, #36]	@ 0x24
                // This band is a potential candidate for an
                // upcoming transmission (even if its time credits are not enough
                // at the moment), so increase the counter.
                validBands++;
 8014e4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014e52:	3301      	adds	r3, #1
 8014e54:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            }

            // Apply a special calculation if the device is not joined.
            if( joined == false )
 8014e58:	79fb      	ldrb	r3, [r7, #7]
 8014e5a:	f083 0301 	eor.w	r3, r3, #1
 8014e5e:	b2db      	uxtb	r3, r3
 8014e60:	2b00      	cmp	r3, #0
 8014e62:	d038      	beq.n	8014ed6 <RegionCommonUpdateBandTimeOff+0x1a6>
            {
                SysTime_t backoffTimeRange = {
 8014e64:	2300      	movs	r3, #0
 8014e66:	60fb      	str	r3, [r7, #12]
 8014e68:	2300      	movs	r3, #0
 8014e6a:	823b      	strh	r3, [r7, #16]
                    .Seconds    = 0,
                    .SubSeconds = 0,
                };
                // Get the backoff time range based on the duty cycle definition
                if( dutyCycle == BACKOFF_DC_1_HOUR )
 8014e6c:	8afb      	ldrh	r3, [r7, #22]
 8014e6e:	2b64      	cmp	r3, #100	@ 0x64
 8014e70:	d103      	bne.n	8014e7a <RegionCommonUpdateBandTimeOff+0x14a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_1_HOUR_IN_S;
 8014e72:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8014e76:	60fb      	str	r3, [r7, #12]
 8014e78:	e009      	b.n	8014e8e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else if( dutyCycle == BACKOFF_DC_10_HOURS )
 8014e7a:	8afb      	ldrh	r3, [r7, #22]
 8014e7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8014e80:	d103      	bne.n	8014e8a <RegionCommonUpdateBandTimeOff+0x15a>
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_10_HOURS_IN_S;
 8014e82:	f649 23b0 	movw	r3, #39600	@ 0x9ab0
 8014e86:	60fb      	str	r3, [r7, #12]
 8014e88:	e001      	b.n	8014e8e <RegionCommonUpdateBandTimeOff+0x15e>
                }
                else
                {
                    backoffTimeRange.Seconds = BACKOFF_DUTY_CYCLE_24_HOURS_IN_S;
 8014e8a:	4b1e      	ldr	r3, [pc, #120]	@ (8014f04 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014e8c:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time to wait.
                if( elapsedTimeSinceStartup.Seconds > BACKOFF_DUTY_CYCLE_24_HOURS_IN_S )
 8014e8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e90:	4a1c      	ldr	r2, [pc, #112]	@ (8014f04 <RegionCommonUpdateBandTimeOff+0x1d4>)
 8014e92:	4293      	cmp	r3, r2
 8014e94:	d90e      	bls.n	8014eb4 <RegionCommonUpdateBandTimeOff+0x184>
                {
                    backoffTimeRange.Seconds += BACKOFF_24_HOURS_IN_S * ( ( ( elapsedTimeSinceStartup.Seconds - BACKOFF_DUTY_CYCLE_24_HOURS_IN_S ) / BACKOFF_24_HOURS_IN_S ) + 1 );
 8014e96:	68fa      	ldr	r2, [r7, #12]
 8014e98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014e9a:	f5a3 33f6 	sub.w	r3, r3, #125952	@ 0x1ec00
 8014e9e:	3b30      	subs	r3, #48	@ 0x30
 8014ea0:	4919      	ldr	r1, [pc, #100]	@ (8014f08 <RegionCommonUpdateBandTimeOff+0x1d8>)
 8014ea2:	fba1 1303 	umull	r1, r3, r1, r3
 8014ea6:	0c1b      	lsrs	r3, r3, #16
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	4918      	ldr	r1, [pc, #96]	@ (8014f0c <RegionCommonUpdateBandTimeOff+0x1dc>)
 8014eac:	fb01 f303 	mul.w	r3, r1, r3
 8014eb0:	4413      	add	r3, r2
 8014eb2:	60fb      	str	r3, [r7, #12]
                }
                // Calculate the time difference between now and the next range
                backoffTimeRange  = SysTimeSub( backoffTimeRange, elapsedTimeSinceStartup );
 8014eb4:	f107 000c 	add.w	r0, r7, #12
 8014eb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014eba:	9300      	str	r3, [sp, #0]
 8014ebc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ebe:	f107 020c 	add.w	r2, r7, #12
 8014ec2:	ca06      	ldmia	r2, {r1, r2}
 8014ec4:	f005 f943 	bl	801a14e <SysTimeSub>
                minTimeToWait = SysTimeToMs( backoffTimeRange );
 8014ec8:	f107 030c 	add.w	r3, r7, #12
 8014ecc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8014ed0:	f005 f9fc 	bl	801a2cc <SysTimeToMs>
 8014ed4:	6278      	str	r0, [r7, #36]	@ 0x24
    for( uint8_t i = 0; i < nbBands; i++ )
 8014ed6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8014eda:	3301      	adds	r3, #1
 8014edc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8014ee0:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8014ee4:	79bb      	ldrb	r3, [r7, #6]
 8014ee6:	429a      	cmp	r2, r3
 8014ee8:	f4ff af3f 	bcc.w	8014d6a <RegionCommonUpdateBandTimeOff+0x3a>
            }
        }
    }

    if( validBands == 0 )
 8014eec:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8014ef0:	2b00      	cmp	r3, #0
 8014ef2:	d102      	bne.n	8014efa <RegionCommonUpdateBandTimeOff+0x1ca>
    {
        // There is no valid band available to handle a transmission
        // in the given DUTY_CYCLE_TIME_PERIOD.
        return TIMERTIME_T_MAX;
 8014ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8014ef8:	e000      	b.n	8014efc <RegionCommonUpdateBandTimeOff+0x1cc>
    }
    return minTimeToWait;
 8014efa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8014efc:	4618      	mov	r0, r3
 8014efe:	372c      	adds	r7, #44	@ 0x2c
 8014f00:	46bd      	mov	sp, r7
 8014f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f04:	0001ec30 	.word	0x0001ec30
 8014f08:	c22e4507 	.word	0xc22e4507
 8014f0c:	00015180 	.word	0x00015180

08014f10 <RegionCommonParseLinkAdrReq>:

uint8_t RegionCommonParseLinkAdrReq( uint8_t* payload, RegionCommonLinkAdrParams_t* linkAdrParams )
{
 8014f10:	b480      	push	{r7}
 8014f12:	b085      	sub	sp, #20
 8014f14:	af00      	add	r7, sp, #0
 8014f16:	6078      	str	r0, [r7, #4]
 8014f18:	6039      	str	r1, [r7, #0]
    uint8_t retIndex = 0;
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	73fb      	strb	r3, [r7, #15]

    if( payload[0] == SRV_MAC_LINK_ADR_REQ )
 8014f1e:	687b      	ldr	r3, [r7, #4]
 8014f20:	781b      	ldrb	r3, [r3, #0]
 8014f22:	2b03      	cmp	r3, #3
 8014f24:	d13f      	bne.n	8014fa6 <RegionCommonParseLinkAdrReq+0x96>
    {
        // Parse datarate and tx power
        linkAdrParams->Datarate = payload[1];
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	3301      	adds	r3, #1
 8014f2a:	781b      	ldrb	r3, [r3, #0]
 8014f2c:	b25a      	sxtb	r2, r3
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	705a      	strb	r2, [r3, #1]
        linkAdrParams->TxPower = linkAdrParams->Datarate & 0x0F;
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f38:	f003 030f 	and.w	r3, r3, #15
 8014f3c:	b25a      	sxtb	r2, r3
 8014f3e:	683b      	ldr	r3, [r7, #0]
 8014f40:	709a      	strb	r2, [r3, #2]
        linkAdrParams->Datarate = ( linkAdrParams->Datarate >> 4 ) & 0x0F;
 8014f42:	683b      	ldr	r3, [r7, #0]
 8014f44:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8014f48:	b2db      	uxtb	r3, r3
 8014f4a:	091b      	lsrs	r3, r3, #4
 8014f4c:	b2db      	uxtb	r3, r3
 8014f4e:	b25a      	sxtb	r2, r3
 8014f50:	683b      	ldr	r3, [r7, #0]
 8014f52:	705a      	strb	r2, [r3, #1]
        // Parse ChMask
        linkAdrParams->ChMask = ( uint16_t )payload[2];
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	3302      	adds	r3, #2
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	809a      	strh	r2, [r3, #4]
        linkAdrParams->ChMask |= ( uint16_t )payload[3] << 8;
 8014f60:	683b      	ldr	r3, [r7, #0]
 8014f62:	889b      	ldrh	r3, [r3, #4]
 8014f64:	b21a      	sxth	r2, r3
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	3303      	adds	r3, #3
 8014f6a:	781b      	ldrb	r3, [r3, #0]
 8014f6c:	021b      	lsls	r3, r3, #8
 8014f6e:	b21b      	sxth	r3, r3
 8014f70:	4313      	orrs	r3, r2
 8014f72:	b21b      	sxth	r3, r3
 8014f74:	b29a      	uxth	r2, r3
 8014f76:	683b      	ldr	r3, [r7, #0]
 8014f78:	809a      	strh	r2, [r3, #4]
        // Parse ChMaskCtrl and nbRep
        linkAdrParams->NbRep = payload[4];
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	791a      	ldrb	r2, [r3, #4]
 8014f7e:	683b      	ldr	r3, [r7, #0]
 8014f80:	701a      	strb	r2, [r3, #0]
        linkAdrParams->ChMaskCtrl = ( linkAdrParams->NbRep >> 4 ) & 0x07;
 8014f82:	683b      	ldr	r3, [r7, #0]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	091b      	lsrs	r3, r3, #4
 8014f88:	b2db      	uxtb	r3, r3
 8014f8a:	f003 0307 	and.w	r3, r3, #7
 8014f8e:	b2da      	uxtb	r2, r3
 8014f90:	683b      	ldr	r3, [r7, #0]
 8014f92:	70da      	strb	r2, [r3, #3]
        linkAdrParams->NbRep &= 0x0F;
 8014f94:	683b      	ldr	r3, [r7, #0]
 8014f96:	781b      	ldrb	r3, [r3, #0]
 8014f98:	f003 030f 	and.w	r3, r3, #15
 8014f9c:	b2da      	uxtb	r2, r3
 8014f9e:	683b      	ldr	r3, [r7, #0]
 8014fa0:	701a      	strb	r2, [r3, #0]

        // LinkAdrReq has 4 bytes length + 1 byte CMD
        retIndex = 5;
 8014fa2:	2305      	movs	r3, #5
 8014fa4:	73fb      	strb	r3, [r7, #15]
    }
    return retIndex;
 8014fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fa8:	4618      	mov	r0, r3
 8014faa:	3714      	adds	r7, #20
 8014fac:	46bd      	mov	sp, r7
 8014fae:	bc80      	pop	{r7}
 8014fb0:	4770      	bx	lr

08014fb2 <RegionCommonLinkAdrReqVerifyParams>:

uint8_t RegionCommonLinkAdrReqVerifyParams( RegionCommonLinkAdrReqVerifyParams_t* verifyParams, int8_t* dr, int8_t* txPow, uint8_t* nbRep )
{
 8014fb2:	b5b0      	push	{r4, r5, r7, lr}
 8014fb4:	b088      	sub	sp, #32
 8014fb6:	af02      	add	r7, sp, #8
 8014fb8:	60f8      	str	r0, [r7, #12]
 8014fba:	60b9      	str	r1, [r7, #8]
 8014fbc:	607a      	str	r2, [r7, #4]
 8014fbe:	603b      	str	r3, [r7, #0]
    uint8_t status = verifyParams->Status;
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	791b      	ldrb	r3, [r3, #4]
 8014fc4:	75fb      	strb	r3, [r7, #23]
    int8_t datarate = verifyParams->Datarate;
 8014fc6:	68fb      	ldr	r3, [r7, #12]
 8014fc8:	799b      	ldrb	r3, [r3, #6]
 8014fca:	75bb      	strb	r3, [r7, #22]
    int8_t txPower = verifyParams->TxPower;
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	79db      	ldrb	r3, [r3, #7]
 8014fd0:	757b      	strb	r3, [r7, #21]
    int8_t nbRepetitions = verifyParams->NbRep;
 8014fd2:	68fb      	ldr	r3, [r7, #12]
 8014fd4:	7a1b      	ldrb	r3, [r3, #8]
 8014fd6:	753b      	strb	r3, [r7, #20]

    // Handle the case when ADR is off.
    if( verifyParams->AdrEnabled == false )
 8014fd8:	68fb      	ldr	r3, [r7, #12]
 8014fda:	795b      	ldrb	r3, [r3, #5]
 8014fdc:	f083 0301 	eor.w	r3, r3, #1
 8014fe0:	b2db      	uxtb	r3, r3
 8014fe2:	2b00      	cmp	r3, #0
 8014fe4:	d008      	beq.n	8014ff8 <RegionCommonLinkAdrReqVerifyParams+0x46>
    {
        // When ADR is off, we are allowed to change the channels mask
        nbRepetitions = verifyParams->CurrentNbRep;
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	7adb      	ldrb	r3, [r3, #11]
 8014fea:	753b      	strb	r3, [r7, #20]
        datarate =  verifyParams->CurrentDatarate;
 8014fec:	68fb      	ldr	r3, [r7, #12]
 8014fee:	7a5b      	ldrb	r3, [r3, #9]
 8014ff0:	75bb      	strb	r3, [r7, #22]
        txPower =  verifyParams->CurrentTxPower;
 8014ff2:	68fb      	ldr	r3, [r7, #12]
 8014ff4:	7a9b      	ldrb	r3, [r3, #10]
 8014ff6:	757b      	strb	r3, [r7, #21]
    }

    if( status != 0 )
 8014ff8:	7dfb      	ldrb	r3, [r7, #23]
 8014ffa:	2b00      	cmp	r3, #0
 8014ffc:	d04a      	beq.n	8015094 <RegionCommonLinkAdrReqVerifyParams+0xe2>
    {
        // Verify datarate. The variable phyParam. Value contains the minimum allowed datarate.
        if( datarate == 0x0F )
 8014ffe:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8015002:	2b0f      	cmp	r3, #15
 8015004:	d103      	bne.n	801500e <RegionCommonLinkAdrReqVerifyParams+0x5c>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            datarate =  verifyParams->CurrentDatarate;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	7a5b      	ldrb	r3, [r3, #9]
 801500a:	75bb      	strb	r3, [r7, #22]
 801500c:	e01d      	b.n	801504a <RegionCommonLinkAdrReqVerifyParams+0x98>
        }
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801500e:	68fb      	ldr	r3, [r7, #12]
 8015010:	7b18      	ldrb	r0, [r3, #12]
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	6919      	ldr	r1, [r3, #16]
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	f993 5014 	ldrsb.w	r5, [r3, #20]
 801501c:	68fb      	ldr	r3, [r7, #12]
 801501e:	f993 3015 	ldrsb.w	r3, [r3, #21]
 8015022:	68fa      	ldr	r2, [r7, #12]
 8015024:	6992      	ldr	r2, [r2, #24]
 8015026:	f997 4016 	ldrsb.w	r4, [r7, #22]
 801502a:	9201      	str	r2, [sp, #4]
 801502c:	9300      	str	r3, [sp, #0]
 801502e:	462b      	mov	r3, r5
 8015030:	4622      	mov	r2, r4
 8015032:	f7ff fd3a 	bl	8014aaa <RegionCommonChanVerifyDr>
 8015036:	4603      	mov	r3, r0
                                      verifyParams->MinDatarate, verifyParams->MaxDatarate, verifyParams->Channels  ) == false )
 8015038:	f083 0301 	eor.w	r3, r3, #1
 801503c:	b2db      	uxtb	r3, r3
        else if( RegionCommonChanVerifyDr( verifyParams->NbChannels, verifyParams->ChannelsMask, datarate,
 801503e:	2b00      	cmp	r3, #0
 8015040:	d003      	beq.n	801504a <RegionCommonLinkAdrReqVerifyParams+0x98>
        {
            status &= 0xFD; // Datarate KO
 8015042:	7dfb      	ldrb	r3, [r7, #23]
 8015044:	f023 0302 	bic.w	r3, r3, #2
 8015048:	75fb      	strb	r3, [r7, #23]
        }

        // Verify tx power
        if( txPower == 0x0F )
 801504a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801504e:	2b0f      	cmp	r3, #15
 8015050:	d103      	bne.n	801505a <RegionCommonLinkAdrReqVerifyParams+0xa8>
        { // 0xF means that the device MUST ignore that field, and keep the current parameter value.
            txPower =  verifyParams->CurrentTxPower;
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	7a9b      	ldrb	r3, [r3, #10]
 8015056:	757b      	strb	r3, [r7, #21]
 8015058:	e01c      	b.n	8015094 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        }
        else if( RegionCommonValueInRange( txPower, verifyParams->MaxTxPower, verifyParams->MinTxPower ) == 0 )
 801505a:	68fb      	ldr	r3, [r7, #12]
 801505c:	f993 101d 	ldrsb.w	r1, [r3, #29]
 8015060:	68fb      	ldr	r3, [r7, #12]
 8015062:	f993 201c 	ldrsb.w	r2, [r3, #28]
 8015066:	f997 3015 	ldrsb.w	r3, [r7, #21]
 801506a:	4618      	mov	r0, r3
 801506c:	f7ff fd8f 	bl	8014b8e <RegionCommonValueInRange>
 8015070:	4603      	mov	r3, r0
 8015072:	2b00      	cmp	r3, #0
 8015074:	d10e      	bne.n	8015094 <RegionCommonLinkAdrReqVerifyParams+0xe2>
        {
            // Verify if the maximum TX power is exceeded
            if( verifyParams->MaxTxPower > txPower )
 8015076:	68fb      	ldr	r3, [r7, #12]
 8015078:	f993 301d 	ldrsb.w	r3, [r3, #29]
 801507c:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8015080:	429a      	cmp	r2, r3
 8015082:	da03      	bge.n	801508c <RegionCommonLinkAdrReqVerifyParams+0xda>
            { // Apply maximum TX power. Accept TX power.
                txPower = verifyParams->MaxTxPower;
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	7f5b      	ldrb	r3, [r3, #29]
 8015088:	757b      	strb	r3, [r7, #21]
 801508a:	e003      	b.n	8015094 <RegionCommonLinkAdrReqVerifyParams+0xe2>
            }
            else
            {
                status &= 0xFB; // TxPower KO
 801508c:	7dfb      	ldrb	r3, [r7, #23]
 801508e:	f023 0304 	bic.w	r3, r3, #4
 8015092:	75fb      	strb	r3, [r7, #23]
            }
        }
    }

    // If the status is ok, verify the NbRep
    if( status == 0x07 )
 8015094:	7dfb      	ldrb	r3, [r7, #23]
 8015096:	2b07      	cmp	r3, #7
 8015098:	d105      	bne.n	80150a6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
    {
        if( nbRepetitions == 0 )
 801509a:	f997 3014 	ldrsb.w	r3, [r7, #20]
 801509e:	2b00      	cmp	r3, #0
 80150a0:	d101      	bne.n	80150a6 <RegionCommonLinkAdrReqVerifyParams+0xf4>
        { // Set nbRep to the default value of 1.
            nbRepetitions = 1;
 80150a2:	2301      	movs	r3, #1
 80150a4:	753b      	strb	r3, [r7, #20]
        }
    }

    // Apply changes
    *dr = datarate;
 80150a6:	68bb      	ldr	r3, [r7, #8]
 80150a8:	7dba      	ldrb	r2, [r7, #22]
 80150aa:	701a      	strb	r2, [r3, #0]
    *txPow = txPower;
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	7d7a      	ldrb	r2, [r7, #21]
 80150b0:	701a      	strb	r2, [r3, #0]
    *nbRep = nbRepetitions;
 80150b2:	7d3a      	ldrb	r2, [r7, #20]
 80150b4:	683b      	ldr	r3, [r7, #0]
 80150b6:	701a      	strb	r2, [r3, #0]

    return status;
 80150b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80150ba:	4618      	mov	r0, r3
 80150bc:	3718      	adds	r7, #24
 80150be:	46bd      	mov	sp, r7
 80150c0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080150c4 <RegionCommonComputeSymbolTimeLoRa>:

uint32_t RegionCommonComputeSymbolTimeLoRa( uint8_t phyDr, uint32_t bandwidthInHz )
{
 80150c4:	b480      	push	{r7}
 80150c6:	b083      	sub	sp, #12
 80150c8:	af00      	add	r7, sp, #0
 80150ca:	4603      	mov	r3, r0
 80150cc:	6039      	str	r1, [r7, #0]
 80150ce:	71fb      	strb	r3, [r7, #7]
    return ( 1 << phyDr ) * 1000000 / bandwidthInHz;
 80150d0:	79fb      	ldrb	r3, [r7, #7]
 80150d2:	4a06      	ldr	r2, [pc, #24]	@ (80150ec <RegionCommonComputeSymbolTimeLoRa+0x28>)
 80150d4:	fa02 f303 	lsl.w	r3, r2, r3
 80150d8:	461a      	mov	r2, r3
 80150da:	683b      	ldr	r3, [r7, #0]
 80150dc:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80150e0:	4618      	mov	r0, r3
 80150e2:	370c      	adds	r7, #12
 80150e4:	46bd      	mov	sp, r7
 80150e6:	bc80      	pop	{r7}
 80150e8:	4770      	bx	lr
 80150ea:	bf00      	nop
 80150ec:	000f4240 	.word	0x000f4240

080150f0 <RegionCommonComputeSymbolTimeFsk>:

uint32_t RegionCommonComputeSymbolTimeFsk( uint8_t phyDrInKbps )
{
 80150f0:	b480      	push	{r7}
 80150f2:	b083      	sub	sp, #12
 80150f4:	af00      	add	r7, sp, #0
 80150f6:	4603      	mov	r3, r0
 80150f8:	71fb      	strb	r3, [r7, #7]
    return 8000 / ( uint32_t )phyDrInKbps; // 1 symbol equals 1 byte
 80150fa:	79fb      	ldrb	r3, [r7, #7]
 80150fc:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8015100:	fbb2 f3f3 	udiv	r3, r2, r3
}
 8015104:	4618      	mov	r0, r3
 8015106:	370c      	adds	r7, #12
 8015108:	46bd      	mov	sp, r7
 801510a:	bc80      	pop	{r7}
 801510c:	4770      	bx	lr
	...

08015110 <RegionCommonComputeRxWindowParameters>:

void RegionCommonComputeRxWindowParameters( uint32_t tSymbolInUs, uint8_t minRxSymbols, uint32_t rxErrorInMs, uint32_t wakeUpTimeInMs, uint32_t* windowTimeoutInSymbols, int32_t* windowOffsetInMs )
{
 8015110:	b480      	push	{r7}
 8015112:	b085      	sub	sp, #20
 8015114:	af00      	add	r7, sp, #0
 8015116:	60f8      	str	r0, [r7, #12]
 8015118:	607a      	str	r2, [r7, #4]
 801511a:	603b      	str	r3, [r7, #0]
 801511c:	460b      	mov	r3, r1
 801511e:	72fb      	strb	r3, [r7, #11]
    *windowTimeoutInSymbols = MAX( DIV_CEIL( ( ( 2 * minRxSymbols - 8 ) * tSymbolInUs + 2 * ( rxErrorInMs * 1000 ) ),  tSymbolInUs ), minRxSymbols ); // Computed number of symbols
 8015120:	7afa      	ldrb	r2, [r7, #11]
 8015122:	7afb      	ldrb	r3, [r7, #11]
 8015124:	3b04      	subs	r3, #4
 8015126:	4619      	mov	r1, r3
 8015128:	68fb      	ldr	r3, [r7, #12]
 801512a:	fb03 f101 	mul.w	r1, r3, r1
 801512e:	687b      	ldr	r3, [r7, #4]
 8015130:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015134:	fb00 f303 	mul.w	r3, r0, r3
 8015138:	440b      	add	r3, r1
 801513a:	005b      	lsls	r3, r3, #1
 801513c:	2b00      	cmp	r3, #0
 801513e:	d013      	beq.n	8015168 <RegionCommonComputeRxWindowParameters+0x58>
 8015140:	7afb      	ldrb	r3, [r7, #11]
 8015142:	3b04      	subs	r3, #4
 8015144:	4619      	mov	r1, r3
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	fb03 f101 	mul.w	r1, r3, r1
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015152:	fb00 f303 	mul.w	r3, r0, r3
 8015156:	440b      	add	r3, r1
 8015158:	0059      	lsls	r1, r3, #1
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	440b      	add	r3, r1
 801515e:	1e59      	subs	r1, r3, #1
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	fbb1 f3f3 	udiv	r3, r1, r3
 8015166:	e00f      	b.n	8015188 <RegionCommonComputeRxWindowParameters+0x78>
 8015168:	7afb      	ldrb	r3, [r7, #11]
 801516a:	3b04      	subs	r3, #4
 801516c:	4619      	mov	r1, r3
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	fb03 f101 	mul.w	r1, r3, r1
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801517a:	fb00 f303 	mul.w	r3, r0, r3
 801517e:	440b      	add	r3, r1
 8015180:	0059      	lsls	r1, r3, #1
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	fbb1 f3f3 	udiv	r3, r1, r3
 8015188:	429a      	cmp	r2, r3
 801518a:	bf38      	it	cc
 801518c:	461a      	movcc	r2, r3
 801518e:	69bb      	ldr	r3, [r7, #24]
 8015190:	601a      	str	r2, [r3, #0]
    *windowOffsetInMs = ( int32_t )DIV_CEIL( ( int32_t )( 4 * tSymbolInUs ) -
 8015192:	68fb      	ldr	r3, [r7, #12]
 8015194:	009b      	lsls	r3, r3, #2
 8015196:	4619      	mov	r1, r3
 8015198:	69bb      	ldr	r3, [r7, #24]
 801519a:	681b      	ldr	r3, [r3, #0]
 801519c:	68fa      	ldr	r2, [r7, #12]
 801519e:	fb02 f303 	mul.w	r3, r2, r3
 80151a2:	2b00      	cmp	r3, #0
 80151a4:	d007      	beq.n	80151b6 <RegionCommonComputeRxWindowParameters+0xa6>
 80151a6:	69bb      	ldr	r3, [r7, #24]
 80151a8:	681b      	ldr	r3, [r3, #0]
 80151aa:	68fa      	ldr	r2, [r7, #12]
 80151ac:	fb02 f303 	mul.w	r3, r2, r3
 80151b0:	3301      	adds	r3, #1
 80151b2:	085b      	lsrs	r3, r3, #1
 80151b4:	e005      	b.n	80151c2 <RegionCommonComputeRxWindowParameters+0xb2>
 80151b6:	69bb      	ldr	r3, [r7, #24]
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	68fa      	ldr	r2, [r7, #12]
 80151bc:	fb02 f303 	mul.w	r3, r2, r3
 80151c0:	085b      	lsrs	r3, r3, #1
 80151c2:	1acb      	subs	r3, r1, r3
 80151c4:	683a      	ldr	r2, [r7, #0]
 80151c6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80151ca:	fb01 f202 	mul.w	r2, r1, r2
 80151ce:	1a9b      	subs	r3, r3, r2
 80151d0:	2b00      	cmp	r3, #0
 80151d2:	dd27      	ble.n	8015224 <RegionCommonComputeRxWindowParameters+0x114>
 80151d4:	68fb      	ldr	r3, [r7, #12]
 80151d6:	009b      	lsls	r3, r3, #2
 80151d8:	4619      	mov	r1, r3
 80151da:	69bb      	ldr	r3, [r7, #24]
 80151dc:	681b      	ldr	r3, [r3, #0]
 80151de:	68fa      	ldr	r2, [r7, #12]
 80151e0:	fb02 f303 	mul.w	r3, r2, r3
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d007      	beq.n	80151f8 <RegionCommonComputeRxWindowParameters+0xe8>
 80151e8:	69bb      	ldr	r3, [r7, #24]
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	68fa      	ldr	r2, [r7, #12]
 80151ee:	fb02 f303 	mul.w	r3, r2, r3
 80151f2:	3301      	adds	r3, #1
 80151f4:	085b      	lsrs	r3, r3, #1
 80151f6:	e005      	b.n	8015204 <RegionCommonComputeRxWindowParameters+0xf4>
 80151f8:	69bb      	ldr	r3, [r7, #24]
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	68fa      	ldr	r2, [r7, #12]
 80151fe:	fb02 f303 	mul.w	r3, r2, r3
 8015202:	085b      	lsrs	r3, r3, #1
 8015204:	1acb      	subs	r3, r1, r3
 8015206:	683a      	ldr	r2, [r7, #0]
 8015208:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801520c:	fb01 f202 	mul.w	r2, r1, r2
 8015210:	1a9b      	subs	r3, r3, r2
 8015212:	f203 33e7 	addw	r3, r3, #999	@ 0x3e7
 8015216:	4a19      	ldr	r2, [pc, #100]	@ (801527c <RegionCommonComputeRxWindowParameters+0x16c>)
 8015218:	fb82 1203 	smull	r1, r2, r2, r3
 801521c:	1192      	asrs	r2, r2, #6
 801521e:	17db      	asrs	r3, r3, #31
 8015220:	1ad3      	subs	r3, r2, r3
 8015222:	e024      	b.n	801526e <RegionCommonComputeRxWindowParameters+0x15e>
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	009b      	lsls	r3, r3, #2
 8015228:	4619      	mov	r1, r3
 801522a:	69bb      	ldr	r3, [r7, #24]
 801522c:	681b      	ldr	r3, [r3, #0]
 801522e:	68fa      	ldr	r2, [r7, #12]
 8015230:	fb02 f303 	mul.w	r3, r2, r3
 8015234:	2b00      	cmp	r3, #0
 8015236:	d007      	beq.n	8015248 <RegionCommonComputeRxWindowParameters+0x138>
 8015238:	69bb      	ldr	r3, [r7, #24]
 801523a:	681b      	ldr	r3, [r3, #0]
 801523c:	68fa      	ldr	r2, [r7, #12]
 801523e:	fb02 f303 	mul.w	r3, r2, r3
 8015242:	3301      	adds	r3, #1
 8015244:	085b      	lsrs	r3, r3, #1
 8015246:	e005      	b.n	8015254 <RegionCommonComputeRxWindowParameters+0x144>
 8015248:	69bb      	ldr	r3, [r7, #24]
 801524a:	681b      	ldr	r3, [r3, #0]
 801524c:	68fa      	ldr	r2, [r7, #12]
 801524e:	fb02 f303 	mul.w	r3, r2, r3
 8015252:	085b      	lsrs	r3, r3, #1
 8015254:	1acb      	subs	r3, r1, r3
 8015256:	683a      	ldr	r2, [r7, #0]
 8015258:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 801525c:	fb01 f202 	mul.w	r2, r1, r2
 8015260:	1a9b      	subs	r3, r3, r2
 8015262:	4a06      	ldr	r2, [pc, #24]	@ (801527c <RegionCommonComputeRxWindowParameters+0x16c>)
 8015264:	fb82 1203 	smull	r1, r2, r2, r3
 8015268:	1192      	asrs	r2, r2, #6
 801526a:	17db      	asrs	r3, r3, #31
 801526c:	1ad3      	subs	r3, r2, r3
 801526e:	69fa      	ldr	r2, [r7, #28]
 8015270:	6013      	str	r3, [r2, #0]
                                               ( int32_t )DIV_CEIL( ( *windowTimeoutInSymbols * tSymbolInUs ), 2 ) -
                                               ( int32_t )( wakeUpTimeInMs * 1000 ), 1000 );
}
 8015272:	bf00      	nop
 8015274:	3714      	adds	r7, #20
 8015276:	46bd      	mov	sp, r7
 8015278:	bc80      	pop	{r7}
 801527a:	4770      	bx	lr
 801527c:	10624dd3 	.word	0x10624dd3

08015280 <RegionCommonComputeTxPower>:

int8_t RegionCommonComputeTxPower( int8_t txPowerIndex, float maxEirp, float antennaGain )
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b086      	sub	sp, #24
 8015284:	af00      	add	r7, sp, #0
 8015286:	4603      	mov	r3, r0
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	607a      	str	r2, [r7, #4]
 801528c:	73fb      	strb	r3, [r7, #15]
    int8_t phyTxPower = 0;
 801528e:	2300      	movs	r3, #0
 8015290:	75fb      	strb	r3, [r7, #23]

    phyTxPower = ( int8_t )floor( ( maxEirp - ( txPowerIndex * 2U ) ) - antennaGain );
 8015292:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015296:	005b      	lsls	r3, r3, #1
 8015298:	4618      	mov	r0, r3
 801529a:	f7eb fa97 	bl	80007cc <__aeabi_ui2f>
 801529e:	4603      	mov	r3, r0
 80152a0:	4619      	mov	r1, r3
 80152a2:	68b8      	ldr	r0, [r7, #8]
 80152a4:	f7eb f9e0 	bl	8000668 <__aeabi_fsub>
 80152a8:	4603      	mov	r3, r0
 80152aa:	6879      	ldr	r1, [r7, #4]
 80152ac:	4618      	mov	r0, r3
 80152ae:	f7eb f9db 	bl	8000668 <__aeabi_fsub>
 80152b2:	4603      	mov	r3, r0
 80152b4:	4618      	mov	r0, r3
 80152b6:	f7eb f8cb 	bl	8000450 <__aeabi_f2d>
 80152ba:	4602      	mov	r2, r0
 80152bc:	460b      	mov	r3, r1
 80152be:	4610      	mov	r0, r2
 80152c0:	4619      	mov	r1, r3
 80152c2:	f006 f9c1 	bl	801b648 <floor>
 80152c6:	4602      	mov	r2, r0
 80152c8:	460b      	mov	r3, r1
 80152ca:	4610      	mov	r0, r2
 80152cc:	4619      	mov	r1, r3
 80152ce:	f7eb f99f 	bl	8000610 <__aeabi_d2iz>
 80152d2:	4603      	mov	r3, r0
 80152d4:	75fb      	strb	r3, [r7, #23]

    return phyTxPower;
 80152d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80152da:	4618      	mov	r0, r3
 80152dc:	3718      	adds	r7, #24
 80152de:	46bd      	mov	sp, r7
 80152e0:	bd80      	pop	{r7, pc}

080152e2 <RegionCommonCountNbOfEnabledChannels>:
    /* ST_WORKAROUND_END */
}

void RegionCommonCountNbOfEnabledChannels( RegionCommonCountNbOfEnabledChannelsParams_t* countNbOfEnabledChannelsParams,
                                           uint8_t* enabledChannels, uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels )
{
 80152e2:	b590      	push	{r4, r7, lr}
 80152e4:	b087      	sub	sp, #28
 80152e6:	af00      	add	r7, sp, #0
 80152e8:	60f8      	str	r0, [r7, #12]
 80152ea:	60b9      	str	r1, [r7, #8]
 80152ec:	607a      	str	r2, [r7, #4]
 80152ee:	603b      	str	r3, [r7, #0]
    uint8_t nbChannelCount = 0;
 80152f0:	2300      	movs	r3, #0
 80152f2:	75fb      	strb	r3, [r7, #23]
    uint8_t nbRestrictedChannelsCount = 0;
 80152f4:	2300      	movs	r3, #0
 80152f6:	75bb      	strb	r3, [r7, #22]

    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 80152f8:	2300      	movs	r3, #0
 80152fa:	757b      	strb	r3, [r7, #21]
 80152fc:	2300      	movs	r3, #0
 80152fe:	753b      	strb	r3, [r7, #20]
 8015300:	e09c      	b.n	801543c <RegionCommonCountNbOfEnabledChannels+0x15a>
    {
        for( uint8_t j = 0; j < 16; j++ )
 8015302:	2300      	movs	r3, #0
 8015304:	74fb      	strb	r3, [r7, #19]
 8015306:	e08f      	b.n	8015428 <RegionCommonCountNbOfEnabledChannels+0x146>
        {
            if( ( countNbOfEnabledChannelsParams->ChannelsMask[k] & ( 1 << j ) ) != 0 )
 8015308:	68fb      	ldr	r3, [r7, #12]
 801530a:	685a      	ldr	r2, [r3, #4]
 801530c:	7d3b      	ldrb	r3, [r7, #20]
 801530e:	005b      	lsls	r3, r3, #1
 8015310:	4413      	add	r3, r2
 8015312:	881b      	ldrh	r3, [r3, #0]
 8015314:	461a      	mov	r2, r3
 8015316:	7cfb      	ldrb	r3, [r7, #19]
 8015318:	fa42 f303 	asr.w	r3, r2, r3
 801531c:	f003 0301 	and.w	r3, r3, #1
 8015320:	2b00      	cmp	r3, #0
 8015322:	d07e      	beq.n	8015422 <RegionCommonCountNbOfEnabledChannels+0x140>
            {
                if( countNbOfEnabledChannelsParams->Channels[i + j].Frequency == 0 )
 8015324:	68fb      	ldr	r3, [r7, #12]
 8015326:	689a      	ldr	r2, [r3, #8]
 8015328:	7d79      	ldrb	r1, [r7, #21]
 801532a:	7cfb      	ldrb	r3, [r7, #19]
 801532c:	440b      	add	r3, r1
 801532e:	4619      	mov	r1, r3
 8015330:	460b      	mov	r3, r1
 8015332:	005b      	lsls	r3, r3, #1
 8015334:	440b      	add	r3, r1
 8015336:	009b      	lsls	r3, r3, #2
 8015338:	4413      	add	r3, r2
 801533a:	681b      	ldr	r3, [r3, #0]
 801533c:	2b00      	cmp	r3, #0
 801533e:	d06b      	beq.n	8015418 <RegionCommonCountNbOfEnabledChannels+0x136>
                { // Check if the channel is enabled
                    continue;
                }
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	781b      	ldrb	r3, [r3, #0]
 8015344:	f083 0301 	eor.w	r3, r3, #1
 8015348:	b2db      	uxtb	r3, r3
 801534a:	2b00      	cmp	r3, #0
 801534c:	d011      	beq.n	8015372 <RegionCommonCountNbOfEnabledChannels+0x90>
                    ( countNbOfEnabledChannelsParams->JoinChannels != NULL ) )
 801534e:	68fb      	ldr	r3, [r7, #12]
 8015350:	695b      	ldr	r3, [r3, #20]
                if( ( countNbOfEnabledChannelsParams->Joined == false ) &&
 8015352:	2b00      	cmp	r3, #0
 8015354:	d00d      	beq.n	8015372 <RegionCommonCountNbOfEnabledChannels+0x90>
                {
                    if( ( countNbOfEnabledChannelsParams->JoinChannels[k] & ( 1 << j ) ) == 0 )
 8015356:	68fb      	ldr	r3, [r7, #12]
 8015358:	695a      	ldr	r2, [r3, #20]
 801535a:	7d3b      	ldrb	r3, [r7, #20]
 801535c:	005b      	lsls	r3, r3, #1
 801535e:	4413      	add	r3, r2
 8015360:	881b      	ldrh	r3, [r3, #0]
 8015362:	461a      	mov	r2, r3
 8015364:	7cfb      	ldrb	r3, [r7, #19]
 8015366:	fa42 f303 	asr.w	r3, r2, r3
 801536a:	f003 0301 	and.w	r3, r3, #1
 801536e:	2b00      	cmp	r3, #0
 8015370:	d054      	beq.n	801541c <RegionCommonCountNbOfEnabledChannels+0x13a>
                    {
                        continue;
                    }
                }
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015372:	68fb      	ldr	r3, [r7, #12]
 8015374:	785b      	ldrb	r3, [r3, #1]
 8015376:	b258      	sxtb	r0, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Min,
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	689a      	ldr	r2, [r3, #8]
 801537c:	7d79      	ldrb	r1, [r7, #21]
 801537e:	7cfb      	ldrb	r3, [r7, #19]
 8015380:	440b      	add	r3, r1
 8015382:	4619      	mov	r1, r3
 8015384:	460b      	mov	r3, r1
 8015386:	005b      	lsls	r3, r3, #1
 8015388:	440b      	add	r3, r1
 801538a:	009b      	lsls	r3, r3, #2
 801538c:	4413      	add	r3, r2
 801538e:	7a1b      	ldrb	r3, [r3, #8]
 8015390:	f343 0303 	sbfx	r3, r3, #0, #4
 8015394:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 8015396:	461c      	mov	r4, r3
                                              countNbOfEnabledChannelsParams->Channels[i + j].DrRange.Fields.Max ) == false )
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	689a      	ldr	r2, [r3, #8]
 801539c:	7d79      	ldrb	r1, [r7, #21]
 801539e:	7cfb      	ldrb	r3, [r7, #19]
 80153a0:	440b      	add	r3, r1
 80153a2:	4619      	mov	r1, r3
 80153a4:	460b      	mov	r3, r1
 80153a6:	005b      	lsls	r3, r3, #1
 80153a8:	440b      	add	r3, r1
 80153aa:	009b      	lsls	r3, r3, #2
 80153ac:	4413      	add	r3, r2
 80153ae:	7a1b      	ldrb	r3, [r3, #8]
 80153b0:	f343 1303 	sbfx	r3, r3, #4, #4
 80153b4:	b25b      	sxtb	r3, r3
                if( RegionCommonValueInRange( countNbOfEnabledChannelsParams->Datarate,
 80153b6:	461a      	mov	r2, r3
 80153b8:	4621      	mov	r1, r4
 80153ba:	f7ff fbe8 	bl	8014b8e <RegionCommonValueInRange>
 80153be:	4603      	mov	r3, r0
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d02d      	beq.n	8015420 <RegionCommonCountNbOfEnabledChannels+0x13e>
                { // Check if the current channel selection supports the given datarate
                    continue;
                }
                if( countNbOfEnabledChannelsParams->Bands[countNbOfEnabledChannelsParams->Channels[i + j].Band].ReadyForTransmission == false )
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	68da      	ldr	r2, [r3, #12]
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	6899      	ldr	r1, [r3, #8]
 80153cc:	7d78      	ldrb	r0, [r7, #21]
 80153ce:	7cfb      	ldrb	r3, [r7, #19]
 80153d0:	4403      	add	r3, r0
 80153d2:	4618      	mov	r0, r3
 80153d4:	4603      	mov	r3, r0
 80153d6:	005b      	lsls	r3, r3, #1
 80153d8:	4403      	add	r3, r0
 80153da:	009b      	lsls	r3, r3, #2
 80153dc:	440b      	add	r3, r1
 80153de:	7a5b      	ldrb	r3, [r3, #9]
 80153e0:	4619      	mov	r1, r3
 80153e2:	460b      	mov	r3, r1
 80153e4:	005b      	lsls	r3, r3, #1
 80153e6:	440b      	add	r3, r1
 80153e8:	00db      	lsls	r3, r3, #3
 80153ea:	4413      	add	r3, r2
 80153ec:	7d1b      	ldrb	r3, [r3, #20]
 80153ee:	f083 0301 	eor.w	r3, r3, #1
 80153f2:	b2db      	uxtb	r3, r3
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d003      	beq.n	8015400 <RegionCommonCountNbOfEnabledChannels+0x11e>
                { // Check if the band is available for transmission
                    nbRestrictedChannelsCount++;
 80153f8:	7dbb      	ldrb	r3, [r7, #22]
 80153fa:	3301      	adds	r3, #1
 80153fc:	75bb      	strb	r3, [r7, #22]
                    continue;
 80153fe:	e010      	b.n	8015422 <RegionCommonCountNbOfEnabledChannels+0x140>
                }
                enabledChannels[nbChannelCount++] = i + j;
 8015400:	7dfb      	ldrb	r3, [r7, #23]
 8015402:	1c5a      	adds	r2, r3, #1
 8015404:	75fa      	strb	r2, [r7, #23]
 8015406:	461a      	mov	r2, r3
 8015408:	68bb      	ldr	r3, [r7, #8]
 801540a:	4413      	add	r3, r2
 801540c:	7d79      	ldrb	r1, [r7, #21]
 801540e:	7cfa      	ldrb	r2, [r7, #19]
 8015410:	440a      	add	r2, r1
 8015412:	b2d2      	uxtb	r2, r2
 8015414:	701a      	strb	r2, [r3, #0]
 8015416:	e004      	b.n	8015422 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015418:	bf00      	nop
 801541a:	e002      	b.n	8015422 <RegionCommonCountNbOfEnabledChannels+0x140>
                        continue;
 801541c:	bf00      	nop
 801541e:	e000      	b.n	8015422 <RegionCommonCountNbOfEnabledChannels+0x140>
                    continue;
 8015420:	bf00      	nop
        for( uint8_t j = 0; j < 16; j++ )
 8015422:	7cfb      	ldrb	r3, [r7, #19]
 8015424:	3301      	adds	r3, #1
 8015426:	74fb      	strb	r3, [r7, #19]
 8015428:	7cfb      	ldrb	r3, [r7, #19]
 801542a:	2b0f      	cmp	r3, #15
 801542c:	f67f af6c 	bls.w	8015308 <RegionCommonCountNbOfEnabledChannels+0x26>
    for( uint8_t i = 0, k = 0; i < countNbOfEnabledChannelsParams->MaxNbChannels; i += 16, k++ )
 8015430:	7d7b      	ldrb	r3, [r7, #21]
 8015432:	3310      	adds	r3, #16
 8015434:	757b      	strb	r3, [r7, #21]
 8015436:	7d3b      	ldrb	r3, [r7, #20]
 8015438:	3301      	adds	r3, #1
 801543a:	753b      	strb	r3, [r7, #20]
 801543c:	7d7b      	ldrb	r3, [r7, #21]
 801543e:	b29a      	uxth	r2, r3
 8015440:	68fb      	ldr	r3, [r7, #12]
 8015442:	8a1b      	ldrh	r3, [r3, #16]
 8015444:	429a      	cmp	r2, r3
 8015446:	f4ff af5c 	bcc.w	8015302 <RegionCommonCountNbOfEnabledChannels+0x20>
            }
        }
    }
    *nbEnabledChannels = nbChannelCount;
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	7dfa      	ldrb	r2, [r7, #23]
 801544e:	701a      	strb	r2, [r3, #0]
    *nbRestrictedChannels = nbRestrictedChannelsCount;
 8015450:	683b      	ldr	r3, [r7, #0]
 8015452:	7dba      	ldrb	r2, [r7, #22]
 8015454:	701a      	strb	r2, [r3, #0]
}
 8015456:	bf00      	nop
 8015458:	371c      	adds	r7, #28
 801545a:	46bd      	mov	sp, r7
 801545c:	bd90      	pop	{r4, r7, pc}

0801545e <RegionCommonIdentifyChannels>:

LoRaMacStatus_t RegionCommonIdentifyChannels( RegionCommonIdentifyChannelsParam_t* identifyChannelsParam,
                                              TimerTime_t* aggregatedTimeOff, uint8_t* enabledChannels,
                                              uint8_t* nbEnabledChannels, uint8_t* nbRestrictedChannels,
                                              TimerTime_t* nextTxDelay )
{
 801545e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015460:	b08b      	sub	sp, #44	@ 0x2c
 8015462:	af04      	add	r7, sp, #16
 8015464:	60f8      	str	r0, [r7, #12]
 8015466:	60b9      	str	r1, [r7, #8]
 8015468:	607a      	str	r2, [r7, #4]
 801546a:	603b      	str	r3, [r7, #0]
    TimerTime_t elapsed = TimerGetElapsedTime( identifyChannelsParam->LastAggrTx );
 801546c:	68fb      	ldr	r3, [r7, #12]
 801546e:	685b      	ldr	r3, [r3, #4]
 8015470:	4618      	mov	r0, r3
 8015472:	f005 fd65 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 8015476:	6178      	str	r0, [r7, #20]
    *nextTxDelay = identifyChannelsParam->AggrTimeOff - elapsed;
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	681a      	ldr	r2, [r3, #0]
 801547c:	697b      	ldr	r3, [r7, #20]
 801547e:	1ad2      	subs	r2, r2, r3
 8015480:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015482:	601a      	str	r2, [r3, #0]
    *nbRestrictedChannels = 1;
 8015484:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015486:	2201      	movs	r2, #1
 8015488:	701a      	strb	r2, [r3, #0]
    *nbEnabledChannels = 0;
 801548a:	683b      	ldr	r3, [r7, #0]
 801548c:	2200      	movs	r2, #0
 801548e:	701a      	strb	r2, [r3, #0]

    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	2b00      	cmp	r3, #0
 8015496:	d004      	beq.n	80154a2 <RegionCommonIdentifyChannels+0x44>
        ( identifyChannelsParam->AggrTimeOff <= elapsed ) )
 8015498:	68fb      	ldr	r3, [r7, #12]
 801549a:	681b      	ldr	r3, [r3, #0]
    if( ( identifyChannelsParam->LastAggrTx == 0 ) ||
 801549c:	697a      	ldr	r2, [r7, #20]
 801549e:	429a      	cmp	r2, r3
 80154a0:	d32b      	bcc.n	80154fa <RegionCommonIdentifyChannels+0x9c>
    {
        // Reset Aggregated time off
        *aggregatedTimeOff = 0;
 80154a2:	68bb      	ldr	r3, [r7, #8]
 80154a4:	2200      	movs	r2, #0
 80154a6:	601a      	str	r2, [r3, #0]

        // Update bands Time OFF
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80154a8:	68fb      	ldr	r3, [r7, #12]
 80154aa:	69db      	ldr	r3, [r3, #28]
 80154ac:	781c      	ldrb	r4, [r3, #0]
                                                      identifyChannelsParam->CountNbOfEnabledChannelsParam->Bands,
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	69db      	ldr	r3, [r3, #28]
        *nextTxDelay = RegionCommonUpdateBandTimeOff( identifyChannelsParam->CountNbOfEnabledChannelsParam->Joined,
 80154b2:	68dd      	ldr	r5, [r3, #12]
 80154b4:	68fb      	ldr	r3, [r7, #12]
 80154b6:	7a5e      	ldrb	r6, [r3, #9]
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f893 c008 	ldrb.w	ip, [r3, #8]
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	7d1b      	ldrb	r3, [r3, #20]
 80154c2:	68fa      	ldr	r2, [r7, #12]
 80154c4:	6992      	ldr	r2, [r2, #24]
 80154c6:	9203      	str	r2, [sp, #12]
 80154c8:	68fa      	ldr	r2, [r7, #12]
 80154ca:	f10d 0e04 	add.w	lr, sp, #4
 80154ce:	320c      	adds	r2, #12
 80154d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80154d4:	e88e 0003 	stmia.w	lr, {r0, r1}
 80154d8:	9300      	str	r3, [sp, #0]
 80154da:	4663      	mov	r3, ip
 80154dc:	4632      	mov	r2, r6
 80154de:	4629      	mov	r1, r5
 80154e0:	4620      	mov	r0, r4
 80154e2:	f7ff fc25 	bl	8014d30 <RegionCommonUpdateBandTimeOff>
 80154e6:	4602      	mov	r2, r0
 80154e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80154ea:	601a      	str	r2, [r3, #0]
                                                      identifyChannelsParam->DutyCycleEnabled,
                                                      identifyChannelsParam->LastTxIsJoinRequest,
                                                      identifyChannelsParam->ElapsedTimeSinceStartUp,
                                                      identifyChannelsParam->ExpectedTimeOnAir );

        RegionCommonCountNbOfEnabledChannels( identifyChannelsParam->CountNbOfEnabledChannelsParam, enabledChannels,
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	69d8      	ldr	r0, [r3, #28]
 80154f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80154f2:	683a      	ldr	r2, [r7, #0]
 80154f4:	6879      	ldr	r1, [r7, #4]
 80154f6:	f7ff fef4 	bl	80152e2 <RegionCommonCountNbOfEnabledChannels>
                                              nbEnabledChannels, nbRestrictedChannels );
    }

    if( *nbEnabledChannels > 0 )
 80154fa:	683b      	ldr	r3, [r7, #0]
 80154fc:	781b      	ldrb	r3, [r3, #0]
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d004      	beq.n	801550c <RegionCommonIdentifyChannels+0xae>
    {
        *nextTxDelay = 0;
 8015502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015504:	2200      	movs	r2, #0
 8015506:	601a      	str	r2, [r3, #0]
        return LORAMAC_STATUS_OK;
 8015508:	2300      	movs	r3, #0
 801550a:	e006      	b.n	801551a <RegionCommonIdentifyChannels+0xbc>
    }
    else if( *nbRestrictedChannels > 0 )
 801550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	2b00      	cmp	r3, #0
 8015512:	d001      	beq.n	8015518 <RegionCommonIdentifyChannels+0xba>
    {
        return LORAMAC_STATUS_DUTYCYCLE_RESTRICTED;
 8015514:	230b      	movs	r3, #11
 8015516:	e000      	b.n	801551a <RegionCommonIdentifyChannels+0xbc>
    }
    else
    {
        return LORAMAC_STATUS_NO_CHANNEL_FOUND;
 8015518:	230c      	movs	r3, #12
    }
}
 801551a:	4618      	mov	r0, r3
 801551c:	371c      	adds	r7, #28
 801551e:	46bd      	mov	sp, r7
 8015520:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015522 <RegionCommonGetNextLowerTxDr>:

int8_t RegionCommonGetNextLowerTxDr( RegionCommonGetNextLowerTxDrParams_t *params )
{
 8015522:	b5b0      	push	{r4, r5, r7, lr}
 8015524:	b086      	sub	sp, #24
 8015526:	af02      	add	r7, sp, #8
 8015528:	6078      	str	r0, [r7, #4]
    int8_t drLocal = params->CurrentDr;
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	781b      	ldrb	r3, [r3, #0]
 801552e:	73fb      	strb	r3, [r7, #15]

    if( params->CurrentDr == params->MinDr )
 8015530:	687b      	ldr	r3, [r7, #4]
 8015532:	f993 2000 	ldrsb.w	r2, [r3]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	f993 3002 	ldrsb.w	r3, [r3, #2]
 801553c:	429a      	cmp	r2, r3
 801553e:	d103      	bne.n	8015548 <RegionCommonGetNextLowerTxDr+0x26>
    {
        return params->MinDr;
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015546:	e026      	b.n	8015596 <RegionCommonGetNextLowerTxDr+0x74>
    }
    else
    {
        do
        {
            drLocal = ( drLocal - 1 );
 8015548:	7bfb      	ldrb	r3, [r7, #15]
 801554a:	3b01      	subs	r3, #1
 801554c:	b2db      	uxtb	r3, r3
 801554e:	73fb      	strb	r3, [r7, #15]
        } while( ( drLocal != params->MinDr ) &&
 8015550:	687b      	ldr	r3, [r7, #4]
 8015552:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8015556:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801555a:	429a      	cmp	r2, r3
 801555c:	d019      	beq.n	8015592 <RegionCommonGetNextLowerTxDr+0x70>
                 ( RegionCommonChanVerifyDr( params->NbChannels, params->ChannelsMask, drLocal, params->MinDr, params->MaxDr, params->Channels  ) == false ) );
 801555e:	687b      	ldr	r3, [r7, #4]
 8015560:	78d8      	ldrb	r0, [r3, #3]
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6859      	ldr	r1, [r3, #4]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	f993 5002 	ldrsb.w	r5, [r3, #2]
 801556c:	687b      	ldr	r3, [r7, #4]
 801556e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	6892      	ldr	r2, [r2, #8]
 8015576:	f997 400f 	ldrsb.w	r4, [r7, #15]
 801557a:	9201      	str	r2, [sp, #4]
 801557c:	9300      	str	r3, [sp, #0]
 801557e:	462b      	mov	r3, r5
 8015580:	4622      	mov	r2, r4
 8015582:	f7ff fa92 	bl	8014aaa <RegionCommonChanVerifyDr>
 8015586:	4603      	mov	r3, r0
 8015588:	f083 0301 	eor.w	r3, r3, #1
 801558c:	b2db      	uxtb	r3, r3
        } while( ( drLocal != params->MinDr ) &&
 801558e:	2b00      	cmp	r3, #0
 8015590:	d1da      	bne.n	8015548 <RegionCommonGetNextLowerTxDr+0x26>

        return drLocal;
 8015592:	f997 300f 	ldrsb.w	r3, [r7, #15]
    }
}
 8015596:	4618      	mov	r0, r3
 8015598:	3710      	adds	r7, #16
 801559a:	46bd      	mov	sp, r7
 801559c:	bdb0      	pop	{r4, r5, r7, pc}

0801559e <RegionCommonLimitTxPower>:

int8_t RegionCommonLimitTxPower( int8_t txPower, int8_t maxBandTxPower )
{
 801559e:	b480      	push	{r7}
 80155a0:	b083      	sub	sp, #12
 80155a2:	af00      	add	r7, sp, #0
 80155a4:	4603      	mov	r3, r0
 80155a6:	460a      	mov	r2, r1
 80155a8:	71fb      	strb	r3, [r7, #7]
 80155aa:	4613      	mov	r3, r2
 80155ac:	71bb      	strb	r3, [r7, #6]
    // Limit tx power to the band max
    return MAX( txPower, maxBandTxPower );
 80155ae:	f997 2006 	ldrsb.w	r2, [r7, #6]
 80155b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80155b6:	4293      	cmp	r3, r2
 80155b8:	bfb8      	it	lt
 80155ba:	4613      	movlt	r3, r2
 80155bc:	b25b      	sxtb	r3, r3
}
 80155be:	4618      	mov	r0, r3
 80155c0:	370c      	adds	r7, #12
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bc80      	pop	{r7}
 80155c6:	4770      	bx	lr

080155c8 <RegionCommonGetBandwidth>:

uint32_t RegionCommonGetBandwidth( uint32_t drIndex, const uint32_t* bandwidths )
{
 80155c8:	b480      	push	{r7}
 80155ca:	b083      	sub	sp, #12
 80155cc:	af00      	add	r7, sp, #0
 80155ce:	6078      	str	r0, [r7, #4]
 80155d0:	6039      	str	r1, [r7, #0]
    switch( bandwidths[drIndex] )
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	009b      	lsls	r3, r3, #2
 80155d6:	683a      	ldr	r2, [r7, #0]
 80155d8:	4413      	add	r3, r2
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	4a07      	ldr	r2, [pc, #28]	@ (80155fc <RegionCommonGetBandwidth+0x34>)
 80155de:	4293      	cmp	r3, r2
 80155e0:	d004      	beq.n	80155ec <RegionCommonGetBandwidth+0x24>
 80155e2:	4a07      	ldr	r2, [pc, #28]	@ (8015600 <RegionCommonGetBandwidth+0x38>)
 80155e4:	4293      	cmp	r3, r2
 80155e6:	d003      	beq.n	80155f0 <RegionCommonGetBandwidth+0x28>
    {
        default:
        case 125000:
            return 0;
 80155e8:	2300      	movs	r3, #0
 80155ea:	e002      	b.n	80155f2 <RegionCommonGetBandwidth+0x2a>
        case 250000:
            return 1;
 80155ec:	2301      	movs	r3, #1
 80155ee:	e000      	b.n	80155f2 <RegionCommonGetBandwidth+0x2a>
        case 500000:
            return 2;
 80155f0:	2302      	movs	r3, #2
    }
}
 80155f2:	4618      	mov	r0, r3
 80155f4:	370c      	adds	r7, #12
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bc80      	pop	{r7}
 80155fa:	4770      	bx	lr
 80155fc:	0003d090 	.word	0x0003d090
 8015600:	0007a120 	.word	0x0007a120

08015604 <RegionCommonRxConfigPrint>:

/* ST_WORKAROUND_BEGIN: Print Tx/Rx config */
void RegionCommonRxConfigPrint(LoRaMacRxSlot_t rxSlot, uint32_t frequency, int8_t dr)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af04      	add	r7, sp, #16
 801560a:	4603      	mov	r3, r0
 801560c:	6039      	str	r1, [r7, #0]
 801560e:	71fb      	strb	r3, [r7, #7]
 8015610:	4613      	mov	r3, r2
 8015612:	71bb      	strb	r3, [r7, #6]
    if ( rxSlot < RX_SLOT_NONE )
 8015614:	79fb      	ldrb	r3, [r7, #7]
 8015616:	2b05      	cmp	r3, #5
 8015618:	d810      	bhi.n	801563c <RegionCommonRxConfigPrint+0x38>
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX_%s on freq %d Hz at DR %d\r\n", EventRXSlotStrings[rxSlot], frequency, dr );
 801561a:	79fb      	ldrb	r3, [r7, #7]
 801561c:	4a0f      	ldr	r2, [pc, #60]	@ (801565c <RegionCommonRxConfigPrint+0x58>)
 801561e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8015622:	f997 2006 	ldrsb.w	r2, [r7, #6]
 8015626:	9202      	str	r2, [sp, #8]
 8015628:	683a      	ldr	r2, [r7, #0]
 801562a:	9201      	str	r2, [sp, #4]
 801562c:	9300      	str	r3, [sp, #0]
 801562e:	4b0c      	ldr	r3, [pc, #48]	@ (8015660 <RegionCommonRxConfigPrint+0x5c>)
 8015630:	2201      	movs	r2, #1
 8015632:	2100      	movs	r1, #0
 8015634:	2002      	movs	r0, #2
 8015636:	f005 fd61 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
    }
    else
    {
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
    }
}
 801563a:	e00a      	b.n	8015652 <RegionCommonRxConfigPrint+0x4e>
        MW_LOG(TS_ON, VLEVEL_M,  "RX on freq %d Hz at DR %d\r\n", frequency, dr );
 801563c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8015640:	9301      	str	r3, [sp, #4]
 8015642:	683b      	ldr	r3, [r7, #0]
 8015644:	9300      	str	r3, [sp, #0]
 8015646:	4b07      	ldr	r3, [pc, #28]	@ (8015664 <RegionCommonRxConfigPrint+0x60>)
 8015648:	2201      	movs	r2, #1
 801564a:	2100      	movs	r1, #0
 801564c:	2002      	movs	r0, #2
 801564e:	f005 fd55 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 8015652:	bf00      	nop
 8015654:	3708      	adds	r7, #8
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}
 801565a:	bf00      	nop
 801565c:	20000128 	.word	0x20000128
 8015660:	0801bf24 	.word	0x0801bf24
 8015664:	0801bf44 	.word	0x0801bf44

08015668 <RegionCommonTxConfigPrint>:

void RegionCommonTxConfigPrint(uint32_t frequency, int8_t dr)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b084      	sub	sp, #16
 801566c:	af02      	add	r7, sp, #8
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	460b      	mov	r3, r1
 8015672:	70fb      	strb	r3, [r7, #3]
    MW_LOG(TS_ON, VLEVEL_M,  "TX on freq %d Hz at DR %d\r\n", frequency, dr );
 8015674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015678:	9301      	str	r3, [sp, #4]
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	9300      	str	r3, [sp, #0]
 801567e:	4b05      	ldr	r3, [pc, #20]	@ (8015694 <RegionCommonTxConfigPrint+0x2c>)
 8015680:	2201      	movs	r2, #1
 8015682:	2100      	movs	r1, #0
 8015684:	2002      	movs	r0, #2
 8015686:	f005 fd39 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
}
 801568a:	bf00      	nop
 801568c:	3708      	adds	r7, #8
 801568e:	46bd      	mov	sp, r7
 8015690:	bd80      	pop	{r7, pc}
 8015692:	bf00      	nop
 8015694:	0801bf60 	.word	0x0801bf60

08015698 <VerifyRfFreq>:
static Band_t* RegionBands;
#endif /* REGION_VERSION */

// Static functions
static bool VerifyRfFreq( uint32_t freq, uint8_t *band )
{
 8015698:	b580      	push	{r7, lr}
 801569a:	b082      	sub	sp, #8
 801569c:	af00      	add	r7, sp, #0
 801569e:	6078      	str	r0, [r7, #4]
 80156a0:	6039      	str	r1, [r7, #0]
    // Check radio driver support
    if( Radio.CheckRfFrequency( freq ) == false )
 80156a2:	4b2d      	ldr	r3, [pc, #180]	@ (8015758 <VerifyRfFreq+0xc0>)
 80156a4:	6a1b      	ldr	r3, [r3, #32]
 80156a6:	6878      	ldr	r0, [r7, #4]
 80156a8:	4798      	blx	r3
 80156aa:	4603      	mov	r3, r0
 80156ac:	f083 0301 	eor.w	r3, r3, #1
 80156b0:	b2db      	uxtb	r3, r3
 80156b2:	2b00      	cmp	r3, #0
 80156b4:	d001      	beq.n	80156ba <VerifyRfFreq+0x22>
    {
        return false;
 80156b6:	2300      	movs	r3, #0
 80156b8:	e04a      	b.n	8015750 <VerifyRfFreq+0xb8>
    }

    // Check frequency bands
    if( ( freq >= 863000000 ) && ( freq < 865000000 ) )
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	4a27      	ldr	r2, [pc, #156]	@ (801575c <VerifyRfFreq+0xc4>)
 80156be:	4293      	cmp	r3, r2
 80156c0:	d307      	bcc.n	80156d2 <VerifyRfFreq+0x3a>
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	4a26      	ldr	r2, [pc, #152]	@ (8015760 <VerifyRfFreq+0xc8>)
 80156c6:	4293      	cmp	r3, r2
 80156c8:	d803      	bhi.n	80156d2 <VerifyRfFreq+0x3a>
    {
        *band = 2;
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	2202      	movs	r2, #2
 80156ce:	701a      	strb	r2, [r3, #0]
 80156d0:	e03d      	b.n	801574e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 865000000 ) && ( freq <= 868000000 ) )
 80156d2:	687b      	ldr	r3, [r7, #4]
 80156d4:	4a22      	ldr	r2, [pc, #136]	@ (8015760 <VerifyRfFreq+0xc8>)
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d907      	bls.n	80156ea <VerifyRfFreq+0x52>
 80156da:	687b      	ldr	r3, [r7, #4]
 80156dc:	4a21      	ldr	r2, [pc, #132]	@ (8015764 <VerifyRfFreq+0xcc>)
 80156de:	4293      	cmp	r3, r2
 80156e0:	d803      	bhi.n	80156ea <VerifyRfFreq+0x52>
    {
        *band = 0;
 80156e2:	683b      	ldr	r3, [r7, #0]
 80156e4:	2200      	movs	r2, #0
 80156e6:	701a      	strb	r2, [r3, #0]
 80156e8:	e031      	b.n	801574e <VerifyRfFreq+0xb6>
    }
    else if( ( freq > 868000000 ) && ( freq <= 868600000 ) )
 80156ea:	687b      	ldr	r3, [r7, #4]
 80156ec:	4a1d      	ldr	r2, [pc, #116]	@ (8015764 <VerifyRfFreq+0xcc>)
 80156ee:	4293      	cmp	r3, r2
 80156f0:	d907      	bls.n	8015702 <VerifyRfFreq+0x6a>
 80156f2:	687b      	ldr	r3, [r7, #4]
 80156f4:	4a1c      	ldr	r2, [pc, #112]	@ (8015768 <VerifyRfFreq+0xd0>)
 80156f6:	4293      	cmp	r3, r2
 80156f8:	d803      	bhi.n	8015702 <VerifyRfFreq+0x6a>
    {
        *band = 1;
 80156fa:	683b      	ldr	r3, [r7, #0]
 80156fc:	2201      	movs	r2, #1
 80156fe:	701a      	strb	r2, [r3, #0]
 8015700:	e025      	b.n	801574e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 868700000 ) && ( freq <= 869200000 ) )
 8015702:	687b      	ldr	r3, [r7, #4]
 8015704:	4a19      	ldr	r2, [pc, #100]	@ (801576c <VerifyRfFreq+0xd4>)
 8015706:	4293      	cmp	r3, r2
 8015708:	d907      	bls.n	801571a <VerifyRfFreq+0x82>
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	4a18      	ldr	r2, [pc, #96]	@ (8015770 <VerifyRfFreq+0xd8>)
 801570e:	4293      	cmp	r3, r2
 8015710:	d803      	bhi.n	801571a <VerifyRfFreq+0x82>
    {
        *band = 5;
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	2205      	movs	r2, #5
 8015716:	701a      	strb	r2, [r3, #0]
 8015718:	e019      	b.n	801574e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869400000 ) && ( freq <= 869650000 ) )
 801571a:	687b      	ldr	r3, [r7, #4]
 801571c:	4a15      	ldr	r2, [pc, #84]	@ (8015774 <VerifyRfFreq+0xdc>)
 801571e:	4293      	cmp	r3, r2
 8015720:	d907      	bls.n	8015732 <VerifyRfFreq+0x9a>
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	4a14      	ldr	r2, [pc, #80]	@ (8015778 <VerifyRfFreq+0xe0>)
 8015726:	4293      	cmp	r3, r2
 8015728:	d803      	bhi.n	8015732 <VerifyRfFreq+0x9a>
    {
        *band = 3;
 801572a:	683b      	ldr	r3, [r7, #0]
 801572c:	2203      	movs	r2, #3
 801572e:	701a      	strb	r2, [r3, #0]
 8015730:	e00d      	b.n	801574e <VerifyRfFreq+0xb6>
    }
    else if( ( freq >= 869700000 ) && ( freq <= 870000000 ) )
 8015732:	687b      	ldr	r3, [r7, #4]
 8015734:	4a11      	ldr	r2, [pc, #68]	@ (801577c <VerifyRfFreq+0xe4>)
 8015736:	4293      	cmp	r3, r2
 8015738:	d307      	bcc.n	801574a <VerifyRfFreq+0xb2>
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	4a10      	ldr	r2, [pc, #64]	@ (8015780 <VerifyRfFreq+0xe8>)
 801573e:	4293      	cmp	r3, r2
 8015740:	d803      	bhi.n	801574a <VerifyRfFreq+0xb2>
    {
        *band = 4;
 8015742:	683b      	ldr	r3, [r7, #0]
 8015744:	2204      	movs	r2, #4
 8015746:	701a      	strb	r2, [r3, #0]
 8015748:	e001      	b.n	801574e <VerifyRfFreq+0xb6>
    }
    else
    {
        return false;
 801574a:	2300      	movs	r3, #0
 801574c:	e000      	b.n	8015750 <VerifyRfFreq+0xb8>
    }
    return true;
 801574e:	2301      	movs	r3, #1
}
 8015750:	4618      	mov	r0, r3
 8015752:	3708      	adds	r7, #8
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	0801c500 	.word	0x0801c500
 801575c:	337055c0 	.word	0x337055c0
 8015760:	338eda3f 	.word	0x338eda3f
 8015764:	33bca100 	.word	0x33bca100
 8015768:	33c5c8c0 	.word	0x33c5c8c0
 801576c:	33c74f5f 	.word	0x33c74f5f
 8015770:	33cef080 	.word	0x33cef080
 8015774:	33d1fdbf 	.word	0x33d1fdbf
 8015778:	33d5ce50 	.word	0x33d5ce50
 801577c:	33d691a0 	.word	0x33d691a0
 8015780:	33db2580 	.word	0x33db2580

08015784 <GetTimeOnAir>:

static TimerTime_t GetTimeOnAir( int8_t datarate, uint16_t pktLen )
{
 8015784:	b590      	push	{r4, r7, lr}
 8015786:	b08b      	sub	sp, #44	@ 0x2c
 8015788:	af04      	add	r7, sp, #16
 801578a:	4603      	mov	r3, r0
 801578c:	460a      	mov	r2, r1
 801578e:	71fb      	strb	r3, [r7, #7]
 8015790:	4613      	mov	r3, r2
 8015792:	80bb      	strh	r3, [r7, #4]
    int8_t phyDr = DataratesEU868[datarate];
 8015794:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015798:	4a1f      	ldr	r2, [pc, #124]	@ (8015818 <GetTimeOnAir+0x94>)
 801579a:	5cd3      	ldrb	r3, [r2, r3]
 801579c:	74fb      	strb	r3, [r7, #19]
    uint32_t bandwidth = RegionCommonGetBandwidth( datarate, BandwidthsEU868 );
 801579e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157a2:	491e      	ldr	r1, [pc, #120]	@ (801581c <GetTimeOnAir+0x98>)
 80157a4:	4618      	mov	r0, r3
 80157a6:	f7ff ff0f 	bl	80155c8 <RegionCommonGetBandwidth>
 80157aa:	60f8      	str	r0, [r7, #12]
    TimerTime_t timeOnAir = 0;
 80157ac:	2300      	movs	r3, #0
 80157ae:	617b      	str	r3, [r7, #20]

    if( datarate == DR_7 )
 80157b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80157b4:	2b07      	cmp	r3, #7
 80157b6:	d118      	bne.n	80157ea <GetTimeOnAir+0x66>
    { // High Speed FSK channel
        timeOnAir = Radio.TimeOnAir( MODEM_FSK, bandwidth, phyDr * 1000, 0, 5, false, pktLen, true );
 80157b8:	4b19      	ldr	r3, [pc, #100]	@ (8015820 <GetTimeOnAir+0x9c>)
 80157ba:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80157bc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157c0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80157c4:	fb02 f303 	mul.w	r3, r2, r3
 80157c8:	4619      	mov	r1, r3
 80157ca:	88bb      	ldrh	r3, [r7, #4]
 80157cc:	b2db      	uxtb	r3, r3
 80157ce:	2201      	movs	r2, #1
 80157d0:	9203      	str	r2, [sp, #12]
 80157d2:	9302      	str	r3, [sp, #8]
 80157d4:	2300      	movs	r3, #0
 80157d6:	9301      	str	r3, [sp, #4]
 80157d8:	2305      	movs	r3, #5
 80157da:	9300      	str	r3, [sp, #0]
 80157dc:	2300      	movs	r3, #0
 80157de:	460a      	mov	r2, r1
 80157e0:	68f9      	ldr	r1, [r7, #12]
 80157e2:	2000      	movs	r0, #0
 80157e4:	47a0      	blx	r4
 80157e6:	6178      	str	r0, [r7, #20]
 80157e8:	e011      	b.n	801580e <GetTimeOnAir+0x8a>
    }
    else
    {
        timeOnAir = Radio.TimeOnAir( MODEM_LORA, bandwidth, phyDr, 1, 8, false, pktLen, true );
 80157ea:	4b0d      	ldr	r3, [pc, #52]	@ (8015820 <GetTimeOnAir+0x9c>)
 80157ec:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80157ee:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80157f2:	88bb      	ldrh	r3, [r7, #4]
 80157f4:	b2db      	uxtb	r3, r3
 80157f6:	2101      	movs	r1, #1
 80157f8:	9103      	str	r1, [sp, #12]
 80157fa:	9302      	str	r3, [sp, #8]
 80157fc:	2300      	movs	r3, #0
 80157fe:	9301      	str	r3, [sp, #4]
 8015800:	2308      	movs	r3, #8
 8015802:	9300      	str	r3, [sp, #0]
 8015804:	2301      	movs	r3, #1
 8015806:	68f9      	ldr	r1, [r7, #12]
 8015808:	2001      	movs	r0, #1
 801580a:	47a0      	blx	r4
 801580c:	6178      	str	r0, [r7, #20]
    }
    return timeOnAir;
 801580e:	697b      	ldr	r3, [r7, #20]
}
 8015810:	4618      	mov	r0, r3
 8015812:	371c      	adds	r7, #28
 8015814:	46bd      	mov	sp, r7
 8015816:	bd90      	pop	{r4, r7, pc}
 8015818:	0801c4c8 	.word	0x0801c4c8
 801581c:	0801c4d0 	.word	0x0801c4d0
 8015820:	0801c500 	.word	0x0801c500

08015824 <RegionEU868GetPhyParam>:
#endif /* REGION_EU868 */

PhyParam_t RegionEU868GetPhyParam( GetPhyParams_t* getPhy )
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b088      	sub	sp, #32
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
    PhyParam_t phyParam = { 0 };
 801582c:	2300      	movs	r3, #0
 801582e:	61bb      	str	r3, [r7, #24]

#if defined( REGION_EU868 )
    switch( getPhy->Attribute )
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	781b      	ldrb	r3, [r3, #0]
 8015834:	3b01      	subs	r3, #1
 8015836:	2b37      	cmp	r3, #55	@ 0x37
 8015838:	f200 8122 	bhi.w	8015a80 <RegionEU868GetPhyParam+0x25c>
 801583c:	a201      	add	r2, pc, #4	@ (adr r2, 8015844 <RegionEU868GetPhyParam+0x20>)
 801583e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015842:	bf00      	nop
 8015844:	08015925 	.word	0x08015925
 8015848:	0801592b 	.word	0x0801592b
 801584c:	08015a81 	.word	0x08015a81
 8015850:	08015a81 	.word	0x08015a81
 8015854:	08015a81 	.word	0x08015a81
 8015858:	08015931 	.word	0x08015931
 801585c:	08015a81 	.word	0x08015a81
 8015860:	0801596b 	.word	0x0801596b
 8015864:	08015a81 	.word	0x08015a81
 8015868:	08015971 	.word	0x08015971
 801586c:	08015977 	.word	0x08015977
 8015870:	0801597d 	.word	0x0801597d
 8015874:	08015983 	.word	0x08015983
 8015878:	08015993 	.word	0x08015993
 801587c:	080159a3 	.word	0x080159a3
 8015880:	080159a9 	.word	0x080159a9
 8015884:	080159b1 	.word	0x080159b1
 8015888:	080159b9 	.word	0x080159b9
 801588c:	080159c1 	.word	0x080159c1
 8015890:	080159c9 	.word	0x080159c9
 8015894:	080159d1 	.word	0x080159d1
 8015898:	080159e5 	.word	0x080159e5
 801589c:	080159eb 	.word	0x080159eb
 80158a0:	080159f1 	.word	0x080159f1
 80158a4:	080159f7 	.word	0x080159f7
 80158a8:	08015a03 	.word	0x08015a03
 80158ac:	08015a0f 	.word	0x08015a0f
 80158b0:	08015a15 	.word	0x08015a15
 80158b4:	08015a1d 	.word	0x08015a1d
 80158b8:	08015a23 	.word	0x08015a23
 80158bc:	08015a29 	.word	0x08015a29
 80158c0:	08015a31 	.word	0x08015a31
 80158c4:	08015937 	.word	0x08015937
 80158c8:	08015a81 	.word	0x08015a81
 80158cc:	08015a81 	.word	0x08015a81
 80158d0:	08015a81 	.word	0x08015a81
 80158d4:	08015a81 	.word	0x08015a81
 80158d8:	08015a81 	.word	0x08015a81
 80158dc:	08015a81 	.word	0x08015a81
 80158e0:	08015a81 	.word	0x08015a81
 80158e4:	08015a81 	.word	0x08015a81
 80158e8:	08015a81 	.word	0x08015a81
 80158ec:	08015a81 	.word	0x08015a81
 80158f0:	08015a81 	.word	0x08015a81
 80158f4:	08015a81 	.word	0x08015a81
 80158f8:	08015a81 	.word	0x08015a81
 80158fc:	08015a37 	.word	0x08015a37
 8015900:	08015a3d 	.word	0x08015a3d
 8015904:	08015a4b 	.word	0x08015a4b
 8015908:	08015a81 	.word	0x08015a81
 801590c:	08015a81 	.word	0x08015a81
 8015910:	08015a51 	.word	0x08015a51
 8015914:	08015a57 	.word	0x08015a57
 8015918:	08015a81 	.word	0x08015a81
 801591c:	08015a5d 	.word	0x08015a5d
 8015920:	08015a6d 	.word	0x08015a6d
    {
        case PHY_MIN_RX_DR:
        {
            phyParam.Value = EU868_RX_MIN_DATARATE;
 8015924:	2300      	movs	r3, #0
 8015926:	61bb      	str	r3, [r7, #24]
            break;
 8015928:	e0ab      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MIN_TX_DR:
        {
            phyParam.Value = EU868_TX_MIN_DATARATE;
 801592a:	2300      	movs	r3, #0
 801592c:	61bb      	str	r3, [r7, #24]
            break;
 801592e:	e0a8      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_DR:
        {
            phyParam.Value = EU868_DEFAULT_DATARATE;
 8015930:	2300      	movs	r3, #0
 8015932:	61bb      	str	r3, [r7, #24]
            break;
 8015934:	e0a5      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_NEXT_LOWER_TX_DR:
        {
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
            {
                .CurrentDr = getPhy->Datarate,
 8015936:	687b      	ldr	r3, [r7, #4]
 8015938:	f993 3001 	ldrsb.w	r3, [r3, #1]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 801593c:	733b      	strb	r3, [r7, #12]
 801593e:	2307      	movs	r3, #7
 8015940:	737b      	strb	r3, [r7, #13]
 8015942:	2300      	movs	r3, #0
 8015944:	73bb      	strb	r3, [r7, #14]
 8015946:	2310      	movs	r3, #16
 8015948:	73fb      	strb	r3, [r7, #15]
                .MaxDr = ( int8_t )EU868_TX_MAX_DATARATE,
                .MinDr = ( int8_t )EU868_TX_MIN_DATARATE,
                .NbChannels = EU868_MAX_NB_CHANNELS,
                .ChannelsMask = RegionNvmGroup2->ChannelsMask,
 801594a:	4b51      	ldr	r3, [pc, #324]	@ (8015a90 <RegionEU868GetPhyParam+0x26c>)
 801594c:	681b      	ldr	r3, [r3, #0]
 801594e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015952:	613b      	str	r3, [r7, #16]
                .Channels = RegionNvmGroup2->Channels,
 8015954:	4b4e      	ldr	r3, [pc, #312]	@ (8015a90 <RegionEU868GetPhyParam+0x26c>)
 8015956:	681b      	ldr	r3, [r3, #0]
            RegionCommonGetNextLowerTxDrParams_t nextLowerTxDrParams =
 8015958:	617b      	str	r3, [r7, #20]
            };
            phyParam.Value = RegionCommonGetNextLowerTxDr( &nextLowerTxDrParams );
 801595a:	f107 030c 	add.w	r3, r7, #12
 801595e:	4618      	mov	r0, r3
 8015960:	f7ff fddf 	bl	8015522 <RegionCommonGetNextLowerTxDr>
 8015964:	4603      	mov	r3, r0
 8015966:	61bb      	str	r3, [r7, #24]
            break;
 8015968:	e08b      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_TX_POWER:
        {
            phyParam.Value = EU868_MAX_TX_POWER;
 801596a:	2300      	movs	r3, #0
 801596c:	61bb      	str	r3, [r7, #24]
            break;
 801596e:	e088      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_TX_POWER:
        {
            phyParam.Value = EU868_DEFAULT_TX_POWER;
 8015970:	2300      	movs	r3, #0
 8015972:	61bb      	str	r3, [r7, #24]
            break;
 8015974:	e085      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_LIMIT:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_LIMIT;
 8015976:	2340      	movs	r3, #64	@ 0x40
 8015978:	61bb      	str	r3, [r7, #24]
            break;
 801597a:	e082      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ADR_ACK_DELAY:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_ADR_ACK_DELAY;
 801597c:	2320      	movs	r3, #32
 801597e:	61bb      	str	r3, [r7, #24]
            break;
 8015980:	e07f      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_PAYLOAD:
        {
            phyParam.Value = MaxPayloadOfDatarateEU868[getPhy->Datarate];
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015988:	461a      	mov	r2, r3
 801598a:	4b42      	ldr	r3, [pc, #264]	@ (8015a94 <RegionEU868GetPhyParam+0x270>)
 801598c:	5c9b      	ldrb	r3, [r3, r2]
 801598e:	61bb      	str	r3, [r7, #24]
            break;
 8015990:	e077      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_BEGIN: Keep repeater feature */
        case PHY_MAX_PAYLOAD_REPEATER:
        {
            phyParam.Value = MaxPayloadOfDatarateRepeaterEU868[getPhy->Datarate];
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015998:	461a      	mov	r2, r3
 801599a:	4b3f      	ldr	r3, [pc, #252]	@ (8015a98 <RegionEU868GetPhyParam+0x274>)
 801599c:	5c9b      	ldrb	r3, [r3, r2]
 801599e:	61bb      	str	r3, [r7, #24]
            break;
 80159a0:	e06f      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        /* ST_WORKAROUND_END */
        case PHY_DUTY_CYCLE:
        {
            phyParam.Value = EU868_DUTY_CYCLE_ENABLED;
 80159a2:	2301      	movs	r3, #1
 80159a4:	61bb      	str	r3, [r7, #24]
            break;
 80159a6:	e06c      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_RX_WINDOW:
        {
            phyParam.Value = EU868_MAX_RX_WINDOW;
 80159a8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80159ac:	61bb      	str	r3, [r7, #24]
            break;
 80159ae:	e068      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY1;
 80159b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80159b4:	61bb      	str	r3, [r7, #24]
            break;
 80159b6:	e064      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_RECEIVE_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RECEIVE_DELAY2;
 80159b8:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80159bc:	61bb      	str	r3, [r7, #24]
            break;
 80159be:	e060      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY1:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY1;
 80159c0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80159c4:	61bb      	str	r3, [r7, #24]
            break;
 80159c6:	e05c      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_JOIN_ACCEPT_DELAY2:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_JOIN_ACCEPT_DELAY2;
 80159c8:	f241 7370 	movw	r3, #6000	@ 0x1770
 80159cc:	61bb      	str	r3, [r7, #24]
            break;
 80159ce:	e058      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))

        case PHY_RETRANSMIT_TIMEOUT:
        {
            phyParam.Value = ( REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT + randr( -REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND, REGION_COMMON_DEFAULT_RETRANSMIT_TIMEOUT_RND ) );
 80159d0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80159d4:	4831      	ldr	r0, [pc, #196]	@ (8015a9c <RegionEU868GetPhyParam+0x278>)
 80159d6:	f001 f82b 	bl	8016a30 <randr>
 80159da:	4603      	mov	r3, r0
 80159dc:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80159e0:	61bb      	str	r3, [r7, #24]
            break;
 80159e2:	e04e      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
#endif /* REGION_VERSION */
        case PHY_DEF_DR1_OFFSET:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_RX1_DR_OFFSET;
 80159e4:	2300      	movs	r3, #0
 80159e6:	61bb      	str	r3, [r7, #24]
            break;
 80159e8:	e04b      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_FREQUENCY:
        {
            phyParam.Value = EU868_RX_WND_2_FREQ;
 80159ea:	4b2d      	ldr	r3, [pc, #180]	@ (8015aa0 <RegionEU868GetPhyParam+0x27c>)
 80159ec:	61bb      	str	r3, [r7, #24]
            break;
 80159ee:	e048      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_RX2_DR:
        {
            phyParam.Value = EU868_RX_WND_2_DR;
 80159f0:	2300      	movs	r3, #0
 80159f2:	61bb      	str	r3, [r7, #24]
            break;
 80159f4:	e045      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 80159f6:	4b26      	ldr	r3, [pc, #152]	@ (8015a90 <RegionEU868GetPhyParam+0x26c>)
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80159fe:	61bb      	str	r3, [r7, #24]
            break;
 8015a00:	e03f      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS_DEFAULT_MASK:
        {
            phyParam.ChannelsMask = RegionNvmGroup2->ChannelsDefaultMask;
 8015a02:	4b23      	ldr	r3, [pc, #140]	@ (8015a90 <RegionEU868GetPhyParam+0x26c>)
 8015a04:	681b      	ldr	r3, [r3, #0]
 8015a06:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015a0a:	61bb      	str	r3, [r7, #24]
            break;
 8015a0c:	e039      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_MAX_NB_CHANNELS:
        {
            phyParam.Value = EU868_MAX_NB_CHANNELS;
 8015a0e:	2310      	movs	r3, #16
 8015a10:	61bb      	str	r3, [r7, #24]
            break;
 8015a12:	e036      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_CHANNELS:
        {
            phyParam.Channels = RegionNvmGroup2->Channels;
 8015a14:	4b1e      	ldr	r3, [pc, #120]	@ (8015a90 <RegionEU868GetPhyParam+0x26c>)
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	61bb      	str	r3, [r7, #24]
            break;
 8015a1a:	e032      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_UPLINK_DWELL_TIME:
        {
            phyParam.Value = EU868_DEFAULT_UPLINK_DWELL_TIME;
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	61bb      	str	r3, [r7, #24]
            break;
 8015a20:	e02f      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_DOWNLINK_DWELL_TIME:
        {
            phyParam.Value = REGION_COMMON_DEFAULT_DOWNLINK_DWELL_TIME;
 8015a22:	2300      	movs	r3, #0
 8015a24:	61bb      	str	r3, [r7, #24]
            break;
 8015a26:	e02c      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_MAX_EIRP:
        {
            phyParam.fValue = EU868_DEFAULT_MAX_EIRP;
 8015a28:	f04f 4383 	mov.w	r3, #1098907648	@ 0x41800000
 8015a2c:	61bb      	str	r3, [r7, #24]
            break;
 8015a2e:	e028      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_DEF_ANTENNA_GAIN:
        {
            phyParam.fValue = EU868_DEFAULT_ANTENNA_GAIN;
 8015a30:	4b1c      	ldr	r3, [pc, #112]	@ (8015aa4 <RegionEU868GetPhyParam+0x280>)
 8015a32:	61bb      	str	r3, [r7, #24]
            break;
 8015a34:	e025      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_FREQ;
 8015a36:	4b1a      	ldr	r3, [pc, #104]	@ (8015aa0 <RegionEU868GetPhyParam+0x27c>)
 8015a38:	61bb      	str	r3, [r7, #24]
            break;
 8015a3a:	e022      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_FORMAT:
        {
            phyParam.BeaconFormat.BeaconSize = EU868_BEACON_SIZE;
 8015a3c:	2311      	movs	r3, #17
 8015a3e:	763b      	strb	r3, [r7, #24]
            phyParam.BeaconFormat.Rfu1Size = EU868_RFU1_SIZE;
 8015a40:	2301      	movs	r3, #1
 8015a42:	767b      	strb	r3, [r7, #25]
            phyParam.BeaconFormat.Rfu2Size = EU868_RFU2_SIZE;
 8015a44:	2300      	movs	r3, #0
 8015a46:	76bb      	strb	r3, [r7, #26]
            break;
 8015a48:	e01b      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BEACON_CHANNEL_DR:
        {
            phyParam.Value = EU868_BEACON_CHANNEL_DR;
 8015a4a:	2303      	movs	r3, #3
 8015a4c:	61bb      	str	r3, [r7, #24]
            break;
 8015a4e:	e018      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_FREQ:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_FREQ;
 8015a50:	4b13      	ldr	r3, [pc, #76]	@ (8015aa0 <RegionEU868GetPhyParam+0x27c>)
 8015a52:	61bb      	str	r3, [r7, #24]
            break;
 8015a54:	e015      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_PING_SLOT_CHANNEL_DR:
        {
            phyParam.Value = EU868_PING_SLOT_CHANNEL_DR;
 8015a56:	2303      	movs	r3, #3
 8015a58:	61bb      	str	r3, [r7, #24]
            break;
 8015a5a:	e012      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_SF_FROM_DR:
        {
            phyParam.Value = DataratesEU868[getPhy->Datarate];
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a62:	461a      	mov	r2, r3
 8015a64:	4b10      	ldr	r3, [pc, #64]	@ (8015aa8 <RegionEU868GetPhyParam+0x284>)
 8015a66:	5c9b      	ldrb	r3, [r3, r2]
 8015a68:	61bb      	str	r3, [r7, #24]
            break;
 8015a6a:	e00a      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        case PHY_BW_FROM_DR:
        {
            phyParam.Value = RegionCommonGetBandwidth( getPhy->Datarate, BandwidthsEU868 );
 8015a6c:	687b      	ldr	r3, [r7, #4]
 8015a6e:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015a72:	490e      	ldr	r1, [pc, #56]	@ (8015aac <RegionEU868GetPhyParam+0x288>)
 8015a74:	4618      	mov	r0, r3
 8015a76:	f7ff fda7 	bl	80155c8 <RegionCommonGetBandwidth>
 8015a7a:	4603      	mov	r3, r0
 8015a7c:	61bb      	str	r3, [r7, #24]
            break;
 8015a7e:	e000      	b.n	8015a82 <RegionEU868GetPhyParam+0x25e>
        }
        default:
        {
            break;
 8015a80:	bf00      	nop
        }
    }

#endif /* REGION_EU868 */
    return phyParam;
 8015a82:	69bb      	ldr	r3, [r7, #24]
 8015a84:	61fb      	str	r3, [r7, #28]
 8015a86:	69fb      	ldr	r3, [r7, #28]
}
 8015a88:	4618      	mov	r0, r3
 8015a8a:	3720      	adds	r7, #32
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	bd80      	pop	{r7, pc}
 8015a90:	20001964 	.word	0x20001964
 8015a94:	0801c4f0 	.word	0x0801c4f0
 8015a98:	0801c4f8 	.word	0x0801c4f8
 8015a9c:	fffffc18 	.word	0xfffffc18
 8015aa0:	33d3e608 	.word	0x33d3e608
 8015aa4:	4009999a 	.word	0x4009999a
 8015aa8:	0801c4c8 	.word	0x0801c4c8
 8015aac:	0801c4d0 	.word	0x0801c4d0

08015ab0 <RegionEU868SetBandTxDone>:

void RegionEU868SetBandTxDone( SetBandTxDoneParams_t* txDone )
{
 8015ab0:	b590      	push	{r4, r7, lr}
 8015ab2:	b085      	sub	sp, #20
 8015ab4:	af02      	add	r7, sp, #8
 8015ab6:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    RegionCommonSetBandTxDone( &RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txDone->Channel].Band],
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    RegionCommonSetBandTxDone( &RegionBands[RegionNvmGroup2->Channels[txDone->Channel].Band],
 8015ab8:	4b11      	ldr	r3, [pc, #68]	@ (8015b00 <RegionEU868SetBandTxDone+0x50>)
 8015aba:	681a      	ldr	r2, [r3, #0]
 8015abc:	4b11      	ldr	r3, [pc, #68]	@ (8015b04 <RegionEU868SetBandTxDone+0x54>)
 8015abe:	6819      	ldr	r1, [r3, #0]
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	781b      	ldrb	r3, [r3, #0]
 8015ac4:	4618      	mov	r0, r3
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	005b      	lsls	r3, r3, #1
 8015aca:	4403      	add	r3, r0
 8015acc:	009b      	lsls	r3, r3, #2
 8015ace:	440b      	add	r3, r1
 8015ad0:	3309      	adds	r3, #9
 8015ad2:	781b      	ldrb	r3, [r3, #0]
 8015ad4:	4619      	mov	r1, r3
 8015ad6:	460b      	mov	r3, r1
 8015ad8:	005b      	lsls	r3, r3, #1
 8015ada:	440b      	add	r3, r1
 8015adc:	00db      	lsls	r3, r3, #3
 8015ade:	18d0      	adds	r0, r2, r3
 8015ae0:	687b      	ldr	r3, [r7, #4]
 8015ae2:	6899      	ldr	r1, [r3, #8]
 8015ae4:	687b      	ldr	r3, [r7, #4]
 8015ae6:	785c      	ldrb	r4, [r3, #1]
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	691a      	ldr	r2, [r3, #16]
 8015aec:	9200      	str	r2, [sp, #0]
 8015aee:	68db      	ldr	r3, [r3, #12]
 8015af0:	4622      	mov	r2, r4
 8015af2:	f7ff f8ef 	bl	8014cd4 <RegionCommonSetBandTxDone>
                               txDone->LastTxAirTime, txDone->Joined, txDone->ElapsedTimeSinceStartUp );
#endif /* REGION_VERSION */
#endif /* REGION_EU868 */
}
 8015af6:	bf00      	nop
 8015af8:	370c      	adds	r7, #12
 8015afa:	46bd      	mov	sp, r7
 8015afc:	bd90      	pop	{r4, r7, pc}
 8015afe:	bf00      	nop
 8015b00:	20001968 	.word	0x20001968
 8015b04:	20001964 	.word	0x20001964

08015b08 <RegionEU868InitDefaults>:

void RegionEU868InitDefaults( InitDefaultsParams_t* params )
{
 8015b08:	b580      	push	{r7, lr}
 8015b0a:	b0b0      	sub	sp, #192	@ 0xc0
 8015b0c:	af00      	add	r7, sp, #0
 8015b0e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    Band_t bands[EU868_MAX_NB_BANDS] =
 8015b10:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8015b14:	2290      	movs	r2, #144	@ 0x90
 8015b16:	2100      	movs	r1, #0
 8015b18:	4618      	mov	r0, r3
 8015b1a:	f005 fd67 	bl	801b5ec <memset>
 8015b1e:	2364      	movs	r3, #100	@ 0x64
 8015b20:	863b      	strh	r3, [r7, #48]	@ 0x30
 8015b22:	2364      	movs	r3, #100	@ 0x64
 8015b24:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
 8015b28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015b2c:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
 8015b30:	230a      	movs	r3, #10
 8015b32:	f8a7 3078 	strh.w	r3, [r7, #120]	@ 0x78
 8015b36:	2364      	movs	r3, #100	@ 0x64
 8015b38:	f8a7 3090 	strh.w	r3, [r7, #144]	@ 0x90
 8015b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8015b40:	f8a7 30a8 	strh.w	r3, [r7, #168]	@ 0xa8
        EU868_BAND3,
        EU868_BAND4,
        EU868_BAND5,
    };

    switch( params->Type )
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	7b1b      	ldrb	r3, [r3, #12]
 8015b48:	2b02      	cmp	r3, #2
 8015b4a:	d05d      	beq.n	8015c08 <RegionEU868InitDefaults+0x100>
 8015b4c:	2b02      	cmp	r3, #2
 8015b4e:	dc6a      	bgt.n	8015c26 <RegionEU868InitDefaults+0x11e>
 8015b50:	2b00      	cmp	r3, #0
 8015b52:	d002      	beq.n	8015b5a <RegionEU868InitDefaults+0x52>
 8015b54:	2b01      	cmp	r3, #1
 8015b56:	d03e      	beq.n	8015bd6 <RegionEU868InitDefaults+0xce>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
            break;
        }
        default:
        {
            break;
 8015b58:	e065      	b.n	8015c26 <RegionEU868InitDefaults+0x11e>
            if( ( params->NvmGroup1 == NULL ) || ( params->NvmGroup2 == NULL ) )
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	681b      	ldr	r3, [r3, #0]
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d062      	beq.n	8015c28 <RegionEU868InitDefaults+0x120>
 8015b62:	687b      	ldr	r3, [r7, #4]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	2b00      	cmp	r3, #0
 8015b68:	d05e      	beq.n	8015c28 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2 = (RegionNvmDataGroup2_t*) params->NvmGroup2;
 8015b6a:	687b      	ldr	r3, [r7, #4]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	4a30      	ldr	r2, [pc, #192]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015b70:	6013      	str	r3, [r2, #0]
            RegionBands = (Band_t*) params->Bands;
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	689b      	ldr	r3, [r3, #8]
 8015b76:	4a2f      	ldr	r2, [pc, #188]	@ (8015c34 <RegionEU868InitDefaults+0x12c>)
 8015b78:	6013      	str	r3, [r2, #0]
            memcpy1( ( uint8_t* )RegionBands, ( uint8_t* )bands, sizeof( Band_t ) * EU868_MAX_NB_BANDS );
 8015b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8015c34 <RegionEU868InitDefaults+0x12c>)
 8015b7c:	681b      	ldr	r3, [r3, #0]
 8015b7e:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8015b82:	2290      	movs	r2, #144	@ 0x90
 8015b84:	4618      	mov	r0, r3
 8015b86:	f000 ff6a 	bl	8016a5e <memcpy1>
            RegionNvmGroup2->Channels[0] = ( ChannelParams_t ) EU868_LC1;
 8015b8a:	4b29      	ldr	r3, [pc, #164]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	4a2a      	ldr	r2, [pc, #168]	@ (8015c38 <RegionEU868InitDefaults+0x130>)
 8015b90:	ca07      	ldmia	r2, {r0, r1, r2}
 8015b92:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[1] = ( ChannelParams_t ) EU868_LC2;
 8015b96:	4b26      	ldr	r3, [pc, #152]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015b98:	681b      	ldr	r3, [r3, #0]
 8015b9a:	4a28      	ldr	r2, [pc, #160]	@ (8015c3c <RegionEU868InitDefaults+0x134>)
 8015b9c:	330c      	adds	r3, #12
 8015b9e:	ca07      	ldmia	r2, {r0, r1, r2}
 8015ba0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->Channels[2] = ( ChannelParams_t ) EU868_LC3;
 8015ba4:	4b22      	ldr	r3, [pc, #136]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015ba6:	681b      	ldr	r3, [r3, #0]
 8015ba8:	4a25      	ldr	r2, [pc, #148]	@ (8015c40 <RegionEU868InitDefaults+0x138>)
 8015baa:	3318      	adds	r3, #24
 8015bac:	ca07      	ldmia	r2, {r0, r1, r2}
 8015bae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
            RegionNvmGroup2->ChannelsDefaultMask[0] = LC( 1 ) + LC( 2 ) + LC( 3 );
 8015bb2:	4b1f      	ldr	r3, [pc, #124]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015bb4:	681b      	ldr	r3, [r3, #0]
 8015bb6:	2207      	movs	r2, #7
 8015bb8:	f8a3 236c 	strh.w	r2, [r3, #876]	@ 0x36c
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015bbe:	681b      	ldr	r3, [r3, #0]
 8015bc0:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015bc4:	4b1a      	ldr	r3, [pc, #104]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015bcc:	2201      	movs	r2, #1
 8015bce:	4619      	mov	r1, r3
 8015bd0:	f7ff f85a 	bl	8014c88 <RegionCommonChanMaskCopy>
 8015bd4:	e028      	b.n	8015c28 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->Channels[0].Rx1Frequency = 0;
 8015bd6:	4b16      	ldr	r3, [pc, #88]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015bd8:	681b      	ldr	r3, [r3, #0]
 8015bda:	2200      	movs	r2, #0
 8015bdc:	605a      	str	r2, [r3, #4]
            RegionNvmGroup2->Channels[1].Rx1Frequency = 0;
 8015bde:	4b14      	ldr	r3, [pc, #80]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015be0:	681b      	ldr	r3, [r3, #0]
 8015be2:	2200      	movs	r2, #0
 8015be4:	611a      	str	r2, [r3, #16]
            RegionNvmGroup2->Channels[2].Rx1Frequency = 0;
 8015be6:	4b12      	ldr	r3, [pc, #72]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015be8:	681b      	ldr	r3, [r3, #0]
 8015bea:	2200      	movs	r2, #0
 8015bec:	61da      	str	r2, [r3, #28]
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, RegionNvmGroup2->ChannelsDefaultMask, CHANNELS_MASK_SIZE );
 8015bee:	4b10      	ldr	r3, [pc, #64]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015bf0:	681b      	ldr	r3, [r3, #0]
 8015bf2:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015bf6:	4b0e      	ldr	r3, [pc, #56]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015bf8:	681b      	ldr	r3, [r3, #0]
 8015bfa:	f503 735b 	add.w	r3, r3, #876	@ 0x36c
 8015bfe:	2201      	movs	r2, #1
 8015c00:	4619      	mov	r1, r3
 8015c02:	f7ff f841 	bl	8014c88 <RegionCommonChanMaskCopy>
            break;
 8015c06:	e00f      	b.n	8015c28 <RegionEU868InitDefaults+0x120>
            RegionNvmGroup2->ChannelsMask[0] |= RegionNvmGroup2->ChannelsDefaultMask[0];
 8015c08:	4b09      	ldr	r3, [pc, #36]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015c0a:	681b      	ldr	r3, [r3, #0]
 8015c0c:	f8b3 1360 	ldrh.w	r1, [r3, #864]	@ 0x360
 8015c10:	4b07      	ldr	r3, [pc, #28]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	f8b3 236c 	ldrh.w	r2, [r3, #876]	@ 0x36c
 8015c18:	4b05      	ldr	r3, [pc, #20]	@ (8015c30 <RegionEU868InitDefaults+0x128>)
 8015c1a:	681b      	ldr	r3, [r3, #0]
 8015c1c:	430a      	orrs	r2, r1
 8015c1e:	b292      	uxth	r2, r2
 8015c20:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
            break;
 8015c24:	e000      	b.n	8015c28 <RegionEU868InitDefaults+0x120>
            break;
 8015c26:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015c28:	37c0      	adds	r7, #192	@ 0xc0
 8015c2a:	46bd      	mov	sp, r7
 8015c2c:	bd80      	pop	{r7, pc}
 8015c2e:	bf00      	nop
 8015c30:	20001964 	.word	0x20001964
 8015c34:	20001968 	.word	0x20001968
 8015c38:	0801bf7c 	.word	0x0801bf7c
 8015c3c:	0801bf88 	.word	0x0801bf88
 8015c40:	0801bf94 	.word	0x0801bf94

08015c44 <RegionEU868Verify>:

bool RegionEU868Verify( VerifyParams_t* verify, PhyAttribute_t phyAttribute )
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b084      	sub	sp, #16
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	460b      	mov	r3, r1
 8015c4e:	70fb      	strb	r3, [r7, #3]
#if defined( REGION_EU868 )
    switch( phyAttribute )
 8015c50:	78fb      	ldrb	r3, [r7, #3]
 8015c52:	2b0f      	cmp	r3, #15
 8015c54:	d86c      	bhi.n	8015d30 <RegionEU868Verify+0xec>
 8015c56:	a201      	add	r2, pc, #4	@ (adr r2, 8015c5c <RegionEU868Verify+0x18>)
 8015c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c5c:	08015c9d 	.word	0x08015c9d
 8015c60:	08015d31 	.word	0x08015d31
 8015c64:	08015d31 	.word	0x08015d31
 8015c68:	08015d31 	.word	0x08015d31
 8015c6c:	08015d31 	.word	0x08015d31
 8015c70:	08015cb5 	.word	0x08015cb5
 8015c74:	08015cd3 	.word	0x08015cd3
 8015c78:	08015cf1 	.word	0x08015cf1
 8015c7c:	08015d31 	.word	0x08015d31
 8015c80:	08015d0f 	.word	0x08015d0f
 8015c84:	08015d0f 	.word	0x08015d0f
 8015c88:	08015d31 	.word	0x08015d31
 8015c8c:	08015d31 	.word	0x08015d31
 8015c90:	08015d31 	.word	0x08015d31
 8015c94:	08015d31 	.word	0x08015d31
 8015c98:	08015d2d 	.word	0x08015d2d
    {
        case PHY_FREQUENCY:
        {
            uint8_t band = 0;
 8015c9c:	2300      	movs	r3, #0
 8015c9e:	73fb      	strb	r3, [r7, #15]
            return VerifyRfFreq( verify->Frequency, &band );
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	681b      	ldr	r3, [r3, #0]
 8015ca4:	f107 020f 	add.w	r2, r7, #15
 8015ca8:	4611      	mov	r1, r2
 8015caa:	4618      	mov	r0, r3
 8015cac:	f7ff fcf4 	bl	8015698 <VerifyRfFreq>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	e03e      	b.n	8015d32 <RegionEU868Verify+0xee>
        }
        case PHY_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE );
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	f993 3000 	ldrsb.w	r3, [r3]
 8015cba:	2207      	movs	r2, #7
 8015cbc:	2100      	movs	r1, #0
 8015cbe:	4618      	mov	r0, r3
 8015cc0:	f7fe ff65 	bl	8014b8e <RegionCommonValueInRange>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	2b00      	cmp	r3, #0
 8015cc8:	bf14      	ite	ne
 8015cca:	2301      	movne	r3, #1
 8015ccc:	2300      	moveq	r3, #0
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	e02f      	b.n	8015d32 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, DR_0, DR_5 );
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	f993 3000 	ldrsb.w	r3, [r3]
 8015cd8:	2205      	movs	r2, #5
 8015cda:	2100      	movs	r1, #0
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7fe ff56 	bl	8014b8e <RegionCommonValueInRange>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	bf14      	ite	ne
 8015ce8:	2301      	movne	r3, #1
 8015cea:	2300      	moveq	r3, #0
 8015cec:	b2db      	uxtb	r3, r3
 8015cee:	e020      	b.n	8015d32 <RegionEU868Verify+0xee>
        }
        case PHY_RX_DR:
        {
            return RegionCommonValueInRange( verify->DatarateParams.Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE );
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f993 3000 	ldrsb.w	r3, [r3]
 8015cf6:	2207      	movs	r2, #7
 8015cf8:	2100      	movs	r1, #0
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fe ff47 	bl	8014b8e <RegionCommonValueInRange>
 8015d00:	4603      	mov	r3, r0
 8015d02:	2b00      	cmp	r3, #0
 8015d04:	bf14      	ite	ne
 8015d06:	2301      	movne	r3, #1
 8015d08:	2300      	moveq	r3, #0
 8015d0a:	b2db      	uxtb	r3, r3
 8015d0c:	e011      	b.n	8015d32 <RegionEU868Verify+0xee>
        }
        case PHY_DEF_TX_POWER:
        case PHY_TX_POWER:
        {
            // Remark: switched min and max!
            return RegionCommonValueInRange( verify->TxPower, EU868_MAX_TX_POWER, EU868_MIN_TX_POWER );
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	f993 3000 	ldrsb.w	r3, [r3]
 8015d14:	2207      	movs	r2, #7
 8015d16:	2100      	movs	r1, #0
 8015d18:	4618      	mov	r0, r3
 8015d1a:	f7fe ff38 	bl	8014b8e <RegionCommonValueInRange>
 8015d1e:	4603      	mov	r3, r0
 8015d20:	2b00      	cmp	r3, #0
 8015d22:	bf14      	ite	ne
 8015d24:	2301      	movne	r3, #1
 8015d26:	2300      	moveq	r3, #0
 8015d28:	b2db      	uxtb	r3, r3
 8015d2a:	e002      	b.n	8015d32 <RegionEU868Verify+0xee>
        }
        case PHY_DUTY_CYCLE:
        {
            return EU868_DUTY_CYCLE_ENABLED;
 8015d2c:	2301      	movs	r3, #1
 8015d2e:	e000      	b.n	8015d32 <RegionEU868Verify+0xee>
        }
        default:
            return false;
 8015d30:	2300      	movs	r3, #0
    }
#else
    return false;
#endif /* REGION_EU868 */
}
 8015d32:	4618      	mov	r0, r3
 8015d34:	3710      	adds	r7, #16
 8015d36:	46bd      	mov	sp, r7
 8015d38:	bd80      	pop	{r7, pc}
 8015d3a:	bf00      	nop

08015d3c <RegionEU868ApplyCFList>:

void RegionEU868ApplyCFList( ApplyCFListParams_t* applyCFList )
{
 8015d3c:	b580      	push	{r7, lr}
 8015d3e:	b08a      	sub	sp, #40	@ 0x28
 8015d40:	af00      	add	r7, sp, #0
 8015d42:	6078      	str	r0, [r7, #4]
    ChannelParams_t newChannel;
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    // Setup default datarate range
    newChannel.DrRange.Value = ( DR_5 << 4 ) | DR_0;
 8015d44:	2350      	movs	r3, #80	@ 0x50
 8015d46:	f887 3020 	strb.w	r3, [r7, #32]

    // Size of the optional CF list
    if( applyCFList->Size != 16 )
 8015d4a:	687b      	ldr	r3, [r7, #4]
 8015d4c:	7a1b      	ldrb	r3, [r3, #8]
 8015d4e:	2b10      	cmp	r3, #16
 8015d50:	d162      	bne.n	8015e18 <RegionEU868ApplyCFList+0xdc>
    {
        return;
    }

    // Last byte CFListType must be 0 to indicate the CFList contains a list of frequencies
    if( applyCFList->Payload[15] != 0 )
 8015d52:	687b      	ldr	r3, [r7, #4]
 8015d54:	685b      	ldr	r3, [r3, #4]
 8015d56:	330f      	adds	r3, #15
 8015d58:	781b      	ldrb	r3, [r3, #0]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d15e      	bne.n	8015e1c <RegionEU868ApplyCFList+0xe0>
    {
        return;
    }

    // Last byte is RFU, don't take it into account
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015d5e:	2300      	movs	r3, #0
 8015d60:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015d64:	2303      	movs	r3, #3
 8015d66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015d6a:	e050      	b.n	8015e0e <RegionEU868ApplyCFList+0xd2>
    {
        if( chanIdx < ( EU868_NUMB_CHANNELS_CF_LIST + EU868_NUMB_DEFAULT_CHANNELS ) )
 8015d6c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015d70:	2b07      	cmp	r3, #7
 8015d72:	d824      	bhi.n	8015dbe <RegionEU868ApplyCFList+0x82>
        {
            // Channel frequency
            newChannel.Frequency = (uint32_t) applyCFList->Payload[i];
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	685a      	ldr	r2, [r3, #4]
 8015d78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d7c:	4413      	add	r3, r2
 8015d7e:	781b      	ldrb	r3, [r3, #0]
 8015d80:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 1] << 8 );
 8015d82:	69ba      	ldr	r2, [r7, #24]
 8015d84:	687b      	ldr	r3, [r7, #4]
 8015d86:	6859      	ldr	r1, [r3, #4]
 8015d88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015d8c:	3301      	adds	r3, #1
 8015d8e:	440b      	add	r3, r1
 8015d90:	781b      	ldrb	r3, [r3, #0]
 8015d92:	021b      	lsls	r3, r3, #8
 8015d94:	4313      	orrs	r3, r2
 8015d96:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency |= ( (uint32_t) applyCFList->Payload[i + 2] << 16 );
 8015d98:	69ba      	ldr	r2, [r7, #24]
 8015d9a:	687b      	ldr	r3, [r7, #4]
 8015d9c:	6859      	ldr	r1, [r3, #4]
 8015d9e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015da2:	3302      	adds	r3, #2
 8015da4:	440b      	add	r3, r1
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	041b      	lsls	r3, r3, #16
 8015daa:	4313      	orrs	r3, r2
 8015dac:	61bb      	str	r3, [r7, #24]
            newChannel.Frequency *= 100;
 8015dae:	69bb      	ldr	r3, [r7, #24]
 8015db0:	2264      	movs	r2, #100	@ 0x64
 8015db2:	fb02 f303 	mul.w	r3, r2, r3
 8015db6:	61bb      	str	r3, [r7, #24]

            // Initialize alternative frequency to 0
            newChannel.Rx1Frequency = 0;
 8015db8:	2300      	movs	r3, #0
 8015dba:	61fb      	str	r3, [r7, #28]
 8015dbc:	e006      	b.n	8015dcc <RegionEU868ApplyCFList+0x90>
        }
        else
        {
            newChannel.Frequency = 0;
 8015dbe:	2300      	movs	r3, #0
 8015dc0:	61bb      	str	r3, [r7, #24]
            newChannel.DrRange.Value = 0;
 8015dc2:	2300      	movs	r3, #0
 8015dc4:	f887 3020 	strb.w	r3, [r7, #32]
            newChannel.Rx1Frequency = 0;
 8015dc8:	2300      	movs	r3, #0
 8015dca:	61fb      	str	r3, [r7, #28]
        }

        if( newChannel.Frequency != 0 )
 8015dcc:	69bb      	ldr	r3, [r7, #24]
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d00b      	beq.n	8015dea <RegionEU868ApplyCFList+0xae>
        {
            channelAdd.NewChannel = &newChannel;
 8015dd2:	f107 0318 	add.w	r3, r7, #24
 8015dd6:	613b      	str	r3, [r7, #16]
            channelAdd.ChannelId = chanIdx;
 8015dd8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015ddc:	753b      	strb	r3, [r7, #20]

            // Try to add all channels
            RegionEU868ChannelAdd( &channelAdd );
 8015dde:	f107 0310 	add.w	r3, r7, #16
 8015de2:	4618      	mov	r0, r3
 8015de4:	f000 fd0e 	bl	8016804 <RegionEU868ChannelAdd>
 8015de8:	e007      	b.n	8015dfa <RegionEU868ApplyCFList+0xbe>
        }
        else
        {
            channelRemove.ChannelId = chanIdx;
 8015dea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015dee:	733b      	strb	r3, [r7, #12]

            RegionEU868ChannelsRemove( &channelRemove );
 8015df0:	f107 030c 	add.w	r3, r7, #12
 8015df4:	4618      	mov	r0, r3
 8015df6:	f000 fda7 	bl	8016948 <RegionEU868ChannelsRemove>
    for( uint8_t i = 0, chanIdx = EU868_NUMB_DEFAULT_CHANNELS; chanIdx < EU868_MAX_NB_CHANNELS; i+=3, chanIdx++ )
 8015dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015dfe:	3303      	adds	r3, #3
 8015e00:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8015e04:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e08:	3301      	adds	r3, #1
 8015e0a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8015e0e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8015e12:	2b0f      	cmp	r3, #15
 8015e14:	d9aa      	bls.n	8015d6c <RegionEU868ApplyCFList+0x30>
 8015e16:	e002      	b.n	8015e1e <RegionEU868ApplyCFList+0xe2>
        return;
 8015e18:	bf00      	nop
 8015e1a:	e000      	b.n	8015e1e <RegionEU868ApplyCFList+0xe2>
        return;
 8015e1c:	bf00      	nop
        }
    }
#endif /* REGION_EU868 */
}
 8015e1e:	3728      	adds	r7, #40	@ 0x28
 8015e20:	46bd      	mov	sp, r7
 8015e22:	bd80      	pop	{r7, pc}

08015e24 <RegionEU868ChanMaskSet>:

bool RegionEU868ChanMaskSet( ChanMaskSetParams_t* chanMaskSet )
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    switch( chanMaskSet->ChannelsMaskType )
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	791b      	ldrb	r3, [r3, #4]
 8015e30:	2b00      	cmp	r3, #0
 8015e32:	d002      	beq.n	8015e3a <RegionEU868ChanMaskSet+0x16>
 8015e34:	2b01      	cmp	r3, #1
 8015e36:	d00b      	beq.n	8015e50 <RegionEU868ChanMaskSet+0x2c>
 8015e38:	e015      	b.n	8015e66 <RegionEU868ChanMaskSet+0x42>
    {
        case CHANNELS_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015e3a:	4b0e      	ldr	r3, [pc, #56]	@ (8015e74 <RegionEU868ChanMaskSet+0x50>)
 8015e3c:	681b      	ldr	r3, [r3, #0]
 8015e3e:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	2201      	movs	r2, #1
 8015e48:	4619      	mov	r1, r3
 8015e4a:	f7fe ff1d 	bl	8014c88 <RegionCommonChanMaskCopy>
            break;
 8015e4e:	e00c      	b.n	8015e6a <RegionEU868ChanMaskSet+0x46>
        }
        case CHANNELS_DEFAULT_MASK:
        {
            RegionCommonChanMaskCopy( RegionNvmGroup2->ChannelsDefaultMask, chanMaskSet->ChannelsMaskIn, CHANNELS_MASK_SIZE );
 8015e50:	4b08      	ldr	r3, [pc, #32]	@ (8015e74 <RegionEU868ChanMaskSet+0x50>)
 8015e52:	681b      	ldr	r3, [r3, #0]
 8015e54:	f503 705b 	add.w	r0, r3, #876	@ 0x36c
 8015e58:	687b      	ldr	r3, [r7, #4]
 8015e5a:	681b      	ldr	r3, [r3, #0]
 8015e5c:	2201      	movs	r2, #1
 8015e5e:	4619      	mov	r1, r3
 8015e60:	f7fe ff12 	bl	8014c88 <RegionCommonChanMaskCopy>
            break;
 8015e64:	e001      	b.n	8015e6a <RegionEU868ChanMaskSet+0x46>
        }
        default:
            return false;
 8015e66:	2300      	movs	r3, #0
 8015e68:	e000      	b.n	8015e6c <RegionEU868ChanMaskSet+0x48>
    }
    return true;
 8015e6a:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 8015e6c:	4618      	mov	r0, r3
 8015e6e:	3708      	adds	r7, #8
 8015e70:	46bd      	mov	sp, r7
 8015e72:	bd80      	pop	{r7, pc}
 8015e74:	20001964 	.word	0x20001964

08015e78 <RegionEU868ComputeRxWindowParameters>:

void RegionEU868ComputeRxWindowParameters( int8_t datarate, uint8_t minRxSymbols, uint32_t rxError, RxConfigParams_t *rxConfigParams )
{
 8015e78:	b580      	push	{r7, lr}
 8015e7a:	b088      	sub	sp, #32
 8015e7c:	af02      	add	r7, sp, #8
 8015e7e:	60ba      	str	r2, [r7, #8]
 8015e80:	607b      	str	r3, [r7, #4]
 8015e82:	4603      	mov	r3, r0
 8015e84:	73fb      	strb	r3, [r7, #15]
 8015e86:	460b      	mov	r3, r1
 8015e88:	73bb      	strb	r3, [r7, #14]
#if defined( REGION_EU868 )
    uint32_t tSymbolInUs = 0;
 8015e8a:	2300      	movs	r3, #0
 8015e8c:	617b      	str	r3, [r7, #20]

    // Get the datarate, perform a boundary check
    rxConfigParams->Datarate = MIN( datarate, EU868_RX_MAX_DATARATE );
 8015e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015e92:	2b07      	cmp	r3, #7
 8015e94:	bfa8      	it	ge
 8015e96:	2307      	movge	r3, #7
 8015e98:	b25a      	sxtb	r2, r3
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	705a      	strb	r2, [r3, #1]
    rxConfigParams->Bandwidth = RegionCommonGetBandwidth( rxConfigParams->Datarate, BandwidthsEU868 );
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ea4:	491e      	ldr	r1, [pc, #120]	@ (8015f20 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015ea6:	4618      	mov	r0, r3
 8015ea8:	f7ff fb8e 	bl	80155c8 <RegionCommonGetBandwidth>
 8015eac:	4603      	mov	r3, r0
 8015eae:	b2da      	uxtb	r2, r3
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	709a      	strb	r2, [r3, #2]

    if( rxConfigParams->Datarate == DR_7 )
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eba:	2b07      	cmp	r3, #7
 8015ebc:	d10a      	bne.n	8015ed4 <RegionEU868ComputeRxWindowParameters+0x5c>
    { // FSK
        tSymbolInUs = RegionCommonComputeSymbolTimeFsk( DataratesEU868[rxConfigParams->Datarate] );
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ec4:	461a      	mov	r2, r3
 8015ec6:	4b17      	ldr	r3, [pc, #92]	@ (8015f24 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ec8:	5c9b      	ldrb	r3, [r3, r2]
 8015eca:	4618      	mov	r0, r3
 8015ecc:	f7ff f910 	bl	80150f0 <RegionCommonComputeSymbolTimeFsk>
 8015ed0:	6178      	str	r0, [r7, #20]
 8015ed2:	e011      	b.n	8015ef8 <RegionEU868ComputeRxWindowParameters+0x80>
    }
    else
    { // LoRa
        tSymbolInUs = RegionCommonComputeSymbolTimeLoRa( DataratesEU868[rxConfigParams->Datarate], BandwidthsEU868[rxConfigParams->Datarate] );
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015eda:	461a      	mov	r2, r3
 8015edc:	4b11      	ldr	r3, [pc, #68]	@ (8015f24 <RegionEU868ComputeRxWindowParameters+0xac>)
 8015ede:	5c9a      	ldrb	r2, [r3, r2]
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8015f20 <RegionEU868ComputeRxWindowParameters+0xa8>)
 8015eea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8015eee:	4619      	mov	r1, r3
 8015ef0:	4610      	mov	r0, r2
 8015ef2:	f7ff f8e7 	bl	80150c4 <RegionCommonComputeSymbolTimeLoRa>
 8015ef6:	6178      	str	r0, [r7, #20]
    }

    RegionCommonComputeRxWindowParameters( tSymbolInUs, minRxSymbols, rxError, Radio.GetWakeupTime( ), &rxConfigParams->WindowTimeout, &rxConfigParams->WindowOffset );
 8015ef8:	4b0b      	ldr	r3, [pc, #44]	@ (8015f28 <RegionEU868ComputeRxWindowParameters+0xb0>)
 8015efa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015efc:	4798      	blx	r3
 8015efe:	687b      	ldr	r3, [r7, #4]
 8015f00:	3308      	adds	r3, #8
 8015f02:	687a      	ldr	r2, [r7, #4]
 8015f04:	320c      	adds	r2, #12
 8015f06:	7bb9      	ldrb	r1, [r7, #14]
 8015f08:	9201      	str	r2, [sp, #4]
 8015f0a:	9300      	str	r3, [sp, #0]
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	68ba      	ldr	r2, [r7, #8]
 8015f10:	6978      	ldr	r0, [r7, #20]
 8015f12:	f7ff f8fd 	bl	8015110 <RegionCommonComputeRxWindowParameters>
#endif /* REGION_EU868 */
}
 8015f16:	bf00      	nop
 8015f18:	3718      	adds	r7, #24
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd80      	pop	{r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	0801c4d0 	.word	0x0801c4d0
 8015f24:	0801c4c8 	.word	0x0801c4c8
 8015f28:	0801c500 	.word	0x0801c500

08015f2c <RegionEU868RxConfig>:

bool RegionEU868RxConfig( RxConfigParams_t* rxConfig, int8_t* datarate )
{
 8015f2c:	b5b0      	push	{r4, r5, r7, lr}
 8015f2e:	b090      	sub	sp, #64	@ 0x40
 8015f30:	af0a      	add	r7, sp, #40	@ 0x28
 8015f32:	6078      	str	r0, [r7, #4]
 8015f34:	6039      	str	r1, [r7, #0]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t dr = rxConfig->Datarate;
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	785b      	ldrb	r3, [r3, #1]
 8015f3a:	73fb      	strb	r3, [r7, #15]
    uint8_t maxPayload = 0;
 8015f3c:	2300      	movs	r3, #0
 8015f3e:	75bb      	strb	r3, [r7, #22]
    int8_t phyDr = 0;
 8015f40:	2300      	movs	r3, #0
 8015f42:	73bb      	strb	r3, [r7, #14]
    uint32_t frequency = rxConfig->Frequency;
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	613b      	str	r3, [r7, #16]

    if( Radio.GetStatus( ) != RF_IDLE )
 8015f4a:	4b5a      	ldr	r3, [pc, #360]	@ (80160b4 <RegionEU868RxConfig+0x188>)
 8015f4c:	685b      	ldr	r3, [r3, #4]
 8015f4e:	4798      	blx	r3
 8015f50:	4603      	mov	r3, r0
 8015f52:	2b00      	cmp	r3, #0
 8015f54:	d001      	beq.n	8015f5a <RegionEU868RxConfig+0x2e>
    {
        return false;
 8015f56:	2300      	movs	r3, #0
 8015f58:	e0a8      	b.n	80160ac <RegionEU868RxConfig+0x180>
    }

    if( rxConfig->RxSlot == RX_SLOT_WIN_1 )
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	7cdb      	ldrb	r3, [r3, #19]
 8015f5e:	2b00      	cmp	r3, #0
 8015f60:	d126      	bne.n	8015fb0 <RegionEU868RxConfig+0x84>
    {
        // Apply window 1 frequency
        frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Frequency;
 8015f62:	4b55      	ldr	r3, [pc, #340]	@ (80160b8 <RegionEU868RxConfig+0x18c>)
 8015f64:	681a      	ldr	r2, [r3, #0]
 8015f66:	687b      	ldr	r3, [r7, #4]
 8015f68:	781b      	ldrb	r3, [r3, #0]
 8015f6a:	4619      	mov	r1, r3
 8015f6c:	460b      	mov	r3, r1
 8015f6e:	005b      	lsls	r3, r3, #1
 8015f70:	440b      	add	r3, r1
 8015f72:	009b      	lsls	r3, r3, #2
 8015f74:	4413      	add	r3, r2
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	613b      	str	r3, [r7, #16]
        // Apply the alternative RX 1 window frequency, if it is available
        if( RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency != 0 )
 8015f7a:	4b4f      	ldr	r3, [pc, #316]	@ (80160b8 <RegionEU868RxConfig+0x18c>)
 8015f7c:	681a      	ldr	r2, [r3, #0]
 8015f7e:	687b      	ldr	r3, [r7, #4]
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	4619      	mov	r1, r3
 8015f84:	460b      	mov	r3, r1
 8015f86:	005b      	lsls	r3, r3, #1
 8015f88:	440b      	add	r3, r1
 8015f8a:	009b      	lsls	r3, r3, #2
 8015f8c:	4413      	add	r3, r2
 8015f8e:	3304      	adds	r3, #4
 8015f90:	681b      	ldr	r3, [r3, #0]
 8015f92:	2b00      	cmp	r3, #0
 8015f94:	d00c      	beq.n	8015fb0 <RegionEU868RxConfig+0x84>
        {
            frequency = RegionNvmGroup2->Channels[rxConfig->Channel].Rx1Frequency;
 8015f96:	4b48      	ldr	r3, [pc, #288]	@ (80160b8 <RegionEU868RxConfig+0x18c>)
 8015f98:	681a      	ldr	r2, [r3, #0]
 8015f9a:	687b      	ldr	r3, [r7, #4]
 8015f9c:	781b      	ldrb	r3, [r3, #0]
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	460b      	mov	r3, r1
 8015fa2:	005b      	lsls	r3, r3, #1
 8015fa4:	440b      	add	r3, r1
 8015fa6:	009b      	lsls	r3, r3, #2
 8015fa8:	4413      	add	r3, r2
 8015faa:	3304      	adds	r3, #4
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	613b      	str	r3, [r7, #16]
        }
    }

    // Read the physical datarate from the datarates table
    phyDr = DataratesEU868[dr];
 8015fb0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fb4:	4a41      	ldr	r2, [pc, #260]	@ (80160bc <RegionEU868RxConfig+0x190>)
 8015fb6:	5cd3      	ldrb	r3, [r2, r3]
 8015fb8:	73bb      	strb	r3, [r7, #14]

    Radio.SetChannel( frequency );
 8015fba:	4b3e      	ldr	r3, [pc, #248]	@ (80160b4 <RegionEU868RxConfig+0x188>)
 8015fbc:	68db      	ldr	r3, [r3, #12]
 8015fbe:	6938      	ldr	r0, [r7, #16]
 8015fc0:	4798      	blx	r3

    // Radio configuration
    if( dr == DR_7 )
 8015fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015fc6:	2b07      	cmp	r3, #7
 8015fc8:	d128      	bne.n	801601c <RegionEU868RxConfig+0xf0>
    {
        modem = MODEM_FSK;
 8015fca:	2300      	movs	r3, #0
 8015fcc:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, 50000, phyDr * 1000, 0, 83333, 5, rxConfig->WindowTimeout, false, 0, true, 0, 0, false, rxConfig->RxContinuous );
 8015fce:	4b39      	ldr	r3, [pc, #228]	@ (80160b4 <RegionEU868RxConfig+0x188>)
 8015fd0:	699c      	ldr	r4, [r3, #24]
 8015fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015fd6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8015fda:	fb02 f303 	mul.w	r3, r2, r3
 8015fde:	4619      	mov	r1, r3
 8015fe0:	687b      	ldr	r3, [r7, #4]
 8015fe2:	689b      	ldr	r3, [r3, #8]
 8015fe4:	b29b      	uxth	r3, r3
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	7c92      	ldrb	r2, [r2, #18]
 8015fea:	7df8      	ldrb	r0, [r7, #23]
 8015fec:	9209      	str	r2, [sp, #36]	@ 0x24
 8015fee:	2200      	movs	r2, #0
 8015ff0:	9208      	str	r2, [sp, #32]
 8015ff2:	2200      	movs	r2, #0
 8015ff4:	9207      	str	r2, [sp, #28]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	9206      	str	r2, [sp, #24]
 8015ffa:	2201      	movs	r2, #1
 8015ffc:	9205      	str	r2, [sp, #20]
 8015ffe:	2200      	movs	r2, #0
 8016000:	9204      	str	r2, [sp, #16]
 8016002:	2200      	movs	r2, #0
 8016004:	9203      	str	r2, [sp, #12]
 8016006:	9302      	str	r3, [sp, #8]
 8016008:	2305      	movs	r3, #5
 801600a:	9301      	str	r3, [sp, #4]
 801600c:	4b2c      	ldr	r3, [pc, #176]	@ (80160c0 <RegionEU868RxConfig+0x194>)
 801600e:	9300      	str	r3, [sp, #0]
 8016010:	2300      	movs	r3, #0
 8016012:	460a      	mov	r2, r1
 8016014:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8016018:	47a0      	blx	r4
 801601a:	e024      	b.n	8016066 <RegionEU868RxConfig+0x13a>
    }
    else
    {
        modem = MODEM_LORA;
 801601c:	2301      	movs	r3, #1
 801601e:	75fb      	strb	r3, [r7, #23]
        Radio.SetRxConfig( modem, rxConfig->Bandwidth, phyDr, 1, 0, 8, rxConfig->WindowTimeout, false, 0, false, 0, 0, true, rxConfig->RxContinuous );
 8016020:	4b24      	ldr	r3, [pc, #144]	@ (80160b4 <RegionEU868RxConfig+0x188>)
 8016022:	699c      	ldr	r4, [r3, #24]
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	789b      	ldrb	r3, [r3, #2]
 8016028:	461d      	mov	r5, r3
 801602a:	f997 100e 	ldrsb.w	r1, [r7, #14]
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	689b      	ldr	r3, [r3, #8]
 8016032:	b29b      	uxth	r3, r3
 8016034:	687a      	ldr	r2, [r7, #4]
 8016036:	7c92      	ldrb	r2, [r2, #18]
 8016038:	7df8      	ldrb	r0, [r7, #23]
 801603a:	9209      	str	r2, [sp, #36]	@ 0x24
 801603c:	2201      	movs	r2, #1
 801603e:	9208      	str	r2, [sp, #32]
 8016040:	2200      	movs	r2, #0
 8016042:	9207      	str	r2, [sp, #28]
 8016044:	2200      	movs	r2, #0
 8016046:	9206      	str	r2, [sp, #24]
 8016048:	2200      	movs	r2, #0
 801604a:	9205      	str	r2, [sp, #20]
 801604c:	2200      	movs	r2, #0
 801604e:	9204      	str	r2, [sp, #16]
 8016050:	2200      	movs	r2, #0
 8016052:	9203      	str	r2, [sp, #12]
 8016054:	9302      	str	r3, [sp, #8]
 8016056:	2308      	movs	r3, #8
 8016058:	9301      	str	r3, [sp, #4]
 801605a:	2300      	movs	r3, #0
 801605c:	9300      	str	r3, [sp, #0]
 801605e:	2301      	movs	r3, #1
 8016060:	460a      	mov	r2, r1
 8016062:	4629      	mov	r1, r5
 8016064:	47a0      	blx	r4
    }

    /* ST_WORKAROUND_BEGIN: Keep repeater feature */
    if( rxConfig->RepeaterSupport == true )
 8016066:	687b      	ldr	r3, [r7, #4]
 8016068:	7c5b      	ldrb	r3, [r3, #17]
 801606a:	2b00      	cmp	r3, #0
 801606c:	d005      	beq.n	801607a <RegionEU868RxConfig+0x14e>
    {
        maxPayload = MaxPayloadOfDatarateRepeaterEU868[dr];
 801606e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016072:	4a14      	ldr	r2, [pc, #80]	@ (80160c4 <RegionEU868RxConfig+0x198>)
 8016074:	5cd3      	ldrb	r3, [r2, r3]
 8016076:	75bb      	strb	r3, [r7, #22]
 8016078:	e004      	b.n	8016084 <RegionEU868RxConfig+0x158>
    }
    else
    {
        maxPayload = MaxPayloadOfDatarateEU868[dr];
 801607a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801607e:	4a12      	ldr	r2, [pc, #72]	@ (80160c8 <RegionEU868RxConfig+0x19c>)
 8016080:	5cd3      	ldrb	r3, [r2, r3]
 8016082:	75bb      	strb	r3, [r7, #22]
    }

    Radio.SetMaxPayloadLength( modem, maxPayload + LORAMAC_FRAME_PAYLOAD_OVERHEAD_SIZE );
 8016084:	4b0b      	ldr	r3, [pc, #44]	@ (80160b4 <RegionEU868RxConfig+0x188>)
 8016086:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8016088:	7dba      	ldrb	r2, [r7, #22]
 801608a:	320d      	adds	r2, #13
 801608c:	b2d1      	uxtb	r1, r2
 801608e:	7dfa      	ldrb	r2, [r7, #23]
 8016090:	4610      	mov	r0, r2
 8016092:	4798      	blx	r3
    /* ST_WORKAROUND_END */

    /* ST_WORKAROUND_BEGIN: Print Rx config */
    RegionCommonRxConfigPrint(rxConfig->RxSlot, frequency, dr);
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	7cdb      	ldrb	r3, [r3, #19]
 8016098:	f997 200f 	ldrsb.w	r2, [r7, #15]
 801609c:	6939      	ldr	r1, [r7, #16]
 801609e:	4618      	mov	r0, r3
 80160a0:	f7ff fab0 	bl	8015604 <RegionCommonRxConfigPrint>
    /* ST_WORKAROUND_END */

    *datarate = (uint8_t) dr;
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	7bfa      	ldrb	r2, [r7, #15]
 80160a8:	701a      	strb	r2, [r3, #0]
    return true;
 80160aa:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 80160ac:	4618      	mov	r0, r3
 80160ae:	3718      	adds	r7, #24
 80160b0:	46bd      	mov	sp, r7
 80160b2:	bdb0      	pop	{r4, r5, r7, pc}
 80160b4:	0801c500 	.word	0x0801c500
 80160b8:	20001964 	.word	0x20001964
 80160bc:	0801c4c8 	.word	0x0801c4c8
 80160c0:	00014585 	.word	0x00014585
 80160c4:	0801c4f8 	.word	0x0801c4f8
 80160c8:	0801c4f0 	.word	0x0801c4f0

080160cc <RegionEU868TxConfig>:

bool RegionEU868TxConfig( TxConfigParams_t* txConfig, int8_t* txPower, TimerTime_t* txTimeOnAir )
{
 80160cc:	b590      	push	{r4, r7, lr}
 80160ce:	b093      	sub	sp, #76	@ 0x4c
 80160d0:	af0a      	add	r7, sp, #40	@ 0x28
 80160d2:	60f8      	str	r0, [r7, #12]
 80160d4:	60b9      	str	r1, [r7, #8]
 80160d6:	607a      	str	r2, [r7, #4]
#if defined( REGION_EU868 )
    RadioModems_t modem;
    int8_t phyDr = DataratesEU868[txConfig->Datarate];
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80160de:	461a      	mov	r2, r3
 80160e0:	4b5d      	ldr	r3, [pc, #372]	@ (8016258 <RegionEU868TxConfig+0x18c>)
 80160e2:	5c9b      	ldrb	r3, [r3, r2]
 80160e4:	77bb      	strb	r3, [r7, #30]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionNvmGroup1->Bands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    int8_t txPowerLimited = RegionCommonLimitTxPower( txConfig->TxPower, RegionBands[RegionNvmGroup2->Channels[txConfig->Channel].Band].TxMaxPower );
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	f993 0002 	ldrsb.w	r0, [r3, #2]
 80160ec:	4b5b      	ldr	r3, [pc, #364]	@ (801625c <RegionEU868TxConfig+0x190>)
 80160ee:	681a      	ldr	r2, [r3, #0]
 80160f0:	4b5b      	ldr	r3, [pc, #364]	@ (8016260 <RegionEU868TxConfig+0x194>)
 80160f2:	6819      	ldr	r1, [r3, #0]
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	781b      	ldrb	r3, [r3, #0]
 80160f8:	461c      	mov	r4, r3
 80160fa:	4623      	mov	r3, r4
 80160fc:	005b      	lsls	r3, r3, #1
 80160fe:	4423      	add	r3, r4
 8016100:	009b      	lsls	r3, r3, #2
 8016102:	440b      	add	r3, r1
 8016104:	3309      	adds	r3, #9
 8016106:	781b      	ldrb	r3, [r3, #0]
 8016108:	4619      	mov	r1, r3
 801610a:	460b      	mov	r3, r1
 801610c:	005b      	lsls	r3, r3, #1
 801610e:	440b      	add	r3, r1
 8016110:	00db      	lsls	r3, r3, #3
 8016112:	4413      	add	r3, r2
 8016114:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8016118:	4619      	mov	r1, r3
 801611a:	f7ff fa40 	bl	801559e <RegionCommonLimitTxPower>
 801611e:	4603      	mov	r3, r0
 8016120:	777b      	strb	r3, [r7, #29]
#endif /* REGION_VERSION */
    uint32_t bandwidth = RegionCommonGetBandwidth( txConfig->Datarate, BandwidthsEU868 );
 8016122:	68fb      	ldr	r3, [r7, #12]
 8016124:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016128:	494e      	ldr	r1, [pc, #312]	@ (8016264 <RegionEU868TxConfig+0x198>)
 801612a:	4618      	mov	r0, r3
 801612c:	f7ff fa4c 	bl	80155c8 <RegionCommonGetBandwidth>
 8016130:	61b8      	str	r0, [r7, #24]
    int8_t phyTxPower = 0;
 8016132:	2300      	movs	r3, #0
 8016134:	75fb      	strb	r3, [r7, #23]

    // Calculate physical TX power
    phyTxPower = RegionCommonComputeTxPower( txPowerLimited, txConfig->MaxEirp, txConfig->AntennaGain );
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	6859      	ldr	r1, [r3, #4]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	689a      	ldr	r2, [r3, #8]
 801613e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8016142:	4618      	mov	r0, r3
 8016144:	f7ff f89c 	bl	8015280 <RegionCommonComputeTxPower>
 8016148:	4603      	mov	r3, r0
 801614a:	75fb      	strb	r3, [r7, #23]

    // Setup the radio frequency
    Radio.SetChannel( RegionNvmGroup2->Channels[txConfig->Channel].Frequency );
 801614c:	4b46      	ldr	r3, [pc, #280]	@ (8016268 <RegionEU868TxConfig+0x19c>)
 801614e:	68da      	ldr	r2, [r3, #12]
 8016150:	4b43      	ldr	r3, [pc, #268]	@ (8016260 <RegionEU868TxConfig+0x194>)
 8016152:	6819      	ldr	r1, [r3, #0]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	781b      	ldrb	r3, [r3, #0]
 8016158:	4618      	mov	r0, r3
 801615a:	4603      	mov	r3, r0
 801615c:	005b      	lsls	r3, r3, #1
 801615e:	4403      	add	r3, r0
 8016160:	009b      	lsls	r3, r3, #2
 8016162:	440b      	add	r3, r1
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	4618      	mov	r0, r3
 8016168:	4790      	blx	r2

    if( txConfig->Datarate == DR_7 )
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016170:	2b07      	cmp	r3, #7
 8016172:	d124      	bne.n	80161be <RegionEU868TxConfig+0xf2>
    { // High Speed FSK channel
        modem = MODEM_FSK;
 8016174:	2300      	movs	r3, #0
 8016176:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 25000, bandwidth, phyDr * 1000, 0, 5, false, true, 0, 0, false, 4000 );
 8016178:	4b3b      	ldr	r3, [pc, #236]	@ (8016268 <RegionEU868TxConfig+0x19c>)
 801617a:	69dc      	ldr	r4, [r3, #28]
 801617c:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8016180:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016184:	fb02 f303 	mul.w	r3, r2, r3
 8016188:	461a      	mov	r2, r3
 801618a:	f997 1017 	ldrsb.w	r1, [r7, #23]
 801618e:	7ff8      	ldrb	r0, [r7, #31]
 8016190:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8016194:	9308      	str	r3, [sp, #32]
 8016196:	2300      	movs	r3, #0
 8016198:	9307      	str	r3, [sp, #28]
 801619a:	2300      	movs	r3, #0
 801619c:	9306      	str	r3, [sp, #24]
 801619e:	2300      	movs	r3, #0
 80161a0:	9305      	str	r3, [sp, #20]
 80161a2:	2301      	movs	r3, #1
 80161a4:	9304      	str	r3, [sp, #16]
 80161a6:	2300      	movs	r3, #0
 80161a8:	9303      	str	r3, [sp, #12]
 80161aa:	2305      	movs	r3, #5
 80161ac:	9302      	str	r3, [sp, #8]
 80161ae:	2300      	movs	r3, #0
 80161b0:	9301      	str	r3, [sp, #4]
 80161b2:	9200      	str	r2, [sp, #0]
 80161b4:	69bb      	ldr	r3, [r7, #24]
 80161b6:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80161ba:	47a0      	blx	r4
 80161bc:	e01d      	b.n	80161fa <RegionEU868TxConfig+0x12e>
    }
    else
    {
        modem = MODEM_LORA;
 80161be:	2301      	movs	r3, #1
 80161c0:	77fb      	strb	r3, [r7, #31]
        Radio.SetTxConfig( modem, phyTxPower, 0, bandwidth, phyDr, 1, 8, false, true, 0, 0, false, 4000 );
 80161c2:	4b29      	ldr	r3, [pc, #164]	@ (8016268 <RegionEU868TxConfig+0x19c>)
 80161c4:	69dc      	ldr	r4, [r3, #28]
 80161c6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80161ca:	f997 1017 	ldrsb.w	r1, [r7, #23]
 80161ce:	7ff8      	ldrb	r0, [r7, #31]
 80161d0:	f44f 627a 	mov.w	r2, #4000	@ 0xfa0
 80161d4:	9208      	str	r2, [sp, #32]
 80161d6:	2200      	movs	r2, #0
 80161d8:	9207      	str	r2, [sp, #28]
 80161da:	2200      	movs	r2, #0
 80161dc:	9206      	str	r2, [sp, #24]
 80161de:	2200      	movs	r2, #0
 80161e0:	9205      	str	r2, [sp, #20]
 80161e2:	2201      	movs	r2, #1
 80161e4:	9204      	str	r2, [sp, #16]
 80161e6:	2200      	movs	r2, #0
 80161e8:	9203      	str	r2, [sp, #12]
 80161ea:	2208      	movs	r2, #8
 80161ec:	9202      	str	r2, [sp, #8]
 80161ee:	2201      	movs	r2, #1
 80161f0:	9201      	str	r2, [sp, #4]
 80161f2:	9300      	str	r3, [sp, #0]
 80161f4:	69bb      	ldr	r3, [r7, #24]
 80161f6:	2200      	movs	r2, #0
 80161f8:	47a0      	blx	r4
    }
    /* ST_WORKAROUND_BEGIN: Print Tx config */
    RegionCommonTxConfigPrint(RegionNvmGroup2->Channels[txConfig->Channel].Frequency, txConfig->Datarate);
 80161fa:	4b19      	ldr	r3, [pc, #100]	@ (8016260 <RegionEU868TxConfig+0x194>)
 80161fc:	681a      	ldr	r2, [r3, #0]
 80161fe:	68fb      	ldr	r3, [r7, #12]
 8016200:	781b      	ldrb	r3, [r3, #0]
 8016202:	4619      	mov	r1, r3
 8016204:	460b      	mov	r3, r1
 8016206:	005b      	lsls	r3, r3, #1
 8016208:	440b      	add	r3, r1
 801620a:	009b      	lsls	r3, r3, #2
 801620c:	4413      	add	r3, r2
 801620e:	681a      	ldr	r2, [r3, #0]
 8016210:	68fb      	ldr	r3, [r7, #12]
 8016212:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016216:	4619      	mov	r1, r3
 8016218:	4610      	mov	r0, r2
 801621a:	f7ff fa25 	bl	8015668 <RegionCommonTxConfigPrint>
    /* ST_WORKAROUND_END */

    // Update time-on-air
    *txTimeOnAir = GetTimeOnAir( txConfig->Datarate, txConfig->PktLen );
 801621e:	68fb      	ldr	r3, [r7, #12]
 8016220:	f993 2001 	ldrsb.w	r2, [r3, #1]
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	899b      	ldrh	r3, [r3, #12]
 8016228:	4619      	mov	r1, r3
 801622a:	4610      	mov	r0, r2
 801622c:	f7ff faaa 	bl	8015784 <GetTimeOnAir>
 8016230:	4602      	mov	r2, r0
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	601a      	str	r2, [r3, #0]

    // Setup maximum payload length of the radio driver
    Radio.SetMaxPayloadLength( modem, txConfig->PktLen );
 8016236:	4b0c      	ldr	r3, [pc, #48]	@ (8016268 <RegionEU868TxConfig+0x19c>)
 8016238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801623a:	68fa      	ldr	r2, [r7, #12]
 801623c:	8992      	ldrh	r2, [r2, #12]
 801623e:	b2d1      	uxtb	r1, r2
 8016240:	7ffa      	ldrb	r2, [r7, #31]
 8016242:	4610      	mov	r0, r2
 8016244:	4798      	blx	r3

    *txPower = txPowerLimited;
 8016246:	68bb      	ldr	r3, [r7, #8]
 8016248:	7f7a      	ldrb	r2, [r7, #29]
 801624a:	701a      	strb	r2, [r3, #0]
    return true;
 801624c:	2301      	movs	r3, #1
#else
    return false;
#endif /* REGION_EU868 */
}
 801624e:	4618      	mov	r0, r3
 8016250:	3724      	adds	r7, #36	@ 0x24
 8016252:	46bd      	mov	sp, r7
 8016254:	bd90      	pop	{r4, r7, pc}
 8016256:	bf00      	nop
 8016258:	0801c4c8 	.word	0x0801c4c8
 801625c:	20001968 	.word	0x20001968
 8016260:	20001964 	.word	0x20001964
 8016264:	0801c4d0 	.word	0x0801c4d0
 8016268:	0801c500 	.word	0x0801c500

0801626c <RegionEU868LinkAdrReq>:

uint8_t RegionEU868LinkAdrReq( LinkAdrReqParams_t* linkAdrReq, int8_t* drOut, int8_t* txPowOut, uint8_t* nbRepOut, uint8_t* nbBytesParsed )
{
 801626c:	b590      	push	{r4, r7, lr}
 801626e:	b093      	sub	sp, #76	@ 0x4c
 8016270:	af00      	add	r7, sp, #0
 8016272:	60f8      	str	r0, [r7, #12]
 8016274:	60b9      	str	r1, [r7, #8]
 8016276:	607a      	str	r2, [r7, #4]
 8016278:	603b      	str	r3, [r7, #0]
    uint8_t status = 0x07;
 801627a:	2307      	movs	r3, #7
 801627c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
#if defined( REGION_EU868 )
    RegionCommonLinkAdrParams_t linkAdrParams = { 0 };
 8016280:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016284:	2200      	movs	r2, #0
 8016286:	601a      	str	r2, [r3, #0]
 8016288:	809a      	strh	r2, [r3, #4]
    uint8_t nextIndex = 0;
 801628a:	2300      	movs	r3, #0
 801628c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    uint8_t bytesProcessed = 0;
 8016290:	2300      	movs	r3, #0
 8016292:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    uint16_t chMask = 0;
 8016296:	2300      	movs	r3, #0
 8016298:	877b      	strh	r3, [r7, #58]	@ 0x3a
    GetPhyParams_t getPhy;
    PhyParam_t phyParam;
    RegionCommonLinkAdrReqVerifyParams_t linkAdrVerifyParams;

    while( bytesProcessed < linkAdrReq->PayloadSize )
 801629a:	e085      	b.n	80163a8 <RegionEU868LinkAdrReq+0x13c>
    {
        // Get ADR request parameters
        nextIndex = RegionCommonParseLinkAdrReq( &( linkAdrReq->Payload[bytesProcessed] ), &linkAdrParams );
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	685a      	ldr	r2, [r3, #4]
 80162a0:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80162a4:	4413      	add	r3, r2
 80162a6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80162aa:	4611      	mov	r1, r2
 80162ac:	4618      	mov	r0, r3
 80162ae:	f7fe fe2f 	bl	8014f10 <RegionCommonParseLinkAdrReq>
 80162b2:	4603      	mov	r3, r0
 80162b4:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44

        if( nextIndex == 0 )
 80162b8:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80162bc:	2b00      	cmp	r3, #0
 80162be:	d07b      	beq.n	80163b8 <RegionEU868LinkAdrReq+0x14c>
            break; // break loop, since no more request has been found

        // Update bytes processed
        bytesProcessed += nextIndex;
 80162c0:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80162c4:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80162c8:	4413      	add	r3, r2
 80162ca:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

        // Revert status, as we only check the last ADR request for the channel mask KO
        status = 0x07;
 80162ce:	2307      	movs	r3, #7
 80162d0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

        // Setup temporary channels mask
        chMask = linkAdrParams.ChMask;
 80162d4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80162d8:	877b      	strh	r3, [r7, #58]	@ 0x3a

        // Verify channels mask
        if( ( linkAdrParams.ChMaskCtrl == 0 ) && ( chMask == 0 ) )
 80162da:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80162de:	2b00      	cmp	r3, #0
 80162e0:	d109      	bne.n	80162f6 <RegionEU868LinkAdrReq+0x8a>
 80162e2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d106      	bne.n	80162f6 <RegionEU868LinkAdrReq+0x8a>
        {
            status &= 0xFE; // Channel mask KO
 80162e8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80162ec:	f023 0301 	bic.w	r3, r3, #1
 80162f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80162f4:	e058      	b.n	80163a8 <RegionEU868LinkAdrReq+0x13c>
        }
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 80162f6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d003      	beq.n	8016306 <RegionEU868LinkAdrReq+0x9a>
 80162fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016302:	2b05      	cmp	r3, #5
 8016304:	d903      	bls.n	801630e <RegionEU868LinkAdrReq+0xa2>
                ( linkAdrParams.ChMaskCtrl >= 7 ) )
 8016306:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
        else if( ( ( linkAdrParams.ChMaskCtrl >= 1 ) && ( linkAdrParams.ChMaskCtrl <= 5 )) ||
 801630a:	2b06      	cmp	r3, #6
 801630c:	d906      	bls.n	801631c <RegionEU868LinkAdrReq+0xb0>
        {
            // RFU
            status &= 0xFE; // Channel mask KO
 801630e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016312:	f023 0301 	bic.w	r3, r3, #1
 8016316:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 801631a:	e045      	b.n	80163a8 <RegionEU868LinkAdrReq+0x13c>
        }
        else
        {
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 801631c:	2300      	movs	r3, #0
 801631e:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 8016322:	e03d      	b.n	80163a0 <RegionEU868LinkAdrReq+0x134>
            {
                if( linkAdrParams.ChMaskCtrl == 6 )
 8016324:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8016328:	2b06      	cmp	r3, #6
 801632a:	d118      	bne.n	801635e <RegionEU868LinkAdrReq+0xf2>
                {
                    if( RegionNvmGroup2->Channels[i].Frequency != 0 )
 801632c:	4b5f      	ldr	r3, [pc, #380]	@ (80164ac <RegionEU868LinkAdrReq+0x240>)
 801632e:	6819      	ldr	r1, [r3, #0]
 8016330:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 8016334:	4613      	mov	r3, r2
 8016336:	005b      	lsls	r3, r3, #1
 8016338:	4413      	add	r3, r2
 801633a:	009b      	lsls	r3, r3, #2
 801633c:	440b      	add	r3, r1
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	2b00      	cmp	r3, #0
 8016342:	d028      	beq.n	8016396 <RegionEU868LinkAdrReq+0x12a>
                    {
                        chMask |= 1 << i;
 8016344:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016348:	2201      	movs	r2, #1
 801634a:	fa02 f303 	lsl.w	r3, r2, r3
 801634e:	b21a      	sxth	r2, r3
 8016350:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016352:	b21b      	sxth	r3, r3
 8016354:	4313      	orrs	r3, r2
 8016356:	b21b      	sxth	r3, r3
 8016358:	b29b      	uxth	r3, r3
 801635a:	877b      	strh	r3, [r7, #58]	@ 0x3a
 801635c:	e01b      	b.n	8016396 <RegionEU868LinkAdrReq+0x12a>
                    }
                }
                else
                {
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 801635e:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8016360:	461a      	mov	r2, r3
 8016362:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8016366:	fa42 f303 	asr.w	r3, r2, r3
 801636a:	f003 0301 	and.w	r3, r3, #1
 801636e:	2b00      	cmp	r3, #0
 8016370:	d011      	beq.n	8016396 <RegionEU868LinkAdrReq+0x12a>
                        ( RegionNvmGroup2->Channels[i].Frequency == 0 ) )
 8016372:	4b4e      	ldr	r3, [pc, #312]	@ (80164ac <RegionEU868LinkAdrReq+0x240>)
 8016374:	6819      	ldr	r1, [r3, #0]
 8016376:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 801637a:	4613      	mov	r3, r2
 801637c:	005b      	lsls	r3, r3, #1
 801637e:	4413      	add	r3, r2
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	440b      	add	r3, r1
 8016384:	681b      	ldr	r3, [r3, #0]
                    if( ( ( chMask & ( 1 << i ) ) != 0 ) &&
 8016386:	2b00      	cmp	r3, #0
 8016388:	d105      	bne.n	8016396 <RegionEU868LinkAdrReq+0x12a>
                    {// Trying to enable an undefined channel
                        status &= 0xFE; // Channel mask KO
 801638a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801638e:	f023 0301 	bic.w	r3, r3, #1
 8016392:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
            for( uint8_t i = 0; i < EU868_MAX_NB_CHANNELS; i++ )
 8016396:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 801639a:	3301      	adds	r3, #1
 801639c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
 80163a0:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80163a4:	2b0f      	cmp	r3, #15
 80163a6:	d9bd      	bls.n	8016324 <RegionEU868LinkAdrReq+0xb8>
    while( bytesProcessed < linkAdrReq->PayloadSize )
 80163a8:	68fb      	ldr	r3, [r7, #12]
 80163aa:	7a1b      	ldrb	r3, [r3, #8]
 80163ac:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80163b0:	429a      	cmp	r2, r3
 80163b2:	f4ff af73 	bcc.w	801629c <RegionEU868LinkAdrReq+0x30>
 80163b6:	e000      	b.n	80163ba <RegionEU868LinkAdrReq+0x14e>
            break; // break loop, since no more request has been found
 80163b8:	bf00      	nop
            }
        }
    }

    // Get the minimum possible datarate
    getPhy.Attribute = PHY_MIN_TX_DR;
 80163ba:	2302      	movs	r3, #2
 80163bc:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    getPhy.UplinkDwellTime = linkAdrReq->UplinkDwellTime;
 80163c0:	68fb      	ldr	r3, [r7, #12]
 80163c2:	7a5b      	ldrb	r3, [r3, #9]
 80163c4:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    phyParam = RegionEU868GetPhyParam( &getPhy );
 80163c8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80163cc:	4618      	mov	r0, r3
 80163ce:	f7ff fa29 	bl	8015824 <RegionEU868GetPhyParam>
 80163d2:	4603      	mov	r3, r0
 80163d4:	633b      	str	r3, [r7, #48]	@ 0x30

    linkAdrVerifyParams.Status = status;
 80163d6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80163da:	753b      	strb	r3, [r7, #20]
    linkAdrVerifyParams.AdrEnabled = linkAdrReq->AdrEnabled;
 80163dc:	68fb      	ldr	r3, [r7, #12]
 80163de:	7a9b      	ldrb	r3, [r3, #10]
 80163e0:	757b      	strb	r3, [r7, #21]
    linkAdrVerifyParams.Datarate = linkAdrParams.Datarate;
 80163e2:	f997 303d 	ldrsb.w	r3, [r7, #61]	@ 0x3d
 80163e6:	75bb      	strb	r3, [r7, #22]
    linkAdrVerifyParams.TxPower = linkAdrParams.TxPower;
 80163e8:	f997 303e 	ldrsb.w	r3, [r7, #62]	@ 0x3e
 80163ec:	75fb      	strb	r3, [r7, #23]
    linkAdrVerifyParams.NbRep = linkAdrParams.NbRep;
 80163ee:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 80163f2:	763b      	strb	r3, [r7, #24]
    linkAdrVerifyParams.CurrentDatarate = linkAdrReq->CurrentDatarate;
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	f993 300b 	ldrsb.w	r3, [r3, #11]
 80163fa:	767b      	strb	r3, [r7, #25]
    linkAdrVerifyParams.CurrentTxPower = linkAdrReq->CurrentTxPower;
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	f993 300c 	ldrsb.w	r3, [r3, #12]
 8016402:	76bb      	strb	r3, [r7, #26]
    linkAdrVerifyParams.CurrentNbRep = linkAdrReq->CurrentNbRep;
 8016404:	68fb      	ldr	r3, [r7, #12]
 8016406:	7b5b      	ldrb	r3, [r3, #13]
 8016408:	b25b      	sxtb	r3, r3
 801640a:	76fb      	strb	r3, [r7, #27]
    linkAdrVerifyParams.NbChannels = EU868_MAX_NB_CHANNELS;
 801640c:	2310      	movs	r3, #16
 801640e:	773b      	strb	r3, [r7, #28]
    linkAdrVerifyParams.ChannelsMask = &chMask;
 8016410:	f107 033a 	add.w	r3, r7, #58	@ 0x3a
 8016414:	623b      	str	r3, [r7, #32]
    linkAdrVerifyParams.MinDatarate = ( int8_t )phyParam.Value;
 8016416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016418:	b25b      	sxtb	r3, r3
 801641a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    linkAdrVerifyParams.MaxDatarate = EU868_TX_MAX_DATARATE;
 801641e:	2307      	movs	r3, #7
 8016420:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    linkAdrVerifyParams.Channels = RegionNvmGroup2->Channels;
 8016424:	4b21      	ldr	r3, [pc, #132]	@ (80164ac <RegionEU868LinkAdrReq+0x240>)
 8016426:	681b      	ldr	r3, [r3, #0]
 8016428:	62bb      	str	r3, [r7, #40]	@ 0x28
    linkAdrVerifyParams.MinTxPower = EU868_MIN_TX_POWER;
 801642a:	2307      	movs	r3, #7
 801642c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    linkAdrVerifyParams.MaxTxPower = EU868_MAX_TX_POWER;
 8016430:	2300      	movs	r3, #0
 8016432:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    linkAdrVerifyParams.Version = linkAdrReq->Version;
 8016436:	68fb      	ldr	r3, [r7, #12]
 8016438:	681b      	ldr	r3, [r3, #0]
 801643a:	613b      	str	r3, [r7, #16]

    // Verify the parameters and update, if necessary
    status = RegionCommonLinkAdrReqVerifyParams( &linkAdrVerifyParams, &linkAdrParams.Datarate, &linkAdrParams.TxPower, &linkAdrParams.NbRep );
 801643c:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8016440:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8016444:	1c9a      	adds	r2, r3, #2
 8016446:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801644a:	1c59      	adds	r1, r3, #1
 801644c:	f107 0010 	add.w	r0, r7, #16
 8016450:	4623      	mov	r3, r4
 8016452:	f7fe fdae 	bl	8014fb2 <RegionCommonLinkAdrReqVerifyParams>
 8016456:	4603      	mov	r3, r0
 8016458:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

    // Update channelsMask if everything is correct
    if( status == 0x07 )
 801645c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016460:	2b07      	cmp	r3, #7
 8016462:	d10d      	bne.n	8016480 <RegionEU868LinkAdrReq+0x214>
    {
        // Set the channels mask to a default value
        memset1( ( uint8_t* ) RegionNvmGroup2->ChannelsMask, 0, sizeof( RegionNvmGroup2->ChannelsMask ) );
 8016464:	4b11      	ldr	r3, [pc, #68]	@ (80164ac <RegionEU868LinkAdrReq+0x240>)
 8016466:	681b      	ldr	r3, [r3, #0]
 8016468:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 801646c:	220c      	movs	r2, #12
 801646e:	2100      	movs	r1, #0
 8016470:	4618      	mov	r0, r3
 8016472:	f000 fb2f 	bl	8016ad4 <memset1>
        // Update the channels mask
        RegionNvmGroup2->ChannelsMask[0] = chMask;
 8016476:	4b0d      	ldr	r3, [pc, #52]	@ (80164ac <RegionEU868LinkAdrReq+0x240>)
 8016478:	681b      	ldr	r3, [r3, #0]
 801647a:	8f7a      	ldrh	r2, [r7, #58]	@ 0x3a
 801647c:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Update status variables
    *drOut = linkAdrParams.Datarate;
 8016480:	f997 203d 	ldrsb.w	r2, [r7, #61]	@ 0x3d
 8016484:	68bb      	ldr	r3, [r7, #8]
 8016486:	701a      	strb	r2, [r3, #0]
    *txPowOut = linkAdrParams.TxPower;
 8016488:	f997 203e 	ldrsb.w	r2, [r7, #62]	@ 0x3e
 801648c:	687b      	ldr	r3, [r7, #4]
 801648e:	701a      	strb	r2, [r3, #0]
    *nbRepOut = linkAdrParams.NbRep;
 8016490:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 8016494:	683b      	ldr	r3, [r7, #0]
 8016496:	701a      	strb	r2, [r3, #0]
    *nbBytesParsed = bytesProcessed;
 8016498:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801649a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 801649e:	701a      	strb	r2, [r3, #0]

#endif /* REGION_EU868 */
    return status;
 80164a0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80164a4:	4618      	mov	r0, r3
 80164a6:	374c      	adds	r7, #76	@ 0x4c
 80164a8:	46bd      	mov	sp, r7
 80164aa:	bd90      	pop	{r4, r7, pc}
 80164ac:	20001964 	.word	0x20001964

080164b0 <RegionEU868RxParamSetupReq>:

uint8_t RegionEU868RxParamSetupReq( RxParamSetupReqParams_t* rxParamSetupReq )
{
 80164b0:	b580      	push	{r7, lr}
 80164b2:	b084      	sub	sp, #16
 80164b4:	af00      	add	r7, sp, #0
 80164b6:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x07;
 80164b8:	2307      	movs	r3, #7
 80164ba:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 80164bc:	2300      	movs	r3, #0
 80164be:	73bb      	strb	r3, [r7, #14]

    // Verify radio frequency
    if( VerifyRfFreq( rxParamSetupReq->Frequency, &band ) == false )
 80164c0:	687b      	ldr	r3, [r7, #4]
 80164c2:	685b      	ldr	r3, [r3, #4]
 80164c4:	f107 020e 	add.w	r2, r7, #14
 80164c8:	4611      	mov	r1, r2
 80164ca:	4618      	mov	r0, r3
 80164cc:	f7ff f8e4 	bl	8015698 <VerifyRfFreq>
 80164d0:	4603      	mov	r3, r0
 80164d2:	f083 0301 	eor.w	r3, r3, #1
 80164d6:	b2db      	uxtb	r3, r3
 80164d8:	2b00      	cmp	r3, #0
 80164da:	d003      	beq.n	80164e4 <RegionEU868RxParamSetupReq+0x34>
    {
        status &= 0xFE; // Channel frequency KO
 80164dc:	7bfb      	ldrb	r3, [r7, #15]
 80164de:	f023 0301 	bic.w	r3, r3, #1
 80164e2:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate
    if( RegionCommonValueInRange( rxParamSetupReq->Datarate, EU868_RX_MIN_DATARATE, EU868_RX_MAX_DATARATE ) == false )
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	f993 3000 	ldrsb.w	r3, [r3]
 80164ea:	2207      	movs	r2, #7
 80164ec:	2100      	movs	r1, #0
 80164ee:	4618      	mov	r0, r3
 80164f0:	f7fe fb4d 	bl	8014b8e <RegionCommonValueInRange>
 80164f4:	4603      	mov	r3, r0
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d103      	bne.n	8016502 <RegionEU868RxParamSetupReq+0x52>
    {
        status &= 0xFD; // Datarate KO
 80164fa:	7bfb      	ldrb	r3, [r7, #15]
 80164fc:	f023 0302 	bic.w	r3, r3, #2
 8016500:	73fb      	strb	r3, [r7, #15]
    }

    // Verify datarate offset
    if( RegionCommonValueInRange( rxParamSetupReq->DrOffset, EU868_MIN_RX1_DR_OFFSET, EU868_MAX_RX1_DR_OFFSET ) == false )
 8016502:	687b      	ldr	r3, [r7, #4]
 8016504:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8016508:	2205      	movs	r2, #5
 801650a:	2100      	movs	r1, #0
 801650c:	4618      	mov	r0, r3
 801650e:	f7fe fb3e 	bl	8014b8e <RegionCommonValueInRange>
 8016512:	4603      	mov	r3, r0
 8016514:	2b00      	cmp	r3, #0
 8016516:	d103      	bne.n	8016520 <RegionEU868RxParamSetupReq+0x70>
    {
        status &= 0xFB; // Rx1DrOffset range KO
 8016518:	7bfb      	ldrb	r3, [r7, #15]
 801651a:	f023 0304 	bic.w	r3, r3, #4
 801651e:	73fb      	strb	r3, [r7, #15]
    }

#endif /* REGION_EU868 */
    return status;
 8016520:	7bfb      	ldrb	r3, [r7, #15]
}
 8016522:	4618      	mov	r0, r3
 8016524:	3710      	adds	r7, #16
 8016526:	46bd      	mov	sp, r7
 8016528:	bd80      	pop	{r7, pc}
	...

0801652c <RegionEU868NewChannelReq>:

int8_t RegionEU868NewChannelReq( NewChannelReqParams_t* newChannelReq )
{
 801652c:	b580      	push	{r7, lr}
 801652e:	b086      	sub	sp, #24
 8016530:	af00      	add	r7, sp, #0
 8016532:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016534:	2303      	movs	r3, #3
 8016536:	75fb      	strb	r3, [r7, #23]
    ChannelAddParams_t channelAdd;
    ChannelRemoveParams_t channelRemove;

    if( newChannelReq->NewChannel->Frequency == 0 )
 8016538:	687b      	ldr	r3, [r7, #4]
 801653a:	681b      	ldr	r3, [r3, #0]
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	2b00      	cmp	r3, #0
 8016540:	d114      	bne.n	801656c <RegionEU868NewChannelReq+0x40>
    {
        channelRemove.ChannelId = newChannelReq->ChannelId;
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016548:	b2db      	uxtb	r3, r3
 801654a:	723b      	strb	r3, [r7, #8]

        // Remove
        if( RegionEU868ChannelsRemove( &channelRemove ) == false )
 801654c:	f107 0308 	add.w	r3, r7, #8
 8016550:	4618      	mov	r0, r3
 8016552:	f000 f9f9 	bl	8016948 <RegionEU868ChannelsRemove>
 8016556:	4603      	mov	r3, r0
 8016558:	f083 0301 	eor.w	r3, r3, #1
 801655c:	b2db      	uxtb	r3, r3
 801655e:	2b00      	cmp	r3, #0
 8016560:	d03b      	beq.n	80165da <RegionEU868NewChannelReq+0xae>
        {
            status &= 0xFC;
 8016562:	7dfb      	ldrb	r3, [r7, #23]
 8016564:	f023 0303 	bic.w	r3, r3, #3
 8016568:	75fb      	strb	r3, [r7, #23]
 801656a:	e036      	b.n	80165da <RegionEU868NewChannelReq+0xae>
        }
    }
    else
    {
        channelAdd.NewChannel = newChannelReq->NewChannel;
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	60fb      	str	r3, [r7, #12]
        channelAdd.ChannelId = newChannelReq->ChannelId;
 8016572:	687b      	ldr	r3, [r7, #4]
 8016574:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8016578:	b2db      	uxtb	r3, r3
 801657a:	743b      	strb	r3, [r7, #16]

        switch( RegionEU868ChannelAdd( &channelAdd ) )
 801657c:	f107 030c 	add.w	r3, r7, #12
 8016580:	4618      	mov	r0, r3
 8016582:	f000 f93f 	bl	8016804 <RegionEU868ChannelAdd>
 8016586:	4603      	mov	r3, r0
 8016588:	2b06      	cmp	r3, #6
 801658a:	d820      	bhi.n	80165ce <RegionEU868NewChannelReq+0xa2>
 801658c:	a201      	add	r2, pc, #4	@ (adr r2, 8016594 <RegionEU868NewChannelReq+0x68>)
 801658e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016592:	bf00      	nop
 8016594:	080165d9 	.word	0x080165d9
 8016598:	080165cf 	.word	0x080165cf
 801659c:	080165cf 	.word	0x080165cf
 80165a0:	080165cf 	.word	0x080165cf
 80165a4:	080165b1 	.word	0x080165b1
 80165a8:	080165bb 	.word	0x080165bb
 80165ac:	080165c5 	.word	0x080165c5
            {
                break;
            }
            case LORAMAC_STATUS_FREQUENCY_INVALID:
            {
                status &= 0xFE;
 80165b0:	7dfb      	ldrb	r3, [r7, #23]
 80165b2:	f023 0301 	bic.w	r3, r3, #1
 80165b6:	75fb      	strb	r3, [r7, #23]
                break;
 80165b8:	e00f      	b.n	80165da <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_DATARATE_INVALID:
            {
                status &= 0xFD;
 80165ba:	7dfb      	ldrb	r3, [r7, #23]
 80165bc:	f023 0302 	bic.w	r3, r3, #2
 80165c0:	75fb      	strb	r3, [r7, #23]
                break;
 80165c2:	e00a      	b.n	80165da <RegionEU868NewChannelReq+0xae>
            }
            case LORAMAC_STATUS_FREQ_AND_DR_INVALID:
            {
                status &= 0xFC;
 80165c4:	7dfb      	ldrb	r3, [r7, #23]
 80165c6:	f023 0303 	bic.w	r3, r3, #3
 80165ca:	75fb      	strb	r3, [r7, #23]
                break;
 80165cc:	e005      	b.n	80165da <RegionEU868NewChannelReq+0xae>
            }
            default:
            {
                status &= 0xFC;
 80165ce:	7dfb      	ldrb	r3, [r7, #23]
 80165d0:	f023 0303 	bic.w	r3, r3, #3
 80165d4:	75fb      	strb	r3, [r7, #23]
                break;
 80165d6:	e000      	b.n	80165da <RegionEU868NewChannelReq+0xae>
                break;
 80165d8:	bf00      	nop
            }
        }
    }

    return status;
 80165da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80165de:	4618      	mov	r0, r3
 80165e0:	3718      	adds	r7, #24
 80165e2:	46bd      	mov	sp, r7
 80165e4:	bd80      	pop	{r7, pc}
 80165e6:	bf00      	nop

080165e8 <RegionEU868TxParamSetupReq>:

int8_t RegionEU868TxParamSetupReq( TxParamSetupReqParams_t* txParamSetupReq )
{
 80165e8:	b480      	push	{r7}
 80165ea:	b083      	sub	sp, #12
 80165ec:	af00      	add	r7, sp, #0
 80165ee:	6078      	str	r0, [r7, #4]
    // Do not accept the request
    return -1;
 80165f0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80165f4:	4618      	mov	r0, r3
 80165f6:	370c      	adds	r7, #12
 80165f8:	46bd      	mov	sp, r7
 80165fa:	bc80      	pop	{r7}
 80165fc:	4770      	bx	lr
	...

08016600 <RegionEU868DlChannelReq>:

int8_t RegionEU868DlChannelReq( DlChannelReqParams_t* dlChannelReq )
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b084      	sub	sp, #16
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
    uint8_t status = 0x03;
 8016608:	2303      	movs	r3, #3
 801660a:	73fb      	strb	r3, [r7, #15]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801660c:	2300      	movs	r3, #0
 801660e:	73bb      	strb	r3, [r7, #14]

    // Verify if the frequency is supported
    if( VerifyRfFreq( dlChannelReq->Rx1Frequency, &band ) == false )
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	685b      	ldr	r3, [r3, #4]
 8016614:	f107 020e 	add.w	r2, r7, #14
 8016618:	4611      	mov	r1, r2
 801661a:	4618      	mov	r0, r3
 801661c:	f7ff f83c 	bl	8015698 <VerifyRfFreq>
 8016620:	4603      	mov	r3, r0
 8016622:	f083 0301 	eor.w	r3, r3, #1
 8016626:	b2db      	uxtb	r3, r3
 8016628:	2b00      	cmp	r3, #0
 801662a:	d003      	beq.n	8016634 <RegionEU868DlChannelReq+0x34>
    {
        status &= 0xFE;
 801662c:	7bfb      	ldrb	r3, [r7, #15]
 801662e:	f023 0301 	bic.w	r3, r3, #1
 8016632:	73fb      	strb	r3, [r7, #15]
    }

    // Verify if an uplink frequency exists
    if( RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Frequency == 0 )
 8016634:	4b13      	ldr	r3, [pc, #76]	@ (8016684 <RegionEU868DlChannelReq+0x84>)
 8016636:	681a      	ldr	r2, [r3, #0]
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	781b      	ldrb	r3, [r3, #0]
 801663c:	4619      	mov	r1, r3
 801663e:	460b      	mov	r3, r1
 8016640:	005b      	lsls	r3, r3, #1
 8016642:	440b      	add	r3, r1
 8016644:	009b      	lsls	r3, r3, #2
 8016646:	4413      	add	r3, r2
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	2b00      	cmp	r3, #0
 801664c:	d103      	bne.n	8016656 <RegionEU868DlChannelReq+0x56>
    {
        status &= 0xFD;
 801664e:	7bfb      	ldrb	r3, [r7, #15]
 8016650:	f023 0302 	bic.w	r3, r3, #2
 8016654:	73fb      	strb	r3, [r7, #15]
    }

    // Apply Rx1 frequency, if the status is OK
    if( status == 0x03 )
 8016656:	7bfb      	ldrb	r3, [r7, #15]
 8016658:	2b03      	cmp	r3, #3
 801665a:	d10d      	bne.n	8016678 <RegionEU868DlChannelReq+0x78>
    {
        RegionNvmGroup2->Channels[dlChannelReq->ChannelId].Rx1Frequency = dlChannelReq->Rx1Frequency;
 801665c:	4b09      	ldr	r3, [pc, #36]	@ (8016684 <RegionEU868DlChannelReq+0x84>)
 801665e:	6819      	ldr	r1, [r3, #0]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	781b      	ldrb	r3, [r3, #0]
 8016664:	4618      	mov	r0, r3
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	685a      	ldr	r2, [r3, #4]
 801666a:	4603      	mov	r3, r0
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	4403      	add	r3, r0
 8016670:	009b      	lsls	r3, r3, #2
 8016672:	440b      	add	r3, r1
 8016674:	3304      	adds	r3, #4
 8016676:	601a      	str	r2, [r3, #0]
    }

#endif /* REGION_EU868 */
    return status;
 8016678:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801667c:	4618      	mov	r0, r3
 801667e:	3710      	adds	r7, #16
 8016680:	46bd      	mov	sp, r7
 8016682:	bd80      	pop	{r7, pc}
 8016684:	20001964 	.word	0x20001964

08016688 <RegionEU868AlternateDr>:

int8_t RegionEU868AlternateDr( int8_t currentDr, AlternateDrType_t type )
{
 8016688:	b480      	push	{r7}
 801668a:	b083      	sub	sp, #12
 801668c:	af00      	add	r7, sp, #0
 801668e:	4603      	mov	r3, r0
 8016690:	460a      	mov	r2, r1
 8016692:	71fb      	strb	r3, [r7, #7]
 8016694:	4613      	mov	r3, r2
 8016696:	71bb      	strb	r3, [r7, #6]
#if defined( REGION_EU868 )
    return currentDr;
 8016698:	f997 3007 	ldrsb.w	r3, [r7, #7]
#else
    return -1;
#endif /* REGION_EU868 */
}
 801669c:	4618      	mov	r0, r3
 801669e:	370c      	adds	r7, #12
 80166a0:	46bd      	mov	sp, r7
 80166a2:	bc80      	pop	{r7}
 80166a4:	4770      	bx	lr
	...

080166a8 <RegionEU868NextChannel>:

LoRaMacStatus_t RegionEU868NextChannel( NextChanParams_t* nextChanParams, uint8_t* channel, TimerTime_t* time, TimerTime_t* aggregatedTimeOff )
{
 80166a8:	b580      	push	{r7, lr}
 80166aa:	b09a      	sub	sp, #104	@ 0x68
 80166ac:	af02      	add	r7, sp, #8
 80166ae:	60f8      	str	r0, [r7, #12]
 80166b0:	60b9      	str	r1, [r7, #8]
 80166b2:	607a      	str	r2, [r7, #4]
 80166b4:	603b      	str	r3, [r7, #0]
#if defined( REGION_EU868 )
    uint8_t nbEnabledChannels = 0;
 80166b6:	2300      	movs	r3, #0
 80166b8:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
    uint8_t nbRestrictedChannels = 0;
 80166bc:	2300      	movs	r3, #0
 80166be:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
    uint8_t enabledChannels[EU868_MAX_NB_CHANNELS] = { 0 };
 80166c2:	2300      	movs	r3, #0
 80166c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80166c6:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80166ca:	2200      	movs	r2, #0
 80166cc:	601a      	str	r2, [r3, #0]
 80166ce:	605a      	str	r2, [r3, #4]
 80166d0:	609a      	str	r2, [r3, #8]
    RegionCommonIdentifyChannelsParam_t identifyChannelsParam;
    RegionCommonCountNbOfEnabledChannelsParams_t countChannelsParams;
    LoRaMacStatus_t status = LORAMAC_STATUS_NO_CHANNEL_FOUND;
 80166d2:	230c      	movs	r3, #12
 80166d4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    uint16_t joinChannels = EU868_JOIN_CHANNELS;
 80166d8:	2307      	movs	r3, #7
 80166da:	827b      	strh	r3, [r7, #18]

    if( RegionCommonCountChannels( RegionNvmGroup2->ChannelsMask, 0, 1 ) == 0 )
 80166dc:	4b47      	ldr	r3, [pc, #284]	@ (80167fc <RegionEU868NextChannel+0x154>)
 80166de:	681b      	ldr	r3, [r3, #0]
 80166e0:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 80166e4:	2201      	movs	r2, #1
 80166e6:	2100      	movs	r1, #0
 80166e8:	4618      	mov	r0, r3
 80166ea:	f7fe faa1 	bl	8014c30 <RegionCommonCountChannels>
 80166ee:	4603      	mov	r3, r0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d10a      	bne.n	801670a <RegionEU868NextChannel+0x62>
    { // Reactivate default channels
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80166f4:	4b41      	ldr	r3, [pc, #260]	@ (80167fc <RegionEU868NextChannel+0x154>)
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80166fc:	4b3f      	ldr	r3, [pc, #252]	@ (80167fc <RegionEU868NextChannel+0x154>)
 80166fe:	681b      	ldr	r3, [r3, #0]
 8016700:	f042 0207 	orr.w	r2, r2, #7
 8016704:	b292      	uxth	r2, r2
 8016706:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }

    // Search how many channels are enabled
    countChannelsParams.Joined = nextChanParams->Joined;
 801670a:	68fb      	ldr	r3, [r7, #12]
 801670c:	7a5b      	ldrb	r3, [r3, #9]
 801670e:	753b      	strb	r3, [r7, #20]
    countChannelsParams.Datarate = nextChanParams->Datarate;
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8016716:	b2db      	uxtb	r3, r3
 8016718:	757b      	strb	r3, [r7, #21]
    countChannelsParams.ChannelsMask = RegionNvmGroup2->ChannelsMask;
 801671a:	4b38      	ldr	r3, [pc, #224]	@ (80167fc <RegionEU868NextChannel+0x154>)
 801671c:	681b      	ldr	r3, [r3, #0]
 801671e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016722:	61bb      	str	r3, [r7, #24]
    countChannelsParams.Channels = RegionNvmGroup2->Channels;
 8016724:	4b35      	ldr	r3, [pc, #212]	@ (80167fc <RegionEU868NextChannel+0x154>)
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	61fb      	str	r3, [r7, #28]
#if (defined( REGION_VERSION ) && ( REGION_VERSION == 0x01010003 ))
    countChannelsParams.Bands = RegionNvmGroup1->Bands;
#elif (defined( REGION_VERSION ) && ( REGION_VERSION == 0x02010001 ))
    countChannelsParams.Bands = RegionBands;
 801672a:	4b35      	ldr	r3, [pc, #212]	@ (8016800 <RegionEU868NextChannel+0x158>)
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	623b      	str	r3, [r7, #32]
#endif /* REGION_VERSION */
    countChannelsParams.MaxNbChannels = EU868_MAX_NB_CHANNELS;
 8016730:	2310      	movs	r3, #16
 8016732:	84bb      	strh	r3, [r7, #36]	@ 0x24
    countChannelsParams.JoinChannels = &joinChannels;
 8016734:	f107 0312 	add.w	r3, r7, #18
 8016738:	62bb      	str	r3, [r7, #40]	@ 0x28

    identifyChannelsParam.AggrTimeOff = nextChanParams->AggrTimeOff;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	681b      	ldr	r3, [r3, #0]
 801673e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    identifyChannelsParam.LastAggrTx = nextChanParams->LastAggrTx;
 8016740:	68fb      	ldr	r3, [r7, #12]
 8016742:	685b      	ldr	r3, [r3, #4]
 8016744:	633b      	str	r3, [r7, #48]	@ 0x30
    identifyChannelsParam.DutyCycleEnabled = nextChanParams->DutyCycleEnabled;
 8016746:	68fb      	ldr	r3, [r7, #12]
 8016748:	7a9b      	ldrb	r3, [r3, #10]
 801674a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    identifyChannelsParam.MaxBands = EU868_MAX_NB_BANDS;
 801674e:	2306      	movs	r3, #6
 8016750:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

    identifyChannelsParam.ElapsedTimeSinceStartUp = nextChanParams->ElapsedTimeSinceStartUp;
 8016754:	68fa      	ldr	r2, [r7, #12]
 8016756:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 801675a:	320c      	adds	r2, #12
 801675c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016760:	e883 0003 	stmia.w	r3, {r0, r1}
    identifyChannelsParam.LastTxIsJoinRequest = nextChanParams->LastTxIsJoinRequest;
 8016764:	68fb      	ldr	r3, [r7, #12]
 8016766:	7d1b      	ldrb	r3, [r3, #20]
 8016768:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
    identifyChannelsParam.ExpectedTimeOnAir = GetTimeOnAir( nextChanParams->Datarate, nextChanParams->PktLen );
 801676c:	68fb      	ldr	r3, [r7, #12]
 801676e:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	8adb      	ldrh	r3, [r3, #22]
 8016776:	4619      	mov	r1, r3
 8016778:	4610      	mov	r0, r2
 801677a:	f7ff f803 	bl	8015784 <GetTimeOnAir>
 801677e:	4603      	mov	r3, r0
 8016780:	647b      	str	r3, [r7, #68]	@ 0x44

    identifyChannelsParam.CountNbOfEnabledChannelsParam = &countChannelsParams;
 8016782:	f107 0314 	add.w	r3, r7, #20
 8016786:	64bb      	str	r3, [r7, #72]	@ 0x48

    status = RegionCommonIdentifyChannels( &identifyChannelsParam, aggregatedTimeOff, enabledChannels,
 8016788:	f107 015e 	add.w	r1, r7, #94	@ 0x5e
 801678c:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8016790:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	9301      	str	r3, [sp, #4]
 8016798:	f107 035d 	add.w	r3, r7, #93	@ 0x5d
 801679c:	9300      	str	r3, [sp, #0]
 801679e:	460b      	mov	r3, r1
 80167a0:	6839      	ldr	r1, [r7, #0]
 80167a2:	f7fe fe5c 	bl	801545e <RegionCommonIdentifyChannels>
 80167a6:	4603      	mov	r3, r0
 80167a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
                                           &nbEnabledChannels, &nbRestrictedChannels, time );

    if( status == LORAMAC_STATUS_OK )
 80167ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80167b0:	2b00      	cmp	r3, #0
 80167b2:	d10e      	bne.n	80167d2 <RegionEU868NextChannel+0x12a>
    {
        // We found a valid channel
        *channel = enabledChannels[randr( 0, nbEnabledChannels - 1 )];
 80167b4:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80167b8:	3b01      	subs	r3, #1
 80167ba:	4619      	mov	r1, r3
 80167bc:	2000      	movs	r0, #0
 80167be:	f000 f937 	bl	8016a30 <randr>
 80167c2:	4603      	mov	r3, r0
 80167c4:	3360      	adds	r3, #96	@ 0x60
 80167c6:	443b      	add	r3, r7
 80167c8:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80167cc:	68bb      	ldr	r3, [r7, #8]
 80167ce:	701a      	strb	r2, [r3, #0]
 80167d0:	e00e      	b.n	80167f0 <RegionEU868NextChannel+0x148>
    }
    else if( status == LORAMAC_STATUS_NO_CHANNEL_FOUND )
 80167d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80167d6:	2b0c      	cmp	r3, #12
 80167d8:	d10a      	bne.n	80167f0 <RegionEU868NextChannel+0x148>
    {
        // Datarate not supported by any channel, restore defaults
        RegionNvmGroup2->ChannelsMask[0] |= LC( 1 ) + LC( 2 ) + LC( 3 );
 80167da:	4b08      	ldr	r3, [pc, #32]	@ (80167fc <RegionEU868NextChannel+0x154>)
 80167dc:	681b      	ldr	r3, [r3, #0]
 80167de:	f8b3 2360 	ldrh.w	r2, [r3, #864]	@ 0x360
 80167e2:	4b06      	ldr	r3, [pc, #24]	@ (80167fc <RegionEU868NextChannel+0x154>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	f042 0207 	orr.w	r2, r2, #7
 80167ea:	b292      	uxth	r2, r2
 80167ec:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    }
    return status;
 80167f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 80167f4:	4618      	mov	r0, r3
 80167f6:	3760      	adds	r7, #96	@ 0x60
 80167f8:	46bd      	mov	sp, r7
 80167fa:	bd80      	pop	{r7, pc}
 80167fc:	20001964 	.word	0x20001964
 8016800:	20001968 	.word	0x20001968

08016804 <RegionEU868ChannelAdd>:

LoRaMacStatus_t RegionEU868ChannelAdd( ChannelAddParams_t* channelAdd )
{
 8016804:	b580      	push	{r7, lr}
 8016806:	b084      	sub	sp, #16
 8016808:	af00      	add	r7, sp, #0
 801680a:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t band = 0;
 801680c:	2300      	movs	r3, #0
 801680e:	733b      	strb	r3, [r7, #12]
    bool drInvalid = false;
 8016810:	2300      	movs	r3, #0
 8016812:	73fb      	strb	r3, [r7, #15]
    bool freqInvalid = false;
 8016814:	2300      	movs	r3, #0
 8016816:	73bb      	strb	r3, [r7, #14]
    uint8_t id = channelAdd->ChannelId;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	791b      	ldrb	r3, [r3, #4]
 801681c:	737b      	strb	r3, [r7, #13]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 801681e:	7b7b      	ldrb	r3, [r7, #13]
 8016820:	2b02      	cmp	r3, #2
 8016822:	d801      	bhi.n	8016828 <RegionEU868ChannelAdd+0x24>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 8016824:	2306      	movs	r3, #6
 8016826:	e089      	b.n	801693c <RegionEU868ChannelAdd+0x138>
    }

    if( id >= EU868_MAX_NB_CHANNELS )
 8016828:	7b7b      	ldrb	r3, [r7, #13]
 801682a:	2b0f      	cmp	r3, #15
 801682c:	d901      	bls.n	8016832 <RegionEU868ChannelAdd+0x2e>
    {
        return LORAMAC_STATUS_PARAMETER_INVALID;
 801682e:	2303      	movs	r3, #3
 8016830:	e084      	b.n	801693c <RegionEU868ChannelAdd+0x138>
    }

    // Validate the datarate range
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Min, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	7a1b      	ldrb	r3, [r3, #8]
 8016838:	f343 0303 	sbfx	r3, r3, #0, #4
 801683c:	b25b      	sxtb	r3, r3
 801683e:	2207      	movs	r2, #7
 8016840:	2100      	movs	r1, #0
 8016842:	4618      	mov	r0, r3
 8016844:	f7fe f9a3 	bl	8014b8e <RegionCommonValueInRange>
 8016848:	4603      	mov	r3, r0
 801684a:	2b00      	cmp	r3, #0
 801684c:	d101      	bne.n	8016852 <RegionEU868ChannelAdd+0x4e>
    {
        drInvalid = true;
 801684e:	2301      	movs	r3, #1
 8016850:	73fb      	strb	r3, [r7, #15]
    }
    if( RegionCommonValueInRange( channelAdd->NewChannel->DrRange.Fields.Max, EU868_TX_MIN_DATARATE, EU868_TX_MAX_DATARATE ) == false )
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	7a1b      	ldrb	r3, [r3, #8]
 8016858:	f343 1303 	sbfx	r3, r3, #4, #4
 801685c:	b25b      	sxtb	r3, r3
 801685e:	2207      	movs	r2, #7
 8016860:	2100      	movs	r1, #0
 8016862:	4618      	mov	r0, r3
 8016864:	f7fe f993 	bl	8014b8e <RegionCommonValueInRange>
 8016868:	4603      	mov	r3, r0
 801686a:	2b00      	cmp	r3, #0
 801686c:	d101      	bne.n	8016872 <RegionEU868ChannelAdd+0x6e>
    {
        drInvalid = true;
 801686e:	2301      	movs	r3, #1
 8016870:	73fb      	strb	r3, [r7, #15]
    }
    if( channelAdd->NewChannel->DrRange.Fields.Min > channelAdd->NewChannel->DrRange.Fields.Max )
 8016872:	687b      	ldr	r3, [r7, #4]
 8016874:	681b      	ldr	r3, [r3, #0]
 8016876:	7a1b      	ldrb	r3, [r3, #8]
 8016878:	f343 0303 	sbfx	r3, r3, #0, #4
 801687c:	b25a      	sxtb	r2, r3
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	681b      	ldr	r3, [r3, #0]
 8016882:	7a1b      	ldrb	r3, [r3, #8]
 8016884:	f343 1303 	sbfx	r3, r3, #4, #4
 8016888:	b25b      	sxtb	r3, r3
 801688a:	429a      	cmp	r2, r3
 801688c:	dd01      	ble.n	8016892 <RegionEU868ChannelAdd+0x8e>
    {
        drInvalid = true;
 801688e:	2301      	movs	r3, #1
 8016890:	73fb      	strb	r3, [r7, #15]
    }

    // Check frequency
    if( freqInvalid == false )
 8016892:	7bbb      	ldrb	r3, [r7, #14]
 8016894:	f083 0301 	eor.w	r3, r3, #1
 8016898:	b2db      	uxtb	r3, r3
 801689a:	2b00      	cmp	r3, #0
 801689c:	d010      	beq.n	80168c0 <RegionEU868ChannelAdd+0xbc>
    {
        if( VerifyRfFreq( channelAdd->NewChannel->Frequency, &band ) == false )
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	681b      	ldr	r3, [r3, #0]
 80168a2:	681b      	ldr	r3, [r3, #0]
 80168a4:	f107 020c 	add.w	r2, r7, #12
 80168a8:	4611      	mov	r1, r2
 80168aa:	4618      	mov	r0, r3
 80168ac:	f7fe fef4 	bl	8015698 <VerifyRfFreq>
 80168b0:	4603      	mov	r3, r0
 80168b2:	f083 0301 	eor.w	r3, r3, #1
 80168b6:	b2db      	uxtb	r3, r3
 80168b8:	2b00      	cmp	r3, #0
 80168ba:	d001      	beq.n	80168c0 <RegionEU868ChannelAdd+0xbc>
        {
            freqInvalid = true;
 80168bc:	2301      	movs	r3, #1
 80168be:	73bb      	strb	r3, [r7, #14]
        }
    }

    // Check status
    if( ( drInvalid == true ) && ( freqInvalid == true ) )
 80168c0:	7bfb      	ldrb	r3, [r7, #15]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d004      	beq.n	80168d0 <RegionEU868ChannelAdd+0xcc>
 80168c6:	7bbb      	ldrb	r3, [r7, #14]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d001      	beq.n	80168d0 <RegionEU868ChannelAdd+0xcc>
    {
        return LORAMAC_STATUS_FREQ_AND_DR_INVALID;
 80168cc:	2306      	movs	r3, #6
 80168ce:	e035      	b.n	801693c <RegionEU868ChannelAdd+0x138>
    }
    if( drInvalid == true )
 80168d0:	7bfb      	ldrb	r3, [r7, #15]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d001      	beq.n	80168da <RegionEU868ChannelAdd+0xd6>
    {
        return LORAMAC_STATUS_DATARATE_INVALID;
 80168d6:	2305      	movs	r3, #5
 80168d8:	e030      	b.n	801693c <RegionEU868ChannelAdd+0x138>
    }
    if( freqInvalid == true )
 80168da:	7bbb      	ldrb	r3, [r7, #14]
 80168dc:	2b00      	cmp	r3, #0
 80168de:	d001      	beq.n	80168e4 <RegionEU868ChannelAdd+0xe0>
    {
        return LORAMAC_STATUS_FREQUENCY_INVALID;
 80168e0:	2304      	movs	r3, #4
 80168e2:	e02b      	b.n	801693c <RegionEU868ChannelAdd+0x138>
    }

    memcpy1( ( uint8_t* ) &(RegionNvmGroup2->Channels[id]), ( uint8_t* ) channelAdd->NewChannel, sizeof( RegionNvmGroup2->Channels[id] ) );
 80168e4:	4b17      	ldr	r3, [pc, #92]	@ (8016944 <RegionEU868ChannelAdd+0x140>)
 80168e6:	6819      	ldr	r1, [r3, #0]
 80168e8:	7b7a      	ldrb	r2, [r7, #13]
 80168ea:	4613      	mov	r3, r2
 80168ec:	005b      	lsls	r3, r3, #1
 80168ee:	4413      	add	r3, r2
 80168f0:	009b      	lsls	r3, r3, #2
 80168f2:	18c8      	adds	r0, r1, r3
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	220c      	movs	r2, #12
 80168fa:	4619      	mov	r1, r3
 80168fc:	f000 f8af 	bl	8016a5e <memcpy1>
    RegionNvmGroup2->Channels[id].Band = band;
 8016900:	4b10      	ldr	r3, [pc, #64]	@ (8016944 <RegionEU868ChannelAdd+0x140>)
 8016902:	6819      	ldr	r1, [r3, #0]
 8016904:	7b7a      	ldrb	r2, [r7, #13]
 8016906:	7b38      	ldrb	r0, [r7, #12]
 8016908:	4613      	mov	r3, r2
 801690a:	005b      	lsls	r3, r3, #1
 801690c:	4413      	add	r3, r2
 801690e:	009b      	lsls	r3, r3, #2
 8016910:	440b      	add	r3, r1
 8016912:	3309      	adds	r3, #9
 8016914:	4602      	mov	r2, r0
 8016916:	701a      	strb	r2, [r3, #0]
    RegionNvmGroup2->ChannelsMask[0] |= ( 1 << id );
 8016918:	4b0a      	ldr	r3, [pc, #40]	@ (8016944 <RegionEU868ChannelAdd+0x140>)
 801691a:	681b      	ldr	r3, [r3, #0]
 801691c:	f8b3 3360 	ldrh.w	r3, [r3, #864]	@ 0x360
 8016920:	b21a      	sxth	r2, r3
 8016922:	7b7b      	ldrb	r3, [r7, #13]
 8016924:	2101      	movs	r1, #1
 8016926:	fa01 f303 	lsl.w	r3, r1, r3
 801692a:	b21b      	sxth	r3, r3
 801692c:	4313      	orrs	r3, r2
 801692e:	b21a      	sxth	r2, r3
 8016930:	4b04      	ldr	r3, [pc, #16]	@ (8016944 <RegionEU868ChannelAdd+0x140>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	b292      	uxth	r2, r2
 8016936:	f8a3 2360 	strh.w	r2, [r3, #864]	@ 0x360
    return LORAMAC_STATUS_OK;
 801693a:	2300      	movs	r3, #0
#else
    return LORAMAC_STATUS_NO_CHANNEL_FOUND;
#endif /* REGION_EU868 */
}
 801693c:	4618      	mov	r0, r3
 801693e:	3710      	adds	r7, #16
 8016940:	46bd      	mov	sp, r7
 8016942:	bd80      	pop	{r7, pc}
 8016944:	20001964 	.word	0x20001964

08016948 <RegionEU868ChannelsRemove>:

bool RegionEU868ChannelsRemove( ChannelRemoveParams_t* channelRemove  )
{
 8016948:	b580      	push	{r7, lr}
 801694a:	b086      	sub	sp, #24
 801694c:	af00      	add	r7, sp, #0
 801694e:	6078      	str	r0, [r7, #4]
#if defined( REGION_EU868 )
    uint8_t id = channelRemove->ChannelId;
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	781b      	ldrb	r3, [r3, #0]
 8016954:	75fb      	strb	r3, [r7, #23]

    if( id < EU868_NUMB_DEFAULT_CHANNELS )
 8016956:	7dfb      	ldrb	r3, [r7, #23]
 8016958:	2b02      	cmp	r3, #2
 801695a:	d801      	bhi.n	8016960 <RegionEU868ChannelsRemove+0x18>
    {
        return false;
 801695c:	2300      	movs	r3, #0
 801695e:	e016      	b.n	801698e <RegionEU868ChannelsRemove+0x46>
    }

    // Remove the channel from the list of channels
    RegionNvmGroup2->Channels[id] = ( ChannelParams_t ){ 0, 0, { 0 }, 0 };
 8016960:	4b0d      	ldr	r3, [pc, #52]	@ (8016998 <RegionEU868ChannelsRemove+0x50>)
 8016962:	6819      	ldr	r1, [r3, #0]
 8016964:	7dfa      	ldrb	r2, [r7, #23]
 8016966:	4613      	mov	r3, r2
 8016968:	005b      	lsls	r3, r3, #1
 801696a:	4413      	add	r3, r2
 801696c:	009b      	lsls	r3, r3, #2
 801696e:	440b      	add	r3, r1
 8016970:	461a      	mov	r2, r3
 8016972:	2300      	movs	r3, #0
 8016974:	6013      	str	r3, [r2, #0]
 8016976:	6053      	str	r3, [r2, #4]
 8016978:	6093      	str	r3, [r2, #8]

    return RegionCommonChanDisable( RegionNvmGroup2->ChannelsMask, id, EU868_MAX_NB_CHANNELS );
 801697a:	4b07      	ldr	r3, [pc, #28]	@ (8016998 <RegionEU868ChannelsRemove+0x50>)
 801697c:	681b      	ldr	r3, [r3, #0]
 801697e:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8016982:	7df9      	ldrb	r1, [r7, #23]
 8016984:	2210      	movs	r2, #16
 8016986:	4618      	mov	r0, r3
 8016988:	f7fe f91e 	bl	8014bc8 <RegionCommonChanDisable>
 801698c:	4603      	mov	r3, r0
#else
    return false;
#endif /* REGION_EU868 */
}
 801698e:	4618      	mov	r0, r3
 8016990:	3718      	adds	r7, #24
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}
 8016996:	bf00      	nop
 8016998:	20001964 	.word	0x20001964

0801699c <RegionEU868ApplyDrOffset>:
#endif /* REGION_EU868 */
}
#endif /* REGION_VERSION */

uint8_t RegionEU868ApplyDrOffset( uint8_t downlinkDwellTime, int8_t dr, int8_t drOffset )
{
 801699c:	b480      	push	{r7}
 801699e:	b085      	sub	sp, #20
 80169a0:	af00      	add	r7, sp, #0
 80169a2:	4603      	mov	r3, r0
 80169a4:	71fb      	strb	r3, [r7, #7]
 80169a6:	460b      	mov	r3, r1
 80169a8:	71bb      	strb	r3, [r7, #6]
 80169aa:	4613      	mov	r3, r2
 80169ac:	717b      	strb	r3, [r7, #5]
#if defined( REGION_EU868 )
    int8_t datarate = dr - drOffset;
 80169ae:	79ba      	ldrb	r2, [r7, #6]
 80169b0:	797b      	ldrb	r3, [r7, #5]
 80169b2:	1ad3      	subs	r3, r2, r3
 80169b4:	b2db      	uxtb	r3, r3
 80169b6:	73fb      	strb	r3, [r7, #15]

    if( datarate < 0 )
 80169b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80169bc:	2b00      	cmp	r3, #0
 80169be:	da01      	bge.n	80169c4 <RegionEU868ApplyDrOffset+0x28>
    {
        datarate = DR_0;
 80169c0:	2300      	movs	r3, #0
 80169c2:	73fb      	strb	r3, [r7, #15]
    }
    return datarate;
 80169c4:	7bfb      	ldrb	r3, [r7, #15]
#else
    return 0;
#endif /* REGION_EU868 */
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3714      	adds	r7, #20
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bc80      	pop	{r7}
 80169ce:	4770      	bx	lr

080169d0 <rand1>:
static uint32_t next = 1;

static int32_t rand1( void );

static int32_t rand1( void )
{
 80169d0:	b480      	push	{r7}
 80169d2:	af00      	add	r7, sp, #0
    return ( ( next = next * 1103515245L + 12345L ) % RAND_LOCAL_MAX );
 80169d4:	4b0d      	ldr	r3, [pc, #52]	@ (8016a0c <rand1+0x3c>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	4a0d      	ldr	r2, [pc, #52]	@ (8016a10 <rand1+0x40>)
 80169da:	fb02 f303 	mul.w	r3, r2, r3
 80169de:	f503 5340 	add.w	r3, r3, #12288	@ 0x3000
 80169e2:	3339      	adds	r3, #57	@ 0x39
 80169e4:	4a09      	ldr	r2, [pc, #36]	@ (8016a0c <rand1+0x3c>)
 80169e6:	6013      	str	r3, [r2, #0]
 80169e8:	4b08      	ldr	r3, [pc, #32]	@ (8016a0c <rand1+0x3c>)
 80169ea:	681a      	ldr	r2, [r3, #0]
 80169ec:	2303      	movs	r3, #3
 80169ee:	fba3 1302 	umull	r1, r3, r3, r2
 80169f2:	1ad1      	subs	r1, r2, r3
 80169f4:	0849      	lsrs	r1, r1, #1
 80169f6:	440b      	add	r3, r1
 80169f8:	0f99      	lsrs	r1, r3, #30
 80169fa:	460b      	mov	r3, r1
 80169fc:	07db      	lsls	r3, r3, #31
 80169fe:	1a5b      	subs	r3, r3, r1
 8016a00:	1ad1      	subs	r1, r2, r3
 8016a02:	460b      	mov	r3, r1
}
 8016a04:	4618      	mov	r0, r3
 8016a06:	46bd      	mov	sp, r7
 8016a08:	bc80      	pop	{r7}
 8016a0a:	4770      	bx	lr
 8016a0c:	20000140 	.word	0x20000140
 8016a10:	41c64e6d 	.word	0x41c64e6d

08016a14 <srand1>:

void srand1( uint32_t seed )
{
 8016a14:	b480      	push	{r7}
 8016a16:	b083      	sub	sp, #12
 8016a18:	af00      	add	r7, sp, #0
 8016a1a:	6078      	str	r0, [r7, #4]
    next = seed;
 8016a1c:	4a03      	ldr	r2, [pc, #12]	@ (8016a2c <srand1+0x18>)
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	6013      	str	r3, [r2, #0]
}
 8016a22:	bf00      	nop
 8016a24:	370c      	adds	r7, #12
 8016a26:	46bd      	mov	sp, r7
 8016a28:	bc80      	pop	{r7}
 8016a2a:	4770      	bx	lr
 8016a2c:	20000140 	.word	0x20000140

08016a30 <randr>:
// Standard random functions redefinition end

int32_t randr( int32_t min, int32_t max )
{
 8016a30:	b580      	push	{r7, lr}
 8016a32:	b082      	sub	sp, #8
 8016a34:	af00      	add	r7, sp, #0
 8016a36:	6078      	str	r0, [r7, #4]
 8016a38:	6039      	str	r1, [r7, #0]
    return ( int32_t )rand1( ) % ( max - min + 1 ) + min;
 8016a3a:	f7ff ffc9 	bl	80169d0 <rand1>
 8016a3e:	4602      	mov	r2, r0
 8016a40:	6839      	ldr	r1, [r7, #0]
 8016a42:	687b      	ldr	r3, [r7, #4]
 8016a44:	1acb      	subs	r3, r1, r3
 8016a46:	3301      	adds	r3, #1
 8016a48:	fb92 f1f3 	sdiv	r1, r2, r3
 8016a4c:	fb01 f303 	mul.w	r3, r1, r3
 8016a50:	1ad2      	subs	r2, r2, r3
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	4413      	add	r3, r2
}
 8016a56:	4618      	mov	r0, r3
 8016a58:	3708      	adds	r7, #8
 8016a5a:	46bd      	mov	sp, r7
 8016a5c:	bd80      	pop	{r7, pc}

08016a5e <memcpy1>:

void memcpy1( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a5e:	b480      	push	{r7}
 8016a60:	b085      	sub	sp, #20
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	60f8      	str	r0, [r7, #12]
 8016a66:	60b9      	str	r1, [r7, #8]
 8016a68:	4613      	mov	r3, r2
 8016a6a:	80fb      	strh	r3, [r7, #6]
    while( size-- )
 8016a6c:	e007      	b.n	8016a7e <memcpy1+0x20>
    {
        *dst++ = *src++;
 8016a6e:	68ba      	ldr	r2, [r7, #8]
 8016a70:	1c53      	adds	r3, r2, #1
 8016a72:	60bb      	str	r3, [r7, #8]
 8016a74:	68fb      	ldr	r3, [r7, #12]
 8016a76:	1c59      	adds	r1, r3, #1
 8016a78:	60f9      	str	r1, [r7, #12]
 8016a7a:	7812      	ldrb	r2, [r2, #0]
 8016a7c:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016a7e:	88fb      	ldrh	r3, [r7, #6]
 8016a80:	1e5a      	subs	r2, r3, #1
 8016a82:	80fa      	strh	r2, [r7, #6]
 8016a84:	2b00      	cmp	r3, #0
 8016a86:	d1f2      	bne.n	8016a6e <memcpy1+0x10>
    }
}
 8016a88:	bf00      	nop
 8016a8a:	bf00      	nop
 8016a8c:	3714      	adds	r7, #20
 8016a8e:	46bd      	mov	sp, r7
 8016a90:	bc80      	pop	{r7}
 8016a92:	4770      	bx	lr

08016a94 <memcpyr>:

void memcpyr( uint8_t *dst, const uint8_t *src, uint16_t size )
{
 8016a94:	b480      	push	{r7}
 8016a96:	b085      	sub	sp, #20
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	60f8      	str	r0, [r7, #12]
 8016a9c:	60b9      	str	r1, [r7, #8]
 8016a9e:	4613      	mov	r3, r2
 8016aa0:	80fb      	strh	r3, [r7, #6]
    dst = dst + ( size - 1 );
 8016aa2:	88fb      	ldrh	r3, [r7, #6]
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	68fa      	ldr	r2, [r7, #12]
 8016aa8:	4413      	add	r3, r2
 8016aaa:	60fb      	str	r3, [r7, #12]
    while( size-- )
 8016aac:	e007      	b.n	8016abe <memcpyr+0x2a>
    {
        *dst-- = *src++;
 8016aae:	68ba      	ldr	r2, [r7, #8]
 8016ab0:	1c53      	adds	r3, r2, #1
 8016ab2:	60bb      	str	r3, [r7, #8]
 8016ab4:	68fb      	ldr	r3, [r7, #12]
 8016ab6:	1e59      	subs	r1, r3, #1
 8016ab8:	60f9      	str	r1, [r7, #12]
 8016aba:	7812      	ldrb	r2, [r2, #0]
 8016abc:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016abe:	88fb      	ldrh	r3, [r7, #6]
 8016ac0:	1e5a      	subs	r2, r3, #1
 8016ac2:	80fa      	strh	r2, [r7, #6]
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	d1f2      	bne.n	8016aae <memcpyr+0x1a>
    }
}
 8016ac8:	bf00      	nop
 8016aca:	bf00      	nop
 8016acc:	3714      	adds	r7, #20
 8016ace:	46bd      	mov	sp, r7
 8016ad0:	bc80      	pop	{r7}
 8016ad2:	4770      	bx	lr

08016ad4 <memset1>:

void memset1( uint8_t *dst, uint8_t value, uint16_t size )
{
 8016ad4:	b480      	push	{r7}
 8016ad6:	b083      	sub	sp, #12
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	460b      	mov	r3, r1
 8016ade:	70fb      	strb	r3, [r7, #3]
 8016ae0:	4613      	mov	r3, r2
 8016ae2:	803b      	strh	r3, [r7, #0]
    while( size-- )
 8016ae4:	e004      	b.n	8016af0 <memset1+0x1c>
    {
        *dst++ = value;
 8016ae6:	687b      	ldr	r3, [r7, #4]
 8016ae8:	1c5a      	adds	r2, r3, #1
 8016aea:	607a      	str	r2, [r7, #4]
 8016aec:	78fa      	ldrb	r2, [r7, #3]
 8016aee:	701a      	strb	r2, [r3, #0]
    while( size-- )
 8016af0:	883b      	ldrh	r3, [r7, #0]
 8016af2:	1e5a      	subs	r2, r3, #1
 8016af4:	803a      	strh	r2, [r7, #0]
 8016af6:	2b00      	cmp	r3, #0
 8016af8:	d1f5      	bne.n	8016ae6 <memset1+0x12>
    }
}
 8016afa:	bf00      	nop
 8016afc:	bf00      	nop
 8016afe:	370c      	adds	r7, #12
 8016b00:	46bd      	mov	sp, r7
 8016b02:	bc80      	pop	{r7}
 8016b04:	4770      	bx	lr
	...

08016b08 <Crc32>:
        return '?';
    }
}

uint32_t Crc32( uint8_t *buffer, uint16_t length )
{
 8016b08:	b480      	push	{r7}
 8016b0a:	b085      	sub	sp, #20
 8016b0c:	af00      	add	r7, sp, #0
 8016b0e:	6078      	str	r0, [r7, #4]
 8016b10:	460b      	mov	r3, r1
 8016b12:	807b      	strh	r3, [r7, #2]
    // CRC initial value
    uint32_t crc = 0xFFFFFFFF;
 8016b14:	f04f 33ff 	mov.w	r3, #4294967295
 8016b18:	60fb      	str	r3, [r7, #12]

    if( buffer == NULL )
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	2b00      	cmp	r3, #0
 8016b1e:	d101      	bne.n	8016b24 <Crc32+0x1c>
    {
        return 0;
 8016b20:	2300      	movs	r3, #0
 8016b22:	e026      	b.n	8016b72 <Crc32+0x6a>
    }

    for( uint16_t i = 0; i < length; ++i )
 8016b24:	2300      	movs	r3, #0
 8016b26:	817b      	strh	r3, [r7, #10]
 8016b28:	e01d      	b.n	8016b66 <Crc32+0x5e>
    {
        crc ^= ( uint32_t )buffer[i];
 8016b2a:	897b      	ldrh	r3, [r7, #10]
 8016b2c:	687a      	ldr	r2, [r7, #4]
 8016b2e:	4413      	add	r3, r2
 8016b30:	781b      	ldrb	r3, [r3, #0]
 8016b32:	461a      	mov	r2, r3
 8016b34:	68fb      	ldr	r3, [r7, #12]
 8016b36:	4053      	eors	r3, r2
 8016b38:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b3a:	2300      	movs	r3, #0
 8016b3c:	813b      	strh	r3, [r7, #8]
 8016b3e:	e00c      	b.n	8016b5a <Crc32+0x52>
        {
            crc = ( crc >> 1 ) ^ ( reversedPolynom & ~( ( crc & 0x01 ) - 1 ) );
 8016b40:	68fb      	ldr	r3, [r7, #12]
 8016b42:	085a      	lsrs	r2, r3, #1
 8016b44:	68fb      	ldr	r3, [r7, #12]
 8016b46:	f003 0301 	and.w	r3, r3, #1
 8016b4a:	425b      	negs	r3, r3
 8016b4c:	490b      	ldr	r1, [pc, #44]	@ (8016b7c <Crc32+0x74>)
 8016b4e:	400b      	ands	r3, r1
 8016b50:	4053      	eors	r3, r2
 8016b52:	60fb      	str	r3, [r7, #12]
        for( uint16_t i = 0; i < 8; i++ )
 8016b54:	893b      	ldrh	r3, [r7, #8]
 8016b56:	3301      	adds	r3, #1
 8016b58:	813b      	strh	r3, [r7, #8]
 8016b5a:	893b      	ldrh	r3, [r7, #8]
 8016b5c:	2b07      	cmp	r3, #7
 8016b5e:	d9ef      	bls.n	8016b40 <Crc32+0x38>
    for( uint16_t i = 0; i < length; ++i )
 8016b60:	897b      	ldrh	r3, [r7, #10]
 8016b62:	3301      	adds	r3, #1
 8016b64:	817b      	strh	r3, [r7, #10]
 8016b66:	897a      	ldrh	r2, [r7, #10]
 8016b68:	887b      	ldrh	r3, [r7, #2]
 8016b6a:	429a      	cmp	r2, r3
 8016b6c:	d3dd      	bcc.n	8016b2a <Crc32+0x22>
        }
    }

    return ~crc;
 8016b6e:	68fb      	ldr	r3, [r7, #12]
 8016b70:	43db      	mvns	r3, r3
}
 8016b72:	4618      	mov	r0, r3
 8016b74:	3714      	adds	r7, #20
 8016b76:	46bd      	mov	sp, r7
 8016b78:	bc80      	pop	{r7}
 8016b7a:	4770      	bx	lr
 8016b7c:	edb88320 	.word	0xedb88320

08016b80 <RadioInit>:
TimerEvent_t RxTimeoutTimer;

/* Private  functions ---------------------------------------------------------*/

static void RadioInit( RadioEvents_t *events )
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af02      	add	r7, sp, #8
 8016b86:	6078      	str	r0, [r7, #4]
    RadioEvents = events;
 8016b88:	4a24      	ldr	r2, [pc, #144]	@ (8016c1c <RadioInit+0x9c>)
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	6013      	str	r3, [r2, #0]

    SubgRf.RxContinuous = false;
 8016b8e:	4b24      	ldr	r3, [pc, #144]	@ (8016c20 <RadioInit+0xa0>)
 8016b90:	2200      	movs	r2, #0
 8016b92:	705a      	strb	r2, [r3, #1]
    SubgRf.TxTimeout = 0;
 8016b94:	4b22      	ldr	r3, [pc, #136]	@ (8016c20 <RadioInit+0xa0>)
 8016b96:	2200      	movs	r2, #0
 8016b98:	605a      	str	r2, [r3, #4]
    SubgRf.RxTimeout = 0;
 8016b9a:	4b21      	ldr	r3, [pc, #132]	@ (8016c20 <RadioInit+0xa0>)
 8016b9c:	2200      	movs	r2, #0
 8016b9e:	609a      	str	r2, [r3, #8]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8016ba0:	4b1f      	ldr	r3, [pc, #124]	@ (8016c20 <RadioInit+0xa0>)
 8016ba2:	2200      	movs	r2, #0
 8016ba4:	659a      	str	r2, [r3, #88]	@ 0x58

    SUBGRF_Init( RadioOnDioIrq );
 8016ba6:	481f      	ldr	r0, [pc, #124]	@ (8016c24 <RadioInit+0xa4>)
 8016ba8:	f001 ff88 	bl	8018abc <SUBGRF_Init>
    /*SubgRf.publicNetwork set to false*/
    SubgRf.PublicNetwork.Current = false;
 8016bac:	4b1c      	ldr	r3, [pc, #112]	@ (8016c20 <RadioInit+0xa0>)
 8016bae:	2200      	movs	r2, #0
 8016bb0:	735a      	strb	r2, [r3, #13]
    SubgRf.PublicNetwork.Previous = false;
 8016bb2:	4b1b      	ldr	r3, [pc, #108]	@ (8016c20 <RadioInit+0xa0>)
 8016bb4:	2200      	movs	r2, #0
 8016bb6:	731a      	strb	r2, [r3, #12]

    RADIO_IRQ_PROCESS_INIT();

    SUBGRF_SetRegulatorMode( );
 8016bb8:	f002 fa16 	bl	8018fe8 <SUBGRF_SetRegulatorMode>

    SUBGRF_SetBufferBaseAddress( 0x00, 0x00 );
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	2000      	movs	r0, #0
 8016bc0:	f002 fdde 	bl	8019780 <SUBGRF_SetBufferBaseAddress>
    SUBGRF_SetTxParams( RFO_LP, 0, RADIO_RAMP_200_US );
 8016bc4:	2204      	movs	r2, #4
 8016bc6:	2100      	movs	r1, #0
 8016bc8:	2001      	movs	r0, #1
 8016bca:	f002 fb9b 	bl	8019304 <SUBGRF_SetTxParams>
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016bce:	2300      	movs	r3, #0
 8016bd0:	2200      	movs	r2, #0
 8016bd2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8016bd6:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8016bda:	f002 facb 	bl	8019174 <SUBGRF_SetDioIrqParams>

    /* ST_WORKAROUND_BEGIN: Sleep radio */
    RadioSleep();
 8016bde:	f000 fe83 	bl	80178e8 <RadioSleep>
    /* ST_WORKAROUND_END */
    // Initialize driver timeout timers
    TimerInit( &TxTimeoutTimer, RadioOnTxTimeoutIrq );
 8016be2:	2300      	movs	r3, #0
 8016be4:	9300      	str	r3, [sp, #0]
 8016be6:	4b10      	ldr	r3, [pc, #64]	@ (8016c28 <RadioInit+0xa8>)
 8016be8:	2200      	movs	r2, #0
 8016bea:	f04f 31ff 	mov.w	r1, #4294967295
 8016bee:	480f      	ldr	r0, [pc, #60]	@ (8016c2c <RadioInit+0xac>)
 8016bf0:	f003 ffd6 	bl	801aba0 <UTIL_TIMER_Create>
    TimerInit( &RxTimeoutTimer, RadioOnRxTimeoutIrq );
 8016bf4:	2300      	movs	r3, #0
 8016bf6:	9300      	str	r3, [sp, #0]
 8016bf8:	4b0d      	ldr	r3, [pc, #52]	@ (8016c30 <RadioInit+0xb0>)
 8016bfa:	2200      	movs	r2, #0
 8016bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8016c00:	480c      	ldr	r0, [pc, #48]	@ (8016c34 <RadioInit+0xb4>)
 8016c02:	f003 ffcd 	bl	801aba0 <UTIL_TIMER_Create>
    TimerStop( &TxTimeoutTimer );
 8016c06:	4809      	ldr	r0, [pc, #36]	@ (8016c2c <RadioInit+0xac>)
 8016c08:	f004 f86e 	bl	801ace8 <UTIL_TIMER_Stop>
    TimerStop( &RxTimeoutTimer );
 8016c0c:	4809      	ldr	r0, [pc, #36]	@ (8016c34 <RadioInit+0xb4>)
 8016c0e:	f004 f86b 	bl	801ace8 <UTIL_TIMER_Stop>
}
 8016c12:	bf00      	nop
 8016c14:	3708      	adds	r7, #8
 8016c16:	46bd      	mov	sp, r7
 8016c18:	bd80      	pop	{r7, pc}
 8016c1a:	bf00      	nop
 8016c1c:	20001a6c 	.word	0x20001a6c
 8016c20:	20001a70 	.word	0x20001a70
 8016c24:	08017cd1 	.word	0x08017cd1
 8016c28:	08017c59 	.word	0x08017c59
 8016c2c:	20001acc 	.word	0x20001acc
 8016c30:	08017c6d 	.word	0x08017c6d
 8016c34:	20001ae4 	.word	0x20001ae4

08016c38 <RadioGetStatus>:

static RadioState_t RadioGetStatus( void )
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	af00      	add	r7, sp, #0
    switch( SUBGRF_GetOperatingMode( ) )
 8016c3c:	f001 ff80 	bl	8018b40 <SUBGRF_GetOperatingMode>
 8016c40:	4603      	mov	r3, r0
 8016c42:	2b07      	cmp	r3, #7
 8016c44:	d00a      	beq.n	8016c5c <RadioGetStatus+0x24>
 8016c46:	2b07      	cmp	r3, #7
 8016c48:	dc0a      	bgt.n	8016c60 <RadioGetStatus+0x28>
 8016c4a:	2b04      	cmp	r3, #4
 8016c4c:	d002      	beq.n	8016c54 <RadioGetStatus+0x1c>
 8016c4e:	2b05      	cmp	r3, #5
 8016c50:	d002      	beq.n	8016c58 <RadioGetStatus+0x20>
 8016c52:	e005      	b.n	8016c60 <RadioGetStatus+0x28>
    {
        case MODE_TX:
            return RF_TX_RUNNING;
 8016c54:	2302      	movs	r3, #2
 8016c56:	e004      	b.n	8016c62 <RadioGetStatus+0x2a>
        case MODE_RX:
            return RF_RX_RUNNING;
 8016c58:	2301      	movs	r3, #1
 8016c5a:	e002      	b.n	8016c62 <RadioGetStatus+0x2a>
        case MODE_CAD:
            return RF_CAD;
 8016c5c:	2303      	movs	r3, #3
 8016c5e:	e000      	b.n	8016c62 <RadioGetStatus+0x2a>
        default:
            return RF_IDLE;
 8016c60:	2300      	movs	r3, #0
    }
}
 8016c62:	4618      	mov	r0, r3
 8016c64:	bd80      	pop	{r7, pc}
	...

08016c68 <RadioSetModem>:

static void RadioSetModem( RadioModems_t modem )
{
 8016c68:	b580      	push	{r7, lr}
 8016c6a:	b082      	sub	sp, #8
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	4603      	mov	r3, r0
 8016c70:	71fb      	strb	r3, [r7, #7]
    SubgRf.Modem = modem;
 8016c72:	4a2a      	ldr	r2, [pc, #168]	@ (8016d1c <RadioSetModem+0xb4>)
 8016c74:	79fb      	ldrb	r3, [r7, #7]
 8016c76:	7013      	strb	r3, [r2, #0]
    RFW_SetRadioModem( modem );
 8016c78:	79fb      	ldrb	r3, [r7, #7]
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	f003 f943 	bl	8019f06 <RFW_SetRadioModem>
    switch( modem )
 8016c80:	79fb      	ldrb	r3, [r7, #7]
 8016c82:	2b05      	cmp	r3, #5
 8016c84:	d80e      	bhi.n	8016ca4 <RadioSetModem+0x3c>
 8016c86:	a201      	add	r2, pc, #4	@ (adr r2, 8016c8c <RadioSetModem+0x24>)
 8016c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016c8c:	08016cb3 	.word	0x08016cb3
 8016c90:	08016cc1 	.word	0x08016cc1
 8016c94:	08016ca5 	.word	0x08016ca5
 8016c98:	08016ce7 	.word	0x08016ce7
 8016c9c:	08016cf5 	.word	0x08016cf5
 8016ca0:	08016d03 	.word	0x08016d03
    {
    default:
    case MODEM_MSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GMSK );
 8016ca4:	2003      	movs	r0, #3
 8016ca6:	f002 fb07 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016caa:	4b1c      	ldr	r3, [pc, #112]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cac:	2200      	movs	r2, #0
 8016cae:	735a      	strb	r2, [r3, #13]
        break;
 8016cb0:	e02f      	b.n	8016d12 <RadioSetModem+0xaa>
    case MODEM_FSK:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016cb2:	2000      	movs	r0, #0
 8016cb4:	f002 fb00 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cb8:	4b18      	ldr	r3, [pc, #96]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cba:	2200      	movs	r2, #0
 8016cbc:	735a      	strb	r2, [r3, #13]
        break;
 8016cbe:	e028      	b.n	8016d12 <RadioSetModem+0xaa>
    case MODEM_LORA:
        SUBGRF_SetPacketType( PACKET_TYPE_LORA );
 8016cc0:	2001      	movs	r0, #1
 8016cc2:	f002 faf9 	bl	80192b8 <SUBGRF_SetPacketType>
        // Public/Private network register is reset when switching modems
        if( SubgRf.PublicNetwork.Current != SubgRf.PublicNetwork.Previous )
 8016cc6:	4b15      	ldr	r3, [pc, #84]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cc8:	7b5a      	ldrb	r2, [r3, #13]
 8016cca:	4b14      	ldr	r3, [pc, #80]	@ (8016d1c <RadioSetModem+0xb4>)
 8016ccc:	7b1b      	ldrb	r3, [r3, #12]
 8016cce:	429a      	cmp	r2, r3
 8016cd0:	d01e      	beq.n	8016d10 <RadioSetModem+0xa8>
        {
            SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous;
 8016cd2:	4b12      	ldr	r3, [pc, #72]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cd4:	7b1a      	ldrb	r2, [r3, #12]
 8016cd6:	4b11      	ldr	r3, [pc, #68]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cd8:	735a      	strb	r2, [r3, #13]
            RadioSetPublicNetwork( SubgRf.PublicNetwork.Current );
 8016cda:	4b10      	ldr	r3, [pc, #64]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cdc:	7b5b      	ldrb	r3, [r3, #13]
 8016cde:	4618      	mov	r0, r3
 8016ce0:	f000 ff84 	bl	8017bec <RadioSetPublicNetwork>
        }
        break;
 8016ce4:	e014      	b.n	8016d10 <RadioSetModem+0xa8>
    case MODEM_BPSK:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016ce6:	2002      	movs	r0, #2
 8016ce8:	f002 fae6 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cec:	4b0b      	ldr	r3, [pc, #44]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cee:	2200      	movs	r2, #0
 8016cf0:	735a      	strb	r2, [r3, #13]
        break;
 8016cf2:	e00e      	b.n	8016d12 <RadioSetModem+0xaa>
#if (RADIO_SIGFOX_ENABLE == 1)
    case MODEM_SIGFOX_TX:
        SUBGRF_SetPacketType( PACKET_TYPE_BPSK );
 8016cf4:	2002      	movs	r0, #2
 8016cf6:	f002 fadf 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to BPSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016cfa:	4b08      	ldr	r3, [pc, #32]	@ (8016d1c <RadioSetModem+0xb4>)
 8016cfc:	2200      	movs	r2, #0
 8016cfe:	735a      	strb	r2, [r3, #13]
        break;
 8016d00:	e007      	b.n	8016d12 <RadioSetModem+0xaa>
    case MODEM_SIGFOX_RX:
        SUBGRF_SetPacketType( PACKET_TYPE_GFSK );
 8016d02:	2000      	movs	r0, #0
 8016d04:	f002 fad8 	bl	80192b8 <SUBGRF_SetPacketType>
        // When switching to GFSK mode the LoRa SyncWord register value is reset
        // Thus, we also reset the RadioPublicNetwork variable
        SubgRf.PublicNetwork.Current = false;
 8016d08:	4b04      	ldr	r3, [pc, #16]	@ (8016d1c <RadioSetModem+0xb4>)
 8016d0a:	2200      	movs	r2, #0
 8016d0c:	735a      	strb	r2, [r3, #13]
        break;
 8016d0e:	e000      	b.n	8016d12 <RadioSetModem+0xaa>
        break;
 8016d10:	bf00      	nop
#endif /*RADIO_SIGFOX_ENABLE == 1*/
    }
}
 8016d12:	bf00      	nop
 8016d14:	3708      	adds	r7, #8
 8016d16:	46bd      	mov	sp, r7
 8016d18:	bd80      	pop	{r7, pc}
 8016d1a:	bf00      	nop
 8016d1c:	20001a70 	.word	0x20001a70

08016d20 <RadioSetChannel>:

static void RadioSetChannel( uint32_t freq )
{
 8016d20:	b580      	push	{r7, lr}
 8016d22:	b082      	sub	sp, #8
 8016d24:	af00      	add	r7, sp, #0
 8016d26:	6078      	str	r0, [r7, #4]
    SUBGRF_SetRfFrequency( freq );
 8016d28:	6878      	ldr	r0, [r7, #4]
 8016d2a:	f002 fa7f 	bl	801922c <SUBGRF_SetRfFrequency>
}
 8016d2e:	bf00      	nop
 8016d30:	3708      	adds	r7, #8
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd80      	pop	{r7, pc}

08016d36 <RadioIsChannelFree>:

static bool RadioIsChannelFree( uint32_t freq, uint32_t rxBandwidth, int16_t rssiThresh, uint32_t maxCarrierSenseTime )
{
 8016d36:	b580      	push	{r7, lr}
 8016d38:	b090      	sub	sp, #64	@ 0x40
 8016d3a:	af0a      	add	r7, sp, #40	@ 0x28
 8016d3c:	60f8      	str	r0, [r7, #12]
 8016d3e:	60b9      	str	r1, [r7, #8]
 8016d40:	603b      	str	r3, [r7, #0]
 8016d42:	4613      	mov	r3, r2
 8016d44:	80fb      	strh	r3, [r7, #6]
    bool status = true;
 8016d46:	2301      	movs	r3, #1
 8016d48:	75fb      	strb	r3, [r7, #23]
    int16_t rssi = 0;
 8016d4a:	2300      	movs	r3, #0
 8016d4c:	82bb      	strh	r3, [r7, #20]
    uint32_t carrierSenseTime = 0;
 8016d4e:	2300      	movs	r3, #0
 8016d50:	613b      	str	r3, [r7, #16]

    RadioStandby( );  /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016d52:	f000 fddc 	bl	801790e <RadioStandby>

    RadioSetModem( MODEM_FSK );
 8016d56:	2000      	movs	r0, #0
 8016d58:	f7ff ff86 	bl	8016c68 <RadioSetModem>

    RadioSetChannel( freq );
 8016d5c:	68f8      	ldr	r0, [r7, #12]
 8016d5e:	f7ff ffdf 	bl	8016d20 <RadioSetChannel>

    // Set Rx bandwidth. Other parameters are not used.
    RadioSetRxConfig( MODEM_FSK, rxBandwidth, 600, 0, rxBandwidth, 3, 0, false,
 8016d62:	2301      	movs	r3, #1
 8016d64:	9309      	str	r3, [sp, #36]	@ 0x24
 8016d66:	2300      	movs	r3, #0
 8016d68:	9308      	str	r3, [sp, #32]
 8016d6a:	2300      	movs	r3, #0
 8016d6c:	9307      	str	r3, [sp, #28]
 8016d6e:	2300      	movs	r3, #0
 8016d70:	9306      	str	r3, [sp, #24]
 8016d72:	2300      	movs	r3, #0
 8016d74:	9305      	str	r3, [sp, #20]
 8016d76:	2300      	movs	r3, #0
 8016d78:	9304      	str	r3, [sp, #16]
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	9303      	str	r3, [sp, #12]
 8016d7e:	2300      	movs	r3, #0
 8016d80:	9302      	str	r3, [sp, #8]
 8016d82:	2303      	movs	r3, #3
 8016d84:	9301      	str	r3, [sp, #4]
 8016d86:	68bb      	ldr	r3, [r7, #8]
 8016d88:	9300      	str	r3, [sp, #0]
 8016d8a:	2300      	movs	r3, #0
 8016d8c:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8016d90:	68b9      	ldr	r1, [r7, #8]
 8016d92:	2000      	movs	r0, #0
 8016d94:	f000 f83c 	bl	8016e10 <RadioSetRxConfig>
                      0, false, 0, 0, false, true );
    RadioRx( 0 );
 8016d98:	2000      	movs	r0, #0
 8016d9a:	f000 fdbf 	bl	801791c <RadioRx>

    RADIO_DELAY_MS( RadioGetWakeupTime( ) );
 8016d9e:	f000 ff53 	bl	8017c48 <RadioGetWakeupTime>
 8016da2:	4603      	mov	r3, r0
 8016da4:	4618      	mov	r0, r3
 8016da6:	f7ea ffaf 	bl	8001d08 <HAL_Delay>

    carrierSenseTime = TimerGetCurrentTime( );
 8016daa:	f004 f8b7 	bl	801af1c <UTIL_TIMER_GetCurrentTime>
 8016dae:	6138      	str	r0, [r7, #16]

    // Perform carrier sense for maxCarrierSenseTime
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016db0:	e00d      	b.n	8016dce <RadioIsChannelFree+0x98>
    {
        rssi = RadioRssi( MODEM_FSK );
 8016db2:	2000      	movs	r0, #0
 8016db4:	f000 fe9a 	bl	8017aec <RadioRssi>
 8016db8:	4603      	mov	r3, r0
 8016dba:	82bb      	strh	r3, [r7, #20]

        if( rssi > rssiThresh )
 8016dbc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8016dc0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	dd02      	ble.n	8016dce <RadioIsChannelFree+0x98>
        {
            status = false;
 8016dc8:	2300      	movs	r3, #0
 8016dca:	75fb      	strb	r3, [r7, #23]
            break;
 8016dcc:	e006      	b.n	8016ddc <RadioIsChannelFree+0xa6>
    while( TimerGetElapsedTime( carrierSenseTime ) < maxCarrierSenseTime )
 8016dce:	6938      	ldr	r0, [r7, #16]
 8016dd0:	f004 f8b6 	bl	801af40 <UTIL_TIMER_GetElapsedTime>
 8016dd4:	4602      	mov	r2, r0
 8016dd6:	683b      	ldr	r3, [r7, #0]
 8016dd8:	4293      	cmp	r3, r2
 8016dda:	d8ea      	bhi.n	8016db2 <RadioIsChannelFree+0x7c>
        }
    }
    RadioStandby( ); /* ST_WORKAROUND: Prevent multiple sleeps with TXCO delay */
 8016ddc:	f000 fd97 	bl	801790e <RadioStandby>

    return status;
 8016de0:	7dfb      	ldrb	r3, [r7, #23]
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3718      	adds	r7, #24
 8016de6:	46bd      	mov	sp, r7
 8016de8:	bd80      	pop	{r7, pc}

08016dea <RadioRandom>:

static uint32_t RadioRandom( void )
{
 8016dea:	b580      	push	{r7, lr}
 8016dec:	b082      	sub	sp, #8
 8016dee:	af00      	add	r7, sp, #0
    uint32_t rnd = 0;
 8016df0:	2300      	movs	r3, #0
 8016df2:	607b      	str	r3, [r7, #4]

    /*
     * Radio setup for random number generation
     */
    // Disable modem interrupts
    SUBGRF_SetDioIrqParams( IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8016df4:	2300      	movs	r3, #0
 8016df6:	2200      	movs	r2, #0
 8016df8:	2100      	movs	r1, #0
 8016dfa:	2000      	movs	r0, #0
 8016dfc:	f002 f9ba 	bl	8019174 <SUBGRF_SetDioIrqParams>

    rnd = SUBGRF_GetRandom();
 8016e00:	f001 ff6f 	bl	8018ce2 <SUBGRF_GetRandom>
 8016e04:	6078      	str	r0, [r7, #4]

    return rnd;
 8016e06:	687b      	ldr	r3, [r7, #4]
}
 8016e08:	4618      	mov	r0, r3
 8016e0a:	3708      	adds	r7, #8
 8016e0c:	46bd      	mov	sp, r7
 8016e0e:	bd80      	pop	{r7, pc}

08016e10 <RadioSetRxConfig>:
                              uint32_t bandwidthAfc, uint16_t preambleLen,
                              uint16_t symbTimeout, bool fixLen,
                              uint8_t payloadLen,
                              bool crcOn, bool freqHopOn, uint8_t hopPeriod,
                              bool iqInverted, bool rxContinuous )
{
 8016e10:	b580      	push	{r7, lr}
 8016e12:	b08a      	sub	sp, #40	@ 0x28
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	60b9      	str	r1, [r7, #8]
 8016e18:	607a      	str	r2, [r7, #4]
 8016e1a:	461a      	mov	r2, r3
 8016e1c:	4603      	mov	r3, r0
 8016e1e:	73fb      	strb	r3, [r7, #15]
 8016e20:	4613      	mov	r3, r2
 8016e22:	73bb      	strb	r3, [r7, #14]
#if (RADIO_SIGFOX_ENABLE == 1)
    uint8_t modReg;
#endif
    SubgRf.RxContinuous = rxContinuous;
 8016e24:	4ab9      	ldr	r2, [pc, #740]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e26:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e2a:	7053      	strb	r3, [r2, #1]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8016e2c:	f003 f829 	bl	8019e82 <RFW_DeInit>
    if( rxContinuous == true )
 8016e30:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d001      	beq.n	8016e3c <RadioSetRxConfig+0x2c>
    {
        symbTimeout = 0;
 8016e38:	2300      	movs	r3, #0
 8016e3a:	873b      	strh	r3, [r7, #56]	@ 0x38
    }
    if( fixLen == true )
 8016e3c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8016e40:	2b00      	cmp	r3, #0
 8016e42:	d004      	beq.n	8016e4e <RadioSetRxConfig+0x3e>
    {
        MaxPayloadLength = payloadLen;
 8016e44:	4ab2      	ldr	r2, [pc, #712]	@ (8017110 <RadioSetRxConfig+0x300>)
 8016e46:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8016e4a:	7013      	strb	r3, [r2, #0]
 8016e4c:	e002      	b.n	8016e54 <RadioSetRxConfig+0x44>
    }
    else
    {
        MaxPayloadLength = 0xFF;
 8016e4e:	4bb0      	ldr	r3, [pc, #704]	@ (8017110 <RadioSetRxConfig+0x300>)
 8016e50:	22ff      	movs	r2, #255	@ 0xff
 8016e52:	701a      	strb	r2, [r3, #0]
    }

    switch( modem )
 8016e54:	7bfb      	ldrb	r3, [r7, #15]
 8016e56:	2b05      	cmp	r3, #5
 8016e58:	d009      	beq.n	8016e6e <RadioSetRxConfig+0x5e>
 8016e5a:	2b05      	cmp	r3, #5
 8016e5c:	f300 81ca 	bgt.w	80171f4 <RadioSetRxConfig+0x3e4>
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	f000 80bf 	beq.w	8016fe4 <RadioSetRxConfig+0x1d4>
 8016e66:	2b01      	cmp	r3, #1
 8016e68:	f000 8124 	beq.w	80170b4 <RadioSetRxConfig+0x2a4>
            // Timeout Max, Timeout handled directly in SetRx function
            SubgRf.RxTimeout = 0xFFFF;

            break;
        default:
            break;
 8016e6c:	e1c2      	b.n	80171f4 <RadioSetRxConfig+0x3e4>
            SUBGRF_SetStopRxTimerOnPreambleDetect( true );
 8016e6e:	2001      	movs	r0, #1
 8016e70:	f002 f87c 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016e74:	4ba5      	ldr	r3, [pc, #660]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e76:	2200      	movs	r2, #0
 8016e78:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016e7c:	4aa3      	ldr	r2, [pc, #652]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_05;
 8016e82:	4ba2      	ldr	r3, [pc, #648]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e84:	2209      	movs	r2, #9
 8016e86:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Fdev = 800;
 8016e8a:	4ba0      	ldr	r3, [pc, #640]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e8c:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8016e90:	641a      	str	r2, [r3, #64]	@ 0x40
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8016e92:	68b8      	ldr	r0, [r7, #8]
 8016e94:	f002 ff28 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 8016e98:	4603      	mov	r3, r0
 8016e9a:	461a      	mov	r2, r3
 8016e9c:	4b9b      	ldr	r3, [pc, #620]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016e9e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8016ea2:	4b9a      	ldr	r3, [pc, #616]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ea4:	2200      	movs	r2, #0
 8016ea6:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8016ea8:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8016eaa:	00db      	lsls	r3, r3, #3
 8016eac:	b29a      	uxth	r2, r3
 8016eae:	4b97      	ldr	r3, [pc, #604]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eb0:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_OFF;
 8016eb2:	4b96      	ldr	r3, [pc, #600]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eb4:	2200      	movs	r2, #0
 8016eb6:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 2 << 3; // convert byte into bit
 8016eb8:	4b94      	ldr	r3, [pc, #592]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eba:	2210      	movs	r2, #16
 8016ebc:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8016ebe:	4b93      	ldr	r3, [pc, #588]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ec0:	2200      	movs	r2, #0
 8016ec2:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = RADIO_PACKET_FIXED_LENGTH;
 8016ec4:	4b91      	ldr	r3, [pc, #580]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ec6:	2200      	movs	r2, #0
 8016ec8:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8016eca:	4b91      	ldr	r3, [pc, #580]	@ (8017110 <RadioSetRxConfig+0x300>)
 8016ecc:	781a      	ldrb	r2, [r3, #0]
 8016ece:	4b8f      	ldr	r3, [pc, #572]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ed0:	759a      	strb	r2, [r3, #22]
            SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 8016ed2:	4b8e      	ldr	r3, [pc, #568]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ed4:	2201      	movs	r2, #1
 8016ed6:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREE_OFF;
 8016ed8:	4b8c      	ldr	r3, [pc, #560]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016eda:	2200      	movs	r2, #0
 8016edc:	761a      	strb	r2, [r3, #24]
            RadioSetModem( MODEM_SIGFOX_RX );
 8016ede:	2005      	movs	r0, #5
 8016ee0:	f7ff fec2 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8016ee4:	488b      	ldr	r0, [pc, #556]	@ (8017114 <RadioSetRxConfig+0x304>)
 8016ee6:	f002 fadb 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8016eea:	488b      	ldr	r0, [pc, #556]	@ (8017118 <RadioSetRxConfig+0x308>)
 8016eec:	f002 fbaa 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){0xB2, 0x27, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 8016ef0:	4a8a      	ldr	r2, [pc, #552]	@ (801711c <RadioSetRxConfig+0x30c>)
 8016ef2:	f107 031c 	add.w	r3, r7, #28
 8016ef6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016efa:	e883 0003 	stmia.w	r3, {r0, r1}
 8016efe:	f107 031c 	add.w	r3, r7, #28
 8016f02:	4618      	mov	r0, r3
 8016f04:	f001 fe6b 	bl	8018bde <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8016f08:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8016f0c:	f001 feb6 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
            modReg= RadioRead(SUBGHZ_AGCGFORSTCFGR);
 8016f10:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016f14:	f000 fe08 	bl	8017b28 <RadioRead>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=RADIO_BIT_MASK(4);
 8016f1e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f22:	f023 0310 	bic.w	r3, r3, #16
 8016f26:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCGFORSTCFGR, modReg);
 8016f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f2e:	4619      	mov	r1, r3
 8016f30:	f640 00b8 	movw	r0, #2232	@ 0x8b8
 8016f34:	f000 fde6 	bl	8017b04 <RadioWrite>
            RadioWrite(SUBGHZ_AGCGFORSTPOWTHR, 0x4 );
 8016f38:	2104      	movs	r1, #4
 8016f3a:	f640 00b9 	movw	r0, #2233	@ 0x8b9
 8016f3e:	f000 fde1 	bl	8017b04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_AGCRSSICTL0R);
 8016f42:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f46:	f000 fdef 	bl	8017b28 <RadioRead>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(2) & RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f54:	f023 031c 	bic.w	r3, r3, #28
 8016f58:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_AGCRSSICTL0R, (modReg| (0x1<<3) ) );
 8016f5c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f60:	f043 0308 	orr.w	r3, r3, #8
 8016f64:	b2db      	uxtb	r3, r3
 8016f66:	4619      	mov	r1, r3
 8016f68:	f640 009b 	movw	r0, #2203	@ 0x89b
 8016f6c:	f000 fdca 	bl	8017b04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GAFCR);
 8016f70:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f74:	f000 fdd8 	bl	8017b28 <RadioRead>
 8016f78:	4603      	mov	r3, r0
 8016f7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(3) & RADIO_BIT_MASK(4) );
 8016f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f82:	f023 0318 	bic.w	r3, r3, #24
 8016f86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GAFCR, (modReg| (0x3<<3) ));
 8016f8a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016f8e:	f043 0318 	orr.w	r3, r3, #24
 8016f92:	b2db      	uxtb	r3, r3
 8016f94:	4619      	mov	r1, r3
 8016f96:	f240 60d1 	movw	r0, #1745	@ 0x6d1
 8016f9a:	f000 fdb3 	bl	8017b04 <RadioWrite>
            modReg= RadioRead(SUBGHZ_GBSYNCR);
 8016f9e:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016fa2:	f000 fdc1 	bl	8017b28 <RadioRead>
 8016fa6:	4603      	mov	r3, r0
 8016fa8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            modReg&=( RADIO_BIT_MASK(4) & RADIO_BIT_MASK(5) & RADIO_BIT_MASK(6) );
 8016fac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8016fb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
            RadioWrite(SUBGHZ_GBSYNCR, (modReg| (0x5<<4) ));
 8016fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8016fbc:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 8016fc0:	b2db      	uxtb	r3, r3
 8016fc2:	4619      	mov	r1, r3
 8016fc4:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 8016fc8:	f000 fd9c 	bl	8017b04 <RadioWrite>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 8016fcc:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8016fce:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8016fd2:	fb02 f303 	mul.w	r3, r2, r3
 8016fd6:	461a      	mov	r2, r3
 8016fd8:	687b      	ldr	r3, [r7, #4]
 8016fda:	fbb2 f3f3 	udiv	r3, r2, r3
 8016fde:	4a4b      	ldr	r2, [pc, #300]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016fe0:	6093      	str	r3, [r2, #8]
            break;
 8016fe2:	e108      	b.n	80171f6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 8016fe4:	2000      	movs	r0, #0
 8016fe6:	f001 ffc1 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8016fea:	4b48      	ldr	r3, [pc, #288]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016fec:	2200      	movs	r2, #0
 8016fee:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8016ff2:	4a46      	ldr	r2, [pc, #280]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 8016ff8:	4b44      	ldr	r3, [pc, #272]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8016ffa:	220b      	movs	r2, #11
 8016ffc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017000:	68b8      	ldr	r0, [r7, #8]
 8017002:	f002 fe71 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 8017006:	4603      	mov	r3, r0
 8017008:	461a      	mov	r2, r3
 801700a:	4b40      	ldr	r3, [pc, #256]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801700c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8017010:	4b3e      	ldr	r3, [pc, #248]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017012:	2200      	movs	r2, #0
 8017014:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017016:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017018:	00db      	lsls	r3, r3, #3
 801701a:	b29a      	uxth	r2, r3
 801701c:	4b3b      	ldr	r3, [pc, #236]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801701e:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 8017020:	4b3a      	ldr	r3, [pc, #232]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017022:	2204      	movs	r2, #4
 8017024:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3; // convert byte into bit
 8017026:	4b39      	ldr	r3, [pc, #228]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017028:	2218      	movs	r2, #24
 801702a:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 801702c:	4b37      	ldr	r3, [pc, #220]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801702e:	2200      	movs	r2, #0
 8017030:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 8017032:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8017036:	f083 0301 	eor.w	r3, r3, #1
 801703a:	b2db      	uxtb	r3, r3
 801703c:	461a      	mov	r2, r3
 801703e:	4b33      	ldr	r3, [pc, #204]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017040:	755a      	strb	r2, [r3, #21]
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength;
 8017042:	4b33      	ldr	r3, [pc, #204]	@ (8017110 <RadioSetRxConfig+0x300>)
 8017044:	781a      	ldrb	r2, [r3, #0]
 8017046:	4b31      	ldr	r3, [pc, #196]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017048:	759a      	strb	r2, [r3, #22]
            if( crcOn == true )
 801704a:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 801704e:	2b00      	cmp	r3, #0
 8017050:	d003      	beq.n	801705a <RadioSetRxConfig+0x24a>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 8017052:	4b2e      	ldr	r3, [pc, #184]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017054:	22f2      	movs	r2, #242	@ 0xf2
 8017056:	75da      	strb	r2, [r3, #23]
 8017058:	e002      	b.n	8017060 <RadioSetRxConfig+0x250>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 801705a:	4b2c      	ldr	r3, [pc, #176]	@ (801710c <RadioSetRxConfig+0x2fc>)
 801705c:	2201      	movs	r2, #1
 801705e:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 8017060:	4b2a      	ldr	r3, [pc, #168]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017062:	2201      	movs	r2, #1
 8017064:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 8017066:	f000 fc52 	bl	801790e <RadioStandby>
            RadioSetModem( MODEM_FSK );
 801706a:	2000      	movs	r0, #0
 801706c:	f7ff fdfc 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017070:	4828      	ldr	r0, [pc, #160]	@ (8017114 <RadioSetRxConfig+0x304>)
 8017072:	f002 fa15 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017076:	4828      	ldr	r0, [pc, #160]	@ (8017118 <RadioSetRxConfig+0x308>)
 8017078:	f002 fae4 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 801707c:	4a28      	ldr	r2, [pc, #160]	@ (8017120 <RadioSetRxConfig+0x310>)
 801707e:	f107 0314 	add.w	r3, r7, #20
 8017082:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017086:	e883 0003 	stmia.w	r3, {r0, r1}
 801708a:	f107 0314 	add.w	r3, r7, #20
 801708e:	4618      	mov	r0, r3
 8017090:	f001 fda5 	bl	8018bde <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 8017094:	f240 10ff 	movw	r0, #511	@ 0x1ff
 8017098:	f001 fdf0 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
            SubgRf.RxTimeout = ( uint32_t )(( symbTimeout * 8 * 1000 ) /datarate);
 801709c:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 801709e:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80170a2:	fb02 f303 	mul.w	r3, r2, r3
 80170a6:	461a      	mov	r2, r3
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80170ae:	4a17      	ldr	r2, [pc, #92]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170b0:	6093      	str	r3, [r2, #8]
            break;
 80170b2:	e0a0      	b.n	80171f6 <RadioSetRxConfig+0x3e6>
            SUBGRF_SetStopRxTimerOnPreambleDetect( false );
 80170b4:	2000      	movs	r0, #0
 80170b6:	f001 ff59 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80170ba:	4b14      	ldr	r3, [pc, #80]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170bc:	2201      	movs	r2, #1
 80170be:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t )datarate;
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	b2da      	uxtb	r2, r3
 80170c6:	4b11      	ldr	r3, [pc, #68]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth = Bandwidths[bandwidth];
 80170cc:	4a15      	ldr	r2, [pc, #84]	@ (8017124 <RadioSetRxConfig+0x314>)
 80170ce:	68bb      	ldr	r3, [r7, #8]
 80170d0:	4413      	add	r3, r2
 80170d2:	781a      	ldrb	r2, [r3, #0]
 80170d4:	4b0d      	ldr	r3, [pc, #52]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t )coderate;
 80170da:	4a0c      	ldr	r2, [pc, #48]	@ (801710c <RadioSetRxConfig+0x2fc>)
 80170dc:	7bbb      	ldrb	r3, [r7, #14]
 80170de:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 80170e2:	68bb      	ldr	r3, [r7, #8]
 80170e4:	2b00      	cmp	r3, #0
 80170e6:	d105      	bne.n	80170f4 <RadioSetRxConfig+0x2e4>
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	2b0b      	cmp	r3, #11
 80170ec:	d008      	beq.n	8017100 <RadioSetRxConfig+0x2f0>
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	2b0c      	cmp	r3, #12
 80170f2:	d005      	beq.n	8017100 <RadioSetRxConfig+0x2f0>
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	2b01      	cmp	r3, #1
 80170f8:	d116      	bne.n	8017128 <RadioSetRxConfig+0x318>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 80170fa:	687b      	ldr	r3, [r7, #4]
 80170fc:	2b0c      	cmp	r3, #12
 80170fe:	d113      	bne.n	8017128 <RadioSetRxConfig+0x318>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017100:	4b02      	ldr	r3, [pc, #8]	@ (801710c <RadioSetRxConfig+0x2fc>)
 8017102:	2201      	movs	r2, #1
 8017104:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017108:	e012      	b.n	8017130 <RadioSetRxConfig+0x320>
 801710a:	bf00      	nop
 801710c:	20001a70 	.word	0x20001a70
 8017110:	20000144 	.word	0x20000144
 8017114:	20001aa8 	.word	0x20001aa8
 8017118:	20001a7e 	.word	0x20001a7e
 801711c:	0801bfa0 	.word	0x0801bfa0
 8017120:	0801bfa8 	.word	0x0801bfa8
 8017124:	0801c584 	.word	0x0801c584
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017128:	4b35      	ldr	r3, [pc, #212]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801712a:	2200      	movs	r2, #0
 801712c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 8017130:	4b33      	ldr	r3, [pc, #204]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017132:	2201      	movs	r2, #1
 8017134:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017136:	4b32      	ldr	r3, [pc, #200]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017138:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 801713c:	2b05      	cmp	r3, #5
 801713e:	d004      	beq.n	801714a <RadioSetRxConfig+0x33a>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 8017140:	4b2f      	ldr	r3, [pc, #188]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017142:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017146:	2b06      	cmp	r3, #6
 8017148:	d10a      	bne.n	8017160 <RadioSetRxConfig+0x350>
                if( preambleLen < 12 )
 801714a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801714c:	2b0b      	cmp	r3, #11
 801714e:	d803      	bhi.n	8017158 <RadioSetRxConfig+0x348>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 8017150:	4b2b      	ldr	r3, [pc, #172]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017152:	220c      	movs	r2, #12
 8017154:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017156:	e006      	b.n	8017166 <RadioSetRxConfig+0x356>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017158:	4a29      	ldr	r2, [pc, #164]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801715a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801715c:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 801715e:	e002      	b.n	8017166 <RadioSetRxConfig+0x356>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017160:	4a27      	ldr	r2, [pc, #156]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017162:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8017164:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017166:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801716a:	4b25      	ldr	r3, [pc, #148]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801716c:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 801716e:	4b25      	ldr	r3, [pc, #148]	@ (8017204 <RadioSetRxConfig+0x3f4>)
 8017170:	781a      	ldrb	r2, [r3, #0]
 8017172:	4b23      	ldr	r3, [pc, #140]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017174:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017176:	f897 2044 	ldrb.w	r2, [r7, #68]	@ 0x44
 801717a:	4b21      	ldr	r3, [pc, #132]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 801717c:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 8017180:	f897 2050 	ldrb.w	r2, [r7, #80]	@ 0x50
 8017184:	4b1e      	ldr	r3, [pc, #120]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 8017186:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 801718a:	f000 fbc0 	bl	801790e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 801718e:	2001      	movs	r0, #1
 8017190:	f7ff fd6a 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8017194:	481c      	ldr	r0, [pc, #112]	@ (8017208 <RadioSetRxConfig+0x3f8>)
 8017196:	f002 f983 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801719a:	481c      	ldr	r0, [pc, #112]	@ (801720c <RadioSetRxConfig+0x3fc>)
 801719c:	f002 fa52 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 80171a0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80171a2:	b2db      	uxtb	r3, r3
 80171a4:	4618      	mov	r0, r3
 80171a6:	f001 fef0 	bl	8018f8a <SUBGRF_SetLoRaSymbNumTimeout>
            if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80171aa:	4b15      	ldr	r3, [pc, #84]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 80171ac:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80171b0:	2b01      	cmp	r3, #1
 80171b2:	d10d      	bne.n	80171d0 <RadioSetRxConfig+0x3c0>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80171b4:	f240 7036 	movw	r0, #1846	@ 0x736
 80171b8:	f002 fba0 	bl	80198fc <SUBGRF_ReadRegister>
 80171bc:	4603      	mov	r3, r0
 80171be:	f023 0304 	bic.w	r3, r3, #4
 80171c2:	b2db      	uxtb	r3, r3
 80171c4:	4619      	mov	r1, r3
 80171c6:	f240 7036 	movw	r0, #1846	@ 0x736
 80171ca:	f002 fb83 	bl	80198d4 <SUBGRF_WriteRegister>
 80171ce:	e00c      	b.n	80171ea <RadioSetRxConfig+0x3da>
                SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 80171d0:	f240 7036 	movw	r0, #1846	@ 0x736
 80171d4:	f002 fb92 	bl	80198fc <SUBGRF_ReadRegister>
 80171d8:	4603      	mov	r3, r0
 80171da:	f043 0304 	orr.w	r3, r3, #4
 80171de:	b2db      	uxtb	r3, r3
 80171e0:	4619      	mov	r1, r3
 80171e2:	f240 7036 	movw	r0, #1846	@ 0x736
 80171e6:	f002 fb75 	bl	80198d4 <SUBGRF_WriteRegister>
            SubgRf.RxTimeout = 0xFFFF;
 80171ea:	4b05      	ldr	r3, [pc, #20]	@ (8017200 <RadioSetRxConfig+0x3f0>)
 80171ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80171f0:	609a      	str	r2, [r3, #8]
            break;
 80171f2:	e000      	b.n	80171f6 <RadioSetRxConfig+0x3e6>
            break;
 80171f4:	bf00      	nop
    }
}
 80171f6:	bf00      	nop
 80171f8:	3728      	adds	r7, #40	@ 0x28
 80171fa:	46bd      	mov	sp, r7
 80171fc:	bd80      	pop	{r7, pc}
 80171fe:	bf00      	nop
 8017200:	20001a70 	.word	0x20001a70
 8017204:	20000144 	.word	0x20000144
 8017208:	20001aa8 	.word	0x20001aa8
 801720c:	20001a7e 	.word	0x20001a7e

08017210 <RadioSetTxConfig>:
static void RadioSetTxConfig( RadioModems_t modem, int8_t power, uint32_t fdev,
                              uint32_t bandwidth, uint32_t datarate,
                              uint8_t coderate, uint16_t preambleLen,
                              bool fixLen, bool crcOn, bool freqHopOn,
                              uint8_t hopPeriod, bool iqInverted, uint32_t timeout )
{
 8017210:	b580      	push	{r7, lr}
 8017212:	b086      	sub	sp, #24
 8017214:	af00      	add	r7, sp, #0
 8017216:	60ba      	str	r2, [r7, #8]
 8017218:	607b      	str	r3, [r7, #4]
 801721a:	4603      	mov	r3, r0
 801721c:	73fb      	strb	r3, [r7, #15]
 801721e:	460b      	mov	r3, r1
 8017220:	73bb      	strb	r3, [r7, #14]
    RFW_DeInit(); /* ST_WORKAROUND: Switch Off FwPacketDecoding by default */
 8017222:	f002 fe2e 	bl	8019e82 <RFW_DeInit>
    switch( modem )
 8017226:	7bfb      	ldrb	r3, [r7, #15]
 8017228:	2b04      	cmp	r3, #4
 801722a:	f000 80c7 	beq.w	80173bc <RadioSetTxConfig+0x1ac>
 801722e:	2b04      	cmp	r3, #4
 8017230:	f300 80d6 	bgt.w	80173e0 <RadioSetTxConfig+0x1d0>
 8017234:	2b00      	cmp	r3, #0
 8017236:	d002      	beq.n	801723e <RadioSetTxConfig+0x2e>
 8017238:	2b01      	cmp	r3, #1
 801723a:	d059      	beq.n	80172f0 <RadioSetTxConfig+0xe0>
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
            break;
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 801723c:	e0d0      	b.n	80173e0 <RadioSetTxConfig+0x1d0>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801723e:	4b74      	ldr	r3, [pc, #464]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017240:	2200      	movs	r2, #0
 8017242:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Gfsk.BitRate = datarate;
 8017246:	4a72      	ldr	r2, [pc, #456]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017248:	6a3b      	ldr	r3, [r7, #32]
 801724a:	63d3      	str	r3, [r2, #60]	@ 0x3c
            SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = MOD_SHAPING_G_BT_1;
 801724c:	4b70      	ldr	r3, [pc, #448]	@ (8017410 <RadioSetTxConfig+0x200>)
 801724e:	220b      	movs	r2, #11
 8017250:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( bandwidth );
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f002 fd47 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 801725a:	4603      	mov	r3, r0
 801725c:	461a      	mov	r2, r3
 801725e:	4b6c      	ldr	r3, [pc, #432]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            SubgRf.ModulationParams.Params.Gfsk.Fdev = fdev;
 8017264:	4a6a      	ldr	r2, [pc, #424]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017266:	68bb      	ldr	r3, [r7, #8]
 8017268:	6413      	str	r3, [r2, #64]	@ 0x40
            SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801726a:	4b69      	ldr	r3, [pc, #420]	@ (8017410 <RadioSetTxConfig+0x200>)
 801726c:	2200      	movs	r2, #0
 801726e:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( preambleLen << 3 ); // convert byte into bit
 8017270:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017272:	00db      	lsls	r3, r3, #3
 8017274:	b29a      	uxth	r2, r3
 8017276:	4b66      	ldr	r3, [pc, #408]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017278:	821a      	strh	r2, [r3, #16]
            SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS;
 801727a:	4b65      	ldr	r3, [pc, #404]	@ (8017410 <RadioSetTxConfig+0x200>)
 801727c:	2204      	movs	r2, #4
 801727e:	749a      	strb	r2, [r3, #18]
            SubgRf.PacketParams.Params.Gfsk.SyncWordLength = 3 << 3 ; // convert byte into bit
 8017280:	4b63      	ldr	r3, [pc, #396]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017282:	2218      	movs	r2, #24
 8017284:	74da      	strb	r2, [r3, #19]
            SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF;
 8017286:	4b62      	ldr	r3, [pc, #392]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017288:	2200      	movs	r2, #0
 801728a:	751a      	strb	r2, [r3, #20]
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( fixLen == true ) ? RADIO_PACKET_FIXED_LENGTH : RADIO_PACKET_VARIABLE_LENGTH;
 801728c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017290:	f083 0301 	eor.w	r3, r3, #1
 8017294:	b2db      	uxtb	r3, r3
 8017296:	461a      	mov	r2, r3
 8017298:	4b5d      	ldr	r3, [pc, #372]	@ (8017410 <RadioSetTxConfig+0x200>)
 801729a:	755a      	strb	r2, [r3, #21]
            if( crcOn == true )
 801729c:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d003      	beq.n	80172ac <RadioSetTxConfig+0x9c>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_2_BYTES_CCIT;
 80172a4:	4b5a      	ldr	r3, [pc, #360]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172a6:	22f2      	movs	r2, #242	@ 0xf2
 80172a8:	75da      	strb	r2, [r3, #23]
 80172aa:	e002      	b.n	80172b2 <RadioSetTxConfig+0xa2>
                SubgRf.PacketParams.Params.Gfsk.CrcLength = RADIO_CRC_OFF;
 80172ac:	4b58      	ldr	r3, [pc, #352]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172ae:	2201      	movs	r2, #1
 80172b0:	75da      	strb	r2, [r3, #23]
            SubgRf.PacketParams.Params.Gfsk.DcFree = RADIO_DC_FREEWHITENING;
 80172b2:	4b57      	ldr	r3, [pc, #348]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172b4:	2201      	movs	r2, #1
 80172b6:	761a      	strb	r2, [r3, #24]
            RadioStandby( );
 80172b8:	f000 fb29 	bl	801790e <RadioStandby>
            RadioSetModem(  MODEM_FSK  );
 80172bc:	2000      	movs	r0, #0
 80172be:	f7ff fcd3 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80172c2:	4854      	ldr	r0, [pc, #336]	@ (8017414 <RadioSetTxConfig+0x204>)
 80172c4:	f002 f8ec 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80172c8:	4853      	ldr	r0, [pc, #332]	@ (8017418 <RadioSetTxConfig+0x208>)
 80172ca:	f002 f9bb 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SetSyncWord( ( uint8_t[] ){ 0xC1, 0x94, 0xC1, 0x00, 0x00, 0x00, 0x00, 0x00 } );
 80172ce:	4a53      	ldr	r2, [pc, #332]	@ (801741c <RadioSetTxConfig+0x20c>)
 80172d0:	f107 0310 	add.w	r3, r7, #16
 80172d4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172d8:	e883 0003 	stmia.w	r3, {r0, r1}
 80172dc:	f107 0310 	add.w	r3, r7, #16
 80172e0:	4618      	mov	r0, r3
 80172e2:	f001 fc7c 	bl	8018bde <SUBGRF_SetSyncWord>
            SUBGRF_SetWhiteningSeed( 0x01FF );
 80172e6:	f240 10ff 	movw	r0, #511	@ 0x1ff
 80172ea:	f001 fcc7 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
            break;
 80172ee:	e078      	b.n	80173e2 <RadioSetTxConfig+0x1d2>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 80172f0:	4b47      	ldr	r3, [pc, #284]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172f2:	2201      	movs	r2, #1
 80172f4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) datarate;
 80172f8:	6a3b      	ldr	r3, [r7, #32]
 80172fa:	b2da      	uxtb	r2, r3
 80172fc:	4b44      	ldr	r3, [pc, #272]	@ (8017410 <RadioSetTxConfig+0x200>)
 80172fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
            SubgRf.ModulationParams.Params.LoRa.Bandwidth =  Bandwidths[bandwidth];
 8017302:	4a47      	ldr	r2, [pc, #284]	@ (8017420 <RadioSetTxConfig+0x210>)
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	4413      	add	r3, r2
 8017308:	781a      	ldrb	r2, [r3, #0]
 801730a:	4b41      	ldr	r3, [pc, #260]	@ (8017410 <RadioSetTxConfig+0x200>)
 801730c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
            SubgRf.ModulationParams.Params.LoRa.CodingRate= ( RadioLoRaCodingRates_t )coderate;
 8017310:	4a3f      	ldr	r2, [pc, #252]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017312:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8017316:	f882 3052 	strb.w	r3, [r2, #82]	@ 0x52
            if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 801731a:	687b      	ldr	r3, [r7, #4]
 801731c:	2b00      	cmp	r3, #0
 801731e:	d105      	bne.n	801732c <RadioSetTxConfig+0x11c>
 8017320:	6a3b      	ldr	r3, [r7, #32]
 8017322:	2b0b      	cmp	r3, #11
 8017324:	d008      	beq.n	8017338 <RadioSetTxConfig+0x128>
 8017326:	6a3b      	ldr	r3, [r7, #32]
 8017328:	2b0c      	cmp	r3, #12
 801732a:	d005      	beq.n	8017338 <RadioSetTxConfig+0x128>
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	2b01      	cmp	r3, #1
 8017330:	d107      	bne.n	8017342 <RadioSetTxConfig+0x132>
                ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 8017332:	6a3b      	ldr	r3, [r7, #32]
 8017334:	2b0c      	cmp	r3, #12
 8017336:	d104      	bne.n	8017342 <RadioSetTxConfig+0x132>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x01;
 8017338:	4b35      	ldr	r3, [pc, #212]	@ (8017410 <RadioSetTxConfig+0x200>)
 801733a:	2201      	movs	r2, #1
 801733c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
 8017340:	e003      	b.n	801734a <RadioSetTxConfig+0x13a>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0x00;
 8017342:	4b33      	ldr	r3, [pc, #204]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017344:	2200      	movs	r2, #0
 8017346:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 801734a:	4b31      	ldr	r3, [pc, #196]	@ (8017410 <RadioSetTxConfig+0x200>)
 801734c:	2201      	movs	r2, #1
 801734e:	739a      	strb	r2, [r3, #14]
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017350:	4b2f      	ldr	r3, [pc, #188]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017352:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8017356:	2b05      	cmp	r3, #5
 8017358:	d004      	beq.n	8017364 <RadioSetTxConfig+0x154>
                ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF6 ) )
 801735a:	4b2d      	ldr	r3, [pc, #180]	@ (8017410 <RadioSetTxConfig+0x200>)
 801735c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
            if( ( SubgRf.ModulationParams.Params.LoRa.SpreadingFactor == LORA_SF5 ) ||
 8017360:	2b06      	cmp	r3, #6
 8017362:	d10a      	bne.n	801737a <RadioSetTxConfig+0x16a>
                if( preambleLen < 12 )
 8017364:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017366:	2b0b      	cmp	r3, #11
 8017368:	d803      	bhi.n	8017372 <RadioSetTxConfig+0x162>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = 12;
 801736a:	4b29      	ldr	r3, [pc, #164]	@ (8017410 <RadioSetTxConfig+0x200>)
 801736c:	220c      	movs	r2, #12
 801736e:	839a      	strh	r2, [r3, #28]
                if( preambleLen < 12 )
 8017370:	e006      	b.n	8017380 <RadioSetTxConfig+0x170>
                    SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 8017372:	4a27      	ldr	r2, [pc, #156]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017374:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8017376:	8393      	strh	r3, [r2, #28]
                if( preambleLen < 12 )
 8017378:	e002      	b.n	8017380 <RadioSetTxConfig+0x170>
                SubgRf.PacketParams.Params.LoRa.PreambleLength = preambleLen;
 801737a:	4a25      	ldr	r2, [pc, #148]	@ (8017410 <RadioSetTxConfig+0x200>)
 801737c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 801737e:	8393      	strh	r3, [r2, #28]
            SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t )fixLen;
 8017380:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8017384:	4b22      	ldr	r3, [pc, #136]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017386:	779a      	strb	r2, [r3, #30]
            SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 8017388:	4b26      	ldr	r3, [pc, #152]	@ (8017424 <RadioSetTxConfig+0x214>)
 801738a:	781a      	ldrb	r2, [r3, #0]
 801738c:	4b20      	ldr	r3, [pc, #128]	@ (8017410 <RadioSetTxConfig+0x200>)
 801738e:	77da      	strb	r2, [r3, #31]
            SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t )crcOn;
 8017390:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8017394:	4b1e      	ldr	r3, [pc, #120]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017396:	f883 2020 	strb.w	r2, [r3, #32]
            SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t )iqInverted;
 801739a:	f897 203c 	ldrb.w	r2, [r7, #60]	@ 0x3c
 801739e:	4b1c      	ldr	r3, [pc, #112]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173a0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
            RadioStandby( );
 80173a4:	f000 fab3 	bl	801790e <RadioStandby>
            RadioSetModem( MODEM_LORA );
 80173a8:	2001      	movs	r0, #1
 80173aa:	f7ff fc5d 	bl	8016c68 <RadioSetModem>
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173ae:	4819      	ldr	r0, [pc, #100]	@ (8017414 <RadioSetTxConfig+0x204>)
 80173b0:	f002 f876 	bl	80194a0 <SUBGRF_SetModulationParams>
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80173b4:	4818      	ldr	r0, [pc, #96]	@ (8017418 <RadioSetTxConfig+0x208>)
 80173b6:	f002 f945 	bl	8019644 <SUBGRF_SetPacketParams>
            break;
 80173ba:	e012      	b.n	80173e2 <RadioSetTxConfig+0x1d2>
            RadioSetModem(MODEM_SIGFOX_TX);
 80173bc:	2004      	movs	r0, #4
 80173be:	f7ff fc53 	bl	8016c68 <RadioSetModem>
            SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 80173c2:	4b13      	ldr	r3, [pc, #76]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173c4:	2202      	movs	r2, #2
 80173c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            SubgRf.ModulationParams.Params.Bpsk.BitRate           = datarate;
 80173ca:	4a11      	ldr	r2, [pc, #68]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173cc:	6a3b      	ldr	r3, [r7, #32]
 80173ce:	6493      	str	r3, [r2, #72]	@ 0x48
            SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 80173d0:	4b0f      	ldr	r3, [pc, #60]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173d2:	2216      	movs	r2, #22
 80173d4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80173d8:	480e      	ldr	r0, [pc, #56]	@ (8017414 <RadioSetTxConfig+0x204>)
 80173da:	f002 f861 	bl	80194a0 <SUBGRF_SetModulationParams>
            break;
 80173de:	e000      	b.n	80173e2 <RadioSetTxConfig+0x1d2>
            break;
 80173e0:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 80173e2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80173e6:	4618      	mov	r0, r3
 80173e8:	f002 fb90 	bl	8019b0c <SUBGRF_SetRfTxPower>
 80173ec:	4603      	mov	r3, r0
 80173ee:	461a      	mov	r2, r3
 80173f0:	4b07      	ldr	r3, [pc, #28]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173f2:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect ); /* ST_WORKAROUND: ?????? */
 80173f6:	4b06      	ldr	r3, [pc, #24]	@ (8017410 <RadioSetTxConfig+0x200>)
 80173f8:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80173fc:	4618      	mov	r0, r3
 80173fe:	f002 fd54 	bl	8019eaa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8017402:	4a03      	ldr	r2, [pc, #12]	@ (8017410 <RadioSetTxConfig+0x200>)
 8017404:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8017406:	6053      	str	r3, [r2, #4]
}
 8017408:	bf00      	nop
 801740a:	3718      	adds	r7, #24
 801740c:	46bd      	mov	sp, r7
 801740e:	bd80      	pop	{r7, pc}
 8017410:	20001a70 	.word	0x20001a70
 8017414:	20001aa8 	.word	0x20001aa8
 8017418:	20001a7e 	.word	0x20001a7e
 801741c:	0801bfa8 	.word	0x0801bfa8
 8017420:	0801c584 	.word	0x0801c584
 8017424:	20000144 	.word	0x20000144

08017428 <RadioCheckRfFrequency>:

static bool RadioCheckRfFrequency( uint32_t frequency )
{
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
    return true;
 8017430:	2301      	movs	r3, #1
}
 8017432:	4618      	mov	r0, r3
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	bc80      	pop	{r7}
 801743a:	4770      	bx	lr

0801743c <RadioGetLoRaBandwidthInHz>:

static uint32_t RadioGetLoRaBandwidthInHz( RadioLoRaBandwidths_t bw )
{
 801743c:	b480      	push	{r7}
 801743e:	b085      	sub	sp, #20
 8017440:	af00      	add	r7, sp, #0
 8017442:	4603      	mov	r3, r0
 8017444:	71fb      	strb	r3, [r7, #7]
    uint32_t bandwidthInHz = 0;
 8017446:	2300      	movs	r3, #0
 8017448:	60fb      	str	r3, [r7, #12]

    switch( bw )
 801744a:	79fb      	ldrb	r3, [r7, #7]
 801744c:	2b0a      	cmp	r3, #10
 801744e:	d83e      	bhi.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
 8017450:	a201      	add	r2, pc, #4	@ (adr r2, 8017458 <RadioGetLoRaBandwidthInHz+0x1c>)
 8017452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017456:	bf00      	nop
 8017458:	08017485 	.word	0x08017485
 801745c:	08017495 	.word	0x08017495
 8017460:	080174a5 	.word	0x080174a5
 8017464:	080174b5 	.word	0x080174b5
 8017468:	080174bd 	.word	0x080174bd
 801746c:	080174c3 	.word	0x080174c3
 8017470:	080174c9 	.word	0x080174c9
 8017474:	080174cf 	.word	0x080174cf
 8017478:	0801748d 	.word	0x0801748d
 801747c:	0801749d 	.word	0x0801749d
 8017480:	080174ad 	.word	0x080174ad
    {
    case LORA_BW_007:
        bandwidthInHz = 7812UL;
 8017484:	f641 6384 	movw	r3, #7812	@ 0x1e84
 8017488:	60fb      	str	r3, [r7, #12]
        break;
 801748a:	e020      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_010:
        bandwidthInHz = 10417UL;
 801748c:	f642 03b1 	movw	r3, #10417	@ 0x28b1
 8017490:	60fb      	str	r3, [r7, #12]
        break;
 8017492:	e01c      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_015:
        bandwidthInHz = 15625UL;
 8017494:	f643 5309 	movw	r3, #15625	@ 0x3d09
 8017498:	60fb      	str	r3, [r7, #12]
        break;
 801749a:	e018      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_020:
        bandwidthInHz = 20833UL;
 801749c:	f245 1361 	movw	r3, #20833	@ 0x5161
 80174a0:	60fb      	str	r3, [r7, #12]
        break;
 80174a2:	e014      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_031:
        bandwidthInHz = 31250UL;
 80174a4:	f647 2312 	movw	r3, #31250	@ 0x7a12
 80174a8:	60fb      	str	r3, [r7, #12]
        break;
 80174aa:	e010      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_041:
        bandwidthInHz = 41667UL;
 80174ac:	f24a 23c3 	movw	r3, #41667	@ 0xa2c3
 80174b0:	60fb      	str	r3, [r7, #12]
        break;
 80174b2:	e00c      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_062:
        bandwidthInHz = 62500UL;
 80174b4:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80174b8:	60fb      	str	r3, [r7, #12]
        break;
 80174ba:	e008      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_125:
        bandwidthInHz = 125000UL;
 80174bc:	4b07      	ldr	r3, [pc, #28]	@ (80174dc <RadioGetLoRaBandwidthInHz+0xa0>)
 80174be:	60fb      	str	r3, [r7, #12]
        break;
 80174c0:	e005      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_250:
        bandwidthInHz = 250000UL;
 80174c2:	4b07      	ldr	r3, [pc, #28]	@ (80174e0 <RadioGetLoRaBandwidthInHz+0xa4>)
 80174c4:	60fb      	str	r3, [r7, #12]
        break;
 80174c6:	e002      	b.n	80174ce <RadioGetLoRaBandwidthInHz+0x92>
    case LORA_BW_500:
        bandwidthInHz = 500000UL;
 80174c8:	4b06      	ldr	r3, [pc, #24]	@ (80174e4 <RadioGetLoRaBandwidthInHz+0xa8>)
 80174ca:	60fb      	str	r3, [r7, #12]
        break;
 80174cc:	bf00      	nop
    }

    return bandwidthInHz;
 80174ce:	68fb      	ldr	r3, [r7, #12]
}
 80174d0:	4618      	mov	r0, r3
 80174d2:	3714      	adds	r7, #20
 80174d4:	46bd      	mov	sp, r7
 80174d6:	bc80      	pop	{r7}
 80174d8:	4770      	bx	lr
 80174da:	bf00      	nop
 80174dc:	0001e848 	.word	0x0001e848
 80174e0:	0003d090 	.word	0x0003d090
 80174e4:	0007a120 	.word	0x0007a120

080174e8 <RadioGetGfskTimeOnAirNumerator>:

static uint32_t RadioGetGfskTimeOnAirNumerator( uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 80174e8:	b480      	push	{r7}
 80174ea:	b083      	sub	sp, #12
 80174ec:	af00      	add	r7, sp, #0
 80174ee:	6078      	str	r0, [r7, #4]
 80174f0:	4608      	mov	r0, r1
 80174f2:	4611      	mov	r1, r2
 80174f4:	461a      	mov	r2, r3
 80174f6:	4603      	mov	r3, r0
 80174f8:	70fb      	strb	r3, [r7, #3]
 80174fa:	460b      	mov	r3, r1
 80174fc:	803b      	strh	r3, [r7, #0]
 80174fe:	4613      	mov	r3, r2
 8017500:	70bb      	strb	r3, [r7, #2]
    /* ST_WORKAROUND_BEGIN: Simplified calculation without const values */
    return ( preambleLen << 3 ) +
 8017502:	883b      	ldrh	r3, [r7, #0]
 8017504:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017506:	78ba      	ldrb	r2, [r7, #2]
 8017508:	f082 0201 	eor.w	r2, r2, #1
 801750c:	b2d2      	uxtb	r2, r2
 801750e:	2a00      	cmp	r2, #0
 8017510:	d001      	beq.n	8017516 <RadioGetGfskTimeOnAirNumerator+0x2e>
 8017512:	2208      	movs	r2, #8
 8017514:	e000      	b.n	8017518 <RadioGetGfskTimeOnAirNumerator+0x30>
 8017516:	2200      	movs	r2, #0
    return ( preambleLen << 3 ) +
 8017518:	4413      	add	r3, r2
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 801751a:	f103 0218 	add.w	r2, r3, #24
           ( ( payloadLen + ( ( crcOn == true ) ? 2 : 0 ) ) << 3 );
 801751e:	7c3b      	ldrb	r3, [r7, #16]
 8017520:	7d39      	ldrb	r1, [r7, #20]
 8017522:	2900      	cmp	r1, #0
 8017524:	d001      	beq.n	801752a <RadioGetGfskTimeOnAirNumerator+0x42>
 8017526:	2102      	movs	r1, #2
 8017528:	e000      	b.n	801752c <RadioGetGfskTimeOnAirNumerator+0x44>
 801752a:	2100      	movs	r1, #0
 801752c:	440b      	add	r3, r1
 801752e:	00db      	lsls	r3, r3, #3
           ( ( fixLen == false ) ? 8 : 0 ) + 24 +
 8017530:	4413      	add	r3, r2
    /* ST_WORKAROUND_END */
}
 8017532:	4618      	mov	r0, r3
 8017534:	370c      	adds	r7, #12
 8017536:	46bd      	mov	sp, r7
 8017538:	bc80      	pop	{r7}
 801753a:	4770      	bx	lr

0801753c <RadioGetLoRaTimeOnAirNumerator>:

static uint32_t RadioGetLoRaTimeOnAirNumerator( uint32_t bandwidth,
                                                uint32_t datarate, uint8_t coderate,
                                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                                bool crcOn )
{
 801753c:	b480      	push	{r7}
 801753e:	b08b      	sub	sp, #44	@ 0x2c
 8017540:	af00      	add	r7, sp, #0
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	60b9      	str	r1, [r7, #8]
 8017546:	4611      	mov	r1, r2
 8017548:	461a      	mov	r2, r3
 801754a:	460b      	mov	r3, r1
 801754c:	71fb      	strb	r3, [r7, #7]
 801754e:	4613      	mov	r3, r2
 8017550:	80bb      	strh	r3, [r7, #4]
    int32_t crDenom           = coderate + 4;
 8017552:	79fb      	ldrb	r3, [r7, #7]
 8017554:	3304      	adds	r3, #4
 8017556:	617b      	str	r3, [r7, #20]
    bool    lowDatareOptimize = false;
 8017558:	2300      	movs	r3, #0
 801755a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    // Ensure that the preamble length is at least 12 symbols when using SF5 or SF6
    if( ( datarate == 5 ) || ( datarate == 6 ) )
 801755e:	68bb      	ldr	r3, [r7, #8]
 8017560:	2b05      	cmp	r3, #5
 8017562:	d002      	beq.n	801756a <RadioGetLoRaTimeOnAirNumerator+0x2e>
 8017564:	68bb      	ldr	r3, [r7, #8]
 8017566:	2b06      	cmp	r3, #6
 8017568:	d104      	bne.n	8017574 <RadioGetLoRaTimeOnAirNumerator+0x38>
    {
        if( preambleLen < 12 )
 801756a:	88bb      	ldrh	r3, [r7, #4]
 801756c:	2b0b      	cmp	r3, #11
 801756e:	d801      	bhi.n	8017574 <RadioGetLoRaTimeOnAirNumerator+0x38>
        {
            preambleLen = 12;
 8017570:	230c      	movs	r3, #12
 8017572:	80bb      	strh	r3, [r7, #4]
        }
    }

    if( ( ( bandwidth == 0 ) && ( ( datarate == 11 ) || ( datarate == 12 ) ) ) ||
 8017574:	68fb      	ldr	r3, [r7, #12]
 8017576:	2b00      	cmp	r3, #0
 8017578:	d105      	bne.n	8017586 <RadioGetLoRaTimeOnAirNumerator+0x4a>
 801757a:	68bb      	ldr	r3, [r7, #8]
 801757c:	2b0b      	cmp	r3, #11
 801757e:	d008      	beq.n	8017592 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017580:	68bb      	ldr	r3, [r7, #8]
 8017582:	2b0c      	cmp	r3, #12
 8017584:	d005      	beq.n	8017592 <RadioGetLoRaTimeOnAirNumerator+0x56>
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	2b01      	cmp	r3, #1
 801758a:	d105      	bne.n	8017598 <RadioGetLoRaTimeOnAirNumerator+0x5c>
        ( ( bandwidth == 1 ) && ( datarate == 12 ) ) )
 801758c:	68bb      	ldr	r3, [r7, #8]
 801758e:	2b0c      	cmp	r3, #12
 8017590:	d102      	bne.n	8017598 <RadioGetLoRaTimeOnAirNumerator+0x5c>
    {
        lowDatareOptimize = true;
 8017592:	2301      	movs	r3, #1
 8017594:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    int32_t ceilDenominator;
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 8017598:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 801759c:	00db      	lsls	r3, r3, #3
                            ( crcOn ? 16 : 0 ) -
 801759e:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80175a2:	2a00      	cmp	r2, #0
 80175a4:	d001      	beq.n	80175aa <RadioGetLoRaTimeOnAirNumerator+0x6e>
 80175a6:	2210      	movs	r2, #16
 80175a8:	e000      	b.n	80175ac <RadioGetLoRaTimeOnAirNumerator+0x70>
 80175aa:	2200      	movs	r2, #0
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175ac:	4413      	add	r3, r2
 80175ae:	461a      	mov	r2, r3
                            ( 4 * datarate ) +
 80175b0:	68bb      	ldr	r3, [r7, #8]
 80175b2:	009b      	lsls	r3, r3, #2
                            ( crcOn ? 16 : 0 ) -
 80175b4:	1ad3      	subs	r3, r2, r3
                            ( fixLen ? 0 : 20 );
 80175b6:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80175ba:	2a00      	cmp	r2, #0
 80175bc:	d001      	beq.n	80175c2 <RadioGetLoRaTimeOnAirNumerator+0x86>
 80175be:	2200      	movs	r2, #0
 80175c0:	e000      	b.n	80175c4 <RadioGetLoRaTimeOnAirNumerator+0x88>
 80175c2:	2214      	movs	r2, #20
                            ( 4 * datarate ) +
 80175c4:	4413      	add	r3, r2
    int32_t ceilNumerator = ( payloadLen << 3 ) +
 80175c6:	61fb      	str	r3, [r7, #28]

    if( datarate <= 6 )
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	2b06      	cmp	r3, #6
 80175cc:	d803      	bhi.n	80175d6 <RadioGetLoRaTimeOnAirNumerator+0x9a>
    {
        ceilDenominator = 4 * datarate;
 80175ce:	68bb      	ldr	r3, [r7, #8]
 80175d0:	009b      	lsls	r3, r3, #2
 80175d2:	623b      	str	r3, [r7, #32]
 80175d4:	e00e      	b.n	80175f4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
    }
    else
    {
        ceilNumerator += 8;
 80175d6:	69fb      	ldr	r3, [r7, #28]
 80175d8:	3308      	adds	r3, #8
 80175da:	61fb      	str	r3, [r7, #28]

        if( lowDatareOptimize == true )
 80175dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80175e0:	2b00      	cmp	r3, #0
 80175e2:	d004      	beq.n	80175ee <RadioGetLoRaTimeOnAirNumerator+0xb2>
        {
            ceilDenominator = 4 * ( datarate - 2 );
 80175e4:	68bb      	ldr	r3, [r7, #8]
 80175e6:	3b02      	subs	r3, #2
 80175e8:	009b      	lsls	r3, r3, #2
 80175ea:	623b      	str	r3, [r7, #32]
 80175ec:	e002      	b.n	80175f4 <RadioGetLoRaTimeOnAirNumerator+0xb8>
        }
        else
        {
            ceilDenominator = 4 * datarate;
 80175ee:	68bb      	ldr	r3, [r7, #8]
 80175f0:	009b      	lsls	r3, r3, #2
 80175f2:	623b      	str	r3, [r7, #32]
        }
    }

    if( ceilNumerator < 0 )
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	da01      	bge.n	80175fe <RadioGetLoRaTimeOnAirNumerator+0xc2>
    {
        ceilNumerator = 0;
 80175fa:	2300      	movs	r3, #0
 80175fc:	61fb      	str	r3, [r7, #28]
    }

    // Perform integral ceil()
    int32_t intermediate =
        ( ( ceilNumerator + ceilDenominator - 1 ) / ceilDenominator ) * crDenom + preambleLen + 12;
 80175fe:	69fa      	ldr	r2, [r7, #28]
 8017600:	6a3b      	ldr	r3, [r7, #32]
 8017602:	4413      	add	r3, r2
 8017604:	1e5a      	subs	r2, r3, #1
 8017606:	6a3b      	ldr	r3, [r7, #32]
 8017608:	fb92 f3f3 	sdiv	r3, r2, r3
 801760c:	697a      	ldr	r2, [r7, #20]
 801760e:	fb03 f202 	mul.w	r2, r3, r2
 8017612:	88bb      	ldrh	r3, [r7, #4]
 8017614:	4413      	add	r3, r2
    int32_t intermediate =
 8017616:	330c      	adds	r3, #12
 8017618:	61bb      	str	r3, [r7, #24]

    if( datarate <= 6 )
 801761a:	68bb      	ldr	r3, [r7, #8]
 801761c:	2b06      	cmp	r3, #6
 801761e:	d802      	bhi.n	8017626 <RadioGetLoRaTimeOnAirNumerator+0xea>
    {
        intermediate += 2;
 8017620:	69bb      	ldr	r3, [r7, #24]
 8017622:	3302      	adds	r3, #2
 8017624:	61bb      	str	r3, [r7, #24]
    }

    return ( uint32_t )( ( 4 * intermediate + 1 ) * ( 1 << ( datarate - 2 ) ) );
 8017626:	69bb      	ldr	r3, [r7, #24]
 8017628:	009b      	lsls	r3, r3, #2
 801762a:	1c5a      	adds	r2, r3, #1
 801762c:	68bb      	ldr	r3, [r7, #8]
 801762e:	3b02      	subs	r3, #2
 8017630:	fa02 f303 	lsl.w	r3, r2, r3
}
 8017634:	4618      	mov	r0, r3
 8017636:	372c      	adds	r7, #44	@ 0x2c
 8017638:	46bd      	mov	sp, r7
 801763a:	bc80      	pop	{r7}
 801763c:	4770      	bx	lr
	...

08017640 <RadioTimeOnAir>:

static uint32_t RadioTimeOnAir( RadioModems_t modem, uint32_t bandwidth,
                                uint32_t datarate, uint8_t coderate,
                                uint16_t preambleLen, bool fixLen, uint8_t payloadLen,
                                bool crcOn )
{
 8017640:	b580      	push	{r7, lr}
 8017642:	b08a      	sub	sp, #40	@ 0x28
 8017644:	af04      	add	r7, sp, #16
 8017646:	60b9      	str	r1, [r7, #8]
 8017648:	607a      	str	r2, [r7, #4]
 801764a:	461a      	mov	r2, r3
 801764c:	4603      	mov	r3, r0
 801764e:	73fb      	strb	r3, [r7, #15]
 8017650:	4613      	mov	r3, r2
 8017652:	73bb      	strb	r3, [r7, #14]
    uint32_t numerator = 0;
 8017654:	2300      	movs	r3, #0
 8017656:	617b      	str	r3, [r7, #20]
    uint32_t denominator = 1;
 8017658:	2301      	movs	r3, #1
 801765a:	613b      	str	r3, [r7, #16]

    switch( modem )
 801765c:	7bfb      	ldrb	r3, [r7, #15]
 801765e:	2b00      	cmp	r3, #0
 8017660:	d002      	beq.n	8017668 <RadioTimeOnAir+0x28>
 8017662:	2b01      	cmp	r3, #1
 8017664:	d017      	beq.n	8017696 <RadioTimeOnAir+0x56>
                                                                  fixLen, payloadLen, crcOn );
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
        }
        break;
    default:
        break;
 8017666:	e035      	b.n	80176d4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetGfskTimeOnAirNumerator( datarate, coderate,
 8017668:	f897 0024 	ldrb.w	r0, [r7, #36]	@ 0x24
 801766c:	8c3a      	ldrh	r2, [r7, #32]
 801766e:	7bb9      	ldrb	r1, [r7, #14]
 8017670:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8017674:	9301      	str	r3, [sp, #4]
 8017676:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 801767a:	9300      	str	r3, [sp, #0]
 801767c:	4603      	mov	r3, r0
 801767e:	6878      	ldr	r0, [r7, #4]
 8017680:	f7ff ff32 	bl	80174e8 <RadioGetGfskTimeOnAirNumerator>
 8017684:	4603      	mov	r3, r0
 8017686:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801768a:	fb02 f303 	mul.w	r3, r2, r3
 801768e:	617b      	str	r3, [r7, #20]
            denominator = datarate;
 8017690:	687b      	ldr	r3, [r7, #4]
 8017692:	613b      	str	r3, [r7, #16]
        break;
 8017694:	e01e      	b.n	80176d4 <RadioTimeOnAir+0x94>
            numerator   = 1000U * RadioGetLoRaTimeOnAirNumerator( bandwidth, datarate,
 8017696:	8c39      	ldrh	r1, [r7, #32]
 8017698:	7bba      	ldrb	r2, [r7, #14]
 801769a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 801769e:	9302      	str	r3, [sp, #8]
 80176a0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80176a4:	9301      	str	r3, [sp, #4]
 80176a6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80176aa:	9300      	str	r3, [sp, #0]
 80176ac:	460b      	mov	r3, r1
 80176ae:	6879      	ldr	r1, [r7, #4]
 80176b0:	68b8      	ldr	r0, [r7, #8]
 80176b2:	f7ff ff43 	bl	801753c <RadioGetLoRaTimeOnAirNumerator>
 80176b6:	4603      	mov	r3, r0
 80176b8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80176bc:	fb02 f303 	mul.w	r3, r2, r3
 80176c0:	617b      	str	r3, [r7, #20]
            denominator = RadioGetLoRaBandwidthInHz( Bandwidths[bandwidth] );
 80176c2:	4a0a      	ldr	r2, [pc, #40]	@ (80176ec <RadioTimeOnAir+0xac>)
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	4413      	add	r3, r2
 80176c8:	781b      	ldrb	r3, [r3, #0]
 80176ca:	4618      	mov	r0, r3
 80176cc:	f7ff feb6 	bl	801743c <RadioGetLoRaBandwidthInHz>
 80176d0:	6138      	str	r0, [r7, #16]
        break;
 80176d2:	bf00      	nop
    }
    // Perform integral ceil()
    return DIVC( numerator, denominator ); /* ST_WORKAROUND : simplified calculation with macro usage */
 80176d4:	697a      	ldr	r2, [r7, #20]
 80176d6:	693b      	ldr	r3, [r7, #16]
 80176d8:	4413      	add	r3, r2
 80176da:	1e5a      	subs	r2, r3, #1
 80176dc:	693b      	ldr	r3, [r7, #16]
 80176de:	fbb2 f3f3 	udiv	r3, r2, r3
}
 80176e2:	4618      	mov	r0, r3
 80176e4:	3718      	adds	r7, #24
 80176e6:	46bd      	mov	sp, r7
 80176e8:	bd80      	pop	{r7, pc}
 80176ea:	bf00      	nop
 80176ec:	0801c584 	.word	0x0801c584

080176f0 <RadioSend>:

static void RadioSend( uint8_t *buffer, uint8_t size )
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	b084      	sub	sp, #16
 80176f4:	af00      	add	r7, sp, #0
 80176f6:	6078      	str	r0, [r7, #4]
 80176f8:	460b      	mov	r3, r1
 80176fa:	70fb      	strb	r3, [r7, #3]
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    SUBGRF_SetDioIrqParams( IRQ_TX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_TX_DBG,
 80176fc:	2300      	movs	r3, #0
 80176fe:	2200      	movs	r2, #0
 8017700:	f240 2101 	movw	r1, #513	@ 0x201
 8017704:	f240 2001 	movw	r0, #513	@ 0x201
 8017708:	f001 fd34 	bl	8019174 <SUBGRF_SetDioIrqParams>
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* Set DBG pin */
    DBG_GPIO_RADIO_TX( SET );

    /* Set RF switch */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 801770c:	4b71      	ldr	r3, [pc, #452]	@ (80178d4 <RadioSend+0x1e4>)
 801770e:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017712:	2101      	movs	r1, #1
 8017714:	4618      	mov	r0, r3
 8017716:	f002 f9d1 	bl	8019abc <SUBGRF_SetSwitch>
    /* WORKAROUND - Modulation Quality with 500 kHz LoRaTM Bandwidth*/
    /* RegTxModulation = @address 0x0889 */
    if( ( SubgRf.Modem == MODEM_LORA ) && ( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 ) )
 801771a:	4b6e      	ldr	r3, [pc, #440]	@ (80178d4 <RadioSend+0x1e4>)
 801771c:	781b      	ldrb	r3, [r3, #0]
 801771e:	2b01      	cmp	r3, #1
 8017720:	d112      	bne.n	8017748 <RadioSend+0x58>
 8017722:	4b6c      	ldr	r3, [pc, #432]	@ (80178d4 <RadioSend+0x1e4>)
 8017724:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8017728:	2b06      	cmp	r3, #6
 801772a:	d10d      	bne.n	8017748 <RadioSend+0x58>
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 801772c:	f640 0089 	movw	r0, #2185	@ 0x889
 8017730:	f002 f8e4 	bl	80198fc <SUBGRF_ReadRegister>
 8017734:	4603      	mov	r3, r0
 8017736:	f023 0304 	bic.w	r3, r3, #4
 801773a:	b2db      	uxtb	r3, r3
 801773c:	4619      	mov	r1, r3
 801773e:	f640 0089 	movw	r0, #2185	@ 0x889
 8017742:	f002 f8c7 	bl	80198d4 <SUBGRF_WriteRegister>
 8017746:	e00c      	b.n	8017762 <RadioSend+0x72>
    }
    else
    {
        SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8017748:	f640 0089 	movw	r0, #2185	@ 0x889
 801774c:	f002 f8d6 	bl	80198fc <SUBGRF_ReadRegister>
 8017750:	4603      	mov	r3, r0
 8017752:	f043 0304 	orr.w	r3, r3, #4
 8017756:	b2db      	uxtb	r3, r3
 8017758:	4619      	mov	r1, r3
 801775a:	f640 0089 	movw	r0, #2185	@ 0x889
 801775e:	f002 f8b9 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    /* WORKAROUND END */
    switch( SubgRf.Modem )
 8017762:	4b5c      	ldr	r3, [pc, #368]	@ (80178d4 <RadioSend+0x1e4>)
 8017764:	781b      	ldrb	r3, [r3, #0]
 8017766:	2b04      	cmp	r3, #4
 8017768:	f200 80a7 	bhi.w	80178ba <RadioSend+0x1ca>
 801776c:	a201      	add	r2, pc, #4	@ (adr r2, 8017774 <RadioSend+0x84>)
 801776e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017772:	bf00      	nop
 8017774:	080177a3 	.word	0x080177a3
 8017778:	08017789 	.word	0x08017789
 801777c:	080177a3 	.word	0x080177a3
 8017780:	08017803 	.word	0x08017803
 8017784:	08017823 	.word	0x08017823
    {
        case MODEM_LORA:
        {
            SubgRf.PacketParams.Params.LoRa.PayloadLength = size;
 8017788:	4a52      	ldr	r2, [pc, #328]	@ (80178d4 <RadioSend+0x1e4>)
 801778a:	78fb      	ldrb	r3, [r7, #3]
 801778c:	77d3      	strb	r3, [r2, #31]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801778e:	4852      	ldr	r0, [pc, #328]	@ (80178d8 <RadioSend+0x1e8>)
 8017790:	f001 ff58 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017794:	78fb      	ldrb	r3, [r7, #3]
 8017796:	2200      	movs	r2, #0
 8017798:	4619      	mov	r1, r3
 801779a:	6878      	ldr	r0, [r7, #4]
 801779c:	f001 fa0c 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 80177a0:	e08c      	b.n	80178bc <RadioSend+0x1cc>
        }
        case MODEM_MSK:
        case MODEM_FSK:
        {
            if ( 1UL == RFW_Is_Init( ) )
 80177a2:	f002 fb74 	bl	8019e8e <RFW_Is_Init>
 80177a6:	4603      	mov	r3, r0
 80177a8:	2b01      	cmp	r3, #1
 80177aa:	d11d      	bne.n	80177e8 <RadioSend+0xf8>
            {
              uint8_t outsize;
              if ( 0UL == RFW_TransmitInit( buffer,size, &outsize ) )
 80177ac:	f107 020d 	add.w	r2, r7, #13
 80177b0:	78fb      	ldrb	r3, [r7, #3]
 80177b2:	4619      	mov	r1, r3
 80177b4:	6878      	ldr	r0, [r7, #4]
 80177b6:	f002 fb82 	bl	8019ebe <RFW_TransmitInit>
 80177ba:	4603      	mov	r3, r0
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d10c      	bne.n	80177da <RadioSend+0xea>
              {
                  SubgRf.PacketParams.Params.Gfsk.PayloadLength = outsize;
 80177c0:	7b7a      	ldrb	r2, [r7, #13]
 80177c2:	4b44      	ldr	r3, [pc, #272]	@ (80178d4 <RadioSend+0x1e4>)
 80177c4:	759a      	strb	r2, [r3, #22]
                  SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177c6:	4844      	ldr	r0, [pc, #272]	@ (80178d8 <RadioSend+0x1e8>)
 80177c8:	f001 ff3c 	bl	8019644 <SUBGRF_SetPacketParams>
                  SUBGRF_SendPayload( buffer, outsize, 0 );
 80177cc:	7b7b      	ldrb	r3, [r7, #13]
 80177ce:	2200      	movs	r2, #0
 80177d0:	4619      	mov	r1, r3
 80177d2:	6878      	ldr	r0, [r7, #4]
 80177d4:	f001 f9f0 	bl	8018bb8 <SUBGRF_SendPayload>
            {
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
              SUBGRF_SendPayload( buffer, size, 0 );
            }
            break;
 80177d8:	e070      	b.n	80178bc <RadioSend+0x1cc>
                MW_LOG( TS_ON, VLEVEL_M, "RadioSend Oversize\r\n");
 80177da:	4b40      	ldr	r3, [pc, #256]	@ (80178dc <RadioSend+0x1ec>)
 80177dc:	2201      	movs	r2, #1
 80177de:	2100      	movs	r1, #0
 80177e0:	2002      	movs	r0, #2
 80177e2:	f003 fc8b 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
 80177e6:	e072      	b.n	80178ce <RadioSend+0x1de>
              SubgRf.PacketParams.Params.Gfsk.PayloadLength = size;
 80177e8:	4a3a      	ldr	r2, [pc, #232]	@ (80178d4 <RadioSend+0x1e4>)
 80177ea:	78fb      	ldrb	r3, [r7, #3]
 80177ec:	7593      	strb	r3, [r2, #22]
              SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80177ee:	483a      	ldr	r0, [pc, #232]	@ (80178d8 <RadioSend+0x1e8>)
 80177f0:	f001 ff28 	bl	8019644 <SUBGRF_SetPacketParams>
              SUBGRF_SendPayload( buffer, size, 0 );
 80177f4:	78fb      	ldrb	r3, [r7, #3]
 80177f6:	2200      	movs	r2, #0
 80177f8:	4619      	mov	r1, r3
 80177fa:	6878      	ldr	r0, [r7, #4]
 80177fc:	f001 f9dc 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 8017800:	e05c      	b.n	80178bc <RadioSend+0x1cc>
        }
        case MODEM_BPSK:
        {
            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 8017802:	4b34      	ldr	r3, [pc, #208]	@ (80178d4 <RadioSend+0x1e4>)
 8017804:	2202      	movs	r2, #2
 8017806:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size;
 8017808:	4a32      	ldr	r2, [pc, #200]	@ (80178d4 <RadioSend+0x1e4>)
 801780a:	78fb      	ldrb	r3, [r7, #3]
 801780c:	7693      	strb	r3, [r2, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801780e:	4832      	ldr	r0, [pc, #200]	@ (80178d8 <RadioSend+0x1e8>)
 8017810:	f001 ff18 	bl	8019644 <SUBGRF_SetPacketParams>
            SUBGRF_SendPayload( buffer, size, 0 );
 8017814:	78fb      	ldrb	r3, [r7, #3]
 8017816:	2200      	movs	r2, #0
 8017818:	4619      	mov	r1, r3
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f001 f9cc 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 8017820:	e04c      	b.n	80178bc <RadioSend+0x1cc>
        case MODEM_SIGFOX_TX:
        {
            /* from bpsk to dbpsk */
            /* first 1 bit duplicated */
            /* RadioBuffer is 1 bytes more */
            payload_integration( RadioBuffer, buffer, size );
 8017822:	78fb      	ldrb	r3, [r7, #3]
 8017824:	461a      	mov	r2, r3
 8017826:	6879      	ldr	r1, [r7, #4]
 8017828:	482d      	ldr	r0, [pc, #180]	@ (80178e0 <RadioSend+0x1f0>)
 801782a:	f000 fcbc 	bl	80181a6 <payload_integration>

            SubgRf.PacketParams.PacketType = PACKET_TYPE_BPSK;
 801782e:	4b29      	ldr	r3, [pc, #164]	@ (80178d4 <RadioSend+0x1e4>)
 8017830:	2202      	movs	r2, #2
 8017832:	739a      	strb	r2, [r3, #14]
            SubgRf.PacketParams.Params.Bpsk.PayloadLength = size + 1;
 8017834:	78fb      	ldrb	r3, [r7, #3]
 8017836:	3301      	adds	r3, #1
 8017838:	b2da      	uxtb	r2, r3
 801783a:	4b26      	ldr	r3, [pc, #152]	@ (80178d4 <RadioSend+0x1e4>)
 801783c:	769a      	strb	r2, [r3, #26]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801783e:	4826      	ldr	r0, [pc, #152]	@ (80178d8 <RadioSend+0x1e8>)
 8017840:	f001 ff00 	bl	8019644 <SUBGRF_SetPacketParams>

            RadioWrite( SUBGHZ_RAM_RAMPUPL, 0 ); // clean start-up LSB
 8017844:	2100      	movs	r1, #0
 8017846:	20f1      	movs	r0, #241	@ 0xf1
 8017848:	f000 f95c 	bl	8017b04 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_RAMPUPH, 0 ); // clean start-up MSB
 801784c:	2100      	movs	r1, #0
 801784e:	20f0      	movs	r0, #240	@ 0xf0
 8017850:	f000 f958 	bl	8017b04 <RadioWrite>
            if( SubgRf.ModulationParams.Params.Bpsk.BitRate == 100 )
 8017854:	4b1f      	ldr	r3, [pc, #124]	@ (80178d4 <RadioSend+0x1e4>)
 8017856:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017858:	2b64      	cmp	r3, #100	@ 0x64
 801785a:	d108      	bne.n	801786e <RadioSend+0x17e>
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0x70 ); // clean end of frame LSB
 801785c:	2170      	movs	r1, #112	@ 0x70
 801785e:	20f3      	movs	r0, #243	@ 0xf3
 8017860:	f000 f950 	bl	8017b04 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x1D ); // clean end of frame MSB
 8017864:	211d      	movs	r1, #29
 8017866:	20f2      	movs	r0, #242	@ 0xf2
 8017868:	f000 f94c 	bl	8017b04 <RadioWrite>
 801786c:	e007      	b.n	801787e <RadioSend+0x18e>
            }
            else // 600 bps
            {
                RadioWrite( SUBGHZ_RAM_RAMPDNL, 0xE1 ); // clean end of frame LSB
 801786e:	21e1      	movs	r1, #225	@ 0xe1
 8017870:	20f3      	movs	r0, #243	@ 0xf3
 8017872:	f000 f947 	bl	8017b04 <RadioWrite>
                RadioWrite( SUBGHZ_RAM_RAMPDNH, 0x04 ); // clean end of frame MSB
 8017876:	2104      	movs	r1, #4
 8017878:	20f2      	movs	r0, #242	@ 0xf2
 801787a:	f000 f943 	bl	8017b04 <RadioWrite>
            }

            uint16_t bitNum = ( size * 8 ) + 2;
 801787e:	78fb      	ldrb	r3, [r7, #3]
 8017880:	b29b      	uxth	r3, r3
 8017882:	00db      	lsls	r3, r3, #3
 8017884:	b29b      	uxth	r3, r3
 8017886:	3302      	adds	r3, #2
 8017888:	81fb      	strh	r3, [r7, #14]
            RadioWrite( SUBGHZ_RAM_FRAMELIMH, ( bitNum >> 8 ) & 0x00FF );    // limit frame
 801788a:	89fb      	ldrh	r3, [r7, #14]
 801788c:	0a1b      	lsrs	r3, r3, #8
 801788e:	b29b      	uxth	r3, r3
 8017890:	b2db      	uxtb	r3, r3
 8017892:	4619      	mov	r1, r3
 8017894:	20f4      	movs	r0, #244	@ 0xf4
 8017896:	f000 f935 	bl	8017b04 <RadioWrite>
            RadioWrite( SUBGHZ_RAM_FRAMELIML, bitNum & 0x00FF );             // limit frame
 801789a:	89fb      	ldrh	r3, [r7, #14]
 801789c:	b2db      	uxtb	r3, r3
 801789e:	4619      	mov	r1, r3
 80178a0:	20f5      	movs	r0, #245	@ 0xf5
 80178a2:	f000 f92f 	bl	8017b04 <RadioWrite>
            SUBGRF_SendPayload( RadioBuffer, size+1 , 0xFFFFFF );
 80178a6:	78fb      	ldrb	r3, [r7, #3]
 80178a8:	3301      	adds	r3, #1
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
 80178b0:	4619      	mov	r1, r3
 80178b2:	480b      	ldr	r0, [pc, #44]	@ (80178e0 <RadioSend+0x1f0>)
 80178b4:	f001 f980 	bl	8018bb8 <SUBGRF_SendPayload>
            break;
 80178b8:	e000      	b.n	80178bc <RadioSend+0x1cc>
        }
#endif /*RADIO_SIGFOX_ENABLE == 1*/
        default:
            break;
 80178ba:	bf00      	nop
    }

    TimerSetValue( &TxTimeoutTimer, SubgRf.TxTimeout );
 80178bc:	4b05      	ldr	r3, [pc, #20]	@ (80178d4 <RadioSend+0x1e4>)
 80178be:	685b      	ldr	r3, [r3, #4]
 80178c0:	4619      	mov	r1, r3
 80178c2:	4808      	ldr	r0, [pc, #32]	@ (80178e4 <RadioSend+0x1f4>)
 80178c4:	f003 fa80 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 80178c8:	4806      	ldr	r0, [pc, #24]	@ (80178e4 <RadioSend+0x1f4>)
 80178ca:	f003 f99f 	bl	801ac0c <UTIL_TIMER_Start>
}
 80178ce:	3710      	adds	r7, #16
 80178d0:	46bd      	mov	sp, r7
 80178d2:	bd80      	pop	{r7, pc}
 80178d4:	20001a70 	.word	0x20001a70
 80178d8:	20001a7e 	.word	0x20001a7e
 80178dc:	0801bfb0 	.word	0x0801bfb0
 80178e0:	2000196c 	.word	0x2000196c
 80178e4:	20001acc 	.word	0x20001acc

080178e8 <RadioSleep>:

static void RadioSleep( void )
{
 80178e8:	b580      	push	{r7, lr}
 80178ea:	b082      	sub	sp, #8
 80178ec:	af00      	add	r7, sp, #0
    SleepParams_t params = { 0 };
 80178ee:	2300      	movs	r3, #0
 80178f0:	713b      	strb	r3, [r7, #4]

    params.Fields.WarmStart = 1;
 80178f2:	793b      	ldrb	r3, [r7, #4]
 80178f4:	f043 0304 	orr.w	r3, r3, #4
 80178f8:	713b      	strb	r3, [r7, #4]
    SUBGRF_SetSleep( params );
 80178fa:	7938      	ldrb	r0, [r7, #4]
 80178fc:	f001 fa38 	bl	8018d70 <SUBGRF_SetSleep>

    RADIO_DELAY_MS( 2 );
 8017900:	2002      	movs	r0, #2
 8017902:	f7ea fa01 	bl	8001d08 <HAL_Delay>
}
 8017906:	bf00      	nop
 8017908:	3708      	adds	r7, #8
 801790a:	46bd      	mov	sp, r7
 801790c:	bd80      	pop	{r7, pc}

0801790e <RadioStandby>:

static void RadioStandby( void )
{
 801790e:	b580      	push	{r7, lr}
 8017910:	af00      	add	r7, sp, #0
    SUBGRF_SetStandby( STDBY_RC );
 8017912:	2000      	movs	r0, #0
 8017914:	f001 fa5e 	bl	8018dd4 <SUBGRF_SetStandby>
}
 8017918:	bf00      	nop
 801791a:	bd80      	pop	{r7, pc}

0801791c <RadioRx>:

static void RadioRx( uint32_t timeout )
{
 801791c:	b580      	push	{r7, lr}
 801791e:	b082      	sub	sp, #8
 8017920:	af00      	add	r7, sp, #0
 8017922:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init( ) )
 8017924:	f002 fab3 	bl	8019e8e <RFW_Is_Init>
 8017928:	4603      	mov	r3, r0
 801792a:	2b01      	cmp	r3, #1
 801792c:	d102      	bne.n	8017934 <RadioRx+0x18>
    {
        RFW_ReceiveInit( );
 801792e:	f002 fad6 	bl	8019ede <RFW_ReceiveInit>
 8017932:	e007      	b.n	8017944 <RadioRx+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 8017934:	2300      	movs	r3, #0
 8017936:	2200      	movs	r2, #0
 8017938:	f240 2162 	movw	r1, #610	@ 0x262
 801793c:	f240 2062 	movw	r0, #610	@ 0x262
 8017940:	f001 fc18 	bl	8019174 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }

    if( timeout != 0 )
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	2b00      	cmp	r3, #0
 8017948:	d006      	beq.n	8017958 <RadioRx+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 801794a:	6879      	ldr	r1, [r7, #4]
 801794c:	4811      	ldr	r0, [pc, #68]	@ (8017994 <RadioRx+0x78>)
 801794e:	f003 fa3b 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 8017952:	4810      	ldr	r0, [pc, #64]	@ (8017994 <RadioRx+0x78>)
 8017954:	f003 f95a 	bl	801ac0c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 8017958:	4b0f      	ldr	r3, [pc, #60]	@ (8017998 <RadioRx+0x7c>)
 801795a:	2200      	movs	r2, #0
 801795c:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 801795e:	4b0e      	ldr	r3, [pc, #56]	@ (8017998 <RadioRx+0x7c>)
 8017960:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017964:	2100      	movs	r1, #0
 8017966:	4618      	mov	r0, r3
 8017968:	f002 f8a8 	bl	8019abc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 801796c:	4b0a      	ldr	r3, [pc, #40]	@ (8017998 <RadioRx+0x7c>)
 801796e:	785b      	ldrb	r3, [r3, #1]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d004      	beq.n	801797e <RadioRx+0x62>
    {
        SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8017974:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8017978:	f001 fa68 	bl	8018e4c <SUBGRF_SetRx>
    }
    else
    {
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
    }
}
 801797c:	e005      	b.n	801798a <RadioRx+0x6e>
        SUBGRF_SetRx( SubgRf.RxTimeout << 6 );
 801797e:	4b06      	ldr	r3, [pc, #24]	@ (8017998 <RadioRx+0x7c>)
 8017980:	689b      	ldr	r3, [r3, #8]
 8017982:	019b      	lsls	r3, r3, #6
 8017984:	4618      	mov	r0, r3
 8017986:	f001 fa61 	bl	8018e4c <SUBGRF_SetRx>
}
 801798a:	bf00      	nop
 801798c:	3708      	adds	r7, #8
 801798e:	46bd      	mov	sp, r7
 8017990:	bd80      	pop	{r7, pc}
 8017992:	bf00      	nop
 8017994:	20001ae4 	.word	0x20001ae4
 8017998:	20001a70 	.word	0x20001a70

0801799c <RadioRxBoosted>:

static void RadioRxBoosted( uint32_t timeout )
{
 801799c:	b580      	push	{r7, lr}
 801799e:	b082      	sub	sp, #8
 80179a0:	af00      	add	r7, sp, #0
 80179a2:	6078      	str	r0, [r7, #4]
    if( 1UL == RFW_Is_Init() )
 80179a4:	f002 fa73 	bl	8019e8e <RFW_Is_Init>
 80179a8:	4603      	mov	r3, r0
 80179aa:	2b01      	cmp	r3, #1
 80179ac:	d102      	bne.n	80179b4 <RadioRxBoosted+0x18>
    {
        RFW_ReceiveInit();
 80179ae:	f002 fa96 	bl	8019ede <RFW_ReceiveInit>
 80179b2:	e007      	b.n	80179c4 <RadioRxBoosted+0x28>
    }
    else
    {
        SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 80179b4:	2300      	movs	r3, #0
 80179b6:	2200      	movs	r2, #0
 80179b8:	f240 2162 	movw	r1, #610	@ 0x262
 80179bc:	f240 2062 	movw	r0, #610	@ 0x262
 80179c0:	f001 fbd8 	bl	8019174 <SUBGRF_SetDioIrqParams>
                                IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
                                IRQ_RADIO_NONE,
                                IRQ_RADIO_NONE );
    }
    if( timeout != 0 )
 80179c4:	687b      	ldr	r3, [r7, #4]
 80179c6:	2b00      	cmp	r3, #0
 80179c8:	d006      	beq.n	80179d8 <RadioRxBoosted+0x3c>
    {
        TimerSetValue( &RxTimeoutTimer, timeout );
 80179ca:	6879      	ldr	r1, [r7, #4]
 80179cc:	4811      	ldr	r0, [pc, #68]	@ (8017a14 <RadioRxBoosted+0x78>)
 80179ce:	f003 f9fb 	bl	801adc8 <UTIL_TIMER_SetPeriod>
        TimerStart( &RxTimeoutTimer );
 80179d2:	4810      	ldr	r0, [pc, #64]	@ (8017a14 <RadioRxBoosted+0x78>)
 80179d4:	f003 f91a 	bl	801ac0c <UTIL_TIMER_Start>
    }
    /* ST_WORKAROUND_BEGIN : Set the debug pin and update the radio switch */
    /* switch off RxDcPreambleDetect See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 0;
 80179d8:	4b0f      	ldr	r3, [pc, #60]	@ (8017a18 <RadioRxBoosted+0x7c>)
 80179da:	2200      	movs	r2, #0
 80179dc:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Set DBG pin */
    DBG_GPIO_RADIO_RX( SET );
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 80179de:	4b0e      	ldr	r3, [pc, #56]	@ (8017a18 <RadioRxBoosted+0x7c>)
 80179e0:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 80179e4:	2100      	movs	r1, #0
 80179e6:	4618      	mov	r0, r3
 80179e8:	f002 f868 	bl	8019abc <SUBGRF_SetSwitch>
    /* ST_WORKAROUND_END */

    if( SubgRf.RxContinuous == true )
 80179ec:	4b0a      	ldr	r3, [pc, #40]	@ (8017a18 <RadioRxBoosted+0x7c>)
 80179ee:	785b      	ldrb	r3, [r3, #1]
 80179f0:	2b00      	cmp	r3, #0
 80179f2:	d004      	beq.n	80179fe <RadioRxBoosted+0x62>
    {
        SUBGRF_SetRxBoosted( 0xFFFFFF ); // Rx Continuous
 80179f4:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 80179f8:	f001 fa48 	bl	8018e8c <SUBGRF_SetRxBoosted>
    }
    else
    {
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
    }
}
 80179fc:	e005      	b.n	8017a0a <RadioRxBoosted+0x6e>
        SUBGRF_SetRxBoosted( SubgRf.RxTimeout << 6 );
 80179fe:	4b06      	ldr	r3, [pc, #24]	@ (8017a18 <RadioRxBoosted+0x7c>)
 8017a00:	689b      	ldr	r3, [r3, #8]
 8017a02:	019b      	lsls	r3, r3, #6
 8017a04:	4618      	mov	r0, r3
 8017a06:	f001 fa41 	bl	8018e8c <SUBGRF_SetRxBoosted>
}
 8017a0a:	bf00      	nop
 8017a0c:	3708      	adds	r7, #8
 8017a0e:	46bd      	mov	sp, r7
 8017a10:	bd80      	pop	{r7, pc}
 8017a12:	bf00      	nop
 8017a14:	20001ae4 	.word	0x20001ae4
 8017a18:	20001a70 	.word	0x20001a70

08017a1c <RadioSetRxDutyCycle>:

static void RadioSetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8017a1c:	b580      	push	{r7, lr}
 8017a1e:	b082      	sub	sp, #8
 8017a20:	af00      	add	r7, sp, #0
 8017a22:	6078      	str	r0, [r7, #4]
 8017a24:	6039      	str	r1, [r7, #0]
    /*See STM32WL Errata: RadioSetRxDutyCycle*/
    SubgRf.RxDcPreambleDetectTimeout = 2 * rxTime + sleepTime;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	005a      	lsls	r2, r3, #1
 8017a2a:	683b      	ldr	r3, [r7, #0]
 8017a2c:	4413      	add	r3, r2
 8017a2e:	4a0c      	ldr	r2, [pc, #48]	@ (8017a60 <RadioSetRxDutyCycle+0x44>)
 8017a30:	6593      	str	r3, [r2, #88]	@ 0x58
    /*Enable also the IRQ_PREAMBLE_DETECTED*/
    SUBGRF_SetDioIrqParams( IRQ_RADIO_ALL, IRQ_RADIO_ALL, IRQ_RADIO_NONE, IRQ_RADIO_NONE );
 8017a32:	2300      	movs	r3, #0
 8017a34:	2200      	movs	r2, #0
 8017a36:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8017a3a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8017a3e:	f001 fb99 	bl	8019174 <SUBGRF_SetDioIrqParams>
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a42:	4b07      	ldr	r3, [pc, #28]	@ (8017a60 <RadioSetRxDutyCycle+0x44>)
 8017a44:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a48:	2100      	movs	r1, #0
 8017a4a:	4618      	mov	r0, r3
 8017a4c:	f002 f836 	bl	8019abc <SUBGRF_SetSwitch>
    /* Start Rx DutyCycle*/
    SUBGRF_SetRxDutyCycle( rxTime, sleepTime );
 8017a50:	6839      	ldr	r1, [r7, #0]
 8017a52:	6878      	ldr	r0, [r7, #4]
 8017a54:	f001 fa3e 	bl	8018ed4 <SUBGRF_SetRxDutyCycle>
}
 8017a58:	bf00      	nop
 8017a5a:	3708      	adds	r7, #8
 8017a5c:	46bd      	mov	sp, r7
 8017a5e:	bd80      	pop	{r7, pc}
 8017a60:	20001a70 	.word	0x20001a70

08017a64 <RadioStartCad>:

static void RadioStartCad( void )
{
 8017a64:	b580      	push	{r7, lr}
 8017a66:	af00      	add	r7, sp, #0
    /* RF switch configuration */
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_RX );
 8017a68:	4b09      	ldr	r3, [pc, #36]	@ (8017a90 <RadioStartCad+0x2c>)
 8017a6a:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8017a6e:	2100      	movs	r1, #0
 8017a70:	4618      	mov	r0, r3
 8017a72:	f002 f823 	bl	8019abc <SUBGRF_SetSwitch>

    SUBGRF_SetDioIrqParams( IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
 8017a76:	2300      	movs	r3, #0
 8017a78:	2200      	movs	r2, #0
 8017a7a:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8017a7e:	f44f 70c0 	mov.w	r0, #384	@ 0x180
 8017a82:	f001 fb77 	bl	8019174 <SUBGRF_SetDioIrqParams>
                            IRQ_CAD_CLEAR | IRQ_CAD_DETECTED,
                            IRQ_RADIO_NONE,
                            IRQ_RADIO_NONE );
    SUBGRF_SetCad( );
 8017a86:	f001 fa51 	bl	8018f2c <SUBGRF_SetCad>
}
 8017a8a:	bf00      	nop
 8017a8c:	bd80      	pop	{r7, pc}
 8017a8e:	bf00      	nop
 8017a90:	20001a70 	.word	0x20001a70

08017a94 <RadioSetTxContinuousWave>:

static void RadioSetTxContinuousWave( uint32_t freq, int8_t power, uint16_t time )
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b084      	sub	sp, #16
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
 8017a9c:	460b      	mov	r3, r1
 8017a9e:	70fb      	strb	r3, [r7, #3]
 8017aa0:	4613      	mov	r3, r2
 8017aa2:	803b      	strh	r3, [r7, #0]
    uint32_t timeout = ( uint32_t )time * 1000;
 8017aa4:	883b      	ldrh	r3, [r7, #0]
 8017aa6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017aaa:	fb02 f303 	mul.w	r3, r2, r3
 8017aae:	60fb      	str	r3, [r7, #12]
    uint8_t antswitchpow;

    SUBGRF_SetRfFrequency( freq );
 8017ab0:	6878      	ldr	r0, [r7, #4]
 8017ab2:	f001 fbbb 	bl	801922c <SUBGRF_SetRfFrequency>

    antswitchpow = SUBGRF_SetRfTxPower( power );
 8017ab6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8017aba:	4618      	mov	r0, r3
 8017abc:	f002 f826 	bl	8019b0c <SUBGRF_SetRfTxPower>
 8017ac0:	4603      	mov	r3, r0
 8017ac2:	72fb      	strb	r3, [r7, #11]

    /* Set RF switch */
    SUBGRF_SetSwitch( antswitchpow, RFSWITCH_TX );
 8017ac4:	7afb      	ldrb	r3, [r7, #11]
 8017ac6:	2101      	movs	r1, #1
 8017ac8:	4618      	mov	r0, r3
 8017aca:	f001 fff7 	bl	8019abc <SUBGRF_SetSwitch>

    SUBGRF_SetTxContinuousWave( );
 8017ace:	f001 fa3b 	bl	8018f48 <SUBGRF_SetTxContinuousWave>

    TimerSetValue( &TxTimeoutTimer, timeout );
 8017ad2:	68f9      	ldr	r1, [r7, #12]
 8017ad4:	4804      	ldr	r0, [pc, #16]	@ (8017ae8 <RadioSetTxContinuousWave+0x54>)
 8017ad6:	f003 f977 	bl	801adc8 <UTIL_TIMER_SetPeriod>
    TimerStart( &TxTimeoutTimer );
 8017ada:	4803      	ldr	r0, [pc, #12]	@ (8017ae8 <RadioSetTxContinuousWave+0x54>)
 8017adc:	f003 f896 	bl	801ac0c <UTIL_TIMER_Start>
}
 8017ae0:	bf00      	nop
 8017ae2:	3710      	adds	r7, #16
 8017ae4:	46bd      	mov	sp, r7
 8017ae6:	bd80      	pop	{r7, pc}
 8017ae8:	20001acc 	.word	0x20001acc

08017aec <RadioRssi>:

static int16_t RadioRssi( RadioModems_t modem )
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	4603      	mov	r3, r0
 8017af4:	71fb      	strb	r3, [r7, #7]
    return SUBGRF_GetRssiInst( );
 8017af6:	f001 fe5a 	bl	80197ae <SUBGRF_GetRssiInst>
 8017afa:	4603      	mov	r3, r0
}
 8017afc:	4618      	mov	r0, r3
 8017afe:	3708      	adds	r7, #8
 8017b00:	46bd      	mov	sp, r7
 8017b02:	bd80      	pop	{r7, pc}

08017b04 <RadioWrite>:

static void RadioWrite( uint16_t addr, uint8_t data )
{
 8017b04:	b580      	push	{r7, lr}
 8017b06:	b082      	sub	sp, #8
 8017b08:	af00      	add	r7, sp, #0
 8017b0a:	4603      	mov	r3, r0
 8017b0c:	460a      	mov	r2, r1
 8017b0e:	80fb      	strh	r3, [r7, #6]
 8017b10:	4613      	mov	r3, r2
 8017b12:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegister( addr, data );
 8017b14:	797a      	ldrb	r2, [r7, #5]
 8017b16:	88fb      	ldrh	r3, [r7, #6]
 8017b18:	4611      	mov	r1, r2
 8017b1a:	4618      	mov	r0, r3
 8017b1c:	f001 feda 	bl	80198d4 <SUBGRF_WriteRegister>
}
 8017b20:	bf00      	nop
 8017b22:	3708      	adds	r7, #8
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}

08017b28 <RadioRead>:

static uint8_t RadioRead( uint16_t addr )
{
 8017b28:	b580      	push	{r7, lr}
 8017b2a:	b082      	sub	sp, #8
 8017b2c:	af00      	add	r7, sp, #0
 8017b2e:	4603      	mov	r3, r0
 8017b30:	80fb      	strh	r3, [r7, #6]
    return SUBGRF_ReadRegister( addr );
 8017b32:	88fb      	ldrh	r3, [r7, #6]
 8017b34:	4618      	mov	r0, r3
 8017b36:	f001 fee1 	bl	80198fc <SUBGRF_ReadRegister>
 8017b3a:	4603      	mov	r3, r0
}
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	3708      	adds	r7, #8
 8017b40:	46bd      	mov	sp, r7
 8017b42:	bd80      	pop	{r7, pc}

08017b44 <RadioWriteRegisters>:

static void RadioWriteRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b44:	b580      	push	{r7, lr}
 8017b46:	b082      	sub	sp, #8
 8017b48:	af00      	add	r7, sp, #0
 8017b4a:	4603      	mov	r3, r0
 8017b4c:	6039      	str	r1, [r7, #0]
 8017b4e:	80fb      	strh	r3, [r7, #6]
 8017b50:	4613      	mov	r3, r2
 8017b52:	717b      	strb	r3, [r7, #5]
    SUBGRF_WriteRegisters( addr, buffer, size );
 8017b54:	797b      	ldrb	r3, [r7, #5]
 8017b56:	b29a      	uxth	r2, r3
 8017b58:	88fb      	ldrh	r3, [r7, #6]
 8017b5a:	6839      	ldr	r1, [r7, #0]
 8017b5c:	4618      	mov	r0, r3
 8017b5e:	f001 fee1 	bl	8019924 <SUBGRF_WriteRegisters>
}
 8017b62:	bf00      	nop
 8017b64:	3708      	adds	r7, #8
 8017b66:	46bd      	mov	sp, r7
 8017b68:	bd80      	pop	{r7, pc}

08017b6a <RadioReadRegisters>:

static void RadioReadRegisters( uint16_t addr, uint8_t *buffer, uint8_t size )
{
 8017b6a:	b580      	push	{r7, lr}
 8017b6c:	b082      	sub	sp, #8
 8017b6e:	af00      	add	r7, sp, #0
 8017b70:	4603      	mov	r3, r0
 8017b72:	6039      	str	r1, [r7, #0]
 8017b74:	80fb      	strh	r3, [r7, #6]
 8017b76:	4613      	mov	r3, r2
 8017b78:	717b      	strb	r3, [r7, #5]
    SUBGRF_ReadRegisters( addr, buffer, size );
 8017b7a:	797b      	ldrb	r3, [r7, #5]
 8017b7c:	b29a      	uxth	r2, r3
 8017b7e:	88fb      	ldrh	r3, [r7, #6]
 8017b80:	6839      	ldr	r1, [r7, #0]
 8017b82:	4618      	mov	r0, r3
 8017b84:	f001 fef0 	bl	8019968 <SUBGRF_ReadRegisters>
}
 8017b88:	bf00      	nop
 8017b8a:	3708      	adds	r7, #8
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	bd80      	pop	{r7, pc}

08017b90 <RadioSetMaxPayloadLength>:

static void RadioSetMaxPayloadLength( RadioModems_t modem, uint8_t max )
{
 8017b90:	b580      	push	{r7, lr}
 8017b92:	b082      	sub	sp, #8
 8017b94:	af00      	add	r7, sp, #0
 8017b96:	4603      	mov	r3, r0
 8017b98:	460a      	mov	r2, r1
 8017b9a:	71fb      	strb	r3, [r7, #7]
 8017b9c:	4613      	mov	r3, r2
 8017b9e:	71bb      	strb	r3, [r7, #6]
    if( modem == MODEM_LORA )
 8017ba0:	79fb      	ldrb	r3, [r7, #7]
 8017ba2:	2b01      	cmp	r3, #1
 8017ba4:	d10a      	bne.n	8017bbc <RadioSetMaxPayloadLength+0x2c>
    {
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength = max;
 8017ba6:	4a0e      	ldr	r2, [pc, #56]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017ba8:	79bb      	ldrb	r3, [r7, #6]
 8017baa:	7013      	strb	r3, [r2, #0]
 8017bac:	4b0c      	ldr	r3, [pc, #48]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017bae:	781a      	ldrb	r2, [r3, #0]
 8017bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8017be4 <RadioSetMaxPayloadLength+0x54>)
 8017bb2:	77da      	strb	r2, [r3, #31]
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bb4:	480c      	ldr	r0, [pc, #48]	@ (8017be8 <RadioSetMaxPayloadLength+0x58>)
 8017bb6:	f001 fd45 	bl	8019644 <SUBGRF_SetPacketParams>
        {
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
        }
    }
}
 8017bba:	e00d      	b.n	8017bd8 <RadioSetMaxPayloadLength+0x48>
        if( SubgRf.PacketParams.Params.Gfsk.HeaderType == RADIO_PACKET_VARIABLE_LENGTH )
 8017bbc:	4b09      	ldr	r3, [pc, #36]	@ (8017be4 <RadioSetMaxPayloadLength+0x54>)
 8017bbe:	7d5b      	ldrb	r3, [r3, #21]
 8017bc0:	2b01      	cmp	r3, #1
 8017bc2:	d109      	bne.n	8017bd8 <RadioSetMaxPayloadLength+0x48>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = MaxPayloadLength = max;
 8017bc4:	4a06      	ldr	r2, [pc, #24]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017bc6:	79bb      	ldrb	r3, [r7, #6]
 8017bc8:	7013      	strb	r3, [r2, #0]
 8017bca:	4b05      	ldr	r3, [pc, #20]	@ (8017be0 <RadioSetMaxPayloadLength+0x50>)
 8017bcc:	781a      	ldrb	r2, [r3, #0]
 8017bce:	4b05      	ldr	r3, [pc, #20]	@ (8017be4 <RadioSetMaxPayloadLength+0x54>)
 8017bd0:	759a      	strb	r2, [r3, #22]
            SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 8017bd2:	4805      	ldr	r0, [pc, #20]	@ (8017be8 <RadioSetMaxPayloadLength+0x58>)
 8017bd4:	f001 fd36 	bl	8019644 <SUBGRF_SetPacketParams>
}
 8017bd8:	bf00      	nop
 8017bda:	3708      	adds	r7, #8
 8017bdc:	46bd      	mov	sp, r7
 8017bde:	bd80      	pop	{r7, pc}
 8017be0:	20000144 	.word	0x20000144
 8017be4:	20001a70 	.word	0x20001a70
 8017be8:	20001a7e 	.word	0x20001a7e

08017bec <RadioSetPublicNetwork>:

static void RadioSetPublicNetwork( bool enable )
{
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b082      	sub	sp, #8
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	4603      	mov	r3, r0
 8017bf4:	71fb      	strb	r3, [r7, #7]
    SubgRf.PublicNetwork.Current = SubgRf.PublicNetwork.Previous = enable;
 8017bf6:	4a13      	ldr	r2, [pc, #76]	@ (8017c44 <RadioSetPublicNetwork+0x58>)
 8017bf8:	79fb      	ldrb	r3, [r7, #7]
 8017bfa:	7313      	strb	r3, [r2, #12]
 8017bfc:	4b11      	ldr	r3, [pc, #68]	@ (8017c44 <RadioSetPublicNetwork+0x58>)
 8017bfe:	7b1a      	ldrb	r2, [r3, #12]
 8017c00:	4b10      	ldr	r3, [pc, #64]	@ (8017c44 <RadioSetPublicNetwork+0x58>)
 8017c02:	735a      	strb	r2, [r3, #13]

    RadioSetModem( MODEM_LORA );
 8017c04:	2001      	movs	r0, #1
 8017c06:	f7ff f82f 	bl	8016c68 <RadioSetModem>
    if( enable == true )
 8017c0a:	79fb      	ldrb	r3, [r7, #7]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d00a      	beq.n	8017c26 <RadioSetPublicNetwork+0x3a>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PUBLIC_SYNCWORD >> 8 ) & 0xFF );
 8017c10:	2134      	movs	r1, #52	@ 0x34
 8017c12:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c16:	f001 fe5d 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PUBLIC_SYNCWORD & 0xFF );
 8017c1a:	2144      	movs	r1, #68	@ 0x44
 8017c1c:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c20:	f001 fe58 	bl	80198d4 <SUBGRF_WriteRegister>
    {
        // Change LoRa modem SyncWord
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
    }
}
 8017c24:	e009      	b.n	8017c3a <RadioSetPublicNetwork+0x4e>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD, ( LORA_MAC_PRIVATE_SYNCWORD >> 8 ) & 0xFF );
 8017c26:	2114      	movs	r1, #20
 8017c28:	f44f 60e8 	mov.w	r0, #1856	@ 0x740
 8017c2c:	f001 fe52 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_LR_SYNCWORD + 1, LORA_MAC_PRIVATE_SYNCWORD & 0xFF );
 8017c30:	2124      	movs	r1, #36	@ 0x24
 8017c32:	f240 7041 	movw	r0, #1857	@ 0x741
 8017c36:	f001 fe4d 	bl	80198d4 <SUBGRF_WriteRegister>
}
 8017c3a:	bf00      	nop
 8017c3c:	3708      	adds	r7, #8
 8017c3e:	46bd      	mov	sp, r7
 8017c40:	bd80      	pop	{r7, pc}
 8017c42:	bf00      	nop
 8017c44:	20001a70 	.word	0x20001a70

08017c48 <RadioGetWakeupTime>:

static uint32_t RadioGetWakeupTime( void )
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	af00      	add	r7, sp, #0
    return SUBGRF_GetRadioWakeUpTime() + RADIO_WAKEUP_TIME;
 8017c4c:	f001 ff92 	bl	8019b74 <SUBGRF_GetRadioWakeUpTime>
 8017c50:	4603      	mov	r3, r0
 8017c52:	3303      	adds	r3, #3
}
 8017c54:	4618      	mov	r0, r3
 8017c56:	bd80      	pop	{r7, pc}

08017c58 <RadioOnTxTimeoutIrq>:

static void RadioOnTxTimeoutIrq( void *context )
{
 8017c58:	b580      	push	{r7, lr}
 8017c5a:	b082      	sub	sp, #8
 8017c5c:	af00      	add	r7, sp, #0
 8017c5e:	6078      	str	r0, [r7, #4]
    RADIO_TX_TIMEOUT_PROCESS();
 8017c60:	f000 f80e 	bl	8017c80 <RadioOnTxTimeoutProcess>
}
 8017c64:	bf00      	nop
 8017c66:	3708      	adds	r7, #8
 8017c68:	46bd      	mov	sp, r7
 8017c6a:	bd80      	pop	{r7, pc}

08017c6c <RadioOnRxTimeoutIrq>:

static void RadioOnRxTimeoutIrq( void *context )
{
 8017c6c:	b580      	push	{r7, lr}
 8017c6e:	b082      	sub	sp, #8
 8017c70:	af00      	add	r7, sp, #0
 8017c72:	6078      	str	r0, [r7, #4]
    RADIO_RX_TIMEOUT_PROCESS();
 8017c74:	f000 f818 	bl	8017ca8 <RadioOnRxTimeoutProcess>
}
 8017c78:	bf00      	nop
 8017c7a:	3708      	adds	r7, #8
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}

08017c80 <RadioOnTxTimeoutProcess>:

static void RadioOnTxTimeoutProcess( void )
{
 8017c80:	b580      	push	{r7, lr}
 8017c82:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_TX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017c84:	4b07      	ldr	r3, [pc, #28]	@ (8017ca4 <RadioOnTxTimeoutProcess+0x24>)
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	2b00      	cmp	r3, #0
 8017c8a:	d008      	beq.n	8017c9e <RadioOnTxTimeoutProcess+0x1e>
 8017c8c:	4b05      	ldr	r3, [pc, #20]	@ (8017ca4 <RadioOnTxTimeoutProcess+0x24>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	685b      	ldr	r3, [r3, #4]
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d003      	beq.n	8017c9e <RadioOnTxTimeoutProcess+0x1e>
    {
        RadioEvents->TxTimeout( );
 8017c96:	4b03      	ldr	r3, [pc, #12]	@ (8017ca4 <RadioOnTxTimeoutProcess+0x24>)
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	685b      	ldr	r3, [r3, #4]
 8017c9c:	4798      	blx	r3
    }
}
 8017c9e:	bf00      	nop
 8017ca0:	bd80      	pop	{r7, pc}
 8017ca2:	bf00      	nop
 8017ca4:	20001a6c 	.word	0x20001a6c

08017ca8 <RadioOnRxTimeoutProcess>:

static void RadioOnRxTimeoutProcess( void )
{
 8017ca8:	b580      	push	{r7, lr}
 8017caa:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Reset DBG pin */
    DBG_GPIO_RADIO_RX( RST );
    /* ST_WORKAROUND_END */

    if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017cac:	4b07      	ldr	r3, [pc, #28]	@ (8017ccc <RadioOnRxTimeoutProcess+0x24>)
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d008      	beq.n	8017cc6 <RadioOnRxTimeoutProcess+0x1e>
 8017cb4:	4b05      	ldr	r3, [pc, #20]	@ (8017ccc <RadioOnRxTimeoutProcess+0x24>)
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	68db      	ldr	r3, [r3, #12]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d003      	beq.n	8017cc6 <RadioOnRxTimeoutProcess+0x1e>
    {
        RadioEvents->RxTimeout( );
 8017cbe:	4b03      	ldr	r3, [pc, #12]	@ (8017ccc <RadioOnRxTimeoutProcess+0x24>)
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	68db      	ldr	r3, [r3, #12]
 8017cc4:	4798      	blx	r3
    }
}
 8017cc6:	bf00      	nop
 8017cc8:	bd80      	pop	{r7, pc}
 8017cca:	bf00      	nop
 8017ccc:	20001a6c 	.word	0x20001a6c

08017cd0 <RadioOnDioIrq>:

static void RadioOnDioIrq( RadioIrqMasks_t radioIrq )
{
 8017cd0:	b580      	push	{r7, lr}
 8017cd2:	b082      	sub	sp, #8
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	80fb      	strh	r3, [r7, #6]
    SubgRf.RadioIrq = radioIrq;
 8017cda:	4a05      	ldr	r2, [pc, #20]	@ (8017cf0 <RadioOnDioIrq+0x20>)
 8017cdc:	88fb      	ldrh	r3, [r7, #6]
 8017cde:	f8a2 3054 	strh.w	r3, [r2, #84]	@ 0x54

    RADIO_IRQ_PROCESS();
 8017ce2:	f000 f807 	bl	8017cf4 <RadioIrqProcess>
}
 8017ce6:	bf00      	nop
 8017ce8:	3708      	adds	r7, #8
 8017cea:	46bd      	mov	sp, r7
 8017cec:	bd80      	pop	{r7, pc}
 8017cee:	bf00      	nop
 8017cf0:	20001a70 	.word	0x20001a70

08017cf4 <RadioIrqProcess>:

static void RadioIrqProcess( void )
{
 8017cf4:	b5b0      	push	{r4, r5, r7, lr}
 8017cf6:	b082      	sub	sp, #8
 8017cf8:	af00      	add	r7, sp, #0
    uint8_t size = 0;
 8017cfa:	2300      	movs	r3, #0
 8017cfc:	71fb      	strb	r3, [r7, #7]
    int32_t cfo = 0;
 8017cfe:	2300      	movs	r3, #0
 8017d00:	603b      	str	r3, [r7, #0]

    switch( SubgRf.RadioIrq )
 8017d02:	4ba8      	ldr	r3, [pc, #672]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017d04:	f8b3 3054 	ldrh.w	r3, [r3, #84]	@ 0x54
 8017d08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d0c:	f000 810d 	beq.w	8017f2a <RadioIrqProcess+0x236>
 8017d10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8017d14:	f300 81e8 	bgt.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d1c:	f000 80f1 	beq.w	8017f02 <RadioIrqProcess+0x20e>
 8017d20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017d24:	f300 81e0 	bgt.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d28:	2b80      	cmp	r3, #128	@ 0x80
 8017d2a:	f000 80d6 	beq.w	8017eda <RadioIrqProcess+0x1e6>
 8017d2e:	2b80      	cmp	r3, #128	@ 0x80
 8017d30:	f300 81da 	bgt.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d34:	2b20      	cmp	r3, #32
 8017d36:	dc49      	bgt.n	8017dcc <RadioIrqProcess+0xd8>
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	f340 81d5 	ble.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d3e:	3b01      	subs	r3, #1
 8017d40:	2b1f      	cmp	r3, #31
 8017d42:	f200 81d1 	bhi.w	80180e8 <RadioIrqProcess+0x3f4>
 8017d46:	a201      	add	r2, pc, #4	@ (adr r2, 8017d4c <RadioIrqProcess+0x58>)
 8017d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017d4c:	08017dd5 	.word	0x08017dd5
 8017d50:	08017e0f 	.word	0x08017e0f
 8017d54:	080180e9 	.word	0x080180e9
 8017d58:	08017fc5 	.word	0x08017fc5
 8017d5c:	080180e9 	.word	0x080180e9
 8017d60:	080180e9 	.word	0x080180e9
 8017d64:	080180e9 	.word	0x080180e9
 8017d68:	08018041 	.word	0x08018041
 8017d6c:	080180e9 	.word	0x080180e9
 8017d70:	080180e9 	.word	0x080180e9
 8017d74:	080180e9 	.word	0x080180e9
 8017d78:	080180e9 	.word	0x080180e9
 8017d7c:	080180e9 	.word	0x080180e9
 8017d80:	080180e9 	.word	0x080180e9
 8017d84:	080180e9 	.word	0x080180e9
 8017d88:	0801805d 	.word	0x0801805d
 8017d8c:	080180e9 	.word	0x080180e9
 8017d90:	080180e9 	.word	0x080180e9
 8017d94:	080180e9 	.word	0x080180e9
 8017d98:	080180e9 	.word	0x080180e9
 8017d9c:	080180e9 	.word	0x080180e9
 8017da0:	080180e9 	.word	0x080180e9
 8017da4:	080180e9 	.word	0x080180e9
 8017da8:	080180e9 	.word	0x080180e9
 8017dac:	080180e9 	.word	0x080180e9
 8017db0:	080180e9 	.word	0x080180e9
 8017db4:	080180e9 	.word	0x080180e9
 8017db8:	080180e9 	.word	0x080180e9
 8017dbc:	080180e9 	.word	0x080180e9
 8017dc0:	080180e9 	.word	0x080180e9
 8017dc4:	080180e9 	.word	0x080180e9
 8017dc8:	0801806b 	.word	0x0801806b
 8017dcc:	2b40      	cmp	r3, #64	@ 0x40
 8017dce:	f000 816d 	beq.w	80180ac <RadioIrqProcess+0x3b8>
        {
            RadioEvents->RxError( );
        }
        break;
    default:
        break;
 8017dd2:	e189      	b.n	80180e8 <RadioIrqProcess+0x3f4>
        TimerStop( &TxTimeoutTimer );
 8017dd4:	4874      	ldr	r0, [pc, #464]	@ (8017fa8 <RadioIrqProcess+0x2b4>)
 8017dd6:	f002 ff87 	bl	801ace8 <UTIL_TIMER_Stop>
        SUBGRF_SetStandby( STDBY_RC );
 8017dda:	2000      	movs	r0, #0
 8017ddc:	f000 fffa 	bl	8018dd4 <SUBGRF_SetStandby>
        if( RFW_Is_LongPacketModeEnabled() == 1 )
 8017de0:	f002 f85c 	bl	8019e9c <RFW_Is_LongPacketModeEnabled>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b01      	cmp	r3, #1
 8017de8:	d101      	bne.n	8017dee <RadioIrqProcess+0xfa>
            RFW_DeInit_TxLongPacket( );
 8017dea:	f002 f880 	bl	8019eee <RFW_DeInit_TxLongPacket>
        if( ( RadioEvents != NULL ) && ( RadioEvents->TxDone != NULL ) )
 8017dee:	4b6f      	ldr	r3, [pc, #444]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017df0:	681b      	ldr	r3, [r3, #0]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	f000 817a 	beq.w	80180ec <RadioIrqProcess+0x3f8>
 8017df8:	4b6c      	ldr	r3, [pc, #432]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017dfa:	681b      	ldr	r3, [r3, #0]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	f000 8174 	beq.w	80180ec <RadioIrqProcess+0x3f8>
            RadioEvents->TxDone( );
 8017e04:	4b69      	ldr	r3, [pc, #420]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e06:	681b      	ldr	r3, [r3, #0]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	4798      	blx	r3
        break;
 8017e0c:	e16e      	b.n	80180ec <RadioIrqProcess+0x3f8>
        TimerStop( &RxTimeoutTimer );
 8017e0e:	4868      	ldr	r0, [pc, #416]	@ (8017fb0 <RadioIrqProcess+0x2bc>)
 8017e10:	f002 ff6a 	bl	801ace8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8017e14:	4b63      	ldr	r3, [pc, #396]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e16:	785b      	ldrb	r3, [r3, #1]
 8017e18:	f083 0301 	eor.w	r3, r3, #1
 8017e1c:	b2db      	uxtb	r3, r3
 8017e1e:	2b00      	cmp	r3, #0
 8017e20:	d014      	beq.n	8017e4c <RadioIrqProcess+0x158>
            SUBGRF_SetStandby( STDBY_RC );
 8017e22:	2000      	movs	r0, #0
 8017e24:	f000 ffd6 	bl	8018dd4 <SUBGRF_SetStandby>
            SUBGRF_WriteRegister( SUBGHZ_RTCCTLR, 0x00 );
 8017e28:	2100      	movs	r1, #0
 8017e2a:	f640 1002 	movw	r0, #2306	@ 0x902
 8017e2e:	f001 fd51 	bl	80198d4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( SUBGHZ_EVENTMASKR, SUBGRF_ReadRegister( SUBGHZ_EVENTMASKR ) | ( 1 << 1 ) );
 8017e32:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e36:	f001 fd61 	bl	80198fc <SUBGRF_ReadRegister>
 8017e3a:	4603      	mov	r3, r0
 8017e3c:	f043 0302 	orr.w	r3, r3, #2
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	4619      	mov	r1, r3
 8017e44:	f640 1044 	movw	r0, #2372	@ 0x944
 8017e48:	f001 fd44 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_GetPayload( RadioBuffer, &size, 255 );
 8017e4c:	1dfb      	adds	r3, r7, #7
 8017e4e:	22ff      	movs	r2, #255	@ 0xff
 8017e50:	4619      	mov	r1, r3
 8017e52:	4858      	ldr	r0, [pc, #352]	@ (8017fb4 <RadioIrqProcess+0x2c0>)
 8017e54:	f000 fe8e 	bl	8018b74 <SUBGRF_GetPayload>
        SUBGRF_GetPacketStatus( &( SubgRf.PacketStatus ) );
 8017e58:	4857      	ldr	r0, [pc, #348]	@ (8017fb8 <RadioIrqProcess+0x2c4>)
 8017e5a:	f001 fce9 	bl	8019830 <SUBGRF_GetPacketStatus>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxDone != NULL ) )
 8017e5e:	4b53      	ldr	r3, [pc, #332]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e60:	681b      	ldr	r3, [r3, #0]
 8017e62:	2b00      	cmp	r3, #0
 8017e64:	f000 8144 	beq.w	80180f0 <RadioIrqProcess+0x3fc>
 8017e68:	4b50      	ldr	r3, [pc, #320]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e6a:	681b      	ldr	r3, [r3, #0]
 8017e6c:	689b      	ldr	r3, [r3, #8]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	f000 813e 	beq.w	80180f0 <RadioIrqProcess+0x3fc>
            switch( SubgRf.PacketStatus.packetType )
 8017e74:	4b4b      	ldr	r3, [pc, #300]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e76:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8017e7a:	2b01      	cmp	r3, #1
 8017e7c:	d10e      	bne.n	8017e9c <RadioIrqProcess+0x1a8>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.LoRa.RssiPkt, SubgRf.PacketStatus.Params.LoRa.SnrPkt );
 8017e7e:	4b4b      	ldr	r3, [pc, #300]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017e80:	681b      	ldr	r3, [r3, #0]
 8017e82:	689c      	ldr	r4, [r3, #8]
 8017e84:	79fb      	ldrb	r3, [r7, #7]
 8017e86:	4619      	mov	r1, r3
 8017e88:	4b46      	ldr	r3, [pc, #280]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e8a:	f993 3030 	ldrsb.w	r3, [r3, #48]	@ 0x30
 8017e8e:	461a      	mov	r2, r3
 8017e90:	4b44      	ldr	r3, [pc, #272]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e92:	f993 3031 	ldrsb.w	r3, [r3, #49]	@ 0x31
 8017e96:	4847      	ldr	r0, [pc, #284]	@ (8017fb4 <RadioIrqProcess+0x2c0>)
 8017e98:	47a0      	blx	r4
                break;
 8017e9a:	e01d      	b.n	8017ed8 <RadioIrqProcess+0x1e4>
                SUBGRF_GetCFO( SubgRf.ModulationParams.Params.Gfsk.BitRate, &cfo );
 8017e9c:	4b41      	ldr	r3, [pc, #260]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017ea0:	463a      	mov	r2, r7
 8017ea2:	4611      	mov	r1, r2
 8017ea4:	4618      	mov	r0, r3
 8017ea6:	f001 ff47 	bl	8019d38 <SUBGRF_GetCFO>
                RadioEvents->RxDone( RadioBuffer, size, SubgRf.PacketStatus.Params.Gfsk.RssiAvg, (int8_t) DIVR(cfo, 1000) );
 8017eaa:	4b40      	ldr	r3, [pc, #256]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017eac:	681b      	ldr	r3, [r3, #0]
 8017eae:	689c      	ldr	r4, [r3, #8]
 8017eb0:	79fb      	ldrb	r3, [r7, #7]
 8017eb2:	4619      	mov	r1, r3
 8017eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8017fa4 <RadioIrqProcess+0x2b0>)
 8017eb6:	f993 3029 	ldrsb.w	r3, [r3, #41]	@ 0x29
 8017eba:	4618      	mov	r0, r3
 8017ebc:	683b      	ldr	r3, [r7, #0]
 8017ebe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8017ec2:	4a3e      	ldr	r2, [pc, #248]	@ (8017fbc <RadioIrqProcess+0x2c8>)
 8017ec4:	fb82 5203 	smull	r5, r2, r2, r3
 8017ec8:	1192      	asrs	r2, r2, #6
 8017eca:	17db      	asrs	r3, r3, #31
 8017ecc:	1ad3      	subs	r3, r2, r3
 8017ece:	b25b      	sxtb	r3, r3
 8017ed0:	4602      	mov	r2, r0
 8017ed2:	4838      	ldr	r0, [pc, #224]	@ (8017fb4 <RadioIrqProcess+0x2c0>)
 8017ed4:	47a0      	blx	r4
                break;
 8017ed6:	bf00      	nop
        break;
 8017ed8:	e10a      	b.n	80180f0 <RadioIrqProcess+0x3fc>
        SUBGRF_SetStandby( STDBY_RC );
 8017eda:	2000      	movs	r0, #0
 8017edc:	f000 ff7a 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017ee0:	4b32      	ldr	r3, [pc, #200]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017ee2:	681b      	ldr	r3, [r3, #0]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	f000 8105 	beq.w	80180f4 <RadioIrqProcess+0x400>
 8017eea:	4b30      	ldr	r3, [pc, #192]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017eec:	681b      	ldr	r3, [r3, #0]
 8017eee:	699b      	ldr	r3, [r3, #24]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	f000 80ff 	beq.w	80180f4 <RadioIrqProcess+0x400>
            RadioEvents->CadDone( false );
 8017ef6:	4b2d      	ldr	r3, [pc, #180]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	699b      	ldr	r3, [r3, #24]
 8017efc:	2000      	movs	r0, #0
 8017efe:	4798      	blx	r3
        break;
 8017f00:	e0f8      	b.n	80180f4 <RadioIrqProcess+0x400>
        SUBGRF_SetStandby( STDBY_RC );
 8017f02:	2000      	movs	r0, #0
 8017f04:	f000 ff66 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->CadDone != NULL ) )
 8017f08:	4b28      	ldr	r3, [pc, #160]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f0a:	681b      	ldr	r3, [r3, #0]
 8017f0c:	2b00      	cmp	r3, #0
 8017f0e:	f000 80f3 	beq.w	80180f8 <RadioIrqProcess+0x404>
 8017f12:	4b26      	ldr	r3, [pc, #152]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f14:	681b      	ldr	r3, [r3, #0]
 8017f16:	699b      	ldr	r3, [r3, #24]
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	f000 80ed 	beq.w	80180f8 <RadioIrqProcess+0x404>
            RadioEvents->CadDone( true );
 8017f1e:	4b23      	ldr	r3, [pc, #140]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f20:	681b      	ldr	r3, [r3, #0]
 8017f22:	699b      	ldr	r3, [r3, #24]
 8017f24:	2001      	movs	r0, #1
 8017f26:	4798      	blx	r3
        break;
 8017f28:	e0e6      	b.n	80180f8 <RadioIrqProcess+0x404>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_RX_TX_TIMEOUT\r\n" );
 8017f2a:	4b25      	ldr	r3, [pc, #148]	@ (8017fc0 <RadioIrqProcess+0x2cc>)
 8017f2c:	2201      	movs	r2, #1
 8017f2e:	2100      	movs	r1, #0
 8017f30:	2002      	movs	r0, #2
 8017f32:	f003 f8e3 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( SUBGRF_GetOperatingMode( ) == MODE_TX )
 8017f36:	f000 fe03 	bl	8018b40 <SUBGRF_GetOperatingMode>
 8017f3a:	4603      	mov	r3, r0
 8017f3c:	2b04      	cmp	r3, #4
 8017f3e:	d115      	bne.n	8017f6c <RadioIrqProcess+0x278>
            TimerStop( &TxTimeoutTimer );
 8017f40:	4819      	ldr	r0, [pc, #100]	@ (8017fa8 <RadioIrqProcess+0x2b4>)
 8017f42:	f002 fed1 	bl	801ace8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f46:	2000      	movs	r0, #0
 8017f48:	f000 ff44 	bl	8018dd4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->TxTimeout != NULL ) )
 8017f4c:	4b17      	ldr	r3, [pc, #92]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f4e:	681b      	ldr	r3, [r3, #0]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	f000 80d3 	beq.w	80180fc <RadioIrqProcess+0x408>
 8017f56:	4b15      	ldr	r3, [pc, #84]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f58:	681b      	ldr	r3, [r3, #0]
 8017f5a:	685b      	ldr	r3, [r3, #4]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	f000 80cd 	beq.w	80180fc <RadioIrqProcess+0x408>
                RadioEvents->TxTimeout( );
 8017f62:	4b12      	ldr	r3, [pc, #72]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f64:	681b      	ldr	r3, [r3, #0]
 8017f66:	685b      	ldr	r3, [r3, #4]
 8017f68:	4798      	blx	r3
        break;
 8017f6a:	e0c7      	b.n	80180fc <RadioIrqProcess+0x408>
        else if( SUBGRF_GetOperatingMode( ) == MODE_RX )
 8017f6c:	f000 fde8 	bl	8018b40 <SUBGRF_GetOperatingMode>
 8017f70:	4603      	mov	r3, r0
 8017f72:	2b05      	cmp	r3, #5
 8017f74:	f040 80c2 	bne.w	80180fc <RadioIrqProcess+0x408>
            TimerStop( &RxTimeoutTimer );
 8017f78:	480d      	ldr	r0, [pc, #52]	@ (8017fb0 <RadioIrqProcess+0x2bc>)
 8017f7a:	f002 feb5 	bl	801ace8 <UTIL_TIMER_Stop>
            SUBGRF_SetStandby( STDBY_RC );
 8017f7e:	2000      	movs	r0, #0
 8017f80:	f000 ff28 	bl	8018dd4 <SUBGRF_SetStandby>
            if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8017f84:	4b09      	ldr	r3, [pc, #36]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	f000 80b7 	beq.w	80180fc <RadioIrqProcess+0x408>
 8017f8e:	4b07      	ldr	r3, [pc, #28]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	68db      	ldr	r3, [r3, #12]
 8017f94:	2b00      	cmp	r3, #0
 8017f96:	f000 80b1 	beq.w	80180fc <RadioIrqProcess+0x408>
                RadioEvents->RxTimeout( );
 8017f9a:	4b04      	ldr	r3, [pc, #16]	@ (8017fac <RadioIrqProcess+0x2b8>)
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	4798      	blx	r3
        break;
 8017fa2:	e0ab      	b.n	80180fc <RadioIrqProcess+0x408>
 8017fa4:	20001a70 	.word	0x20001a70
 8017fa8:	20001acc 	.word	0x20001acc
 8017fac:	20001a6c 	.word	0x20001a6c
 8017fb0:	20001ae4 	.word	0x20001ae4
 8017fb4:	2000196c 	.word	0x2000196c
 8017fb8:	20001a94 	.word	0x20001a94
 8017fbc:	10624dd3 	.word	0x10624dd3
 8017fc0:	0801bfc8 	.word	0x0801bfc8
        MW_LOG( TS_ON, VLEVEL_M,  "PRE OK\r\n" );
 8017fc4:	4b54      	ldr	r3, [pc, #336]	@ (8018118 <RadioIrqProcess+0x424>)
 8017fc6:	2201      	movs	r2, #1
 8017fc8:	2100      	movs	r1, #0
 8017fca:	2002      	movs	r0, #2
 8017fcc:	f003 f896 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxDcPreambleDetectTimeout != 0 )
 8017fd0:	4b52      	ldr	r3, [pc, #328]	@ (801811c <RadioIrqProcess+0x428>)
 8017fd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	f000 8093 	beq.w	8018100 <RadioIrqProcess+0x40c>
          Radio.Write(SUBGHZ_RTCPRDR2, (SubgRf.RxDcPreambleDetectTimeout>>16)&0xFF); /*Update Radio RTC Period MSB*/
 8017fda:	4a51      	ldr	r2, [pc, #324]	@ (8018120 <RadioIrqProcess+0x42c>)
 8017fdc:	4b4f      	ldr	r3, [pc, #316]	@ (801811c <RadioIrqProcess+0x428>)
 8017fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017fe0:	0c1b      	lsrs	r3, r3, #16
 8017fe2:	b2db      	uxtb	r3, r3
 8017fe4:	4619      	mov	r1, r3
 8017fe6:	f640 1003 	movw	r0, #2307	@ 0x903
 8017fea:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR1, (SubgRf.RxDcPreambleDetectTimeout>>8)&0xFF); /*Update Radio RTC Period MidByte*/
 8017fec:	4a4c      	ldr	r2, [pc, #304]	@ (8018120 <RadioIrqProcess+0x42c>)
 8017fee:	4b4b      	ldr	r3, [pc, #300]	@ (801811c <RadioIrqProcess+0x428>)
 8017ff0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017ff2:	0a1b      	lsrs	r3, r3, #8
 8017ff4:	b2db      	uxtb	r3, r3
 8017ff6:	4619      	mov	r1, r3
 8017ff8:	f640 1004 	movw	r0, #2308	@ 0x904
 8017ffc:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCPRDR0, (SubgRf.RxDcPreambleDetectTimeout)&0xFF); /*Update Radio RTC Period lsb*/
 8017ffe:	4a48      	ldr	r2, [pc, #288]	@ (8018120 <RadioIrqProcess+0x42c>)
 8018000:	4b46      	ldr	r3, [pc, #280]	@ (801811c <RadioIrqProcess+0x428>)
 8018002:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018004:	b2db      	uxtb	r3, r3
 8018006:	4619      	mov	r1, r3
 8018008:	f640 1005 	movw	r0, #2309	@ 0x905
 801800c:	4790      	blx	r2
          Radio.Write(SUBGHZ_RTCCTLR, Radio.Read(SUBGHZ_RTCCTLR)|0x1); /*restart Radio RTC*/
 801800e:	4c44      	ldr	r4, [pc, #272]	@ (8018120 <RadioIrqProcess+0x42c>)
 8018010:	4b44      	ldr	r3, [pc, #272]	@ (8018124 <RadioIrqProcess+0x430>)
 8018012:	f640 1002 	movw	r0, #2306	@ 0x902
 8018016:	4798      	blx	r3
 8018018:	4603      	mov	r3, r0
 801801a:	f043 0301 	orr.w	r3, r3, #1
 801801e:	b2db      	uxtb	r3, r3
 8018020:	4619      	mov	r1, r3
 8018022:	f640 1002 	movw	r0, #2306	@ 0x902
 8018026:	47a0      	blx	r4
          SubgRf.RxDcPreambleDetectTimeout = 0;
 8018028:	4b3c      	ldr	r3, [pc, #240]	@ (801811c <RadioIrqProcess+0x428>)
 801802a:	2200      	movs	r2, #0
 801802c:	659a      	str	r2, [r3, #88]	@ 0x58
          SUBGRF_SetDioIrqParams( IRQ_RX_DONE | IRQ_RX_TX_TIMEOUT | IRQ_CRC_ERROR | IRQ_HEADER_ERROR | IRQ_RX_DBG,
 801802e:	2300      	movs	r3, #0
 8018030:	2200      	movs	r2, #0
 8018032:	f240 2162 	movw	r1, #610	@ 0x262
 8018036:	f240 2062 	movw	r0, #610	@ 0x262
 801803a:	f001 f89b 	bl	8019174 <SUBGRF_SetDioIrqParams>
        break;
 801803e:	e05f      	b.n	8018100 <RadioIrqProcess+0x40c>
        MW_LOG( TS_ON, VLEVEL_M,  "SYNC OK\r\n" );
 8018040:	4b39      	ldr	r3, [pc, #228]	@ (8018128 <RadioIrqProcess+0x434>)
 8018042:	2201      	movs	r2, #1
 8018044:	2100      	movs	r1, #0
 8018046:	2002      	movs	r0, #2
 8018048:	f003 f858 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( 1UL == RFW_Is_Init( ) )
 801804c:	f001 ff1f 	bl	8019e8e <RFW_Is_Init>
 8018050:	4603      	mov	r3, r0
 8018052:	2b01      	cmp	r3, #1
 8018054:	d156      	bne.n	8018104 <RadioIrqProcess+0x410>
            RFW_ReceivePayload( );
 8018056:	f001 ff50 	bl	8019efa <RFW_ReceivePayload>
        break;
 801805a:	e053      	b.n	8018104 <RadioIrqProcess+0x410>
        MW_LOG( TS_ON, VLEVEL_M,  "HDR OK\r\n" );
 801805c:	4b33      	ldr	r3, [pc, #204]	@ (801812c <RadioIrqProcess+0x438>)
 801805e:	2201      	movs	r2, #1
 8018060:	2100      	movs	r1, #0
 8018062:	2002      	movs	r0, #2
 8018064:	f003 f84a 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 8018068:	e051      	b.n	801810e <RadioIrqProcess+0x41a>
        TimerStop( &RxTimeoutTimer );
 801806a:	4831      	ldr	r0, [pc, #196]	@ (8018130 <RadioIrqProcess+0x43c>)
 801806c:	f002 fe3c 	bl	801ace8 <UTIL_TIMER_Stop>
        if( SubgRf.RxContinuous == false )
 8018070:	4b2a      	ldr	r3, [pc, #168]	@ (801811c <RadioIrqProcess+0x428>)
 8018072:	785b      	ldrb	r3, [r3, #1]
 8018074:	f083 0301 	eor.w	r3, r3, #1
 8018078:	b2db      	uxtb	r3, r3
 801807a:	2b00      	cmp	r3, #0
 801807c:	d002      	beq.n	8018084 <RadioIrqProcess+0x390>
            SUBGRF_SetStandby( STDBY_RC );
 801807e:	2000      	movs	r0, #0
 8018080:	f000 fea8 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxTimeout != NULL ) )
 8018084:	4b2b      	ldr	r3, [pc, #172]	@ (8018134 <RadioIrqProcess+0x440>)
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d03d      	beq.n	8018108 <RadioIrqProcess+0x414>
 801808c:	4b29      	ldr	r3, [pc, #164]	@ (8018134 <RadioIrqProcess+0x440>)
 801808e:	681b      	ldr	r3, [r3, #0]
 8018090:	68db      	ldr	r3, [r3, #12]
 8018092:	2b00      	cmp	r3, #0
 8018094:	d038      	beq.n	8018108 <RadioIrqProcess+0x414>
            RadioEvents->RxTimeout( );
 8018096:	4b27      	ldr	r3, [pc, #156]	@ (8018134 <RadioIrqProcess+0x440>)
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	68db      	ldr	r3, [r3, #12]
 801809c:	4798      	blx	r3
            MW_LOG( TS_ON, VLEVEL_M,  "HDR KO\r\n" );
 801809e:	4b26      	ldr	r3, [pc, #152]	@ (8018138 <RadioIrqProcess+0x444>)
 80180a0:	2201      	movs	r2, #1
 80180a2:	2100      	movs	r1, #0
 80180a4:	2002      	movs	r0, #2
 80180a6:	f003 f829 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        break;
 80180aa:	e02d      	b.n	8018108 <RadioIrqProcess+0x414>
        MW_LOG( TS_ON, VLEVEL_M,  "IRQ_CRC_ERROR\r\n" );
 80180ac:	4b23      	ldr	r3, [pc, #140]	@ (801813c <RadioIrqProcess+0x448>)
 80180ae:	2201      	movs	r2, #1
 80180b0:	2100      	movs	r1, #0
 80180b2:	2002      	movs	r0, #2
 80180b4:	f003 f822 	bl	801b0fc <UTIL_ADV_TRACE_COND_FSend>
        if( SubgRf.RxContinuous == false )
 80180b8:	4b18      	ldr	r3, [pc, #96]	@ (801811c <RadioIrqProcess+0x428>)
 80180ba:	785b      	ldrb	r3, [r3, #1]
 80180bc:	f083 0301 	eor.w	r3, r3, #1
 80180c0:	b2db      	uxtb	r3, r3
 80180c2:	2b00      	cmp	r3, #0
 80180c4:	d002      	beq.n	80180cc <RadioIrqProcess+0x3d8>
            SUBGRF_SetStandby( STDBY_RC );
 80180c6:	2000      	movs	r0, #0
 80180c8:	f000 fe84 	bl	8018dd4 <SUBGRF_SetStandby>
        if( ( RadioEvents != NULL ) && ( RadioEvents->RxError ) )
 80180cc:	4b19      	ldr	r3, [pc, #100]	@ (8018134 <RadioIrqProcess+0x440>)
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d01b      	beq.n	801810c <RadioIrqProcess+0x418>
 80180d4:	4b17      	ldr	r3, [pc, #92]	@ (8018134 <RadioIrqProcess+0x440>)
 80180d6:	681b      	ldr	r3, [r3, #0]
 80180d8:	691b      	ldr	r3, [r3, #16]
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d016      	beq.n	801810c <RadioIrqProcess+0x418>
            RadioEvents->RxError( );
 80180de:	4b15      	ldr	r3, [pc, #84]	@ (8018134 <RadioIrqProcess+0x440>)
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	691b      	ldr	r3, [r3, #16]
 80180e4:	4798      	blx	r3
        break;
 80180e6:	e011      	b.n	801810c <RadioIrqProcess+0x418>
        break;
 80180e8:	bf00      	nop
 80180ea:	e010      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180ec:	bf00      	nop
 80180ee:	e00e      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180f0:	bf00      	nop
 80180f2:	e00c      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180f4:	bf00      	nop
 80180f6:	e00a      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180f8:	bf00      	nop
 80180fa:	e008      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 80180fc:	bf00      	nop
 80180fe:	e006      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 8018100:	bf00      	nop
 8018102:	e004      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 8018104:	bf00      	nop
 8018106:	e002      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 8018108:	bf00      	nop
 801810a:	e000      	b.n	801810e <RadioIrqProcess+0x41a>
        break;
 801810c:	bf00      	nop
    }
}
 801810e:	bf00      	nop
 8018110:	3708      	adds	r7, #8
 8018112:	46bd      	mov	sp, r7
 8018114:	bdb0      	pop	{r4, r5, r7, pc}
 8018116:	bf00      	nop
 8018118:	0801bfdc 	.word	0x0801bfdc
 801811c:	20001a70 	.word	0x20001a70
 8018120:	08017b05 	.word	0x08017b05
 8018124:	08017b29 	.word	0x08017b29
 8018128:	0801bfe8 	.word	0x0801bfe8
 801812c:	0801bff4 	.word	0x0801bff4
 8018130:	20001ae4 	.word	0x20001ae4
 8018134:	20001a6c 	.word	0x20001a6c
 8018138:	0801c000 	.word	0x0801c000
 801813c:	0801c00c 	.word	0x0801c00c

08018140 <RadioTxPrbs>:

static void RadioTxPrbs( void )
{
 8018140:	b580      	push	{r7, lr}
 8018142:	af00      	add	r7, sp, #0
    SUBGRF_SetSwitch( SubgRf.AntSwitchPaSelect, RFSWITCH_TX );
 8018144:	4b09      	ldr	r3, [pc, #36]	@ (801816c <RadioTxPrbs+0x2c>)
 8018146:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 801814a:	2101      	movs	r1, #1
 801814c:	4618      	mov	r0, r3
 801814e:	f001 fcb5 	bl	8019abc <SUBGRF_SetSwitch>
    Radio.Write( SUBGHZ_GPKTCTL1AR, 0x2d );  // sel mode prbs9 instead of preamble
 8018152:	4b07      	ldr	r3, [pc, #28]	@ (8018170 <RadioTxPrbs+0x30>)
 8018154:	212d      	movs	r1, #45	@ 0x2d
 8018156:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 801815a:	4798      	blx	r3
    SUBGRF_SetTxInfinitePreamble( );
 801815c:	f000 fefd 	bl	8018f5a <SUBGRF_SetTxInfinitePreamble>
    SUBGRF_SetTx( 0x0fffff );
 8018160:	4804      	ldr	r0, [pc, #16]	@ (8018174 <RadioTxPrbs+0x34>)
 8018162:	f000 fe53 	bl	8018e0c <SUBGRF_SetTx>
}
 8018166:	bf00      	nop
 8018168:	bd80      	pop	{r7, pc}
 801816a:	bf00      	nop
 801816c:	20001a70 	.word	0x20001a70
 8018170:	08017b05 	.word	0x08017b05
 8018174:	000fffff 	.word	0x000fffff

08018178 <RadioTxCw>:

static void RadioTxCw( int8_t power )
{
 8018178:	b580      	push	{r7, lr}
 801817a:	b084      	sub	sp, #16
 801817c:	af00      	add	r7, sp, #0
 801817e:	4603      	mov	r3, r0
 8018180:	71fb      	strb	r3, [r7, #7]
    uint8_t paselect = SUBGRF_SetRfTxPower( power );
 8018182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8018186:	4618      	mov	r0, r3
 8018188:	f001 fcc0 	bl	8019b0c <SUBGRF_SetRfTxPower>
 801818c:	4603      	mov	r3, r0
 801818e:	73fb      	strb	r3, [r7, #15]
    SUBGRF_SetSwitch( paselect, RFSWITCH_TX );
 8018190:	7bfb      	ldrb	r3, [r7, #15]
 8018192:	2101      	movs	r1, #1
 8018194:	4618      	mov	r0, r3
 8018196:	f001 fc91 	bl	8019abc <SUBGRF_SetSwitch>
    SUBGRF_SetTxContinuousWave( );
 801819a:	f000 fed5 	bl	8018f48 <SUBGRF_SetTxContinuousWave>
}
 801819e:	bf00      	nop
 80181a0:	3710      	adds	r7, #16
 80181a2:	46bd      	mov	sp, r7
 80181a4:	bd80      	pop	{r7, pc}

080181a6 <payload_integration>:

#if (RADIO_SIGFOX_ENABLE == 1)
static void payload_integration( uint8_t *outBuffer, uint8_t *inBuffer, uint8_t size )
{
 80181a6:	b480      	push	{r7}
 80181a8:	b089      	sub	sp, #36	@ 0x24
 80181aa:	af00      	add	r7, sp, #0
 80181ac:	60f8      	str	r0, [r7, #12]
 80181ae:	60b9      	str	r1, [r7, #8]
 80181b0:	4613      	mov	r3, r2
 80181b2:	71fb      	strb	r3, [r7, #7]
    uint8_t prevInt = 0;
 80181b4:	2300      	movs	r3, #0
 80181b6:	77fb      	strb	r3, [r7, #31]
    uint8_t currBit;
    uint8_t index_bit;
    uint8_t index_byte;
    uint8_t index_bit_out;
    uint8_t index_byte_out;
    int32_t i = 0;
 80181b8:	2300      	movs	r3, #0
 80181ba:	61bb      	str	r3, [r7, #24]

    for( i = 0; i < size; i++ )
 80181bc:	2300      	movs	r3, #0
 80181be:	61bb      	str	r3, [r7, #24]
 80181c0:	e011      	b.n	80181e6 <payload_integration+0x40>
    {
        /* reverse all inputs */
        inBuffer[i] = ~inBuffer[i];
 80181c2:	69bb      	ldr	r3, [r7, #24]
 80181c4:	68ba      	ldr	r2, [r7, #8]
 80181c6:	4413      	add	r3, r2
 80181c8:	781a      	ldrb	r2, [r3, #0]
 80181ca:	69bb      	ldr	r3, [r7, #24]
 80181cc:	68b9      	ldr	r1, [r7, #8]
 80181ce:	440b      	add	r3, r1
 80181d0:	43d2      	mvns	r2, r2
 80181d2:	b2d2      	uxtb	r2, r2
 80181d4:	701a      	strb	r2, [r3, #0]
        /* init outBuffer */
        outBuffer[i] = 0;
 80181d6:	69bb      	ldr	r3, [r7, #24]
 80181d8:	68fa      	ldr	r2, [r7, #12]
 80181da:	4413      	add	r3, r2
 80181dc:	2200      	movs	r2, #0
 80181de:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < size; i++ )
 80181e0:	69bb      	ldr	r3, [r7, #24]
 80181e2:	3301      	adds	r3, #1
 80181e4:	61bb      	str	r3, [r7, #24]
 80181e6:	79fb      	ldrb	r3, [r7, #7]
 80181e8:	69ba      	ldr	r2, [r7, #24]
 80181ea:	429a      	cmp	r2, r3
 80181ec:	dbe9      	blt.n	80181c2 <payload_integration+0x1c>
    }

    for( i = 0; i < ( size * 8 ); i++ )
 80181ee:	2300      	movs	r3, #0
 80181f0:	61bb      	str	r3, [r7, #24]
 80181f2:	e049      	b.n	8018288 <payload_integration+0xe2>
    {
        /* index to take bit in inBuffer */
        index_bit = 7 - ( i % 8 );
 80181f4:	69bb      	ldr	r3, [r7, #24]
 80181f6:	425a      	negs	r2, r3
 80181f8:	f003 0307 	and.w	r3, r3, #7
 80181fc:	f002 0207 	and.w	r2, r2, #7
 8018200:	bf58      	it	pl
 8018202:	4253      	negpl	r3, r2
 8018204:	b2db      	uxtb	r3, r3
 8018206:	f1c3 0307 	rsb	r3, r3, #7
 801820a:	75fb      	strb	r3, [r7, #23]
        index_byte = i / 8;
 801820c:	69bb      	ldr	r3, [r7, #24]
 801820e:	2b00      	cmp	r3, #0
 8018210:	da00      	bge.n	8018214 <payload_integration+0x6e>
 8018212:	3307      	adds	r3, #7
 8018214:	10db      	asrs	r3, r3, #3
 8018216:	75bb      	strb	r3, [r7, #22]
        /* index to place bit in outBuffer is shifted 1 bit right */
        index_bit_out = 7 - ( ( i + 1 ) % 8 );
 8018218:	69bb      	ldr	r3, [r7, #24]
 801821a:	3301      	adds	r3, #1
 801821c:	425a      	negs	r2, r3
 801821e:	f003 0307 	and.w	r3, r3, #7
 8018222:	f002 0207 	and.w	r2, r2, #7
 8018226:	bf58      	it	pl
 8018228:	4253      	negpl	r3, r2
 801822a:	b2db      	uxtb	r3, r3
 801822c:	f1c3 0307 	rsb	r3, r3, #7
 8018230:	757b      	strb	r3, [r7, #21]
        index_byte_out = ( i + 1 ) / 8;
 8018232:	69bb      	ldr	r3, [r7, #24]
 8018234:	3301      	adds	r3, #1
 8018236:	2b00      	cmp	r3, #0
 8018238:	da00      	bge.n	801823c <payload_integration+0x96>
 801823a:	3307      	adds	r3, #7
 801823c:	10db      	asrs	r3, r3, #3
 801823e:	753b      	strb	r3, [r7, #20]
        /* extract current bit from input */
        currBit = ( inBuffer[index_byte] >> index_bit ) & 0x01;
 8018240:	7dbb      	ldrb	r3, [r7, #22]
 8018242:	68ba      	ldr	r2, [r7, #8]
 8018244:	4413      	add	r3, r2
 8018246:	781b      	ldrb	r3, [r3, #0]
 8018248:	461a      	mov	r2, r3
 801824a:	7dfb      	ldrb	r3, [r7, #23]
 801824c:	fa42 f303 	asr.w	r3, r2, r3
 8018250:	b2db      	uxtb	r3, r3
 8018252:	f003 0301 	and.w	r3, r3, #1
 8018256:	74fb      	strb	r3, [r7, #19]
        /* integration */
        prevInt ^= currBit;
 8018258:	7ffa      	ldrb	r2, [r7, #31]
 801825a:	7cfb      	ldrb	r3, [r7, #19]
 801825c:	4053      	eors	r3, r2
 801825e:	77fb      	strb	r3, [r7, #31]
        /* write result integration in output */
        outBuffer[index_byte_out] |= ( prevInt << index_bit_out );
 8018260:	7d3b      	ldrb	r3, [r7, #20]
 8018262:	68fa      	ldr	r2, [r7, #12]
 8018264:	4413      	add	r3, r2
 8018266:	781b      	ldrb	r3, [r3, #0]
 8018268:	b25a      	sxtb	r2, r3
 801826a:	7ff9      	ldrb	r1, [r7, #31]
 801826c:	7d7b      	ldrb	r3, [r7, #21]
 801826e:	fa01 f303 	lsl.w	r3, r1, r3
 8018272:	b25b      	sxtb	r3, r3
 8018274:	4313      	orrs	r3, r2
 8018276:	b259      	sxtb	r1, r3
 8018278:	7d3b      	ldrb	r3, [r7, #20]
 801827a:	68fa      	ldr	r2, [r7, #12]
 801827c:	4413      	add	r3, r2
 801827e:	b2ca      	uxtb	r2, r1
 8018280:	701a      	strb	r2, [r3, #0]
    for( i = 0; i < ( size * 8 ); i++ )
 8018282:	69bb      	ldr	r3, [r7, #24]
 8018284:	3301      	adds	r3, #1
 8018286:	61bb      	str	r3, [r7, #24]
 8018288:	79fb      	ldrb	r3, [r7, #7]
 801828a:	00db      	lsls	r3, r3, #3
 801828c:	69ba      	ldr	r2, [r7, #24]
 801828e:	429a      	cmp	r2, r3
 8018290:	dbb0      	blt.n	80181f4 <payload_integration+0x4e>
    }

    outBuffer[size] = ( prevInt << 7 ) | ( prevInt << 6 ) | ( ( ( !prevInt ) & 0x01 ) << 5 ) ;
 8018292:	7ffb      	ldrb	r3, [r7, #31]
 8018294:	01db      	lsls	r3, r3, #7
 8018296:	b25a      	sxtb	r2, r3
 8018298:	7ffb      	ldrb	r3, [r7, #31]
 801829a:	019b      	lsls	r3, r3, #6
 801829c:	b25b      	sxtb	r3, r3
 801829e:	4313      	orrs	r3, r2
 80182a0:	b25b      	sxtb	r3, r3
 80182a2:	7ffa      	ldrb	r2, [r7, #31]
 80182a4:	2a00      	cmp	r2, #0
 80182a6:	d101      	bne.n	80182ac <payload_integration+0x106>
 80182a8:	2220      	movs	r2, #32
 80182aa:	e000      	b.n	80182ae <payload_integration+0x108>
 80182ac:	2200      	movs	r2, #0
 80182ae:	4313      	orrs	r3, r2
 80182b0:	b259      	sxtb	r1, r3
 80182b2:	79fb      	ldrb	r3, [r7, #7]
 80182b4:	68fa      	ldr	r2, [r7, #12]
 80182b6:	4413      	add	r3, r2
 80182b8:	b2ca      	uxtb	r2, r1
 80182ba:	701a      	strb	r2, [r3, #0]
}
 80182bc:	bf00      	nop
 80182be:	3724      	adds	r7, #36	@ 0x24
 80182c0:	46bd      	mov	sp, r7
 80182c2:	bc80      	pop	{r7}
 80182c4:	4770      	bx	lr
	...

080182c8 <RadioSetRxGenericConfig>:
#endif /*RADIO_SIGFOX_ENABLE == 1*/

static int32_t RadioSetRxGenericConfig( GenericModems_t modem, RxConfigGeneric_t* config, uint32_t rxContinuous, uint32_t symbTimeout )
{
 80182c8:	b580      	push	{r7, lr}
 80182ca:	b08c      	sub	sp, #48	@ 0x30
 80182cc:	af00      	add	r7, sp, #0
 80182ce:	60b9      	str	r1, [r7, #8]
 80182d0:	607a      	str	r2, [r7, #4]
 80182d2:	603b      	str	r3, [r7, #0]
 80182d4:	4603      	mov	r3, r0
 80182d6:	73fb      	strb	r3, [r7, #15]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    int32_t status = 0;
 80182d8:	2300      	movs	r3, #0
 80182da:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint8_t syncword[8] = {0};
 80182dc:	2300      	movs	r3, #0
 80182de:	623b      	str	r3, [r7, #32]
 80182e0:	2300      	movs	r3, #0
 80182e2:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t MaxPayloadLength;

    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 80182e4:	f001 fdcd 	bl	8019e82 <RFW_DeInit>

    if( rxContinuous != 0 )
 80182e8:	687b      	ldr	r3, [r7, #4]
 80182ea:	2b00      	cmp	r3, #0
 80182ec:	d001      	beq.n	80182f2 <RadioSetRxGenericConfig+0x2a>
    {
        symbTimeout = 0;
 80182ee:	2300      	movs	r3, #0
 80182f0:	603b      	str	r3, [r7, #0]
    }
    SubgRf.RxContinuous = ( rxContinuous == 0 ) ? false : true;
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	2b00      	cmp	r3, #0
 80182f6:	bf14      	ite	ne
 80182f8:	2301      	movne	r3, #1
 80182fa:	2300      	moveq	r3, #0
 80182fc:	b2da      	uxtb	r2, r3
 80182fe:	4ba3      	ldr	r3, [pc, #652]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018300:	705a      	strb	r2, [r3, #1]

    switch( modem )
 8018302:	7bfb      	ldrb	r3, [r7, #15]
 8018304:	2b00      	cmp	r3, #0
 8018306:	d003      	beq.n	8018310 <RadioSetRxGenericConfig+0x48>
 8018308:	2b01      	cmp	r3, #1
 801830a:	f000 80dc 	beq.w	80184c6 <RadioSetRxGenericConfig+0x1fe>

        // Timeout Max, Timeout handled directly in SetRx function
        SubgRf.RxTimeout = 0xFFFF;
        break;
    default:
        break;
 801830e:	e194      	b.n	801863a <RadioSetRxGenericConfig+0x372>
        if( ( config->fsk.BitRate == 0 ) || ( config->fsk.PreambleLen == 0 ) )
 8018310:	68bb      	ldr	r3, [r7, #8]
 8018312:	689b      	ldr	r3, [r3, #8]
 8018314:	2b00      	cmp	r3, #0
 8018316:	d003      	beq.n	8018320 <RadioSetRxGenericConfig+0x58>
 8018318:	68bb      	ldr	r3, [r7, #8]
 801831a:	68db      	ldr	r3, [r3, #12]
 801831c:	2b00      	cmp	r3, #0
 801831e:	d102      	bne.n	8018326 <RadioSetRxGenericConfig+0x5e>
            return -1;
 8018320:	f04f 33ff 	mov.w	r3, #4294967295
 8018324:	e18a      	b.n	801863c <RadioSetRxGenericConfig+0x374>
        if( config->fsk.SyncWordLength > 8 )
 8018326:	68bb      	ldr	r3, [r7, #8]
 8018328:	7f9b      	ldrb	r3, [r3, #30]
 801832a:	2b08      	cmp	r3, #8
 801832c:	d902      	bls.n	8018334 <RadioSetRxGenericConfig+0x6c>
            return -1;
 801832e:	f04f 33ff 	mov.w	r3, #4294967295
 8018332:	e183      	b.n	801863c <RadioSetRxGenericConfig+0x374>
            RADIO_MEMCPY8( syncword, config->fsk.SyncWord, config->fsk.SyncWordLength );
 8018334:	68bb      	ldr	r3, [r7, #8]
 8018336:	6919      	ldr	r1, [r3, #16]
 8018338:	68bb      	ldr	r3, [r7, #8]
 801833a:	7f9b      	ldrb	r3, [r3, #30]
 801833c:	461a      	mov	r2, r3
 801833e:	f107 0320 	add.w	r3, r7, #32
 8018342:	4618      	mov	r0, r3
 8018344:	f001 fe90 	bl	801a068 <UTIL_MEM_cpy_8>
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->fsk.StopTimerOnPreambleDetect == 0 ) ? false : true );
 8018348:	68bb      	ldr	r3, [r7, #8]
 801834a:	681b      	ldr	r3, [r3, #0]
 801834c:	2b00      	cmp	r3, #0
 801834e:	bf14      	ite	ne
 8018350:	2301      	movne	r3, #1
 8018352:	2300      	moveq	r3, #0
 8018354:	b2db      	uxtb	r3, r3
 8018356:	4618      	mov	r0, r3
 8018358:	f000 fe08 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 801835c:	4b8b      	ldr	r3, [pc, #556]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801835e:	2200      	movs	r2, #0
 8018360:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018364:	68bb      	ldr	r3, [r7, #8]
 8018366:	689b      	ldr	r3, [r3, #8]
 8018368:	4a88      	ldr	r2, [pc, #544]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801836a:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = (RadioModShapings_t) config->fsk.ModulationShaping;
 801836c:	68bb      	ldr	r3, [r7, #8]
 801836e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8018372:	4b86      	ldr	r3, [pc, #536]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018374:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Bandwidth = SUBGRF_GetFskBandwidthRegValue( config->fsk.Bandwidth );
 8018378:	68bb      	ldr	r3, [r7, #8]
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	4618      	mov	r0, r3
 801837e:	f001 fcb3 	bl	8019ce8 <SUBGRF_GetFskBandwidthRegValue>
 8018382:	4603      	mov	r3, r0
 8018384:	461a      	mov	r2, r3
 8018386:	4b81      	ldr	r3, [pc, #516]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018388:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 801838c:	4b7f      	ldr	r3, [pc, #508]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801838e:	2200      	movs	r2, #0
 8018390:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3 ; // convert byte into bit
 8018392:	68bb      	ldr	r3, [r7, #8]
 8018394:	68db      	ldr	r3, [r3, #12]
 8018396:	b29b      	uxth	r3, r3
 8018398:	00db      	lsls	r3, r3, #3
 801839a:	b29a      	uxth	r2, r3
 801839c:	4b7b      	ldr	r3, [pc, #492]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801839e:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = ( RadioPreambleDetection_t ) config->fsk.PreambleMinDetect;
 80183a0:	68bb      	ldr	r3, [r7, #8]
 80183a2:	7fda      	ldrb	r2, [r3, #31]
 80183a4:	4b79      	ldr	r3, [pc, #484]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183a6:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 80183a8:	68bb      	ldr	r3, [r7, #8]
 80183aa:	7f9b      	ldrb	r3, [r3, #30]
 80183ac:	00db      	lsls	r3, r3, #3
 80183ae:	b2da      	uxtb	r2, r3
 80183b0:	4b76      	ldr	r3, [pc, #472]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183b2:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = ( RadioAddressComp_t ) config->fsk.AddrComp;
 80183b4:	68bb      	ldr	r3, [r7, #8]
 80183b6:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 80183ba:	4b74      	ldr	r3, [pc, #464]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183bc:	751a      	strb	r2, [r3, #20]
        if( config->fsk.LengthMode == RADIO_FSK_PACKET_FIXED_LENGTH )
 80183be:	68bb      	ldr	r3, [r7, #8]
 80183c0:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d105      	bne.n	80183d4 <RadioSetRxGenericConfig+0x10c>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = config->fsk.MaxPayloadLength;
 80183c8:	68bb      	ldr	r3, [r7, #8]
 80183ca:	695b      	ldr	r3, [r3, #20]
 80183cc:	b2da      	uxtb	r2, r3
 80183ce:	4b6f      	ldr	r3, [pc, #444]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183d0:	759a      	strb	r2, [r3, #22]
 80183d2:	e00b      	b.n	80183ec <RadioSetRxGenericConfig+0x124>
        else if( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH )
 80183d4:	68bb      	ldr	r3, [r7, #8]
 80183d6:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183da:	2b02      	cmp	r3, #2
 80183dc:	d103      	bne.n	80183e6 <RadioSetRxGenericConfig+0x11e>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80183de:	4b6b      	ldr	r3, [pc, #428]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183e0:	22ff      	movs	r2, #255	@ 0xff
 80183e2:	759a      	strb	r2, [r3, #22]
 80183e4:	e002      	b.n	80183ec <RadioSetRxGenericConfig+0x124>
            SubgRf.PacketParams.Params.Gfsk.PayloadLength = 0xFF;
 80183e6:	4b69      	ldr	r3, [pc, #420]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80183e8:	22ff      	movs	r2, #255	@ 0xff
 80183ea:	759a      	strb	r2, [r3, #22]
        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.LengthMode == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 80183ec:	68bb      	ldr	r3, [r7, #8]
 80183ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80183f2:	2b02      	cmp	r3, #2
 80183f4:	d004      	beq.n	8018400 <RadioSetRxGenericConfig+0x138>
 80183f6:	68bb      	ldr	r3, [r7, #8]
 80183f8:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 80183fc:	2b02      	cmp	r3, #2
 80183fe:	d12d      	bne.n	801845c <RadioSetRxGenericConfig+0x194>
          if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018400:	68bb      	ldr	r3, [r7, #8]
 8018402:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018406:	2bf1      	cmp	r3, #241	@ 0xf1
 8018408:	d00c      	beq.n	8018424 <RadioSetRxGenericConfig+0x15c>
 801840a:	68bb      	ldr	r3, [r7, #8]
 801840c:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8018410:	2bf2      	cmp	r3, #242	@ 0xf2
 8018412:	d007      	beq.n	8018424 <RadioSetRxGenericConfig+0x15c>
 8018414:	68bb      	ldr	r3, [r7, #8]
 8018416:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801841a:	2b01      	cmp	r3, #1
 801841c:	d002      	beq.n	8018424 <RadioSetRxGenericConfig+0x15c>
            return -1;
 801841e:	f04f 33ff 	mov.w	r3, #4294967295
 8018422:	e10b      	b.n	801863c <RadioSetRxGenericConfig+0x374>
          ConfigGeneric.rtx = CONFIG_RX;
 8018424:	2300      	movs	r3, #0
 8018426:	773b      	strb	r3, [r7, #28]
          ConfigGeneric.RxConfig = config;
 8018428:	68bb      	ldr	r3, [r7, #8]
 801842a:	61bb      	str	r3, [r7, #24]
          if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &RxTimeoutTimer ) )
 801842c:	4b58      	ldr	r3, [pc, #352]	@ (8018590 <RadioSetRxGenericConfig+0x2c8>)
 801842e:	6819      	ldr	r1, [r3, #0]
 8018430:	f107 0314 	add.w	r3, r7, #20
 8018434:	4a57      	ldr	r2, [pc, #348]	@ (8018594 <RadioSetRxGenericConfig+0x2cc>)
 8018436:	4618      	mov	r0, r3
 8018438:	f001 fd16 	bl	8019e68 <RFW_Init>
 801843c:	4603      	mov	r3, r0
 801843e:	2b00      	cmp	r3, #0
 8018440:	d002      	beq.n	8018448 <RadioSetRxGenericConfig+0x180>
            return -1;
 8018442:	f04f 33ff 	mov.w	r3, #4294967295
 8018446:	e0f9      	b.n	801863c <RadioSetRxGenericConfig+0x374>
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 8018448:	4b50      	ldr	r3, [pc, #320]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801844a:	2200      	movs	r2, #0
 801844c:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) RADIO_CRC_OFF;
 801844e:	4b4f      	ldr	r3, [pc, #316]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018450:	2201      	movs	r2, #1
 8018452:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 8018454:	4b4d      	ldr	r3, [pc, #308]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018456:	2200      	movs	r2, #0
 8018458:	755a      	strb	r2, [r3, #21]
        {
 801845a:	e00e      	b.n	801847a <RadioSetRxGenericConfig+0x1b2>
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 801845c:	68bb      	ldr	r3, [r7, #8]
 801845e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8018462:	4b4a      	ldr	r3, [pc, #296]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018464:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 8018466:	68bb      	ldr	r3, [r7, #8]
 8018468:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 801846c:	4b47      	ldr	r3, [pc, #284]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801846e:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.LengthMode;
 8018470:	68bb      	ldr	r3, [r7, #8]
 8018472:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8018476:	4b45      	ldr	r3, [pc, #276]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018478:	755a      	strb	r2, [r3, #21]
        RadioStandby( );
 801847a:	f7ff fa48 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 801847e:	2000      	movs	r0, #0
 8018480:	f7fe fbf2 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018484:	4844      	ldr	r0, [pc, #272]	@ (8018598 <RadioSetRxGenericConfig+0x2d0>)
 8018486:	f001 f80b 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801848a:	4844      	ldr	r0, [pc, #272]	@ (801859c <RadioSetRxGenericConfig+0x2d4>)
 801848c:	f001 f8da 	bl	8019644 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018490:	f107 0320 	add.w	r3, r7, #32
 8018494:	4618      	mov	r0, r3
 8018496:	f000 fba2 	bl	8018bde <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801849a:	68bb      	ldr	r3, [r7, #8]
 801849c:	8b9b      	ldrh	r3, [r3, #28]
 801849e:	4618      	mov	r0, r3
 80184a0:	f000 fbec 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial( config->fsk.CrcPolynomial );
 80184a4:	68bb      	ldr	r3, [r7, #8]
 80184a6:	8b1b      	ldrh	r3, [r3, #24]
 80184a8:	4618      	mov	r0, r3
 80184aa:	f000 fbc7 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
        SubgRf.RxTimeout = ( uint32_t )( ( symbTimeout * 1000 * 8 ) / config->fsk.BitRate );
 80184ae:	683b      	ldr	r3, [r7, #0]
 80184b0:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 80184b4:	fb03 f202 	mul.w	r2, r3, r2
 80184b8:	68bb      	ldr	r3, [r7, #8]
 80184ba:	689b      	ldr	r3, [r3, #8]
 80184bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80184c0:	4a32      	ldr	r2, [pc, #200]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 80184c2:	6093      	str	r3, [r2, #8]
        break;
 80184c4:	e0b9      	b.n	801863a <RadioSetRxGenericConfig+0x372>
        if( config->lora.PreambleLen == 0 )
 80184c6:	68bb      	ldr	r3, [r7, #8]
 80184c8:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d102      	bne.n	80184d4 <RadioSetRxGenericConfig+0x20c>
            return -1;
 80184ce:	f04f 33ff 	mov.w	r3, #4294967295
 80184d2:	e0b3      	b.n	801863c <RadioSetRxGenericConfig+0x374>
        if( config->lora.LengthMode == RADIO_LORA_PACKET_FIXED_LENGTH )
 80184d4:	68bb      	ldr	r3, [r7, #8]
 80184d6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80184da:	2b01      	cmp	r3, #1
 80184dc:	d104      	bne.n	80184e8 <RadioSetRxGenericConfig+0x220>
            MaxPayloadLength = config->fsk.MaxPayloadLength;
 80184de:	68bb      	ldr	r3, [r7, #8]
 80184e0:	695b      	ldr	r3, [r3, #20]
 80184e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80184e6:	e002      	b.n	80184ee <RadioSetRxGenericConfig+0x226>
            MaxPayloadLength = 0xFF;
 80184e8:	23ff      	movs	r3, #255	@ 0xff
 80184ea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        SUBGRF_SetStopRxTimerOnPreambleDetect( ( config->lora.StopTimerOnPreambleDetect == 0 ) ? false : true );
 80184ee:	68bb      	ldr	r3, [r7, #8]
 80184f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184f2:	2b00      	cmp	r3, #0
 80184f4:	bf14      	ite	ne
 80184f6:	2301      	movne	r3, #1
 80184f8:	2300      	moveq	r3, #0
 80184fa:	b2db      	uxtb	r3, r3
 80184fc:	4618      	mov	r0, r3
 80184fe:	f000 fd35 	bl	8018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>
        SUBGRF_SetLoRaSymbNumTimeout( symbTimeout );
 8018502:	683b      	ldr	r3, [r7, #0]
 8018504:	b2db      	uxtb	r3, r3
 8018506:	4618      	mov	r0, r3
 8018508:	f000 fd3f 	bl	8018f8a <SUBGRF_SetLoRaSymbNumTimeout>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 801850c:	4b1f      	ldr	r3, [pc, #124]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801850e:	2201      	movs	r2, #1
 8018510:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018514:	68bb      	ldr	r3, [r7, #8]
 8018516:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 801851a:	4b1c      	ldr	r3, [pc, #112]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801851c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 8018520:	68bb      	ldr	r3, [r7, #8]
 8018522:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 8018526:	4b19      	ldr	r3, [pc, #100]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 801852c:	68bb      	ldr	r3, [r7, #8]
 801852e:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 8018532:	4b16      	ldr	r3, [pc, #88]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018534:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 8018538:	68bb      	ldr	r3, [r7, #8]
 801853a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 801853e:	2b02      	cmp	r3, #2
 8018540:	d010      	beq.n	8018564 <RadioSetRxGenericConfig+0x29c>
 8018542:	2b02      	cmp	r3, #2
 8018544:	dc2c      	bgt.n	80185a0 <RadioSetRxGenericConfig+0x2d8>
 8018546:	2b00      	cmp	r3, #0
 8018548:	d002      	beq.n	8018550 <RadioSetRxGenericConfig+0x288>
 801854a:	2b01      	cmp	r3, #1
 801854c:	d005      	beq.n	801855a <RadioSetRxGenericConfig+0x292>
            break;
 801854e:	e027      	b.n	80185a0 <RadioSetRxGenericConfig+0x2d8>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018550:	4b0e      	ldr	r3, [pc, #56]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018552:	2200      	movs	r2, #0
 8018554:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018558:	e023      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801855a:	4b0c      	ldr	r3, [pc, #48]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801855c:	2201      	movs	r2, #1
 801855e:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018562:	e01e      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018564:	68bb      	ldr	r3, [r7, #8]
 8018566:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801856a:	2b0b      	cmp	r3, #11
 801856c:	d004      	beq.n	8018578 <RadioSetRxGenericConfig+0x2b0>
 801856e:	68bb      	ldr	r3, [r7, #8]
 8018570:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8018574:	2b0c      	cmp	r3, #12
 8018576:	d104      	bne.n	8018582 <RadioSetRxGenericConfig+0x2ba>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 8018578:	4b04      	ldr	r3, [pc, #16]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 801857a:	2201      	movs	r2, #1
 801857c:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018580:	e00f      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
                SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018582:	4b02      	ldr	r3, [pc, #8]	@ (801858c <RadioSetRxGenericConfig+0x2c4>)
 8018584:	2200      	movs	r2, #0
 8018586:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801858a:	e00a      	b.n	80185a2 <RadioSetRxGenericConfig+0x2da>
 801858c:	20001a70 	.word	0x20001a70
 8018590:	20001a6c 	.word	0x20001a6c
 8018594:	20001ae4 	.word	0x20001ae4
 8018598:	20001aa8 	.word	0x20001aa8
 801859c:	20001a7e 	.word	0x20001a7e
            break;
 80185a0:	bf00      	nop
        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80185a2:	4b28      	ldr	r3, [pc, #160]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185a4:	2201      	movs	r2, #1
 80185a6:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80185a8:	68bb      	ldr	r3, [r7, #8]
 80185aa:	8e1a      	ldrh	r2, [r3, #48]	@ 0x30
 80185ac:	4b25      	ldr	r3, [pc, #148]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185ae:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80185b0:	68bb      	ldr	r3, [r7, #8]
 80185b2:	f893 2032 	ldrb.w	r2, [r3, #50]	@ 0x32
 80185b6:	4b23      	ldr	r3, [pc, #140]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185b8:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.PayloadLength = MaxPayloadLength;
 80185ba:	4a22      	ldr	r2, [pc, #136]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80185c0:	77d3      	strb	r3, [r2, #31]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 80185c8:	4b1e      	ldr	r3, [pc, #120]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185ca:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80185ce:	68bb      	ldr	r3, [r7, #8]
 80185d0:	f893 2035 	ldrb.w	r2, [r3, #53]	@ 0x35
 80185d4:	4b1b      	ldr	r3, [pc, #108]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185d6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
        RadioStandby( );
 80185da:	f7ff f998 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80185de:	2001      	movs	r0, #1
 80185e0:	f7fe fb42 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80185e4:	4818      	ldr	r0, [pc, #96]	@ (8018648 <RadioSetRxGenericConfig+0x380>)
 80185e6:	f000 ff5b 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80185ea:	4818      	ldr	r0, [pc, #96]	@ (801864c <RadioSetRxGenericConfig+0x384>)
 80185ec:	f001 f82a 	bl	8019644 <SUBGRF_SetPacketParams>
        if( SubgRf.PacketParams.Params.LoRa.InvertIQ == LORA_IQ_INVERTED )
 80185f0:	4b14      	ldr	r3, [pc, #80]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 80185f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80185f6:	2b01      	cmp	r3, #1
 80185f8:	d10d      	bne.n	8018616 <RadioSetRxGenericConfig+0x34e>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) & ~( 1 << 2 ) );
 80185fa:	f240 7036 	movw	r0, #1846	@ 0x736
 80185fe:	f001 f97d 	bl	80198fc <SUBGRF_ReadRegister>
 8018602:	4603      	mov	r3, r0
 8018604:	f023 0304 	bic.w	r3, r3, #4
 8018608:	b2db      	uxtb	r3, r3
 801860a:	4619      	mov	r1, r3
 801860c:	f240 7036 	movw	r0, #1846	@ 0x736
 8018610:	f001 f960 	bl	80198d4 <SUBGRF_WriteRegister>
 8018614:	e00c      	b.n	8018630 <RadioSetRxGenericConfig+0x368>
            SUBGRF_WriteRegister( SUBGHZ_LIQPOLR, SUBGRF_ReadRegister( SUBGHZ_LIQPOLR ) | ( 1 << 2 ) );
 8018616:	f240 7036 	movw	r0, #1846	@ 0x736
 801861a:	f001 f96f 	bl	80198fc <SUBGRF_ReadRegister>
 801861e:	4603      	mov	r3, r0
 8018620:	f043 0304 	orr.w	r3, r3, #4
 8018624:	b2db      	uxtb	r3, r3
 8018626:	4619      	mov	r1, r3
 8018628:	f240 7036 	movw	r0, #1846	@ 0x736
 801862c:	f001 f952 	bl	80198d4 <SUBGRF_WriteRegister>
        SubgRf.RxTimeout = 0xFFFF;
 8018630:	4b04      	ldr	r3, [pc, #16]	@ (8018644 <RadioSetRxGenericConfig+0x37c>)
 8018632:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8018636:	609a      	str	r2, [r3, #8]
        break;
 8018638:	bf00      	nop
    }
    return status;
 801863a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 801863c:	4618      	mov	r0, r3
 801863e:	3730      	adds	r7, #48	@ 0x30
 8018640:	46bd      	mov	sp, r7
 8018642:	bd80      	pop	{r7, pc}
 8018644:	20001a70 	.word	0x20001a70
 8018648:	20001aa8 	.word	0x20001aa8
 801864c:	20001a7e 	.word	0x20001a7e

08018650 <RadioSetTxGenericConfig>:

static int32_t RadioSetTxGenericConfig( GenericModems_t modem, TxConfigGeneric_t* config, int8_t power, uint32_t timeout )
{
 8018650:	b580      	push	{r7, lr}
 8018652:	b08e      	sub	sp, #56	@ 0x38
 8018654:	af00      	add	r7, sp, #0
 8018656:	60b9      	str	r1, [r7, #8]
 8018658:	607b      	str	r3, [r7, #4]
 801865a:	4603      	mov	r3, r0
 801865c:	73fb      	strb	r3, [r7, #15]
 801865e:	4613      	mov	r3, r2
 8018660:	73bb      	strb	r3, [r7, #14]
#if (RADIO_GENERIC_CONFIG_ENABLE == 1)
    uint8_t syncword[8] = {0};
 8018662:	2300      	movs	r3, #0
 8018664:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8018666:	2300      	movs	r3, #0
 8018668:	633b      	str	r3, [r7, #48]	@ 0x30
    RadioModems_t radio_modem;
    RFW_DeInit( ); /* switch Off FwPacketDecoding by default */
 801866a:	f001 fc0a 	bl	8019e82 <RFW_DeInit>
    switch( modem )
 801866e:	7bfb      	ldrb	r3, [r7, #15]
 8018670:	2b03      	cmp	r3, #3
 8018672:	f200 8204 	bhi.w	8018a7e <RadioSetTxGenericConfig+0x42e>
 8018676:	a201      	add	r2, pc, #4	@ (adr r2, 801867c <RadioSetTxGenericConfig+0x2c>)
 8018678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801867c:	08018801 	.word	0x08018801
 8018680:	08018949 	.word	0x08018949
 8018684:	08018a41 	.word	0x08018a41
 8018688:	0801868d 	.word	0x0801868d
    {
    case GENERIC_MSK:
        if( config->msk.SyncWordLength > 8 )
 801868c:	68bb      	ldr	r3, [r7, #8]
 801868e:	7c9b      	ldrb	r3, [r3, #18]
 8018690:	2b08      	cmp	r3, #8
 8018692:	d902      	bls.n	801869a <RadioSetTxGenericConfig+0x4a>
        {
            return -1;
 8018694:	f04f 33ff 	mov.w	r3, #4294967295
 8018698:	e206      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
          RADIO_MEMCPY8(syncword, config->msk.SyncWord, config->msk.SyncWordLength);
 801869a:	68bb      	ldr	r3, [r7, #8]
 801869c:	6899      	ldr	r1, [r3, #8]
 801869e:	68bb      	ldr	r3, [r7, #8]
 80186a0:	7c9b      	ldrb	r3, [r3, #18]
 80186a2:	461a      	mov	r2, r3
 80186a4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80186a8:	4618      	mov	r0, r3
 80186aa:	f001 fcdd 	bl	801a068 <UTIL_MEM_cpy_8>
        }
        if( ( config->msk.BitRate == 0 ) )
 80186ae:	68bb      	ldr	r3, [r7, #8]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	2b00      	cmp	r3, #0
 80186b4:	d102      	bne.n	80186bc <RadioSetTxGenericConfig+0x6c>
        {
            return -1;
 80186b6:	f04f 33ff 	mov.w	r3, #4294967295
 80186ba:	e1f5      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        else if (config->msk.BitRate<= 10000)
 80186bc:	68bb      	ldr	r3, [r7, #8]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	f242 7210 	movw	r2, #10000	@ 0x2710
 80186c4:	4293      	cmp	r3, r2
 80186c6:	d813      	bhi.n	80186f0 <RadioSetTxGenericConfig+0xa0>
        {
          /*max msk modulator datarate is 10kbps*/
          radio_modem= MODEM_MSK;
 80186c8:	2302      	movs	r3, #2
 80186ca:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GMSK;
 80186ce:	4b99      	ldr	r3, [pc, #612]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186d0:	2203      	movs	r2, #3
 80186d2:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GMSK;
 80186d4:	4b97      	ldr	r3, [pc, #604]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186d6:	2203      	movs	r2, #3
 80186d8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 80186dc:	68bb      	ldr	r3, [r7, #8]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	4a94      	ldr	r2, [pc, #592]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186e2:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 80186e4:	68bb      	ldr	r3, [r7, #8]
 80186e6:	7cda      	ldrb	r2, [r3, #19]
 80186e8:	4b92      	ldr	r3, [pc, #584]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80186ee:	e017      	b.n	8018720 <RadioSetTxGenericConfig+0xd0>
        }
        else
        {
          radio_modem= MODEM_FSK;
 80186f0:	2300      	movs	r3, #0
 80186f2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
          SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 80186f6:	4b8f      	ldr	r3, [pc, #572]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186f8:	2200      	movs	r2, #0
 80186fa:	739a      	strb	r2, [r3, #14]
          SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 80186fc:	4b8d      	ldr	r3, [pc, #564]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80186fe:	2200      	movs	r2, #0
 8018700:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
          SubgRf.ModulationParams.Params.Gfsk.BitRate = config->msk.BitRate;
 8018704:	68bb      	ldr	r3, [r7, #8]
 8018706:	681b      	ldr	r3, [r3, #0]
 8018708:	4a8a      	ldr	r2, [pc, #552]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801870a:	63d3      	str	r3, [r2, #60]	@ 0x3c
          SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->msk.ModulationShaping;
 801870c:	68bb      	ldr	r3, [r7, #8]
 801870e:	7cda      	ldrb	r2, [r3, #19]
 8018710:	4b88      	ldr	r3, [pc, #544]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018712:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
          /*do msk with gfsk modulator*/
          SubgRf.ModulationParams.Params.Gfsk.Fdev = config->msk.BitRate/4;
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	681b      	ldr	r3, [r3, #0]
 801871a:	089b      	lsrs	r3, r3, #2
 801871c:	4a85      	ldr	r2, [pc, #532]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801871e:	6413      	str	r3, [r2, #64]	@ 0x40
        }

        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->msk.PreambleLen ) << 3; // convert byte into bit
 8018720:	68bb      	ldr	r3, [r7, #8]
 8018722:	685b      	ldr	r3, [r3, #4]
 8018724:	b29b      	uxth	r3, r3
 8018726:	00db      	lsls	r3, r3, #3
 8018728:	b29a      	uxth	r2, r3
 801872a:	4b82      	ldr	r3, [pc, #520]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801872c:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 801872e:	4b81      	ldr	r3, [pc, #516]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018730:	2204      	movs	r2, #4
 8018732:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->msk.SyncWordLength ) << 3; // convert byte into bit
 8018734:	68bb      	ldr	r3, [r7, #8]
 8018736:	7c9b      	ldrb	r3, [r3, #18]
 8018738:	00db      	lsls	r3, r3, #3
 801873a:	b2da      	uxtb	r2, r3
 801873c:	4b7d      	ldr	r3, [pc, #500]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801873e:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018740:	4b7c      	ldr	r3, [pc, #496]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018742:	2200      	movs	r2, #0
 8018744:	751a      	strb	r2, [r3, #20]

        if( ( config->msk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->msk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 8018746:	68bb      	ldr	r3, [r7, #8]
 8018748:	7d9b      	ldrb	r3, [r3, #22]
 801874a:	2b02      	cmp	r3, #2
 801874c:	d003      	beq.n	8018756 <RadioSetTxGenericConfig+0x106>
 801874e:	68bb      	ldr	r3, [r7, #8]
 8018750:	7d1b      	ldrb	r3, [r3, #20]
 8018752:	2b02      	cmp	r3, #2
 8018754:	d12b      	bne.n	80187ae <RadioSetTxGenericConfig+0x15e>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->msk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->msk.CrcLength != RADIO_FSK_CRC_OFF ) )
 8018756:	68bb      	ldr	r3, [r7, #8]
 8018758:	7d5b      	ldrb	r3, [r3, #21]
 801875a:	2bf1      	cmp	r3, #241	@ 0xf1
 801875c:	d00a      	beq.n	8018774 <RadioSetTxGenericConfig+0x124>
 801875e:	68bb      	ldr	r3, [r7, #8]
 8018760:	7d5b      	ldrb	r3, [r3, #21]
 8018762:	2bf2      	cmp	r3, #242	@ 0xf2
 8018764:	d006      	beq.n	8018774 <RadioSetTxGenericConfig+0x124>
 8018766:	68bb      	ldr	r3, [r7, #8]
 8018768:	7d5b      	ldrb	r3, [r3, #21]
 801876a:	2b01      	cmp	r3, #1
 801876c:	d002      	beq.n	8018774 <RadioSetTxGenericConfig+0x124>
            {
                return -1;
 801876e:	f04f 33ff 	mov.w	r3, #4294967295
 8018772:	e199      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            /*msk and fsk are union, no need for copy as fsk/msk struct are on same address*/
            ConfigGeneric.TxConfig= config;
 8018774:	68bb      	ldr	r3, [r7, #8]
 8018776:	623b      	str	r3, [r7, #32]
            ConfigGeneric.rtx = CONFIG_TX;
 8018778:	2301      	movs	r3, #1
 801877a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 801877e:	4b6e      	ldr	r3, [pc, #440]	@ (8018938 <RadioSetTxGenericConfig+0x2e8>)
 8018780:	6819      	ldr	r1, [r3, #0]
 8018782:	f107 0320 	add.w	r3, r7, #32
 8018786:	4a6d      	ldr	r2, [pc, #436]	@ (801893c <RadioSetTxGenericConfig+0x2ec>)
 8018788:	4618      	mov	r0, r3
 801878a:	f001 fb6d 	bl	8019e68 <RFW_Init>
 801878e:	4603      	mov	r3, r0
 8018790:	2b00      	cmp	r3, #0
 8018792:	d002      	beq.n	801879a <RadioSetTxGenericConfig+0x14a>
            {
              return -1;
 8018794:	f04f 33ff 	mov.w	r3, #4294967295
 8018798:	e186      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 801879a:	4b66      	ldr	r3, [pc, #408]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801879c:	2200      	movs	r2, #0
 801879e:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80187a0:	4b64      	ldr	r3, [pc, #400]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187a2:	2201      	movs	r2, #1
 80187a4:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80187a6:	4b63      	ldr	r3, [pc, #396]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187a8:	2200      	movs	r2, #0
 80187aa:	755a      	strb	r2, [r3, #21]
        {
 80187ac:	e00b      	b.n	80187c6 <RadioSetTxGenericConfig+0x176>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->msk.CrcLength;
 80187ae:	68bb      	ldr	r3, [r7, #8]
 80187b0:	7d5a      	ldrb	r2, [r3, #21]
 80187b2:	4b60      	ldr	r3, [pc, #384]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187b4:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->msk.Whitening;
 80187b6:	68bb      	ldr	r3, [r7, #8]
 80187b8:	7d9a      	ldrb	r2, [r3, #22]
 80187ba:	4b5e      	ldr	r3, [pc, #376]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187bc:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->msk.HeaderType;
 80187be:	68bb      	ldr	r3, [r7, #8]
 80187c0:	7d1a      	ldrb	r2, [r3, #20]
 80187c2:	4b5c      	ldr	r3, [pc, #368]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80187c4:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80187c6:	f7ff f8a2 	bl	801790e <RadioStandby>
        RadioSetModem( radio_modem );
 80187ca:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80187ce:	4618      	mov	r0, r3
 80187d0:	f7fe fa4a 	bl	8016c68 <RadioSetModem>

        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80187d4:	485a      	ldr	r0, [pc, #360]	@ (8018940 <RadioSetTxGenericConfig+0x2f0>)
 80187d6:	f000 fe63 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80187da:	485a      	ldr	r0, [pc, #360]	@ (8018944 <RadioSetTxGenericConfig+0x2f4>)
 80187dc:	f000 ff32 	bl	8019644 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 80187e0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80187e4:	4618      	mov	r0, r3
 80187e6:	f000 f9fa 	bl	8018bde <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->msk.whiteSeed );
 80187ea:	68bb      	ldr	r3, [r7, #8]
 80187ec:	8a1b      	ldrh	r3, [r3, #16]
 80187ee:	4618      	mov	r0, r3
 80187f0:	f000 fa44 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->msk.CrcPolynomial );
 80187f4:	68bb      	ldr	r3, [r7, #8]
 80187f6:	899b      	ldrh	r3, [r3, #12]
 80187f8:	4618      	mov	r0, r3
 80187fa:	f000 fa1f 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
        break;
 80187fe:	e13f      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
    case GENERIC_FSK:
        if( config->fsk.BitRate == 0 )
 8018800:	68bb      	ldr	r3, [r7, #8]
 8018802:	681b      	ldr	r3, [r3, #0]
 8018804:	2b00      	cmp	r3, #0
 8018806:	d102      	bne.n	801880e <RadioSetTxGenericConfig+0x1be>
        {
            return -1;
 8018808:	f04f 33ff 	mov.w	r3, #4294967295
 801880c:	e14c      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        if( config->fsk.SyncWordLength > 8 )
 801880e:	68bb      	ldr	r3, [r7, #8]
 8018810:	7c9b      	ldrb	r3, [r3, #18]
 8018812:	2b08      	cmp	r3, #8
 8018814:	d902      	bls.n	801881c <RadioSetTxGenericConfig+0x1cc>
        {
            return -1;
 8018816:	f04f 33ff 	mov.w	r3, #4294967295
 801881a:	e145      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        else
        {
            RADIO_MEMCPY8(syncword, config->fsk.SyncWord, config->fsk.SyncWordLength);
 801881c:	68bb      	ldr	r3, [r7, #8]
 801881e:	6899      	ldr	r1, [r3, #8]
 8018820:	68bb      	ldr	r3, [r7, #8]
 8018822:	7c9b      	ldrb	r3, [r3, #18]
 8018824:	461a      	mov	r2, r3
 8018826:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801882a:	4618      	mov	r0, r3
 801882c:	f001 fc1c 	bl	801a068 <UTIL_MEM_cpy_8>
        }
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_GFSK;
 8018830:	4b40      	ldr	r3, [pc, #256]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018832:	2200      	movs	r2, #0
 8018834:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Gfsk.BitRate = config->fsk.BitRate;
 8018838:	68bb      	ldr	r3, [r7, #8]
 801883a:	681b      	ldr	r3, [r3, #0]
 801883c:	4a3d      	ldr	r2, [pc, #244]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801883e:	63d3      	str	r3, [r2, #60]	@ 0x3c
        SubgRf.ModulationParams.Params.Gfsk.ModulationShaping = ( RadioModShapings_t ) config->fsk.ModulationShaping;
 8018840:	68bb      	ldr	r3, [r7, #8]
 8018842:	7cda      	ldrb	r2, [r3, #19]
 8018844:	4b3b      	ldr	r3, [pc, #236]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018846:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        SubgRf.ModulationParams.Params.Gfsk.Fdev = config->fsk.FrequencyDeviation;
 801884a:	68bb      	ldr	r3, [r7, #8]
 801884c:	699b      	ldr	r3, [r3, #24]
 801884e:	4a39      	ldr	r2, [pc, #228]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018850:	6413      	str	r3, [r2, #64]	@ 0x40

        SubgRf.PacketParams.PacketType = PACKET_TYPE_GFSK;
 8018852:	4b38      	ldr	r3, [pc, #224]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018854:	2200      	movs	r2, #0
 8018856:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.Gfsk.PreambleLength = ( config->fsk.PreambleLen ) << 3; // convert byte into bit
 8018858:	68bb      	ldr	r3, [r7, #8]
 801885a:	685b      	ldr	r3, [r3, #4]
 801885c:	b29b      	uxth	r3, r3
 801885e:	00db      	lsls	r3, r3, #3
 8018860:	b29a      	uxth	r2, r3
 8018862:	4b34      	ldr	r3, [pc, #208]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018864:	821a      	strh	r2, [r3, #16]
        SubgRf.PacketParams.Params.Gfsk.PreambleMinDetect = RADIO_PREAMBLE_DETECTOR_08_BITS; // don't care in tx
 8018866:	4b33      	ldr	r3, [pc, #204]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018868:	2204      	movs	r2, #4
 801886a:	749a      	strb	r2, [r3, #18]
        SubgRf.PacketParams.Params.Gfsk.SyncWordLength = ( config->fsk.SyncWordLength ) << 3; // convert byte into bit
 801886c:	68bb      	ldr	r3, [r7, #8]
 801886e:	7c9b      	ldrb	r3, [r3, #18]
 8018870:	00db      	lsls	r3, r3, #3
 8018872:	b2da      	uxtb	r2, r3
 8018874:	4b2f      	ldr	r3, [pc, #188]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 8018876:	74da      	strb	r2, [r3, #19]
        SubgRf.PacketParams.Params.Gfsk.AddrComp = RADIO_ADDRESSCOMP_FILT_OFF; // don't care in tx
 8018878:	4b2e      	ldr	r3, [pc, #184]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 801887a:	2200      	movs	r2, #0
 801887c:	751a      	strb	r2, [r3, #20]

        if( ( config->fsk.Whitening == RADIO_FSK_DC_IBM_WHITENING ) || ( config->fsk.HeaderType == RADIO_FSK_PACKET_2BYTES_LENGTH ) )
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	7d9b      	ldrb	r3, [r3, #22]
 8018882:	2b02      	cmp	r3, #2
 8018884:	d003      	beq.n	801888e <RadioSetTxGenericConfig+0x23e>
 8018886:	68bb      	ldr	r3, [r7, #8]
 8018888:	7d1b      	ldrb	r3, [r3, #20]
 801888a:	2b02      	cmp	r3, #2
 801888c:	d12a      	bne.n	80188e4 <RadioSetTxGenericConfig+0x294>
        {
            /* Supports only RADIO_FSK_CRC_2_BYTES_IBM or RADIO_FSK_CRC_2_BYTES_CCIT */
            if( ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_IBM ) && ( config->fsk.CrcLength != RADIO_FSK_CRC_2_BYTES_CCIT ) &&( config->fsk.CrcLength != RADIO_FSK_CRC_OFF ) )
 801888e:	68bb      	ldr	r3, [r7, #8]
 8018890:	7d5b      	ldrb	r3, [r3, #21]
 8018892:	2bf1      	cmp	r3, #241	@ 0xf1
 8018894:	d00a      	beq.n	80188ac <RadioSetTxGenericConfig+0x25c>
 8018896:	68bb      	ldr	r3, [r7, #8]
 8018898:	7d5b      	ldrb	r3, [r3, #21]
 801889a:	2bf2      	cmp	r3, #242	@ 0xf2
 801889c:	d006      	beq.n	80188ac <RadioSetTxGenericConfig+0x25c>
 801889e:	68bb      	ldr	r3, [r7, #8]
 80188a0:	7d5b      	ldrb	r3, [r3, #21]
 80188a2:	2b01      	cmp	r3, #1
 80188a4:	d002      	beq.n	80188ac <RadioSetTxGenericConfig+0x25c>
            {
                return -1;
 80188a6:	f04f 33ff 	mov.w	r3, #4294967295
 80188aa:	e0fd      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            ConfigGeneric_t ConfigGeneric;
            ConfigGeneric.rtx = CONFIG_TX;
 80188ac:	2301      	movs	r3, #1
 80188ae:	773b      	strb	r3, [r7, #28]
            ConfigGeneric.TxConfig = config;
 80188b0:	68bb      	ldr	r3, [r7, #8]
 80188b2:	617b      	str	r3, [r7, #20]
            if( 0UL != RFW_Init( &ConfigGeneric, RadioEvents, &TxTimeoutTimer ) )
 80188b4:	4b20      	ldr	r3, [pc, #128]	@ (8018938 <RadioSetTxGenericConfig+0x2e8>)
 80188b6:	6819      	ldr	r1, [r3, #0]
 80188b8:	f107 0314 	add.w	r3, r7, #20
 80188bc:	4a1f      	ldr	r2, [pc, #124]	@ (801893c <RadioSetTxGenericConfig+0x2ec>)
 80188be:	4618      	mov	r0, r3
 80188c0:	f001 fad2 	bl	8019e68 <RFW_Init>
 80188c4:	4603      	mov	r3, r0
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d002      	beq.n	80188d0 <RadioSetTxGenericConfig+0x280>
            {
              return -1;
 80188ca:	f04f 33ff 	mov.w	r3, #4294967295
 80188ce:	e0eb      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
            }
            /* whitening off, will be processed by FW, switch off built-in radio whitening */
            SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) RADIO_FSK_DC_FREE_OFF;
 80188d0:	4b18      	ldr	r3, [pc, #96]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188d2:	2200      	movs	r2, #0
 80188d4:	761a      	strb	r2, [r3, #24]
            /* Crc processed by FW, switch off built-in radio Crc */
            SubgRf.PacketParams.Params.Gfsk.CrcLength = (RadioCrcTypes_t) RADIO_CRC_OFF;
 80188d6:	4b17      	ldr	r3, [pc, #92]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188d8:	2201      	movs	r2, #1
 80188da:	75da      	strb	r2, [r3, #23]
            /* length contained in Tx, but will be processed by FW after de-whitening */
            SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) RADIO_PACKET_FIXED_LENGTH;
 80188dc:	4b15      	ldr	r3, [pc, #84]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188de:	2200      	movs	r2, #0
 80188e0:	755a      	strb	r2, [r3, #21]
        {
 80188e2:	e00b      	b.n	80188fc <RadioSetTxGenericConfig+0x2ac>
        }
        else
        {
          SubgRf.PacketParams.Params.Gfsk.CrcLength = ( RadioCrcTypes_t ) config->fsk.CrcLength;
 80188e4:	68bb      	ldr	r3, [r7, #8]
 80188e6:	7d5a      	ldrb	r2, [r3, #21]
 80188e8:	4b12      	ldr	r3, [pc, #72]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188ea:	75da      	strb	r2, [r3, #23]
          SubgRf.PacketParams.Params.Gfsk.DcFree = ( RadioDcFree_t ) config->fsk.Whitening;
 80188ec:	68bb      	ldr	r3, [r7, #8]
 80188ee:	7d9a      	ldrb	r2, [r3, #22]
 80188f0:	4b10      	ldr	r3, [pc, #64]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188f2:	761a      	strb	r2, [r3, #24]
          SubgRf.PacketParams.Params.Gfsk.HeaderType = ( RadioPacketLengthModes_t ) config->fsk.HeaderType;
 80188f4:	68bb      	ldr	r3, [r7, #8]
 80188f6:	7d1a      	ldrb	r2, [r3, #20]
 80188f8:	4b0e      	ldr	r3, [pc, #56]	@ (8018934 <RadioSetTxGenericConfig+0x2e4>)
 80188fa:	755a      	strb	r2, [r3, #21]
        }

        RadioStandby( );
 80188fc:	f7ff f807 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_FSK );
 8018900:	2000      	movs	r0, #0
 8018902:	f7fe f9b1 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018906:	480e      	ldr	r0, [pc, #56]	@ (8018940 <RadioSetTxGenericConfig+0x2f0>)
 8018908:	f000 fdca 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 801890c:	480d      	ldr	r0, [pc, #52]	@ (8018944 <RadioSetTxGenericConfig+0x2f4>)
 801890e:	f000 fe99 	bl	8019644 <SUBGRF_SetPacketParams>
        SUBGRF_SetSyncWord( syncword );
 8018912:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018916:	4618      	mov	r0, r3
 8018918:	f000 f961 	bl	8018bde <SUBGRF_SetSyncWord>
        SUBGRF_SetWhiteningSeed( config->fsk.whiteSeed );
 801891c:	68bb      	ldr	r3, [r7, #8]
 801891e:	8a1b      	ldrh	r3, [r3, #16]
 8018920:	4618      	mov	r0, r3
 8018922:	f000 f9ab 	bl	8018c7c <SUBGRF_SetWhiteningSeed>
        SUBGRF_SetCrcPolynomial(config->fsk.CrcPolynomial );
 8018926:	68bb      	ldr	r3, [r7, #8]
 8018928:	899b      	ldrh	r3, [r3, #12]
 801892a:	4618      	mov	r0, r3
 801892c:	f000 f986 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
        break;
 8018930:	e0a6      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
 8018932:	bf00      	nop
 8018934:	20001a70 	.word	0x20001a70
 8018938:	20001a6c 	.word	0x20001a6c
 801893c:	20001acc 	.word	0x20001acc
 8018940:	20001aa8 	.word	0x20001aa8
 8018944:	20001a7e 	.word	0x20001a7e
    case GENERIC_LORA:
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_LORA;
 8018948:	4b59      	ldr	r3, [pc, #356]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 801894a:	2201      	movs	r2, #1
 801894c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.LoRa.SpreadingFactor = ( RadioLoRaSpreadingFactors_t ) config->lora.SpreadingFactor;
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	781a      	ldrb	r2, [r3, #0]
 8018954:	4b56      	ldr	r3, [pc, #344]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018956:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        SubgRf.ModulationParams.Params.LoRa.Bandwidth = ( RadioLoRaBandwidths_t ) config->lora.Bandwidth;
 801895a:	68bb      	ldr	r3, [r7, #8]
 801895c:	785a      	ldrb	r2, [r3, #1]
 801895e:	4b54      	ldr	r3, [pc, #336]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018960:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        SubgRf.ModulationParams.Params.LoRa.CodingRate = ( RadioLoRaCodingRates_t ) config->lora.Coderate;
 8018964:	68bb      	ldr	r3, [r7, #8]
 8018966:	789a      	ldrb	r2, [r3, #2]
 8018968:	4b51      	ldr	r3, [pc, #324]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 801896a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        switch( config->lora.LowDatarateOptimize )
 801896e:	68bb      	ldr	r3, [r7, #8]
 8018970:	78db      	ldrb	r3, [r3, #3]
 8018972:	2b02      	cmp	r3, #2
 8018974:	d010      	beq.n	8018998 <RadioSetTxGenericConfig+0x348>
 8018976:	2b02      	cmp	r3, #2
 8018978:	dc20      	bgt.n	80189bc <RadioSetTxGenericConfig+0x36c>
 801897a:	2b00      	cmp	r3, #0
 801897c:	d002      	beq.n	8018984 <RadioSetTxGenericConfig+0x334>
 801897e:	2b01      	cmp	r3, #1
 8018980:	d005      	beq.n	801898e <RadioSetTxGenericConfig+0x33e>
            {
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
            }
            break;
          default:
            break;
 8018982:	e01b      	b.n	80189bc <RadioSetTxGenericConfig+0x36c>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 8018984:	4b4a      	ldr	r3, [pc, #296]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018986:	2200      	movs	r2, #0
 8018988:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 801898c:	e017      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
            SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 801898e:	4b48      	ldr	r3, [pc, #288]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018990:	2201      	movs	r2, #1
 8018992:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 8018996:	e012      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
            if( ( config->lora.SpreadingFactor == RADIO_LORA_SF11 ) || ( config->lora.SpreadingFactor == RADIO_LORA_SF12 ) )
 8018998:	68bb      	ldr	r3, [r7, #8]
 801899a:	781b      	ldrb	r3, [r3, #0]
 801899c:	2b0b      	cmp	r3, #11
 801899e:	d003      	beq.n	80189a8 <RadioSetTxGenericConfig+0x358>
 80189a0:	68bb      	ldr	r3, [r7, #8]
 80189a2:	781b      	ldrb	r3, [r3, #0]
 80189a4:	2b0c      	cmp	r3, #12
 80189a6:	d104      	bne.n	80189b2 <RadioSetTxGenericConfig+0x362>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 1;
 80189a8:	4b41      	ldr	r3, [pc, #260]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189aa:	2201      	movs	r2, #1
 80189ac:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189b0:	e005      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
              SubgRf.ModulationParams.Params.LoRa.LowDatarateOptimize = 0;
 80189b2:	4b3f      	ldr	r3, [pc, #252]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189b4:	2200      	movs	r2, #0
 80189b6:	f883 2053 	strb.w	r2, [r3, #83]	@ 0x53
            break;
 80189ba:	e000      	b.n	80189be <RadioSetTxGenericConfig+0x36e>
            break;
 80189bc:	bf00      	nop
        }

        SubgRf.PacketParams.PacketType = PACKET_TYPE_LORA;
 80189be:	4b3c      	ldr	r3, [pc, #240]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189c0:	2201      	movs	r2, #1
 80189c2:	739a      	strb	r2, [r3, #14]
        SubgRf.PacketParams.Params.LoRa.PreambleLength = config->lora.PreambleLen;
 80189c4:	68bb      	ldr	r3, [r7, #8]
 80189c6:	889a      	ldrh	r2, [r3, #4]
 80189c8:	4b39      	ldr	r3, [pc, #228]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189ca:	839a      	strh	r2, [r3, #28]
        SubgRf.PacketParams.Params.LoRa.HeaderType = ( RadioLoRaPacketLengthsMode_t ) config->lora.LengthMode;
 80189cc:	68bb      	ldr	r3, [r7, #8]
 80189ce:	799a      	ldrb	r2, [r3, #6]
 80189d0:	4b37      	ldr	r3, [pc, #220]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189d2:	779a      	strb	r2, [r3, #30]
        SubgRf.PacketParams.Params.LoRa.CrcMode = ( RadioLoRaCrcModes_t ) config->lora.CrcMode;
 80189d4:	68bb      	ldr	r3, [r7, #8]
 80189d6:	79da      	ldrb	r2, [r3, #7]
 80189d8:	4b35      	ldr	r3, [pc, #212]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189da:	f883 2020 	strb.w	r2, [r3, #32]
        SubgRf.PacketParams.Params.LoRa.InvertIQ = ( RadioLoRaIQModes_t ) config->lora.IqInverted;
 80189de:	68bb      	ldr	r3, [r7, #8]
 80189e0:	7a1a      	ldrb	r2, [r3, #8]
 80189e2:	4b33      	ldr	r3, [pc, #204]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 80189e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

        RadioStandby( );
 80189e8:	f7fe ff91 	bl	801790e <RadioStandby>
        RadioSetModem( MODEM_LORA );
 80189ec:	2001      	movs	r0, #1
 80189ee:	f7fe f93b 	bl	8016c68 <RadioSetModem>
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 80189f2:	4830      	ldr	r0, [pc, #192]	@ (8018ab4 <RadioSetTxGenericConfig+0x464>)
 80189f4:	f000 fd54 	bl	80194a0 <SUBGRF_SetModulationParams>
        SUBGRF_SetPacketParams( &SubgRf.PacketParams );
 80189f8:	482f      	ldr	r0, [pc, #188]	@ (8018ab8 <RadioSetTxGenericConfig+0x468>)
 80189fa:	f000 fe23 	bl	8019644 <SUBGRF_SetPacketParams>

        // WORKAROUND - Modulation Quality with 500 kHz LoRa Bandwidth, see STM32WL Erratasheet
        if( SubgRf.ModulationParams.Params.LoRa.Bandwidth == LORA_BW_500 )
 80189fe:	4b2c      	ldr	r3, [pc, #176]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8018a04:	2b06      	cmp	r3, #6
 8018a06:	d10d      	bne.n	8018a24 <RadioSetTxGenericConfig+0x3d4>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) & ~( 1 << 2 ) );
 8018a08:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a0c:	f000 ff76 	bl	80198fc <SUBGRF_ReadRegister>
 8018a10:	4603      	mov	r3, r0
 8018a12:	f023 0304 	bic.w	r3, r3, #4
 8018a16:	b2db      	uxtb	r3, r3
 8018a18:	4619      	mov	r1, r3
 8018a1a:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a1e:	f000 ff59 	bl	80198d4 <SUBGRF_WriteRegister>
        {
            // RegTxModulation = @address 0x0889
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
        }
        // WORKAROUND END
        break;
 8018a22:	e02d      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
            SUBGRF_WriteRegister( SUBGHZ_SDCFG0R, SUBGRF_ReadRegister( SUBGHZ_SDCFG0R ) | ( 1 << 2 ) );
 8018a24:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a28:	f000 ff68 	bl	80198fc <SUBGRF_ReadRegister>
 8018a2c:	4603      	mov	r3, r0
 8018a2e:	f043 0304 	orr.w	r3, r3, #4
 8018a32:	b2db      	uxtb	r3, r3
 8018a34:	4619      	mov	r1, r3
 8018a36:	f640 0089 	movw	r0, #2185	@ 0x889
 8018a3a:	f000 ff4b 	bl	80198d4 <SUBGRF_WriteRegister>
        break;
 8018a3e:	e01f      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
    case GENERIC_BPSK:
        if( ( config->bpsk.BitRate == 0 ) || ( config->bpsk.BitRate > 1000 ) )
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	681b      	ldr	r3, [r3, #0]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d004      	beq.n	8018a52 <RadioSetTxGenericConfig+0x402>
 8018a48:	68bb      	ldr	r3, [r7, #8]
 8018a4a:	681b      	ldr	r3, [r3, #0]
 8018a4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018a50:	d902      	bls.n	8018a58 <RadioSetTxGenericConfig+0x408>
        {
            return -1;
 8018a52:	f04f 33ff 	mov.w	r3, #4294967295
 8018a56:	e027      	b.n	8018aa8 <RadioSetTxGenericConfig+0x458>
        }
        RadioSetModem( MODEM_BPSK );
 8018a58:	2003      	movs	r0, #3
 8018a5a:	f7fe f905 	bl	8016c68 <RadioSetModem>
        SubgRf.ModulationParams.PacketType = PACKET_TYPE_BPSK;
 8018a5e:	4b14      	ldr	r3, [pc, #80]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a60:	2202      	movs	r2, #2
 8018a62:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
        SubgRf.ModulationParams.Params.Bpsk.BitRate = config->bpsk.BitRate;
 8018a66:	68bb      	ldr	r3, [r7, #8]
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	4a11      	ldr	r2, [pc, #68]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a6c:	6493      	str	r3, [r2, #72]	@ 0x48
        SubgRf.ModulationParams.Params.Bpsk.ModulationShaping = MOD_SHAPING_DBPSK;
 8018a6e:	4b10      	ldr	r3, [pc, #64]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a70:	2216      	movs	r2, #22
 8018a72:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        SUBGRF_SetModulationParams( &SubgRf.ModulationParams );
 8018a76:	480f      	ldr	r0, [pc, #60]	@ (8018ab4 <RadioSetTxGenericConfig+0x464>)
 8018a78:	f000 fd12 	bl	80194a0 <SUBGRF_SetModulationParams>
        break;
 8018a7c:	e000      	b.n	8018a80 <RadioSetTxGenericConfig+0x430>
    default:
        break;
 8018a7e:	bf00      	nop
    }

    SubgRf.AntSwitchPaSelect = SUBGRF_SetRfTxPower( power );
 8018a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8018a84:	4618      	mov	r0, r3
 8018a86:	f001 f841 	bl	8019b0c <SUBGRF_SetRfTxPower>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	461a      	mov	r2, r3
 8018a8e:	4b08      	ldr	r3, [pc, #32]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a90:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
    RFW_SetAntSwitch( SubgRf.AntSwitchPaSelect );
 8018a94:	4b06      	ldr	r3, [pc, #24]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018a96:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018a9a:	4618      	mov	r0, r3
 8018a9c:	f001 fa05 	bl	8019eaa <RFW_SetAntSwitch>
    SubgRf.TxTimeout = timeout;
 8018aa0:	4a03      	ldr	r2, [pc, #12]	@ (8018ab0 <RadioSetTxGenericConfig+0x460>)
 8018aa2:	687b      	ldr	r3, [r7, #4]
 8018aa4:	6053      	str	r3, [r2, #4]
    return 0;
 8018aa6:	2300      	movs	r3, #0
#else /* RADIO_GENERIC_CONFIG_ENABLE == 1*/
    return -1;
#endif /* RADIO_GENERIC_CONFIG_ENABLE == 0*/
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3738      	adds	r7, #56	@ 0x38
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}
 8018ab0:	20001a70 	.word	0x20001a70
 8018ab4:	20001aa8 	.word	0x20001aa8
 8018ab8:	20001a7e 	.word	0x20001a7e

08018abc <SUBGRF_Init>:
static void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size );

/* Exported functions ---------------------------------------------------------*/
void SUBGRF_Init( DioIrqHandler dioIrq )
{
 8018abc:	b580      	push	{r7, lr}
 8018abe:	b084      	sub	sp, #16
 8018ac0:	af00      	add	r7, sp, #0
 8018ac2:	6078      	str	r0, [r7, #4]
    if ( dioIrq != NULL)
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d002      	beq.n	8018ad0 <SUBGRF_Init+0x14>
    {
        RadioOnDioIrqCb = dioIrq;
 8018aca:	4a1a      	ldr	r2, [pc, #104]	@ (8018b34 <SUBGRF_Init+0x78>)
 8018acc:	687b      	ldr	r3, [r7, #4]
 8018ace:	6013      	str	r3, [r2, #0]
    }

    RADIO_INIT();
 8018ad0:	f7e8 ff50 	bl	8001974 <MX_SUBGHZ_Init>

    /* set default SMPS current drive to default*/
    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018ad4:	2002      	movs	r0, #2
 8018ad6:	f001 f8e5 	bl	8019ca4 <Radio_SMPS_Set>

    ImageCalibrated = false;
 8018ada:	4b17      	ldr	r3, [pc, #92]	@ (8018b38 <SUBGRF_Init+0x7c>)
 8018adc:	2200      	movs	r2, #0
 8018ade:	701a      	strb	r2, [r3, #0]

    SUBGRF_SetStandby( STDBY_RC );
 8018ae0:	2000      	movs	r0, #0
 8018ae2:	f000 f977 	bl	8018dd4 <SUBGRF_SetStandby>

    // Initialize TCXO control
    if (1U == RBI_IsTCXO() )
 8018ae6:	f7f1 fd8b 	bl	800a600 <RBI_IsTCXO>
 8018aea:	4603      	mov	r3, r0
 8018aec:	2b01      	cmp	r3, #1
 8018aee:	d10e      	bne.n	8018b0e <SUBGRF_Init+0x52>
    {
        SUBGRF_SetTcxoMode( TCXO_CTRL_VOLTAGE, RF_WAKEUP_TIME << 6 );// 100 ms
 8018af0:	2140      	movs	r1, #64	@ 0x40
 8018af2:	2001      	movs	r0, #1
 8018af4:	f000 fb78 	bl	80191e8 <SUBGRF_SetTcxoMode>
        SUBGRF_WriteRegister( REG_XTA_TRIM, 0x00 );
 8018af8:	2100      	movs	r1, #0
 8018afa:	f640 1011 	movw	r0, #2321	@ 0x911
 8018afe:	f000 fee9 	bl	80198d4 <SUBGRF_WriteRegister>

        /*enable calibration for cut1.1 and later*/
        CalibrationParams_t calibParam;
        calibParam.Value = 0x7F;
 8018b02:	237f      	movs	r3, #127	@ 0x7f
 8018b04:	733b      	strb	r3, [r7, #12]
        SUBGRF_Calibrate( calibParam );
 8018b06:	7b38      	ldrb	r0, [r7, #12]
 8018b08:	f000 fa85 	bl	8019016 <SUBGRF_Calibrate>
 8018b0c:	e009      	b.n	8018b22 <SUBGRF_Init+0x66>
    }
    else
    {
        SUBGRF_WriteRegister( REG_XTA_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b0e:	2120      	movs	r1, #32
 8018b10:	f640 1011 	movw	r0, #2321	@ 0x911
 8018b14:	f000 fede 	bl	80198d4 <SUBGRF_WriteRegister>
        SUBGRF_WriteRegister( REG_XTB_TRIM, XTAL_DEFAULT_CAP_VALUE );
 8018b18:	2120      	movs	r1, #32
 8018b1a:	f640 1012 	movw	r0, #2322	@ 0x912
 8018b1e:	f000 fed9 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    /* Init RF Switch */
    RBI_Init();
 8018b22:	f7f1 fd51 	bl	800a5c8 <RBI_Init>

    OperatingMode = MODE_STDBY_RC;
 8018b26:	4b05      	ldr	r3, [pc, #20]	@ (8018b3c <SUBGRF_Init+0x80>)
 8018b28:	2201      	movs	r2, #1
 8018b2a:	701a      	strb	r2, [r3, #0]
}
 8018b2c:	bf00      	nop
 8018b2e:	3710      	adds	r7, #16
 8018b30:	46bd      	mov	sp, r7
 8018b32:	bd80      	pop	{r7, pc}
 8018b34:	20001b08 	.word	0x20001b08
 8018b38:	20001b04 	.word	0x20001b04
 8018b3c:	20001afc 	.word	0x20001afc

08018b40 <SUBGRF_GetOperatingMode>:

RadioOperatingModes_t SUBGRF_GetOperatingMode( void )
{
 8018b40:	b480      	push	{r7}
 8018b42:	af00      	add	r7, sp, #0
    return OperatingMode;
 8018b44:	4b02      	ldr	r3, [pc, #8]	@ (8018b50 <SUBGRF_GetOperatingMode+0x10>)
 8018b46:	781b      	ldrb	r3, [r3, #0]
}
 8018b48:	4618      	mov	r0, r3
 8018b4a:	46bd      	mov	sp, r7
 8018b4c:	bc80      	pop	{r7}
 8018b4e:	4770      	bx	lr
 8018b50:	20001afc 	.word	0x20001afc

08018b54 <SUBGRF_SetPayload>:

void SUBGRF_SetPayload( uint8_t *payload, uint8_t size )
{
 8018b54:	b580      	push	{r7, lr}
 8018b56:	b082      	sub	sp, #8
 8018b58:	af00      	add	r7, sp, #0
 8018b5a:	6078      	str	r0, [r7, #4]
 8018b5c:	460b      	mov	r3, r1
 8018b5e:	70fb      	strb	r3, [r7, #3]
    SUBGRF_WriteBuffer( 0x00, payload, size );
 8018b60:	78fb      	ldrb	r3, [r7, #3]
 8018b62:	461a      	mov	r2, r3
 8018b64:	6879      	ldr	r1, [r7, #4]
 8018b66:	2000      	movs	r0, #0
 8018b68:	f000 ff20 	bl	80199ac <SUBGRF_WriteBuffer>
}
 8018b6c:	bf00      	nop
 8018b6e:	3708      	adds	r7, #8
 8018b70:	46bd      	mov	sp, r7
 8018b72:	bd80      	pop	{r7, pc}

08018b74 <SUBGRF_GetPayload>:

uint8_t SUBGRF_GetPayload( uint8_t *buffer, uint8_t *size,  uint8_t maxSize )
{
 8018b74:	b580      	push	{r7, lr}
 8018b76:	b086      	sub	sp, #24
 8018b78:	af00      	add	r7, sp, #0
 8018b7a:	60f8      	str	r0, [r7, #12]
 8018b7c:	60b9      	str	r1, [r7, #8]
 8018b7e:	4613      	mov	r3, r2
 8018b80:	71fb      	strb	r3, [r7, #7]
    uint8_t offset = 0;
 8018b82:	2300      	movs	r3, #0
 8018b84:	75fb      	strb	r3, [r7, #23]

    SUBGRF_GetRxBufferStatus( size, &offset );
 8018b86:	f107 0317 	add.w	r3, r7, #23
 8018b8a:	4619      	mov	r1, r3
 8018b8c:	68b8      	ldr	r0, [r7, #8]
 8018b8e:	f000 fe23 	bl	80197d8 <SUBGRF_GetRxBufferStatus>
    if( *size > maxSize )
 8018b92:	68bb      	ldr	r3, [r7, #8]
 8018b94:	781b      	ldrb	r3, [r3, #0]
 8018b96:	79fa      	ldrb	r2, [r7, #7]
 8018b98:	429a      	cmp	r2, r3
 8018b9a:	d201      	bcs.n	8018ba0 <SUBGRF_GetPayload+0x2c>
    {
        return 1;
 8018b9c:	2301      	movs	r3, #1
 8018b9e:	e007      	b.n	8018bb0 <SUBGRF_GetPayload+0x3c>
    }
    SUBGRF_ReadBuffer( offset, buffer, *size );
 8018ba0:	7df8      	ldrb	r0, [r7, #23]
 8018ba2:	68bb      	ldr	r3, [r7, #8]
 8018ba4:	781b      	ldrb	r3, [r3, #0]
 8018ba6:	461a      	mov	r2, r3
 8018ba8:	68f9      	ldr	r1, [r7, #12]
 8018baa:	f000 ff21 	bl	80199f0 <SUBGRF_ReadBuffer>

    return 0;
 8018bae:	2300      	movs	r3, #0
}
 8018bb0:	4618      	mov	r0, r3
 8018bb2:	3718      	adds	r7, #24
 8018bb4:	46bd      	mov	sp, r7
 8018bb6:	bd80      	pop	{r7, pc}

08018bb8 <SUBGRF_SendPayload>:

void SUBGRF_SendPayload( uint8_t *payload, uint8_t size, uint32_t timeout)
{
 8018bb8:	b580      	push	{r7, lr}
 8018bba:	b084      	sub	sp, #16
 8018bbc:	af00      	add	r7, sp, #0
 8018bbe:	60f8      	str	r0, [r7, #12]
 8018bc0:	460b      	mov	r3, r1
 8018bc2:	607a      	str	r2, [r7, #4]
 8018bc4:	72fb      	strb	r3, [r7, #11]
    SUBGRF_SetPayload( payload, size );
 8018bc6:	7afb      	ldrb	r3, [r7, #11]
 8018bc8:	4619      	mov	r1, r3
 8018bca:	68f8      	ldr	r0, [r7, #12]
 8018bcc:	f7ff ffc2 	bl	8018b54 <SUBGRF_SetPayload>
    SUBGRF_SetTx( timeout );
 8018bd0:	6878      	ldr	r0, [r7, #4]
 8018bd2:	f000 f91b 	bl	8018e0c <SUBGRF_SetTx>
}
 8018bd6:	bf00      	nop
 8018bd8:	3710      	adds	r7, #16
 8018bda:	46bd      	mov	sp, r7
 8018bdc:	bd80      	pop	{r7, pc}

08018bde <SUBGRF_SetSyncWord>:

uint8_t SUBGRF_SetSyncWord( uint8_t *syncWord )
{
 8018bde:	b580      	push	{r7, lr}
 8018be0:	b082      	sub	sp, #8
 8018be2:	af00      	add	r7, sp, #0
 8018be4:	6078      	str	r0, [r7, #4]
    SUBGRF_WriteRegisters( REG_LR_SYNCWORDBASEADDRESS, syncWord, 8 );
 8018be6:	2208      	movs	r2, #8
 8018be8:	6879      	ldr	r1, [r7, #4]
 8018bea:	f44f 60d8 	mov.w	r0, #1728	@ 0x6c0
 8018bee:	f000 fe99 	bl	8019924 <SUBGRF_WriteRegisters>
    return 0;
 8018bf2:	2300      	movs	r3, #0
}
 8018bf4:	4618      	mov	r0, r3
 8018bf6:	3708      	adds	r7, #8
 8018bf8:	46bd      	mov	sp, r7
 8018bfa:	bd80      	pop	{r7, pc}

08018bfc <SUBGRF_SetCrcSeed>:

void SUBGRF_SetCrcSeed( uint16_t seed )
{
 8018bfc:	b580      	push	{r7, lr}
 8018bfe:	b084      	sub	sp, #16
 8018c00:	af00      	add	r7, sp, #0
 8018c02:	4603      	mov	r3, r0
 8018c04:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( seed >> 8 ) & 0xFF );
 8018c06:	88fb      	ldrh	r3, [r7, #6]
 8018c08:	0a1b      	lsrs	r3, r3, #8
 8018c0a:	b29b      	uxth	r3, r3
 8018c0c:	b2db      	uxtb	r3, r3
 8018c0e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( seed & 0xFF );
 8018c10:	88fb      	ldrh	r3, [r7, #6]
 8018c12:	b2db      	uxtb	r3, r3
 8018c14:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c16:	f000 fb6b 	bl	80192f0 <SUBGRF_GetPacketType>
 8018c1a:	4603      	mov	r3, r0
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	d108      	bne.n	8018c32 <SUBGRF_SetCrcSeed+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCSEEDBASEADDR, buf, 2 );
 8018c20:	f107 030c 	add.w	r3, r7, #12
 8018c24:	2202      	movs	r2, #2
 8018c26:	4619      	mov	r1, r3
 8018c28:	f240 60bc 	movw	r0, #1724	@ 0x6bc
 8018c2c:	f000 fe7a 	bl	8019924 <SUBGRF_WriteRegisters>
            break;
 8018c30:	e000      	b.n	8018c34 <SUBGRF_SetCrcSeed+0x38>

        default:
            break;
 8018c32:	bf00      	nop
    }
}
 8018c34:	bf00      	nop
 8018c36:	3710      	adds	r7, #16
 8018c38:	46bd      	mov	sp, r7
 8018c3a:	bd80      	pop	{r7, pc}

08018c3c <SUBGRF_SetCrcPolynomial>:

void SUBGRF_SetCrcPolynomial( uint16_t polynomial )
{
 8018c3c:	b580      	push	{r7, lr}
 8018c3e:	b084      	sub	sp, #16
 8018c40:	af00      	add	r7, sp, #0
 8018c42:	4603      	mov	r3, r0
 8018c44:	80fb      	strh	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = ( uint8_t )( ( polynomial >> 8 ) & 0xFF );
 8018c46:	88fb      	ldrh	r3, [r7, #6]
 8018c48:	0a1b      	lsrs	r3, r3, #8
 8018c4a:	b29b      	uxth	r3, r3
 8018c4c:	b2db      	uxtb	r3, r3
 8018c4e:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( polynomial & 0xFF );
 8018c50:	88fb      	ldrh	r3, [r7, #6]
 8018c52:	b2db      	uxtb	r3, r3
 8018c54:	737b      	strb	r3, [r7, #13]

    switch( SUBGRF_GetPacketType( ) )
 8018c56:	f000 fb4b 	bl	80192f0 <SUBGRF_GetPacketType>
 8018c5a:	4603      	mov	r3, r0
 8018c5c:	2b00      	cmp	r3, #0
 8018c5e:	d108      	bne.n	8018c72 <SUBGRF_SetCrcPolynomial+0x36>
    {
        case PACKET_TYPE_GFSK:
            SUBGRF_WriteRegisters( REG_LR_CRCPOLYBASEADDR, buf, 2 );
 8018c60:	f107 030c 	add.w	r3, r7, #12
 8018c64:	2202      	movs	r2, #2
 8018c66:	4619      	mov	r1, r3
 8018c68:	f240 60be 	movw	r0, #1726	@ 0x6be
 8018c6c:	f000 fe5a 	bl	8019924 <SUBGRF_WriteRegisters>
            break;
 8018c70:	e000      	b.n	8018c74 <SUBGRF_SetCrcPolynomial+0x38>

        default:
            break;
 8018c72:	bf00      	nop
    }
}
 8018c74:	bf00      	nop
 8018c76:	3710      	adds	r7, #16
 8018c78:	46bd      	mov	sp, r7
 8018c7a:	bd80      	pop	{r7, pc}

08018c7c <SUBGRF_SetWhiteningSeed>:

void SUBGRF_SetWhiteningSeed( uint16_t seed )
{
 8018c7c:	b580      	push	{r7, lr}
 8018c7e:	b084      	sub	sp, #16
 8018c80:	af00      	add	r7, sp, #0
 8018c82:	4603      	mov	r3, r0
 8018c84:	80fb      	strh	r3, [r7, #6]
    uint8_t regValue = 0;
 8018c86:	2300      	movs	r3, #0
 8018c88:	73fb      	strb	r3, [r7, #15]

    switch( SUBGRF_GetPacketType( ) )
 8018c8a:	f000 fb31 	bl	80192f0 <SUBGRF_GetPacketType>
 8018c8e:	4603      	mov	r3, r0
 8018c90:	2b00      	cmp	r3, #0
 8018c92:	d121      	bne.n	8018cd8 <SUBGRF_SetWhiteningSeed+0x5c>
    {
        case PACKET_TYPE_GFSK:
            regValue = SUBGRF_ReadRegister( REG_LR_WHITSEEDBASEADDR_MSB ) & 0xFE;
 8018c94:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018c98:	f000 fe30 	bl	80198fc <SUBGRF_ReadRegister>
 8018c9c:	4603      	mov	r3, r0
 8018c9e:	f023 0301 	bic.w	r3, r3, #1
 8018ca2:	73fb      	strb	r3, [r7, #15]
            regValue = ( ( seed >> 8 ) & 0x01 ) | regValue;
 8018ca4:	88fb      	ldrh	r3, [r7, #6]
 8018ca6:	0a1b      	lsrs	r3, r3, #8
 8018ca8:	b29b      	uxth	r3, r3
 8018caa:	b25b      	sxtb	r3, r3
 8018cac:	f003 0301 	and.w	r3, r3, #1
 8018cb0:	b25a      	sxtb	r2, r3
 8018cb2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018cb6:	4313      	orrs	r3, r2
 8018cb8:	b25b      	sxtb	r3, r3
 8018cba:	73fb      	strb	r3, [r7, #15]
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_MSB, regValue ); // only 1 bit.
 8018cbc:	7bfb      	ldrb	r3, [r7, #15]
 8018cbe:	4619      	mov	r1, r3
 8018cc0:	f44f 60d7 	mov.w	r0, #1720	@ 0x6b8
 8018cc4:	f000 fe06 	bl	80198d4 <SUBGRF_WriteRegister>
            SUBGRF_WriteRegister( REG_LR_WHITSEEDBASEADDR_LSB, (uint8_t)seed );
 8018cc8:	88fb      	ldrh	r3, [r7, #6]
 8018cca:	b2db      	uxtb	r3, r3
 8018ccc:	4619      	mov	r1, r3
 8018cce:	f240 60b9 	movw	r0, #1721	@ 0x6b9
 8018cd2:	f000 fdff 	bl	80198d4 <SUBGRF_WriteRegister>
            break;
 8018cd6:	e000      	b.n	8018cda <SUBGRF_SetWhiteningSeed+0x5e>

        default:
            break;
 8018cd8:	bf00      	nop
    }
}
 8018cda:	bf00      	nop
 8018cdc:	3710      	adds	r7, #16
 8018cde:	46bd      	mov	sp, r7
 8018ce0:	bd80      	pop	{r7, pc}

08018ce2 <SUBGRF_GetRandom>:

uint32_t SUBGRF_GetRandom( void )
{
 8018ce2:	b580      	push	{r7, lr}
 8018ce4:	b082      	sub	sp, #8
 8018ce6:	af00      	add	r7, sp, #0
    uint32_t number = 0;
 8018ce8:	2300      	movs	r3, #0
 8018cea:	603b      	str	r3, [r7, #0]
    uint8_t regAnaLna = 0;
 8018cec:	2300      	movs	r3, #0
 8018cee:	71fb      	strb	r3, [r7, #7]
    uint8_t regAnaMixer = 0;
 8018cf0:	2300      	movs	r3, #0
 8018cf2:	71bb      	strb	r3, [r7, #6]

    regAnaLna = SUBGRF_ReadRegister( REG_ANA_LNA );
 8018cf4:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018cf8:	f000 fe00 	bl	80198fc <SUBGRF_ReadRegister>
 8018cfc:	4603      	mov	r3, r0
 8018cfe:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna & ~( 1 << 0 ) );
 8018d00:	79fb      	ldrb	r3, [r7, #7]
 8018d02:	f023 0301 	bic.w	r3, r3, #1
 8018d06:	b2db      	uxtb	r3, r3
 8018d08:	4619      	mov	r1, r3
 8018d0a:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d0e:	f000 fde1 	bl	80198d4 <SUBGRF_WriteRegister>

    regAnaMixer = SUBGRF_ReadRegister( REG_ANA_MIXER );
 8018d12:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d16:	f000 fdf1 	bl	80198fc <SUBGRF_ReadRegister>
 8018d1a:	4603      	mov	r3, r0
 8018d1c:	71bb      	strb	r3, [r7, #6]
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer & ~( 1 << 7 ) );
 8018d1e:	79bb      	ldrb	r3, [r7, #6]
 8018d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018d24:	b2db      	uxtb	r3, r3
 8018d26:	4619      	mov	r1, r3
 8018d28:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d2c:	f000 fdd2 	bl	80198d4 <SUBGRF_WriteRegister>

    // Set radio in continuous reception
    SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
 8018d30:	f06f 407f 	mvn.w	r0, #4278190080	@ 0xff000000
 8018d34:	f000 f88a 	bl	8018e4c <SUBGRF_SetRx>

    SUBGRF_ReadRegisters( RANDOM_NUMBER_GENERATORBASEADDR, ( uint8_t* )&number, 4 );
 8018d38:	463b      	mov	r3, r7
 8018d3a:	2204      	movs	r2, #4
 8018d3c:	4619      	mov	r1, r3
 8018d3e:	f640 0019 	movw	r0, #2073	@ 0x819
 8018d42:	f000 fe11 	bl	8019968 <SUBGRF_ReadRegisters>

    SUBGRF_SetStandby( STDBY_RC );
 8018d46:	2000      	movs	r0, #0
 8018d48:	f000 f844 	bl	8018dd4 <SUBGRF_SetStandby>

    SUBGRF_WriteRegister( REG_ANA_LNA, regAnaLna );
 8018d4c:	79fb      	ldrb	r3, [r7, #7]
 8018d4e:	4619      	mov	r1, r3
 8018d50:	f640 00e2 	movw	r0, #2274	@ 0x8e2
 8018d54:	f000 fdbe 	bl	80198d4 <SUBGRF_WriteRegister>
    SUBGRF_WriteRegister( REG_ANA_MIXER, regAnaMixer );
 8018d58:	79bb      	ldrb	r3, [r7, #6]
 8018d5a:	4619      	mov	r1, r3
 8018d5c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8018d60:	f000 fdb8 	bl	80198d4 <SUBGRF_WriteRegister>

    return number;
 8018d64:	683b      	ldr	r3, [r7, #0]
}
 8018d66:	4618      	mov	r0, r3
 8018d68:	3708      	adds	r7, #8
 8018d6a:	46bd      	mov	sp, r7
 8018d6c:	bd80      	pop	{r7, pc}
	...

08018d70 <SUBGRF_SetSleep>:

void SUBGRF_SetSleep( SleepParams_t sleepConfig )
{
 8018d70:	b580      	push	{r7, lr}
 8018d72:	b084      	sub	sp, #16
 8018d74:	af00      	add	r7, sp, #0
 8018d76:	7138      	strb	r0, [r7, #4]
    /* switch the antenna OFF by SW */
    RBI_ConfigRFSwitch(RBI_SWITCH_OFF);
 8018d78:	2000      	movs	r0, #0
 8018d7a:	f7f1 fc2c 	bl	800a5d6 <RBI_ConfigRFSwitch>

    Radio_SMPS_Set(SMPS_DRIVE_SETTING_DEFAULT);
 8018d7e:	2002      	movs	r0, #2
 8018d80:	f000 ff90 	bl	8019ca4 <Radio_SMPS_Set>

    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018d84:	793b      	ldrb	r3, [r7, #4]
 8018d86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018d8a:	b2db      	uxtb	r3, r3
 8018d8c:	009b      	lsls	r3, r3, #2
 8018d8e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018d90:	793b      	ldrb	r3, [r7, #4]
 8018d92:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018d96:	b2db      	uxtb	r3, r3
 8018d98:	005b      	lsls	r3, r3, #1
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018d9a:	b25b      	sxtb	r3, r3
 8018d9c:	4313      	orrs	r3, r2
 8018d9e:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )sleepConfig.Fields.WakeUpRTC ) );
 8018da0:	793b      	ldrb	r3, [r7, #4]
 8018da2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018da6:	b2db      	uxtb	r3, r3
 8018da8:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )sleepConfig.Fields.Reset << 1 ) |
 8018daa:	4313      	orrs	r3, r2
 8018dac:	b25b      	sxtb	r3, r3
 8018dae:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )sleepConfig.Fields.WarmStart << 2 ) |
 8018db0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_SLEEP, &value, 1 );
 8018db2:	f107 030f 	add.w	r3, r7, #15
 8018db6:	2201      	movs	r2, #1
 8018db8:	4619      	mov	r1, r3
 8018dba:	2084      	movs	r0, #132	@ 0x84
 8018dbc:	f000 fe3a 	bl	8019a34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_SLEEP;
 8018dc0:	4b03      	ldr	r3, [pc, #12]	@ (8018dd0 <SUBGRF_SetSleep+0x60>)
 8018dc2:	2200      	movs	r2, #0
 8018dc4:	701a      	strb	r2, [r3, #0]
}
 8018dc6:	bf00      	nop
 8018dc8:	3710      	adds	r7, #16
 8018dca:	46bd      	mov	sp, r7
 8018dcc:	bd80      	pop	{r7, pc}
 8018dce:	bf00      	nop
 8018dd0:	20001afc 	.word	0x20001afc

08018dd4 <SUBGRF_SetStandby>:

void SUBGRF_SetStandby( RadioStandbyModes_t standbyConfig )
{
 8018dd4:	b580      	push	{r7, lr}
 8018dd6:	b082      	sub	sp, #8
 8018dd8:	af00      	add	r7, sp, #0
 8018dda:	4603      	mov	r3, r0
 8018ddc:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STANDBY, ( uint8_t* )&standbyConfig, 1 );
 8018dde:	1dfb      	adds	r3, r7, #7
 8018de0:	2201      	movs	r2, #1
 8018de2:	4619      	mov	r1, r3
 8018de4:	2080      	movs	r0, #128	@ 0x80
 8018de6:	f000 fe25 	bl	8019a34 <SUBGRF_WriteCommand>
    if( standbyConfig == STDBY_RC )
 8018dea:	79fb      	ldrb	r3, [r7, #7]
 8018dec:	2b00      	cmp	r3, #0
 8018dee:	d103      	bne.n	8018df8 <SUBGRF_SetStandby+0x24>
    {
        OperatingMode = MODE_STDBY_RC;
 8018df0:	4b05      	ldr	r3, [pc, #20]	@ (8018e08 <SUBGRF_SetStandby+0x34>)
 8018df2:	2201      	movs	r2, #1
 8018df4:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        OperatingMode = MODE_STDBY_XOSC;
    }
}
 8018df6:	e002      	b.n	8018dfe <SUBGRF_SetStandby+0x2a>
        OperatingMode = MODE_STDBY_XOSC;
 8018df8:	4b03      	ldr	r3, [pc, #12]	@ (8018e08 <SUBGRF_SetStandby+0x34>)
 8018dfa:	2202      	movs	r2, #2
 8018dfc:	701a      	strb	r2, [r3, #0]
}
 8018dfe:	bf00      	nop
 8018e00:	3708      	adds	r7, #8
 8018e02:	46bd      	mov	sp, r7
 8018e04:	bd80      	pop	{r7, pc}
 8018e06:	bf00      	nop
 8018e08:	20001afc 	.word	0x20001afc

08018e0c <SUBGRF_SetTx>:
    SUBGRF_WriteCommand( RADIO_SET_FS, 0, 0 );
    OperatingMode = MODE_FS;
}

void SUBGRF_SetTx( uint32_t timeout )
{
 8018e0c:	b580      	push	{r7, lr}
 8018e0e:	b084      	sub	sp, #16
 8018e10:	af00      	add	r7, sp, #0
 8018e12:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_TX;
 8018e14:	4b0c      	ldr	r3, [pc, #48]	@ (8018e48 <SUBGRF_SetTx+0x3c>)
 8018e16:	2204      	movs	r2, #4
 8018e18:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e1a:	687b      	ldr	r3, [r7, #4]
 8018e1c:	0c1b      	lsrs	r3, r3, #16
 8018e1e:	b2db      	uxtb	r3, r3
 8018e20:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e22:	687b      	ldr	r3, [r7, #4]
 8018e24:	0a1b      	lsrs	r3, r3, #8
 8018e26:	b2db      	uxtb	r3, r3
 8018e28:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018e2a:	687b      	ldr	r3, [r7, #4]
 8018e2c:	b2db      	uxtb	r3, r3
 8018e2e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_TX, buf, 3 );
 8018e30:	f107 030c 	add.w	r3, r7, #12
 8018e34:	2203      	movs	r2, #3
 8018e36:	4619      	mov	r1, r3
 8018e38:	2083      	movs	r0, #131	@ 0x83
 8018e3a:	f000 fdfb 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018e3e:	bf00      	nop
 8018e40:	3710      	adds	r7, #16
 8018e42:	46bd      	mov	sp, r7
 8018e44:	bd80      	pop	{r7, pc}
 8018e46:	bf00      	nop
 8018e48:	20001afc 	.word	0x20001afc

08018e4c <SUBGRF_SetRx>:

void SUBGRF_SetRx( uint32_t timeout )
{
 8018e4c:	b580      	push	{r7, lr}
 8018e4e:	b084      	sub	sp, #16
 8018e50:	af00      	add	r7, sp, #0
 8018e52:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018e54:	4b0c      	ldr	r3, [pc, #48]	@ (8018e88 <SUBGRF_SetRx+0x3c>)
 8018e56:	2205      	movs	r2, #5
 8018e58:	701a      	strb	r2, [r3, #0]

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	0c1b      	lsrs	r3, r3, #16
 8018e5e:	b2db      	uxtb	r3, r3
 8018e60:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	0a1b      	lsrs	r3, r3, #8
 8018e66:	b2db      	uxtb	r3, r3
 8018e68:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	b2db      	uxtb	r3, r3
 8018e6e:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018e70:	f107 030c 	add.w	r3, r7, #12
 8018e74:	2203      	movs	r2, #3
 8018e76:	4619      	mov	r1, r3
 8018e78:	2082      	movs	r0, #130	@ 0x82
 8018e7a:	f000 fddb 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018e7e:	bf00      	nop
 8018e80:	3710      	adds	r7, #16
 8018e82:	46bd      	mov	sp, r7
 8018e84:	bd80      	pop	{r7, pc}
 8018e86:	bf00      	nop
 8018e88:	20001afc 	.word	0x20001afc

08018e8c <SUBGRF_SetRxBoosted>:

void SUBGRF_SetRxBoosted( uint32_t timeout )
{
 8018e8c:	b580      	push	{r7, lr}
 8018e8e:	b084      	sub	sp, #16
 8018e90:	af00      	add	r7, sp, #0
 8018e92:	6078      	str	r0, [r7, #4]
    uint8_t buf[3];

    OperatingMode = MODE_RX;
 8018e94:	4b0e      	ldr	r3, [pc, #56]	@ (8018ed0 <SUBGRF_SetRxBoosted+0x44>)
 8018e96:	2205      	movs	r2, #5
 8018e98:	701a      	strb	r2, [r3, #0]

    /* ST_WORKAROUND_BEGIN: Sigfox patch > 0x96 replaced by 0x97 */
    SUBGRF_WriteRegister( REG_RX_GAIN, 0x97 ); // max LNA gain, increase current by ~2mA for around ~3dB in sensitivity
 8018e9a:	2197      	movs	r1, #151	@ 0x97
 8018e9c:	f640 00ac 	movw	r0, #2220	@ 0x8ac
 8018ea0:	f000 fd18 	bl	80198d4 <SUBGRF_WriteRegister>
    /* ST_WORKAROUND_END */

    buf[0] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	0c1b      	lsrs	r3, r3, #16
 8018ea8:	b2db      	uxtb	r3, r3
 8018eaa:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	0a1b      	lsrs	r3, r3, #8
 8018eb0:	b2db      	uxtb	r3, r3
 8018eb2:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( timeout & 0xFF );
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	b2db      	uxtb	r3, r3
 8018eb8:	73bb      	strb	r3, [r7, #14]
    SUBGRF_WriteCommand( RADIO_SET_RX, buf, 3 );
 8018eba:	f107 030c 	add.w	r3, r7, #12
 8018ebe:	2203      	movs	r2, #3
 8018ec0:	4619      	mov	r1, r3
 8018ec2:	2082      	movs	r0, #130	@ 0x82
 8018ec4:	f000 fdb6 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018ec8:	bf00      	nop
 8018eca:	3710      	adds	r7, #16
 8018ecc:	46bd      	mov	sp, r7
 8018ece:	bd80      	pop	{r7, pc}
 8018ed0:	20001afc 	.word	0x20001afc

08018ed4 <SUBGRF_SetRxDutyCycle>:

void SUBGRF_SetRxDutyCycle( uint32_t rxTime, uint32_t sleepTime )
{
 8018ed4:	b580      	push	{r7, lr}
 8018ed6:	b084      	sub	sp, #16
 8018ed8:	af00      	add	r7, sp, #0
 8018eda:	6078      	str	r0, [r7, #4]
 8018edc:	6039      	str	r1, [r7, #0]
    uint8_t buf[6];

    buf[0] = ( uint8_t )( ( rxTime >> 16 ) & 0xFF );
 8018ede:	687b      	ldr	r3, [r7, #4]
 8018ee0:	0c1b      	lsrs	r3, r3, #16
 8018ee2:	b2db      	uxtb	r3, r3
 8018ee4:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( rxTime >> 8 ) & 0xFF );
 8018ee6:	687b      	ldr	r3, [r7, #4]
 8018ee8:	0a1b      	lsrs	r3, r3, #8
 8018eea:	b2db      	uxtb	r3, r3
 8018eec:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( rxTime & 0xFF );
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	b2db      	uxtb	r3, r3
 8018ef2:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( ( sleepTime >> 16 ) & 0xFF );
 8018ef4:	683b      	ldr	r3, [r7, #0]
 8018ef6:	0c1b      	lsrs	r3, r3, #16
 8018ef8:	b2db      	uxtb	r3, r3
 8018efa:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( sleepTime >> 8 ) & 0xFF );
 8018efc:	683b      	ldr	r3, [r7, #0]
 8018efe:	0a1b      	lsrs	r3, r3, #8
 8018f00:	b2db      	uxtb	r3, r3
 8018f02:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( sleepTime & 0xFF );
 8018f04:	683b      	ldr	r3, [r7, #0]
 8018f06:	b2db      	uxtb	r3, r3
 8018f08:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_RXDUTYCYCLE, buf, 6 );
 8018f0a:	f107 0308 	add.w	r3, r7, #8
 8018f0e:	2206      	movs	r2, #6
 8018f10:	4619      	mov	r1, r3
 8018f12:	2094      	movs	r0, #148	@ 0x94
 8018f14:	f000 fd8e 	bl	8019a34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_RX_DC;
 8018f18:	4b03      	ldr	r3, [pc, #12]	@ (8018f28 <SUBGRF_SetRxDutyCycle+0x54>)
 8018f1a:	2206      	movs	r2, #6
 8018f1c:	701a      	strb	r2, [r3, #0]
}
 8018f1e:	bf00      	nop
 8018f20:	3710      	adds	r7, #16
 8018f22:	46bd      	mov	sp, r7
 8018f24:	bd80      	pop	{r7, pc}
 8018f26:	bf00      	nop
 8018f28:	20001afc 	.word	0x20001afc

08018f2c <SUBGRF_SetCad>:

void SUBGRF_SetCad( void )
{
 8018f2c:	b580      	push	{r7, lr}
 8018f2e:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_CAD, 0, 0 );
 8018f30:	2200      	movs	r2, #0
 8018f32:	2100      	movs	r1, #0
 8018f34:	20c5      	movs	r0, #197	@ 0xc5
 8018f36:	f000 fd7d 	bl	8019a34 <SUBGRF_WriteCommand>
    OperatingMode = MODE_CAD;
 8018f3a:	4b02      	ldr	r3, [pc, #8]	@ (8018f44 <SUBGRF_SetCad+0x18>)
 8018f3c:	2207      	movs	r2, #7
 8018f3e:	701a      	strb	r2, [r3, #0]
}
 8018f40:	bf00      	nop
 8018f42:	bd80      	pop	{r7, pc}
 8018f44:	20001afc 	.word	0x20001afc

08018f48 <SUBGRF_SetTxContinuousWave>:

void SUBGRF_SetTxContinuousWave( void )
{
 8018f48:	b580      	push	{r7, lr}
 8018f4a:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSWAVE, 0, 0 );
 8018f4c:	2200      	movs	r2, #0
 8018f4e:	2100      	movs	r1, #0
 8018f50:	20d1      	movs	r0, #209	@ 0xd1
 8018f52:	f000 fd6f 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018f56:	bf00      	nop
 8018f58:	bd80      	pop	{r7, pc}

08018f5a <SUBGRF_SetTxInfinitePreamble>:

void SUBGRF_SetTxInfinitePreamble( void )
{
 8018f5a:	b580      	push	{r7, lr}
 8018f5c:	af00      	add	r7, sp, #0
    SUBGRF_WriteCommand( RADIO_SET_TXCONTINUOUSPREAMBLE, 0, 0 );
 8018f5e:	2200      	movs	r2, #0
 8018f60:	2100      	movs	r1, #0
 8018f62:	20d2      	movs	r0, #210	@ 0xd2
 8018f64:	f000 fd66 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018f68:	bf00      	nop
 8018f6a:	bd80      	pop	{r7, pc}

08018f6c <SUBGRF_SetStopRxTimerOnPreambleDetect>:

void SUBGRF_SetStopRxTimerOnPreambleDetect( bool enable )
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b082      	sub	sp, #8
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	4603      	mov	r3, r0
 8018f74:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_STOPRXTIMERONPREAMBLE, ( uint8_t* )&enable, 1 );
 8018f76:	1dfb      	adds	r3, r7, #7
 8018f78:	2201      	movs	r2, #1
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	209f      	movs	r0, #159	@ 0x9f
 8018f7e:	f000 fd59 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8018f82:	bf00      	nop
 8018f84:	3708      	adds	r7, #8
 8018f86:	46bd      	mov	sp, r7
 8018f88:	bd80      	pop	{r7, pc}

08018f8a <SUBGRF_SetLoRaSymbNumTimeout>:

void SUBGRF_SetLoRaSymbNumTimeout( uint8_t symbNum )
{
 8018f8a:	b580      	push	{r7, lr}
 8018f8c:	b084      	sub	sp, #16
 8018f8e:	af00      	add	r7, sp, #0
 8018f90:	4603      	mov	r3, r0
 8018f92:	71fb      	strb	r3, [r7, #7]
    SUBGRF_WriteCommand( RADIO_SET_LORASYMBTIMEOUT, &symbNum, 1 );
 8018f94:	1dfb      	adds	r3, r7, #7
 8018f96:	2201      	movs	r2, #1
 8018f98:	4619      	mov	r1, r3
 8018f9a:	20a0      	movs	r0, #160	@ 0xa0
 8018f9c:	f000 fd4a 	bl	8019a34 <SUBGRF_WriteCommand>

    if( symbNum >= 64 )
 8018fa0:	79fb      	ldrb	r3, [r7, #7]
 8018fa2:	2b3f      	cmp	r3, #63	@ 0x3f
 8018fa4:	d91c      	bls.n	8018fe0 <SUBGRF_SetLoRaSymbNumTimeout+0x56>
    {
        uint8_t mant = symbNum >> 1;
 8018fa6:	79fb      	ldrb	r3, [r7, #7]
 8018fa8:	085b      	lsrs	r3, r3, #1
 8018faa:	73fb      	strb	r3, [r7, #15]
        uint8_t exp  = 0;
 8018fac:	2300      	movs	r3, #0
 8018fae:	73bb      	strb	r3, [r7, #14]
        uint8_t reg  = 0;
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	737b      	strb	r3, [r7, #13]

        while( mant > 31 )
 8018fb4:	e005      	b.n	8018fc2 <SUBGRF_SetLoRaSymbNumTimeout+0x38>
        {
            mant >>= 2;
 8018fb6:	7bfb      	ldrb	r3, [r7, #15]
 8018fb8:	089b      	lsrs	r3, r3, #2
 8018fba:	73fb      	strb	r3, [r7, #15]
            exp++;
 8018fbc:	7bbb      	ldrb	r3, [r7, #14]
 8018fbe:	3301      	adds	r3, #1
 8018fc0:	73bb      	strb	r3, [r7, #14]
        while( mant > 31 )
 8018fc2:	7bfb      	ldrb	r3, [r7, #15]
 8018fc4:	2b1f      	cmp	r3, #31
 8018fc6:	d8f6      	bhi.n	8018fb6 <SUBGRF_SetLoRaSymbNumTimeout+0x2c>
        }

        reg = exp + ( mant << 3 );
 8018fc8:	7bfb      	ldrb	r3, [r7, #15]
 8018fca:	00db      	lsls	r3, r3, #3
 8018fcc:	b2da      	uxtb	r2, r3
 8018fce:	7bbb      	ldrb	r3, [r7, #14]
 8018fd0:	4413      	add	r3, r2
 8018fd2:	737b      	strb	r3, [r7, #13]
        SUBGRF_WriteRegister( REG_LR_SYNCH_TIMEOUT, reg );
 8018fd4:	7b7b      	ldrb	r3, [r7, #13]
 8018fd6:	4619      	mov	r1, r3
 8018fd8:	f240 7006 	movw	r0, #1798	@ 0x706
 8018fdc:	f000 fc7a 	bl	80198d4 <SUBGRF_WriteRegister>
    }
}
 8018fe0:	bf00      	nop
 8018fe2:	3710      	adds	r7, #16
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}

08018fe8 <SUBGRF_SetRegulatorMode>:

void SUBGRF_SetRegulatorMode( void )
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
    /* ST_WORKAROUND_BEGIN: Get RegulatorMode value from RBI */
    RadioRegulatorMode_t mode;

    if ( ( 1UL == RBI_IsDCDC() ) && ( 1UL == DCDC_ENABLE ) )
 8018fee:	f7f1 fb0e 	bl	800a60e <RBI_IsDCDC>
 8018ff2:	4603      	mov	r3, r0
 8018ff4:	2b01      	cmp	r3, #1
 8018ff6:	d102      	bne.n	8018ffe <SUBGRF_SetRegulatorMode+0x16>
    {
        mode = USE_DCDC ;
 8018ff8:	2301      	movs	r3, #1
 8018ffa:	71fb      	strb	r3, [r7, #7]
 8018ffc:	e001      	b.n	8019002 <SUBGRF_SetRegulatorMode+0x1a>
    }
    else
    {
        mode = USE_LDO ;
 8018ffe:	2300      	movs	r3, #0
 8019000:	71fb      	strb	r3, [r7, #7]
    }
    /* ST_WORKAROUND_END */
    SUBGRF_WriteCommand( RADIO_SET_REGULATORMODE, ( uint8_t* )&mode, 1 );
 8019002:	1dfb      	adds	r3, r7, #7
 8019004:	2201      	movs	r2, #1
 8019006:	4619      	mov	r1, r3
 8019008:	2096      	movs	r0, #150	@ 0x96
 801900a:	f000 fd13 	bl	8019a34 <SUBGRF_WriteCommand>
}
 801900e:	bf00      	nop
 8019010:	3708      	adds	r7, #8
 8019012:	46bd      	mov	sp, r7
 8019014:	bd80      	pop	{r7, pc}

08019016 <SUBGRF_Calibrate>:

void SUBGRF_Calibrate( CalibrationParams_t calibParam )
{
 8019016:	b580      	push	{r7, lr}
 8019018:	b084      	sub	sp, #16
 801901a:	af00      	add	r7, sp, #0
 801901c:	7138      	strb	r0, [r7, #4]
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801901e:	793b      	ldrb	r3, [r7, #4]
 8019020:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8019024:	b2db      	uxtb	r3, r3
 8019026:	019b      	lsls	r3, r3, #6
 8019028:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 801902a:	793b      	ldrb	r3, [r7, #4]
 801902c:	f3c3 1340 	ubfx	r3, r3, #5, #1
 8019030:	b2db      	uxtb	r3, r3
 8019032:	015b      	lsls	r3, r3, #5
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 8019034:	b25b      	sxtb	r3, r3
 8019036:	4313      	orrs	r3, r2
 8019038:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 801903a:	793b      	ldrb	r3, [r7, #4]
 801903c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8019040:	b2db      	uxtb	r3, r3
 8019042:	011b      	lsls	r3, r3, #4
                      ( ( uint8_t )calibParam.Fields.ADCBulkPEnable << 5 ) |
 8019044:	b25b      	sxtb	r3, r3
 8019046:	4313      	orrs	r3, r2
 8019048:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 801904a:	793b      	ldrb	r3, [r7, #4]
 801904c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8019050:	b2db      	uxtb	r3, r3
 8019052:	00db      	lsls	r3, r3, #3
                      ( ( uint8_t )calibParam.Fields.ADCBulkNEnable << 4 ) |
 8019054:	b25b      	sxtb	r3, r3
 8019056:	4313      	orrs	r3, r2
 8019058:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 801905a:	793b      	ldrb	r3, [r7, #4]
 801905c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8019060:	b2db      	uxtb	r3, r3
 8019062:	009b      	lsls	r3, r3, #2
                      ( ( uint8_t )calibParam.Fields.ADCPulseEnable << 3 ) |
 8019064:	b25b      	sxtb	r3, r3
 8019066:	4313      	orrs	r3, r2
 8019068:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 801906a:	793b      	ldrb	r3, [r7, #4]
 801906c:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8019070:	b2db      	uxtb	r3, r3
 8019072:	005b      	lsls	r3, r3, #1
                      ( ( uint8_t )calibParam.Fields.PLLEnable << 2 ) |
 8019074:	b25b      	sxtb	r3, r3
 8019076:	4313      	orrs	r3, r2
 8019078:	b25a      	sxtb	r2, r3
                      ( ( uint8_t )calibParam.Fields.RC64KEnable ) );
 801907a:	793b      	ldrb	r3, [r7, #4]
 801907c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8019080:	b2db      	uxtb	r3, r3
 8019082:	b25b      	sxtb	r3, r3
                      ( ( uint8_t )calibParam.Fields.RC13MEnable << 1 ) |
 8019084:	4313      	orrs	r3, r2
 8019086:	b25b      	sxtb	r3, r3
 8019088:	b2db      	uxtb	r3, r3
    uint8_t value = ( ( ( uint8_t )calibParam.Fields.ImgEnable << 6 ) |
 801908a:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_CALIBRATE, &value, 1 );
 801908c:	f107 030f 	add.w	r3, r7, #15
 8019090:	2201      	movs	r2, #1
 8019092:	4619      	mov	r1, r3
 8019094:	2089      	movs	r0, #137	@ 0x89
 8019096:	f000 fccd 	bl	8019a34 <SUBGRF_WriteCommand>
}
 801909a:	bf00      	nop
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
	...

080190a4 <SUBGRF_CalibrateImage>:

void SUBGRF_CalibrateImage( uint32_t freq )
{
 80190a4:	b580      	push	{r7, lr}
 80190a6:	b084      	sub	sp, #16
 80190a8:	af00      	add	r7, sp, #0
 80190aa:	6078      	str	r0, [r7, #4]
    uint8_t calFreq[2];

    if( freq > 900000000 )
 80190ac:	687b      	ldr	r3, [r7, #4]
 80190ae:	4a1b      	ldr	r2, [pc, #108]	@ (801911c <SUBGRF_CalibrateImage+0x78>)
 80190b0:	4293      	cmp	r3, r2
 80190b2:	d904      	bls.n	80190be <SUBGRF_CalibrateImage+0x1a>
    {
        calFreq[0] = 0xE1;
 80190b4:	23e1      	movs	r3, #225	@ 0xe1
 80190b6:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xE9;
 80190b8:	23e9      	movs	r3, #233	@ 0xe9
 80190ba:	737b      	strb	r3, [r7, #13]
 80190bc:	e022      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 850000000 )
 80190be:	687b      	ldr	r3, [r7, #4]
 80190c0:	4a17      	ldr	r2, [pc, #92]	@ (8019120 <SUBGRF_CalibrateImage+0x7c>)
 80190c2:	4293      	cmp	r3, r2
 80190c4:	d904      	bls.n	80190d0 <SUBGRF_CalibrateImage+0x2c>
    {
        calFreq[0] = 0xD7;
 80190c6:	23d7      	movs	r3, #215	@ 0xd7
 80190c8:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xDB;
 80190ca:	23db      	movs	r3, #219	@ 0xdb
 80190cc:	737b      	strb	r3, [r7, #13]
 80190ce:	e019      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 770000000 )
 80190d0:	687b      	ldr	r3, [r7, #4]
 80190d2:	4a14      	ldr	r2, [pc, #80]	@ (8019124 <SUBGRF_CalibrateImage+0x80>)
 80190d4:	4293      	cmp	r3, r2
 80190d6:	d904      	bls.n	80190e2 <SUBGRF_CalibrateImage+0x3e>
    {
        calFreq[0] = 0xC1;
 80190d8:	23c1      	movs	r3, #193	@ 0xc1
 80190da:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0xC5;
 80190dc:	23c5      	movs	r3, #197	@ 0xc5
 80190de:	737b      	strb	r3, [r7, #13]
 80190e0:	e010      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 460000000 )
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	4a10      	ldr	r2, [pc, #64]	@ (8019128 <SUBGRF_CalibrateImage+0x84>)
 80190e6:	4293      	cmp	r3, r2
 80190e8:	d904      	bls.n	80190f4 <SUBGRF_CalibrateImage+0x50>
    {
        calFreq[0] = 0x75;
 80190ea:	2375      	movs	r3, #117	@ 0x75
 80190ec:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x81;
 80190ee:	2381      	movs	r3, #129	@ 0x81
 80190f0:	737b      	strb	r3, [r7, #13]
 80190f2:	e007      	b.n	8019104 <SUBGRF_CalibrateImage+0x60>
    }
    else if( freq > 425000000 )
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	4a0d      	ldr	r2, [pc, #52]	@ (801912c <SUBGRF_CalibrateImage+0x88>)
 80190f8:	4293      	cmp	r3, r2
 80190fa:	d903      	bls.n	8019104 <SUBGRF_CalibrateImage+0x60>
    {
        calFreq[0] = 0x6B;
 80190fc:	236b      	movs	r3, #107	@ 0x6b
 80190fe:	733b      	strb	r3, [r7, #12]
        calFreq[1] = 0x6F;
 8019100:	236f      	movs	r3, #111	@ 0x6f
 8019102:	737b      	strb	r3, [r7, #13]
    }
    SUBGRF_WriteCommand( RADIO_CALIBRATEIMAGE, calFreq, 2 );
 8019104:	f107 030c 	add.w	r3, r7, #12
 8019108:	2202      	movs	r2, #2
 801910a:	4619      	mov	r1, r3
 801910c:	2098      	movs	r0, #152	@ 0x98
 801910e:	f000 fc91 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8019112:	bf00      	nop
 8019114:	3710      	adds	r7, #16
 8019116:	46bd      	mov	sp, r7
 8019118:	bd80      	pop	{r7, pc}
 801911a:	bf00      	nop
 801911c:	35a4e900 	.word	0x35a4e900
 8019120:	32a9f880 	.word	0x32a9f880
 8019124:	2de54480 	.word	0x2de54480
 8019128:	1b6b0b00 	.word	0x1b6b0b00
 801912c:	1954fc40 	.word	0x1954fc40

08019130 <SUBGRF_SetPaConfig>:

void SUBGRF_SetPaConfig( uint8_t paDutyCycle, uint8_t hpMax, uint8_t deviceSel, uint8_t paLut )
{
 8019130:	b590      	push	{r4, r7, lr}
 8019132:	b085      	sub	sp, #20
 8019134:	af00      	add	r7, sp, #0
 8019136:	4604      	mov	r4, r0
 8019138:	4608      	mov	r0, r1
 801913a:	4611      	mov	r1, r2
 801913c:	461a      	mov	r2, r3
 801913e:	4623      	mov	r3, r4
 8019140:	71fb      	strb	r3, [r7, #7]
 8019142:	4603      	mov	r3, r0
 8019144:	71bb      	strb	r3, [r7, #6]
 8019146:	460b      	mov	r3, r1
 8019148:	717b      	strb	r3, [r7, #5]
 801914a:	4613      	mov	r3, r2
 801914c:	713b      	strb	r3, [r7, #4]
    uint8_t buf[4];

    buf[0] = paDutyCycle;
 801914e:	79fb      	ldrb	r3, [r7, #7]
 8019150:	733b      	strb	r3, [r7, #12]
    buf[1] = hpMax;
 8019152:	79bb      	ldrb	r3, [r7, #6]
 8019154:	737b      	strb	r3, [r7, #13]
    buf[2] = deviceSel;
 8019156:	797b      	ldrb	r3, [r7, #5]
 8019158:	73bb      	strb	r3, [r7, #14]
    buf[3] = paLut;
 801915a:	793b      	ldrb	r3, [r7, #4]
 801915c:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_SET_PACONFIG, buf, 4 );
 801915e:	f107 030c 	add.w	r3, r7, #12
 8019162:	2204      	movs	r2, #4
 8019164:	4619      	mov	r1, r3
 8019166:	2095      	movs	r0, #149	@ 0x95
 8019168:	f000 fc64 	bl	8019a34 <SUBGRF_WriteCommand>
}
 801916c:	bf00      	nop
 801916e:	3714      	adds	r7, #20
 8019170:	46bd      	mov	sp, r7
 8019172:	bd90      	pop	{r4, r7, pc}

08019174 <SUBGRF_SetDioIrqParams>:
{
    SUBGRF_WriteCommand( RADIO_SET_TXFALLBACKMODE, &fallbackMode, 1 );
}

void SUBGRF_SetDioIrqParams( uint16_t irqMask, uint16_t dio1Mask, uint16_t dio2Mask, uint16_t dio3Mask )
{
 8019174:	b590      	push	{r4, r7, lr}
 8019176:	b085      	sub	sp, #20
 8019178:	af00      	add	r7, sp, #0
 801917a:	4604      	mov	r4, r0
 801917c:	4608      	mov	r0, r1
 801917e:	4611      	mov	r1, r2
 8019180:	461a      	mov	r2, r3
 8019182:	4623      	mov	r3, r4
 8019184:	80fb      	strh	r3, [r7, #6]
 8019186:	4603      	mov	r3, r0
 8019188:	80bb      	strh	r3, [r7, #4]
 801918a:	460b      	mov	r3, r1
 801918c:	807b      	strh	r3, [r7, #2]
 801918e:	4613      	mov	r3, r2
 8019190:	803b      	strh	r3, [r7, #0]
    uint8_t buf[8];

    buf[0] = ( uint8_t )( ( irqMask >> 8 ) & 0x00FF );
 8019192:	88fb      	ldrh	r3, [r7, #6]
 8019194:	0a1b      	lsrs	r3, r3, #8
 8019196:	b29b      	uxth	r3, r3
 8019198:	b2db      	uxtb	r3, r3
 801919a:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( irqMask & 0x00FF );
 801919c:	88fb      	ldrh	r3, [r7, #6]
 801919e:	b2db      	uxtb	r3, r3
 80191a0:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( dio1Mask >> 8 ) & 0x00FF );
 80191a2:	88bb      	ldrh	r3, [r7, #4]
 80191a4:	0a1b      	lsrs	r3, r3, #8
 80191a6:	b29b      	uxth	r3, r3
 80191a8:	b2db      	uxtb	r3, r3
 80191aa:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( dio1Mask & 0x00FF );
 80191ac:	88bb      	ldrh	r3, [r7, #4]
 80191ae:	b2db      	uxtb	r3, r3
 80191b0:	72fb      	strb	r3, [r7, #11]
    buf[4] = ( uint8_t )( ( dio2Mask >> 8 ) & 0x00FF );
 80191b2:	887b      	ldrh	r3, [r7, #2]
 80191b4:	0a1b      	lsrs	r3, r3, #8
 80191b6:	b29b      	uxth	r3, r3
 80191b8:	b2db      	uxtb	r3, r3
 80191ba:	733b      	strb	r3, [r7, #12]
    buf[5] = ( uint8_t )( dio2Mask & 0x00FF );
 80191bc:	887b      	ldrh	r3, [r7, #2]
 80191be:	b2db      	uxtb	r3, r3
 80191c0:	737b      	strb	r3, [r7, #13]
    buf[6] = ( uint8_t )( ( dio3Mask >> 8 ) & 0x00FF );
 80191c2:	883b      	ldrh	r3, [r7, #0]
 80191c4:	0a1b      	lsrs	r3, r3, #8
 80191c6:	b29b      	uxth	r3, r3
 80191c8:	b2db      	uxtb	r3, r3
 80191ca:	73bb      	strb	r3, [r7, #14]
    buf[7] = ( uint8_t )( dio3Mask & 0x00FF );
 80191cc:	883b      	ldrh	r3, [r7, #0]
 80191ce:	b2db      	uxtb	r3, r3
 80191d0:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteCommand( RADIO_CFG_DIOIRQ, buf, 8 );
 80191d2:	f107 0308 	add.w	r3, r7, #8
 80191d6:	2208      	movs	r2, #8
 80191d8:	4619      	mov	r1, r3
 80191da:	2008      	movs	r0, #8
 80191dc:	f000 fc2a 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80191e0:	bf00      	nop
 80191e2:	3714      	adds	r7, #20
 80191e4:	46bd      	mov	sp, r7
 80191e6:	bd90      	pop	{r4, r7, pc}

080191e8 <SUBGRF_SetTcxoMode>:
    SUBGRF_ReadCommand( RADIO_GET_IRQSTATUS, irqStatus, 2 );
    return ( irqStatus[0] << 8 ) | irqStatus[1];
}

void SUBGRF_SetTcxoMode (RadioTcxoCtrlVoltage_t tcxoVoltage, uint32_t timeout )
{
 80191e8:	b580      	push	{r7, lr}
 80191ea:	b084      	sub	sp, #16
 80191ec:	af00      	add	r7, sp, #0
 80191ee:	4603      	mov	r3, r0
 80191f0:	6039      	str	r1, [r7, #0]
 80191f2:	71fb      	strb	r3, [r7, #7]
    uint8_t buf[4];

    buf[0] = tcxoVoltage & 0x07;
 80191f4:	79fb      	ldrb	r3, [r7, #7]
 80191f6:	f003 0307 	and.w	r3, r3, #7
 80191fa:	b2db      	uxtb	r3, r3
 80191fc:	733b      	strb	r3, [r7, #12]
    buf[1] = ( uint8_t )( ( timeout >> 16 ) & 0xFF );
 80191fe:	683b      	ldr	r3, [r7, #0]
 8019200:	0c1b      	lsrs	r3, r3, #16
 8019202:	b2db      	uxtb	r3, r3
 8019204:	737b      	strb	r3, [r7, #13]
    buf[2] = ( uint8_t )( ( timeout >> 8 ) & 0xFF );
 8019206:	683b      	ldr	r3, [r7, #0]
 8019208:	0a1b      	lsrs	r3, r3, #8
 801920a:	b2db      	uxtb	r3, r3
 801920c:	73bb      	strb	r3, [r7, #14]
    buf[3] = ( uint8_t )( timeout & 0xFF );
 801920e:	683b      	ldr	r3, [r7, #0]
 8019210:	b2db      	uxtb	r3, r3
 8019212:	73fb      	strb	r3, [r7, #15]

    SUBGRF_WriteCommand( RADIO_SET_TCXOMODE, buf, 4 );
 8019214:	f107 030c 	add.w	r3, r7, #12
 8019218:	2204      	movs	r2, #4
 801921a:	4619      	mov	r1, r3
 801921c:	2097      	movs	r0, #151	@ 0x97
 801921e:	f000 fc09 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8019222:	bf00      	nop
 8019224:	3710      	adds	r7, #16
 8019226:	46bd      	mov	sp, r7
 8019228:	bd80      	pop	{r7, pc}
	...

0801922c <SUBGRF_SetRfFrequency>:

void SUBGRF_SetRfFrequency( uint32_t frequency )
{
 801922c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8019230:	b084      	sub	sp, #16
 8019232:	af00      	add	r7, sp, #0
 8019234:	6078      	str	r0, [r7, #4]
    uint8_t buf[4];
    uint32_t chan = 0;
 8019236:	2300      	movs	r3, #0
 8019238:	60fb      	str	r3, [r7, #12]

    if( ImageCalibrated == false )
 801923a:	4b1d      	ldr	r3, [pc, #116]	@ (80192b0 <SUBGRF_SetRfFrequency+0x84>)
 801923c:	781b      	ldrb	r3, [r3, #0]
 801923e:	f083 0301 	eor.w	r3, r3, #1
 8019242:	b2db      	uxtb	r3, r3
 8019244:	2b00      	cmp	r3, #0
 8019246:	d005      	beq.n	8019254 <SUBGRF_SetRfFrequency+0x28>
    {
        SUBGRF_CalibrateImage( frequency );
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f7ff ff2b 	bl	80190a4 <SUBGRF_CalibrateImage>
        ImageCalibrated = true;
 801924e:	4b18      	ldr	r3, [pc, #96]	@ (80192b0 <SUBGRF_SetRfFrequency+0x84>)
 8019250:	2201      	movs	r2, #1
 8019252:	701a      	strb	r2, [r3, #0]
    }
    /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
    SX_FREQ_TO_CHANNEL(chan, frequency);
 8019254:	687b      	ldr	r3, [r7, #4]
 8019256:	2200      	movs	r2, #0
 8019258:	461c      	mov	r4, r3
 801925a:	4615      	mov	r5, r2
 801925c:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019260:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019264:	4a13      	ldr	r2, [pc, #76]	@ (80192b4 <SUBGRF_SetRfFrequency+0x88>)
 8019266:	f04f 0300 	mov.w	r3, #0
 801926a:	4640      	mov	r0, r8
 801926c:	4649      	mov	r1, r9
 801926e:	f7e7 fc9b 	bl	8000ba8 <__aeabi_uldivmod>
 8019272:	4602      	mov	r2, r0
 8019274:	460b      	mov	r3, r1
 8019276:	4613      	mov	r3, r2
 8019278:	60fb      	str	r3, [r7, #12]
    /* ST_WORKAROUND_END */
    buf[0] = ( uint8_t )( ( chan >> 24 ) & 0xFF );
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	0e1b      	lsrs	r3, r3, #24
 801927e:	b2db      	uxtb	r3, r3
 8019280:	723b      	strb	r3, [r7, #8]
    buf[1] = ( uint8_t )( ( chan >> 16 ) & 0xFF );
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	0c1b      	lsrs	r3, r3, #16
 8019286:	b2db      	uxtb	r3, r3
 8019288:	727b      	strb	r3, [r7, #9]
    buf[2] = ( uint8_t )( ( chan >> 8 ) & 0xFF );
 801928a:	68fb      	ldr	r3, [r7, #12]
 801928c:	0a1b      	lsrs	r3, r3, #8
 801928e:	b2db      	uxtb	r3, r3
 8019290:	72bb      	strb	r3, [r7, #10]
    buf[3] = ( uint8_t )( chan & 0xFF );
 8019292:	68fb      	ldr	r3, [r7, #12]
 8019294:	b2db      	uxtb	r3, r3
 8019296:	72fb      	strb	r3, [r7, #11]
    SUBGRF_WriteCommand( RADIO_SET_RFFREQUENCY, buf, 4 );
 8019298:	f107 0308 	add.w	r3, r7, #8
 801929c:	2204      	movs	r2, #4
 801929e:	4619      	mov	r1, r3
 80192a0:	2086      	movs	r0, #134	@ 0x86
 80192a2:	f000 fbc7 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80192a6:	bf00      	nop
 80192a8:	3710      	adds	r7, #16
 80192aa:	46bd      	mov	sp, r7
 80192ac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80192b0:	20001b04 	.word	0x20001b04
 80192b4:	01e84800 	.word	0x01e84800

080192b8 <SUBGRF_SetPacketType>:

void SUBGRF_SetPacketType( RadioPacketTypes_t packetType )
{
 80192b8:	b580      	push	{r7, lr}
 80192ba:	b082      	sub	sp, #8
 80192bc:	af00      	add	r7, sp, #0
 80192be:	4603      	mov	r3, r0
 80192c0:	71fb      	strb	r3, [r7, #7]
    // Save packet type internally to avoid questioning the radio
    PacketType = packetType;
 80192c2:	79fa      	ldrb	r2, [r7, #7]
 80192c4:	4b09      	ldr	r3, [pc, #36]	@ (80192ec <SUBGRF_SetPacketType+0x34>)
 80192c6:	701a      	strb	r2, [r3, #0]

    if( packetType == PACKET_TYPE_GFSK )
 80192c8:	79fb      	ldrb	r3, [r7, #7]
 80192ca:	2b00      	cmp	r3, #0
 80192cc:	d104      	bne.n	80192d8 <SUBGRF_SetPacketType+0x20>
    {
        SUBGRF_WriteRegister( REG_BIT_SYNC, 0x00 );
 80192ce:	2100      	movs	r1, #0
 80192d0:	f240 60ac 	movw	r0, #1708	@ 0x6ac
 80192d4:	f000 fafe 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETTYPE, ( uint8_t* )&packetType, 1 );
 80192d8:	1dfb      	adds	r3, r7, #7
 80192da:	2201      	movs	r2, #1
 80192dc:	4619      	mov	r1, r3
 80192de:	208a      	movs	r0, #138	@ 0x8a
 80192e0:	f000 fba8 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80192e4:	bf00      	nop
 80192e6:	3708      	adds	r7, #8
 80192e8:	46bd      	mov	sp, r7
 80192ea:	bd80      	pop	{r7, pc}
 80192ec:	20001afd 	.word	0x20001afd

080192f0 <SUBGRF_GetPacketType>:

RadioPacketTypes_t SUBGRF_GetPacketType( void )
{
 80192f0:	b480      	push	{r7}
 80192f2:	af00      	add	r7, sp, #0
    return PacketType;
 80192f4:	4b02      	ldr	r3, [pc, #8]	@ (8019300 <SUBGRF_GetPacketType+0x10>)
 80192f6:	781b      	ldrb	r3, [r3, #0]
}
 80192f8:	4618      	mov	r0, r3
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bc80      	pop	{r7}
 80192fe:	4770      	bx	lr
 8019300:	20001afd 	.word	0x20001afd

08019304 <SUBGRF_SetTxParams>:

void SUBGRF_SetTxParams( uint8_t paSelect, int8_t power, RadioRampTimes_t rampTime )
{
 8019304:	b580      	push	{r7, lr}
 8019306:	b084      	sub	sp, #16
 8019308:	af00      	add	r7, sp, #0
 801930a:	4603      	mov	r3, r0
 801930c:	71fb      	strb	r3, [r7, #7]
 801930e:	460b      	mov	r3, r1
 8019310:	71bb      	strb	r3, [r7, #6]
 8019312:	4613      	mov	r3, r2
 8019314:	717b      	strb	r3, [r7, #5]
    uint8_t buf[2];
    int32_t max_power;

    if (paSelect == RFO_LP)
 8019316:	79fb      	ldrb	r3, [r7, #7]
 8019318:	2b01      	cmp	r3, #1
 801931a:	d149      	bne.n	80193b0 <SUBGRF_SetTxParams+0xac>
    {
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_LP_MAXPOWER);
 801931c:	2000      	movs	r0, #0
 801931e:	f7f1 f97d 	bl	800a61c <RBI_GetRFOMaxPowerConfig>
 8019322:	60f8      	str	r0, [r7, #12]
        if (power >  max_power)
 8019324:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8019328:	68fa      	ldr	r2, [r7, #12]
 801932a:	429a      	cmp	r2, r3
 801932c:	da01      	bge.n	8019332 <SUBGRF_SetTxParams+0x2e>
        {
          power = max_power;
 801932e:	68fb      	ldr	r3, [r7, #12]
 8019330:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 14)
 8019332:	68fb      	ldr	r3, [r7, #12]
 8019334:	2b0e      	cmp	r3, #14
 8019336:	d10e      	bne.n	8019356 <SUBGRF_SetTxParams+0x52>
        {
            SUBGRF_SetPaConfig(0x04, 0x00, 0x01, 0x01);
 8019338:	2301      	movs	r3, #1
 801933a:	2201      	movs	r2, #1
 801933c:	2100      	movs	r1, #0
 801933e:	2004      	movs	r0, #4
 8019340:	f7ff fef6 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019344:	79ba      	ldrb	r2, [r7, #6]
 8019346:	68fb      	ldr	r3, [r7, #12]
 8019348:	b2db      	uxtb	r3, r3
 801934a:	1ad3      	subs	r3, r2, r3
 801934c:	b2db      	uxtb	r3, r3
 801934e:	330e      	adds	r3, #14
 8019350:	b2db      	uxtb	r3, r3
 8019352:	71bb      	strb	r3, [r7, #6]
 8019354:	e01f      	b.n	8019396 <SUBGRF_SetTxParams+0x92>
        }
        else if (max_power == 10)
 8019356:	68fb      	ldr	r3, [r7, #12]
 8019358:	2b0a      	cmp	r3, #10
 801935a:	d10e      	bne.n	801937a <SUBGRF_SetTxParams+0x76>
        {
            SUBGRF_SetPaConfig(0x01, 0x00, 0x01, 0x01);
 801935c:	2301      	movs	r3, #1
 801935e:	2201      	movs	r2, #1
 8019360:	2100      	movs	r1, #0
 8019362:	2001      	movs	r0, #1
 8019364:	f7ff fee4 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0D - (max_power - power);
 8019368:	79ba      	ldrb	r2, [r7, #6]
 801936a:	68fb      	ldr	r3, [r7, #12]
 801936c:	b2db      	uxtb	r3, r3
 801936e:	1ad3      	subs	r3, r2, r3
 8019370:	b2db      	uxtb	r3, r3
 8019372:	330d      	adds	r3, #13
 8019374:	b2db      	uxtb	r3, r3
 8019376:	71bb      	strb	r3, [r7, #6]
 8019378:	e00d      	b.n	8019396 <SUBGRF_SetTxParams+0x92>
        }
        else /*default 15dBm*/
        {
            SUBGRF_SetPaConfig(0x06, 0x00, 0x01, 0x01);
 801937a:	2301      	movs	r3, #1
 801937c:	2201      	movs	r2, #1
 801937e:	2100      	movs	r1, #0
 8019380:	2006      	movs	r0, #6
 8019382:	f7ff fed5 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 8019386:	79ba      	ldrb	r2, [r7, #6]
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	b2db      	uxtb	r3, r3
 801938c:	1ad3      	subs	r3, r2, r3
 801938e:	b2db      	uxtb	r3, r3
 8019390:	330e      	adds	r3, #14
 8019392:	b2db      	uxtb	r3, r3
 8019394:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -17)
 8019396:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801939a:	f113 0f11 	cmn.w	r3, #17
 801939e:	da01      	bge.n	80193a4 <SUBGRF_SetTxParams+0xa0>
        {
            power = -17;
 80193a0:	23ef      	movs	r3, #239	@ 0xef
 80193a2:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x18);   /* current max is 80 mA for the whole device*/
 80193a4:	2118      	movs	r1, #24
 80193a6:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80193aa:	f000 fa93 	bl	80198d4 <SUBGRF_WriteRegister>
 80193ae:	e067      	b.n	8019480 <SUBGRF_SetTxParams+0x17c>
    }
    else /* rfo_hp*/
    {
        /* WORKAROUND - Better Resistance of the RFO High Power Tx to Antenna Mismatch, see STM32WL Erratasheet*/
        SUBGRF_WriteRegister(REG_TX_CLAMP, SUBGRF_ReadRegister(REG_TX_CLAMP) | (0x0F << 1));
 80193b0:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80193b4:	f000 faa2 	bl	80198fc <SUBGRF_ReadRegister>
 80193b8:	4603      	mov	r3, r0
 80193ba:	f043 031e 	orr.w	r3, r3, #30
 80193be:	b2db      	uxtb	r3, r3
 80193c0:	4619      	mov	r1, r3
 80193c2:	f640 00d8 	movw	r0, #2264	@ 0x8d8
 80193c6:	f000 fa85 	bl	80198d4 <SUBGRF_WriteRegister>
        /* WORKAROUND END*/
        max_power = RBI_GetRFOMaxPowerConfig(RBI_RFO_HP_MAXPOWER);
 80193ca:	2001      	movs	r0, #1
 80193cc:	f7f1 f926 	bl	800a61c <RBI_GetRFOMaxPowerConfig>
 80193d0:	60f8      	str	r0, [r7, #12]
        if (power > max_power)
 80193d2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80193d6:	68fa      	ldr	r2, [r7, #12]
 80193d8:	429a      	cmp	r2, r3
 80193da:	da01      	bge.n	80193e0 <SUBGRF_SetTxParams+0xdc>
        {
            power = max_power;
 80193dc:	68fb      	ldr	r3, [r7, #12]
 80193de:	71bb      	strb	r3, [r7, #6]
        }
        if (max_power == 20)
 80193e0:	68fb      	ldr	r3, [r7, #12]
 80193e2:	2b14      	cmp	r3, #20
 80193e4:	d10e      	bne.n	8019404 <SUBGRF_SetTxParams+0x100>
        {
            SUBGRF_SetPaConfig(0x03, 0x05, 0x00, 0x01);
 80193e6:	2301      	movs	r3, #1
 80193e8:	2200      	movs	r2, #0
 80193ea:	2105      	movs	r1, #5
 80193ec:	2003      	movs	r0, #3
 80193ee:	f7ff fe9f 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 80193f2:	79ba      	ldrb	r2, [r7, #6]
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	b2db      	uxtb	r3, r3
 80193f8:	1ad3      	subs	r3, r2, r3
 80193fa:	b2db      	uxtb	r3, r3
 80193fc:	3316      	adds	r3, #22
 80193fe:	b2db      	uxtb	r3, r3
 8019400:	71bb      	strb	r3, [r7, #6]
 8019402:	e031      	b.n	8019468 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 17)
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	2b11      	cmp	r3, #17
 8019408:	d10e      	bne.n	8019428 <SUBGRF_SetTxParams+0x124>
        {
            SUBGRF_SetPaConfig(0x02, 0x03, 0x00, 0x01);
 801940a:	2301      	movs	r3, #1
 801940c:	2200      	movs	r2, #0
 801940e:	2103      	movs	r1, #3
 8019410:	2002      	movs	r0, #2
 8019412:	f7ff fe8d 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019416:	79ba      	ldrb	r2, [r7, #6]
 8019418:	68fb      	ldr	r3, [r7, #12]
 801941a:	b2db      	uxtb	r3, r3
 801941c:	1ad3      	subs	r3, r2, r3
 801941e:	b2db      	uxtb	r3, r3
 8019420:	3316      	adds	r3, #22
 8019422:	b2db      	uxtb	r3, r3
 8019424:	71bb      	strb	r3, [r7, #6]
 8019426:	e01f      	b.n	8019468 <SUBGRF_SetTxParams+0x164>
        }
        else if (max_power == 14)
 8019428:	68fb      	ldr	r3, [r7, #12]
 801942a:	2b0e      	cmp	r3, #14
 801942c:	d10e      	bne.n	801944c <SUBGRF_SetTxParams+0x148>
        {
            SUBGRF_SetPaConfig(0x02, 0x02, 0x00, 0x01);
 801942e:	2301      	movs	r3, #1
 8019430:	2200      	movs	r2, #0
 8019432:	2102      	movs	r1, #2
 8019434:	2002      	movs	r0, #2
 8019436:	f7ff fe7b 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x0E - (max_power - power);
 801943a:	79ba      	ldrb	r2, [r7, #6]
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	b2db      	uxtb	r3, r3
 8019440:	1ad3      	subs	r3, r2, r3
 8019442:	b2db      	uxtb	r3, r3
 8019444:	330e      	adds	r3, #14
 8019446:	b2db      	uxtb	r3, r3
 8019448:	71bb      	strb	r3, [r7, #6]
 801944a:	e00d      	b.n	8019468 <SUBGRF_SetTxParams+0x164>
        }
        else /*22dBm*/
        {
            SUBGRF_SetPaConfig(0x04, 0x07, 0x00, 0x01);
 801944c:	2301      	movs	r3, #1
 801944e:	2200      	movs	r2, #0
 8019450:	2107      	movs	r1, #7
 8019452:	2004      	movs	r0, #4
 8019454:	f7ff fe6c 	bl	8019130 <SUBGRF_SetPaConfig>
            power = 0x16 - (max_power - power);
 8019458:	79ba      	ldrb	r2, [r7, #6]
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	b2db      	uxtb	r3, r3
 801945e:	1ad3      	subs	r3, r2, r3
 8019460:	b2db      	uxtb	r3, r3
 8019462:	3316      	adds	r3, #22
 8019464:	b2db      	uxtb	r3, r3
 8019466:	71bb      	strb	r3, [r7, #6]
        }
        if (power < -9)
 8019468:	f997 3006 	ldrsb.w	r3, [r7, #6]
 801946c:	f113 0f09 	cmn.w	r3, #9
 8019470:	da01      	bge.n	8019476 <SUBGRF_SetTxParams+0x172>
        {
            power = -9;
 8019472:	23f7      	movs	r3, #247	@ 0xf7
 8019474:	71bb      	strb	r3, [r7, #6]
        }
        SUBGRF_WriteRegister(REG_OCP, 0x38);   /*current max 160mA for the whole device*/
 8019476:	2138      	movs	r1, #56	@ 0x38
 8019478:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801947c:	f000 fa2a 	bl	80198d4 <SUBGRF_WriteRegister>
    }
    buf[0] = power;
 8019480:	79bb      	ldrb	r3, [r7, #6]
 8019482:	723b      	strb	r3, [r7, #8]
    buf[1] = (uint8_t)rampTime;
 8019484:	797b      	ldrb	r3, [r7, #5]
 8019486:	727b      	strb	r3, [r7, #9]
    SUBGRF_WriteCommand(RADIO_SET_TXPARAMS, buf, 2);
 8019488:	f107 0308 	add.w	r3, r7, #8
 801948c:	2202      	movs	r2, #2
 801948e:	4619      	mov	r1, r3
 8019490:	208e      	movs	r0, #142	@ 0x8e
 8019492:	f000 facf 	bl	8019a34 <SUBGRF_WriteCommand>
}
 8019496:	bf00      	nop
 8019498:	3710      	adds	r7, #16
 801949a:	46bd      	mov	sp, r7
 801949c:	bd80      	pop	{r7, pc}
	...

080194a0 <SUBGRF_SetModulationParams>:

void SUBGRF_SetModulationParams( ModulationParams_t *modulationParams )
{
 80194a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80194a4:	b086      	sub	sp, #24
 80194a6:	af00      	add	r7, sp, #0
 80194a8:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint32_t tempVal = 0;
 80194aa:	2300      	movs	r3, #0
 80194ac:	617b      	str	r3, [r7, #20]
    uint8_t buf[8] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 80194ae:	4a61      	ldr	r2, [pc, #388]	@ (8019634 <SUBGRF_SetModulationParams+0x194>)
 80194b0:	f107 0308 	add.w	r3, r7, #8
 80194b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80194b8:	e883 0003 	stmia.w	r3, {r0, r1}

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != modulationParams->PacketType )
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	781a      	ldrb	r2, [r3, #0]
 80194c0:	4b5d      	ldr	r3, [pc, #372]	@ (8019638 <SUBGRF_SetModulationParams+0x198>)
 80194c2:	781b      	ldrb	r3, [r3, #0]
 80194c4:	429a      	cmp	r2, r3
 80194c6:	d004      	beq.n	80194d2 <SUBGRF_SetModulationParams+0x32>
    {
        SUBGRF_SetPacketType( modulationParams->PacketType );
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	781b      	ldrb	r3, [r3, #0]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7ff fef3 	bl	80192b8 <SUBGRF_SetPacketType>
    }

    switch( modulationParams->PacketType )
 80194d2:	687b      	ldr	r3, [r7, #4]
 80194d4:	781b      	ldrb	r3, [r3, #0]
 80194d6:	2b03      	cmp	r3, #3
 80194d8:	f200 80a5 	bhi.w	8019626 <SUBGRF_SetModulationParams+0x186>
 80194dc:	a201      	add	r2, pc, #4	@ (adr r2, 80194e4 <SUBGRF_SetModulationParams+0x44>)
 80194de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80194e2:	bf00      	nop
 80194e4:	080194f5 	.word	0x080194f5
 80194e8:	080195b5 	.word	0x080195b5
 80194ec:	08019577 	.word	0x08019577
 80194f0:	080195e3 	.word	0x080195e3
    {
    case PACKET_TYPE_GFSK:
        n = 8;
 80194f4:	2308      	movs	r3, #8
 80194f6:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 * XTAL_FREQ ) / modulationParams->Params.Gfsk.BitRate );
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	685b      	ldr	r3, [r3, #4]
 80194fc:	4a4f      	ldr	r2, [pc, #316]	@ (801963c <SUBGRF_SetModulationParams+0x19c>)
 80194fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8019502:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019504:	697b      	ldr	r3, [r7, #20]
 8019506:	0c1b      	lsrs	r3, r3, #16
 8019508:	b2db      	uxtb	r3, r3
 801950a:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801950c:	697b      	ldr	r3, [r7, #20]
 801950e:	0a1b      	lsrs	r3, r3, #8
 8019510:	b2db      	uxtb	r3, r3
 8019512:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019514:	697b      	ldr	r3, [r7, #20]
 8019516:	b2db      	uxtb	r3, r3
 8019518:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 801951a:	687b      	ldr	r3, [r7, #4]
 801951c:	7b1b      	ldrb	r3, [r3, #12]
 801951e:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	7b5b      	ldrb	r3, [r3, #13]
 8019524:	733b      	strb	r3, [r7, #12]
        /* ST_WORKAROUND_BEGIN: Simplified frequency calculation */
        SX_FREQ_TO_CHANNEL(tempVal, modulationParams->Params.Gfsk.Fdev);
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	689b      	ldr	r3, [r3, #8]
 801952a:	2200      	movs	r2, #0
 801952c:	461c      	mov	r4, r3
 801952e:	4615      	mov	r5, r2
 8019530:	ea4f 19d4 	mov.w	r9, r4, lsr #7
 8019534:	ea4f 6844 	mov.w	r8, r4, lsl #25
 8019538:	4a41      	ldr	r2, [pc, #260]	@ (8019640 <SUBGRF_SetModulationParams+0x1a0>)
 801953a:	f04f 0300 	mov.w	r3, #0
 801953e:	4640      	mov	r0, r8
 8019540:	4649      	mov	r1, r9
 8019542:	f7e7 fb31 	bl	8000ba8 <__aeabi_uldivmod>
 8019546:	4602      	mov	r2, r0
 8019548:	460b      	mov	r3, r1
 801954a:	4613      	mov	r3, r2
 801954c:	617b      	str	r3, [r7, #20]
        /* ST_WORKAROUND_END */
        buf[5] = ( tempVal >> 16 ) & 0xFF;
 801954e:	697b      	ldr	r3, [r7, #20]
 8019550:	0c1b      	lsrs	r3, r3, #16
 8019552:	b2db      	uxtb	r3, r3
 8019554:	737b      	strb	r3, [r7, #13]
        buf[6] = ( tempVal >> 8 ) & 0xFF;
 8019556:	697b      	ldr	r3, [r7, #20]
 8019558:	0a1b      	lsrs	r3, r3, #8
 801955a:	b2db      	uxtb	r3, r3
 801955c:	73bb      	strb	r3, [r7, #14]
        buf[7] = ( tempVal& 0xFF );
 801955e:	697b      	ldr	r3, [r7, #20]
 8019560:	b2db      	uxtb	r3, r3
 8019562:	73fb      	strb	r3, [r7, #15]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019564:	7cfb      	ldrb	r3, [r7, #19]
 8019566:	b29a      	uxth	r2, r3
 8019568:	f107 0308 	add.w	r3, r7, #8
 801956c:	4619      	mov	r1, r3
 801956e:	208b      	movs	r0, #139	@ 0x8b
 8019570:	f000 fa60 	bl	8019a34 <SUBGRF_WriteCommand>
        break;
 8019574:	e058      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_BPSK:
        n = 4;
 8019576:	2304      	movs	r3, #4
 8019578:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t ) (( 32 * XTAL_FREQ) / modulationParams->Params.Bpsk.BitRate );
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	691b      	ldr	r3, [r3, #16]
 801957e:	4a2f      	ldr	r2, [pc, #188]	@ (801963c <SUBGRF_SetModulationParams+0x19c>)
 8019580:	fbb2 f3f3 	udiv	r3, r2, r3
 8019584:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 8019586:	697b      	ldr	r3, [r7, #20]
 8019588:	0c1b      	lsrs	r3, r3, #16
 801958a:	b2db      	uxtb	r3, r3
 801958c:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 801958e:	697b      	ldr	r3, [r7, #20]
 8019590:	0a1b      	lsrs	r3, r3, #8
 8019592:	b2db      	uxtb	r3, r3
 8019594:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019596:	697b      	ldr	r3, [r7, #20]
 8019598:	b2db      	uxtb	r3, r3
 801959a:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Bpsk.ModulationShaping;
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	7d1b      	ldrb	r3, [r3, #20]
 80195a0:	72fb      	strb	r3, [r7, #11]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195a2:	7cfb      	ldrb	r3, [r7, #19]
 80195a4:	b29a      	uxth	r2, r3
 80195a6:	f107 0308 	add.w	r3, r7, #8
 80195aa:	4619      	mov	r1, r3
 80195ac:	208b      	movs	r0, #139	@ 0x8b
 80195ae:	f000 fa41 	bl	8019a34 <SUBGRF_WriteCommand>
        break;
 80195b2:	e039      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_LORA:
        n = 4;
 80195b4:	2304      	movs	r3, #4
 80195b6:	74fb      	strb	r3, [r7, #19]
        buf[0] = modulationParams->Params.LoRa.SpreadingFactor;
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	7e1b      	ldrb	r3, [r3, #24]
 80195bc:	723b      	strb	r3, [r7, #8]
        buf[1] = modulationParams->Params.LoRa.Bandwidth;
 80195be:	687b      	ldr	r3, [r7, #4]
 80195c0:	7e5b      	ldrb	r3, [r3, #25]
 80195c2:	727b      	strb	r3, [r7, #9]
        buf[2] = modulationParams->Params.LoRa.CodingRate;
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	7e9b      	ldrb	r3, [r3, #26]
 80195c8:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.LoRa.LowDatarateOptimize;
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	7edb      	ldrb	r3, [r3, #27]
 80195ce:	72fb      	strb	r3, [r7, #11]

        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 80195d0:	7cfb      	ldrb	r3, [r7, #19]
 80195d2:	b29a      	uxth	r2, r3
 80195d4:	f107 0308 	add.w	r3, r7, #8
 80195d8:	4619      	mov	r1, r3
 80195da:	208b      	movs	r0, #139	@ 0x8b
 80195dc:	f000 fa2a 	bl	8019a34 <SUBGRF_WriteCommand>

        break;
 80195e0:	e022      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    case PACKET_TYPE_GMSK:
        n = 5;
 80195e2:	2305      	movs	r3, #5
 80195e4:	74fb      	strb	r3, [r7, #19]
        tempVal = ( uint32_t )(( 32 *XTAL_FREQ) / modulationParams->Params.Gfsk.BitRate );
 80195e6:	687b      	ldr	r3, [r7, #4]
 80195e8:	685b      	ldr	r3, [r3, #4]
 80195ea:	4a14      	ldr	r2, [pc, #80]	@ (801963c <SUBGRF_SetModulationParams+0x19c>)
 80195ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80195f0:	617b      	str	r3, [r7, #20]
        buf[0] = ( tempVal >> 16 ) & 0xFF;
 80195f2:	697b      	ldr	r3, [r7, #20]
 80195f4:	0c1b      	lsrs	r3, r3, #16
 80195f6:	b2db      	uxtb	r3, r3
 80195f8:	723b      	strb	r3, [r7, #8]
        buf[1] = ( tempVal >> 8 ) & 0xFF;
 80195fa:	697b      	ldr	r3, [r7, #20]
 80195fc:	0a1b      	lsrs	r3, r3, #8
 80195fe:	b2db      	uxtb	r3, r3
 8019600:	727b      	strb	r3, [r7, #9]
        buf[2] = tempVal & 0xFF;
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	b2db      	uxtb	r3, r3
 8019606:	72bb      	strb	r3, [r7, #10]
        buf[3] = modulationParams->Params.Gfsk.ModulationShaping;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	7b1b      	ldrb	r3, [r3, #12]
 801960c:	72fb      	strb	r3, [r7, #11]
        buf[4] = modulationParams->Params.Gfsk.Bandwidth;
 801960e:	687b      	ldr	r3, [r7, #4]
 8019610:	7b5b      	ldrb	r3, [r3, #13]
 8019612:	733b      	strb	r3, [r7, #12]
        SUBGRF_WriteCommand( RADIO_SET_MODULATIONPARAMS, buf, n );
 8019614:	7cfb      	ldrb	r3, [r7, #19]
 8019616:	b29a      	uxth	r2, r3
 8019618:	f107 0308 	add.w	r3, r7, #8
 801961c:	4619      	mov	r1, r3
 801961e:	208b      	movs	r0, #139	@ 0x8b
 8019620:	f000 fa08 	bl	8019a34 <SUBGRF_WriteCommand>
        break;
 8019624:	e000      	b.n	8019628 <SUBGRF_SetModulationParams+0x188>
    default:
    case PACKET_TYPE_NONE:
      break;
 8019626:	bf00      	nop
    }
}
 8019628:	bf00      	nop
 801962a:	3718      	adds	r7, #24
 801962c:	46bd      	mov	sp, r7
 801962e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8019632:	bf00      	nop
 8019634:	0801c01c 	.word	0x0801c01c
 8019638:	20001afd 	.word	0x20001afd
 801963c:	3d090000 	.word	0x3d090000
 8019640:	01e84800 	.word	0x01e84800

08019644 <SUBGRF_SetPacketParams>:

void SUBGRF_SetPacketParams( PacketParams_t *packetParams )
{
 8019644:	b580      	push	{r7, lr}
 8019646:	b086      	sub	sp, #24
 8019648:	af00      	add	r7, sp, #0
 801964a:	6078      	str	r0, [r7, #4]
    uint8_t n;
    uint8_t crcVal = 0;
 801964c:	2300      	movs	r3, #0
 801964e:	75bb      	strb	r3, [r7, #22]
    uint8_t buf[9] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
 8019650:	4a48      	ldr	r2, [pc, #288]	@ (8019774 <SUBGRF_SetPacketParams+0x130>)
 8019652:	f107 030c 	add.w	r3, r7, #12
 8019656:	ca07      	ldmia	r2, {r0, r1, r2}
 8019658:	c303      	stmia	r3!, {r0, r1}
 801965a:	701a      	strb	r2, [r3, #0]

    // Check if required configuration corresponds to the stored packet type
    // If not, silently update radio packet type
    if( PacketType != packetParams->PacketType )
 801965c:	687b      	ldr	r3, [r7, #4]
 801965e:	781a      	ldrb	r2, [r3, #0]
 8019660:	4b45      	ldr	r3, [pc, #276]	@ (8019778 <SUBGRF_SetPacketParams+0x134>)
 8019662:	781b      	ldrb	r3, [r3, #0]
 8019664:	429a      	cmp	r2, r3
 8019666:	d004      	beq.n	8019672 <SUBGRF_SetPacketParams+0x2e>
    {
        SUBGRF_SetPacketType( packetParams->PacketType );
 8019668:	687b      	ldr	r3, [r7, #4]
 801966a:	781b      	ldrb	r3, [r3, #0]
 801966c:	4618      	mov	r0, r3
 801966e:	f7ff fe23 	bl	80192b8 <SUBGRF_SetPacketType>
    }

    switch( packetParams->PacketType )
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	781b      	ldrb	r3, [r3, #0]
 8019676:	2b03      	cmp	r3, #3
 8019678:	d878      	bhi.n	801976c <SUBGRF_SetPacketParams+0x128>
 801967a:	a201      	add	r2, pc, #4	@ (adr r2, 8019680 <SUBGRF_SetPacketParams+0x3c>)
 801967c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019680:	08019691 	.word	0x08019691
 8019684:	08019721 	.word	0x08019721
 8019688:	08019715 	.word	0x08019715
 801968c:	08019691 	.word	0x08019691
    {
    case PACKET_TYPE_GMSK:
    case PACKET_TYPE_GFSK:
        if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_IBM )
 8019690:	687b      	ldr	r3, [r7, #4]
 8019692:	7a5b      	ldrb	r3, [r3, #9]
 8019694:	2bf1      	cmp	r3, #241	@ 0xf1
 8019696:	d10a      	bne.n	80196ae <SUBGRF_SetPacketParams+0x6a>
        {
            SUBGRF_SetCrcSeed( CRC_IBM_SEED );
 8019698:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 801969c:	f7ff faae 	bl	8018bfc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_IBM );
 80196a0:	f248 0005 	movw	r0, #32773	@ 0x8005
 80196a4:	f7ff faca 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES;
 80196a8:	2302      	movs	r3, #2
 80196aa:	75bb      	strb	r3, [r7, #22]
 80196ac:	e011      	b.n	80196d2 <SUBGRF_SetPacketParams+0x8e>
        }
        else if( packetParams->Params.Gfsk.CrcLength == RADIO_CRC_2_BYTES_CCIT )
 80196ae:	687b      	ldr	r3, [r7, #4]
 80196b0:	7a5b      	ldrb	r3, [r3, #9]
 80196b2:	2bf2      	cmp	r3, #242	@ 0xf2
 80196b4:	d10a      	bne.n	80196cc <SUBGRF_SetPacketParams+0x88>
        {
            SUBGRF_SetCrcSeed( CRC_CCITT_SEED );
 80196b6:	f641 500f 	movw	r0, #7439	@ 0x1d0f
 80196ba:	f7ff fa9f 	bl	8018bfc <SUBGRF_SetCrcSeed>
            SUBGRF_SetCrcPolynomial( CRC_POLYNOMIAL_CCITT );
 80196be:	f241 0021 	movw	r0, #4129	@ 0x1021
 80196c2:	f7ff fabb 	bl	8018c3c <SUBGRF_SetCrcPolynomial>
            crcVal = RADIO_CRC_2_BYTES_INV;
 80196c6:	2306      	movs	r3, #6
 80196c8:	75bb      	strb	r3, [r7, #22]
 80196ca:	e002      	b.n	80196d2 <SUBGRF_SetPacketParams+0x8e>
        }
        else
        {
            crcVal = packetParams->Params.Gfsk.CrcLength;
 80196cc:	687b      	ldr	r3, [r7, #4]
 80196ce:	7a5b      	ldrb	r3, [r3, #9]
 80196d0:	75bb      	strb	r3, [r7, #22]
        }
        n = 9;
 80196d2:	2309      	movs	r3, #9
 80196d4:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.Gfsk.PreambleLength >> 8 ) & 0xFF;
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	885b      	ldrh	r3, [r3, #2]
 80196da:	0a1b      	lsrs	r3, r3, #8
 80196dc:	b29b      	uxth	r3, r3
 80196de:	b2db      	uxtb	r3, r3
 80196e0:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.Gfsk.PreambleLength;
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	885b      	ldrh	r3, [r3, #2]
 80196e6:	b2db      	uxtb	r3, r3
 80196e8:	737b      	strb	r3, [r7, #13]
        buf[2] = packetParams->Params.Gfsk.PreambleMinDetect;
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	791b      	ldrb	r3, [r3, #4]
 80196ee:	73bb      	strb	r3, [r7, #14]
        buf[3] = ( packetParams->Params.Gfsk.SyncWordLength /*<< 3*/ ); // convert from byte to bit
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	795b      	ldrb	r3, [r3, #5]
 80196f4:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.Gfsk.AddrComp;
 80196f6:	687b      	ldr	r3, [r7, #4]
 80196f8:	799b      	ldrb	r3, [r3, #6]
 80196fa:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.Gfsk.HeaderType;
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	79db      	ldrb	r3, [r3, #7]
 8019700:	747b      	strb	r3, [r7, #17]
        buf[6] = packetParams->Params.Gfsk.PayloadLength;
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	7a1b      	ldrb	r3, [r3, #8]
 8019706:	74bb      	strb	r3, [r7, #18]
        buf[7] = crcVal;
 8019708:	7dbb      	ldrb	r3, [r7, #22]
 801970a:	74fb      	strb	r3, [r7, #19]
        buf[8] = packetParams->Params.Gfsk.DcFree;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	7a9b      	ldrb	r3, [r3, #10]
 8019710:	753b      	strb	r3, [r7, #20]
        break;
 8019712:	e022      	b.n	801975a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_BPSK:
        n = 1;
 8019714:	2301      	movs	r3, #1
 8019716:	75fb      	strb	r3, [r7, #23]
        buf[0] = packetParams->Params.Bpsk.PayloadLength;
 8019718:	687b      	ldr	r3, [r7, #4]
 801971a:	7b1b      	ldrb	r3, [r3, #12]
 801971c:	733b      	strb	r3, [r7, #12]
        break;
 801971e:	e01c      	b.n	801975a <SUBGRF_SetPacketParams+0x116>
    case PACKET_TYPE_LORA:
        n = 6;
 8019720:	2306      	movs	r3, #6
 8019722:	75fb      	strb	r3, [r7, #23]
        buf[0] = ( packetParams->Params.LoRa.PreambleLength >> 8 ) & 0xFF;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	89db      	ldrh	r3, [r3, #14]
 8019728:	0a1b      	lsrs	r3, r3, #8
 801972a:	b29b      	uxth	r3, r3
 801972c:	b2db      	uxtb	r3, r3
 801972e:	733b      	strb	r3, [r7, #12]
        buf[1] = packetParams->Params.LoRa.PreambleLength;
 8019730:	687b      	ldr	r3, [r7, #4]
 8019732:	89db      	ldrh	r3, [r3, #14]
 8019734:	b2db      	uxtb	r3, r3
 8019736:	737b      	strb	r3, [r7, #13]
        buf[2] = LoRaHeaderType = packetParams->Params.LoRa.HeaderType;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	7c1a      	ldrb	r2, [r3, #16]
 801973c:	4b0f      	ldr	r3, [pc, #60]	@ (801977c <SUBGRF_SetPacketParams+0x138>)
 801973e:	4611      	mov	r1, r2
 8019740:	7019      	strb	r1, [r3, #0]
 8019742:	4613      	mov	r3, r2
 8019744:	73bb      	strb	r3, [r7, #14]
        buf[3] = packetParams->Params.LoRa.PayloadLength;
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	7c5b      	ldrb	r3, [r3, #17]
 801974a:	73fb      	strb	r3, [r7, #15]
        buf[4] = packetParams->Params.LoRa.CrcMode;
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	7c9b      	ldrb	r3, [r3, #18]
 8019750:	743b      	strb	r3, [r7, #16]
        buf[5] = packetParams->Params.LoRa.InvertIQ;
 8019752:	687b      	ldr	r3, [r7, #4]
 8019754:	7cdb      	ldrb	r3, [r3, #19]
 8019756:	747b      	strb	r3, [r7, #17]
        break;
 8019758:	bf00      	nop
    default:
    case PACKET_TYPE_NONE:
        return;
    }
    SUBGRF_WriteCommand( RADIO_SET_PACKETPARAMS, buf, n );
 801975a:	7dfb      	ldrb	r3, [r7, #23]
 801975c:	b29a      	uxth	r2, r3
 801975e:	f107 030c 	add.w	r3, r7, #12
 8019762:	4619      	mov	r1, r3
 8019764:	208c      	movs	r0, #140	@ 0x8c
 8019766:	f000 f965 	bl	8019a34 <SUBGRF_WriteCommand>
 801976a:	e000      	b.n	801976e <SUBGRF_SetPacketParams+0x12a>
        return;
 801976c:	bf00      	nop
}
 801976e:	3718      	adds	r7, #24
 8019770:	46bd      	mov	sp, r7
 8019772:	bd80      	pop	{r7, pc}
 8019774:	0801c024 	.word	0x0801c024
 8019778:	20001afd 	.word	0x20001afd
 801977c:	20001afe 	.word	0x20001afe

08019780 <SUBGRF_SetBufferBaseAddress>:
    SUBGRF_WriteCommand( RADIO_SET_CADPARAMS, buf, 7 );
    OperatingMode = MODE_CAD;
}

void SUBGRF_SetBufferBaseAddress( uint8_t txBaseAddress, uint8_t rxBaseAddress )
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b084      	sub	sp, #16
 8019784:	af00      	add	r7, sp, #0
 8019786:	4603      	mov	r3, r0
 8019788:	460a      	mov	r2, r1
 801978a:	71fb      	strb	r3, [r7, #7]
 801978c:	4613      	mov	r3, r2
 801978e:	71bb      	strb	r3, [r7, #6]
    uint8_t buf[2];

    buf[0] = txBaseAddress;
 8019790:	79fb      	ldrb	r3, [r7, #7]
 8019792:	733b      	strb	r3, [r7, #12]
    buf[1] = rxBaseAddress;
 8019794:	79bb      	ldrb	r3, [r7, #6]
 8019796:	737b      	strb	r3, [r7, #13]
    SUBGRF_WriteCommand( RADIO_SET_BUFFERBASEADDRESS, buf, 2 );
 8019798:	f107 030c 	add.w	r3, r7, #12
 801979c:	2202      	movs	r2, #2
 801979e:	4619      	mov	r1, r3
 80197a0:	208f      	movs	r0, #143	@ 0x8f
 80197a2:	f000 f947 	bl	8019a34 <SUBGRF_WriteCommand>
}
 80197a6:	bf00      	nop
 80197a8:	3710      	adds	r7, #16
 80197aa:	46bd      	mov	sp, r7
 80197ac:	bd80      	pop	{r7, pc}

080197ae <SUBGRF_GetRssiInst>:
    status.Fields.ChipMode = ( stat & ( 0x07 << 4 ) ) >> 4;
    return status;
}

int8_t SUBGRF_GetRssiInst( void )
{
 80197ae:	b580      	push	{r7, lr}
 80197b0:	b082      	sub	sp, #8
 80197b2:	af00      	add	r7, sp, #0
    uint8_t buf[1];
    int8_t rssi = 0;
 80197b4:	2300      	movs	r3, #0
 80197b6:	71fb      	strb	r3, [r7, #7]

    SUBGRF_ReadCommand( RADIO_GET_RSSIINST, buf, 1 );
 80197b8:	1d3b      	adds	r3, r7, #4
 80197ba:	2201      	movs	r2, #1
 80197bc:	4619      	mov	r1, r3
 80197be:	2015      	movs	r0, #21
 80197c0:	f000 f95a 	bl	8019a78 <SUBGRF_ReadCommand>
    rssi = -buf[0] >> 1;
 80197c4:	793b      	ldrb	r3, [r7, #4]
 80197c6:	425b      	negs	r3, r3
 80197c8:	105b      	asrs	r3, r3, #1
 80197ca:	71fb      	strb	r3, [r7, #7]
    return rssi;
 80197cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 80197d0:	4618      	mov	r0, r3
 80197d2:	3708      	adds	r7, #8
 80197d4:	46bd      	mov	sp, r7
 80197d6:	bd80      	pop	{r7, pc}

080197d8 <SUBGRF_GetRxBufferStatus>:

void SUBGRF_GetRxBufferStatus( uint8_t *payloadLength, uint8_t *rxStartBufferPointer )
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	b084      	sub	sp, #16
 80197dc:	af00      	add	r7, sp, #0
 80197de:	6078      	str	r0, [r7, #4]
 80197e0:	6039      	str	r1, [r7, #0]
    uint8_t status[2];

    SUBGRF_ReadCommand( RADIO_GET_RXBUFFERSTATUS, status, 2 );
 80197e2:	f107 030c 	add.w	r3, r7, #12
 80197e6:	2202      	movs	r2, #2
 80197e8:	4619      	mov	r1, r3
 80197ea:	2013      	movs	r0, #19
 80197ec:	f000 f944 	bl	8019a78 <SUBGRF_ReadCommand>

    // In case of LORA fixed header, the payloadLength is obtained by reading
    // the register REG_LR_PAYLOADLENGTH
    if( ( SUBGRF_GetPacketType( ) == PACKET_TYPE_LORA ) && ( LoRaHeaderType == LORA_PACKET_FIXED_LENGTH ) )
 80197f0:	f7ff fd7e 	bl	80192f0 <SUBGRF_GetPacketType>
 80197f4:	4603      	mov	r3, r0
 80197f6:	2b01      	cmp	r3, #1
 80197f8:	d10d      	bne.n	8019816 <SUBGRF_GetRxBufferStatus+0x3e>
 80197fa:	4b0c      	ldr	r3, [pc, #48]	@ (801982c <SUBGRF_GetRxBufferStatus+0x54>)
 80197fc:	781b      	ldrb	r3, [r3, #0]
 80197fe:	b2db      	uxtb	r3, r3
 8019800:	2b01      	cmp	r3, #1
 8019802:	d108      	bne.n	8019816 <SUBGRF_GetRxBufferStatus+0x3e>
    {
        *payloadLength = SUBGRF_ReadRegister( REG_LR_PAYLOADLENGTH );
 8019804:	f240 7002 	movw	r0, #1794	@ 0x702
 8019808:	f000 f878 	bl	80198fc <SUBGRF_ReadRegister>
 801980c:	4603      	mov	r3, r0
 801980e:	461a      	mov	r2, r3
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	701a      	strb	r2, [r3, #0]
 8019814:	e002      	b.n	801981c <SUBGRF_GetRxBufferStatus+0x44>
    }
    else
    {
        *payloadLength = status[0];
 8019816:	7b3a      	ldrb	r2, [r7, #12]
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	701a      	strb	r2, [r3, #0]
    }
    *rxStartBufferPointer = status[1];
 801981c:	7b7a      	ldrb	r2, [r7, #13]
 801981e:	683b      	ldr	r3, [r7, #0]
 8019820:	701a      	strb	r2, [r3, #0]
}
 8019822:	bf00      	nop
 8019824:	3710      	adds	r7, #16
 8019826:	46bd      	mov	sp, r7
 8019828:	bd80      	pop	{r7, pc}
 801982a:	bf00      	nop
 801982c:	20001afe 	.word	0x20001afe

08019830 <SUBGRF_GetPacketStatus>:

void SUBGRF_GetPacketStatus( PacketStatus_t *pktStatus )
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b084      	sub	sp, #16
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
    uint8_t status[3];

    SUBGRF_ReadCommand( RADIO_GET_PACKETSTATUS, status, 3 );
 8019838:	f107 030c 	add.w	r3, r7, #12
 801983c:	2203      	movs	r2, #3
 801983e:	4619      	mov	r1, r3
 8019840:	2014      	movs	r0, #20
 8019842:	f000 f919 	bl	8019a78 <SUBGRF_ReadCommand>

    pktStatus->packetType = SUBGRF_GetPacketType( );
 8019846:	f7ff fd53 	bl	80192f0 <SUBGRF_GetPacketType>
 801984a:	4603      	mov	r3, r0
 801984c:	461a      	mov	r2, r3
 801984e:	687b      	ldr	r3, [r7, #4]
 8019850:	701a      	strb	r2, [r3, #0]
    switch( pktStatus->packetType )
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	781b      	ldrb	r3, [r3, #0]
 8019856:	2b00      	cmp	r3, #0
 8019858:	d002      	beq.n	8019860 <SUBGRF_GetPacketStatus+0x30>
 801985a:	2b01      	cmp	r3, #1
 801985c:	d013      	beq.n	8019886 <SUBGRF_GetPacketStatus+0x56>
 801985e:	e02a      	b.n	80198b6 <SUBGRF_GetPacketStatus+0x86>
    {
        case PACKET_TYPE_GFSK:
            pktStatus->Params.Gfsk.RxStatus = status[0];
 8019860:	7b3a      	ldrb	r2, [r7, #12]
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	711a      	strb	r2, [r3, #4]
            pktStatus->Params.Gfsk.RssiSync = -status[1] >> 1;
 8019866:	7b7b      	ldrb	r3, [r7, #13]
 8019868:	425b      	negs	r3, r3
 801986a:	105b      	asrs	r3, r3, #1
 801986c:	b25a      	sxtb	r2, r3
 801986e:	687b      	ldr	r3, [r7, #4]
 8019870:	719a      	strb	r2, [r3, #6]
            pktStatus->Params.Gfsk.RssiAvg = -status[2] >> 1;
 8019872:	7bbb      	ldrb	r3, [r7, #14]
 8019874:	425b      	negs	r3, r3
 8019876:	105b      	asrs	r3, r3, #1
 8019878:	b25a      	sxtb	r2, r3
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	715a      	strb	r2, [r3, #5]
            pktStatus->Params.Gfsk.FreqError = 0;
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	2200      	movs	r2, #0
 8019882:	609a      	str	r2, [r3, #8]
            break;
 8019884:	e020      	b.n	80198c8 <SUBGRF_GetPacketStatus+0x98>

        case PACKET_TYPE_LORA:
            pktStatus->Params.LoRa.RssiPkt = -status[0] >> 1;
 8019886:	7b3b      	ldrb	r3, [r7, #12]
 8019888:	425b      	negs	r3, r3
 801988a:	105b      	asrs	r3, r3, #1
 801988c:	b25a      	sxtb	r2, r3
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	731a      	strb	r2, [r3, #12]
            // Returns SNR value [dB] rounded to the nearest integer value
            pktStatus->Params.LoRa.SnrPkt = ( ( ( int8_t )status[1] ) + 2 ) >> 2;
 8019892:	7b7b      	ldrb	r3, [r7, #13]
 8019894:	b25b      	sxtb	r3, r3
 8019896:	3302      	adds	r3, #2
 8019898:	109b      	asrs	r3, r3, #2
 801989a:	b25a      	sxtb	r2, r3
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	735a      	strb	r2, [r3, #13]
            pktStatus->Params.LoRa.SignalRssiPkt = -status[2] >> 1;
 80198a0:	7bbb      	ldrb	r3, [r7, #14]
 80198a2:	425b      	negs	r3, r3
 80198a4:	105b      	asrs	r3, r3, #1
 80198a6:	b25a      	sxtb	r2, r3
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	739a      	strb	r2, [r3, #14]
            pktStatus->Params.LoRa.FreqError = FrequencyError;
 80198ac:	4b08      	ldr	r3, [pc, #32]	@ (80198d0 <SUBGRF_GetPacketStatus+0xa0>)
 80198ae:	681a      	ldr	r2, [r3, #0]
 80198b0:	687b      	ldr	r3, [r7, #4]
 80198b2:	611a      	str	r2, [r3, #16]
            break;
 80198b4:	e008      	b.n	80198c8 <SUBGRF_GetPacketStatus+0x98>

        default:
        case PACKET_TYPE_NONE:
            // In that specific case, we set everything in the pktStatus to zeros
            // and reset the packet type accordingly
            RADIO_MEMSET8( pktStatus, 0, sizeof( PacketStatus_t ) );
 80198b6:	2214      	movs	r2, #20
 80198b8:	2100      	movs	r1, #0
 80198ba:	6878      	ldr	r0, [r7, #4]
 80198bc:	f000 fbf3 	bl	801a0a6 <UTIL_MEM_set_8>
            pktStatus->packetType = PACKET_TYPE_NONE;
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	220f      	movs	r2, #15
 80198c4:	701a      	strb	r2, [r3, #0]
            break;
 80198c6:	bf00      	nop
    }
}
 80198c8:	bf00      	nop
 80198ca:	3710      	adds	r7, #16
 80198cc:	46bd      	mov	sp, r7
 80198ce:	bd80      	pop	{r7, pc}
 80198d0:	20001b00 	.word	0x20001b00

080198d4 <SUBGRF_WriteRegister>:
    buf[1] = ( uint8_t )( ( uint16_t )irq & 0x00FF );
    SUBGRF_WriteCommand( RADIO_CLR_IRQSTATUS, buf, 2 );
}

void SUBGRF_WriteRegister( uint16_t addr, uint8_t data )
{
 80198d4:	b580      	push	{r7, lr}
 80198d6:	b082      	sub	sp, #8
 80198d8:	af00      	add	r7, sp, #0
 80198da:	4603      	mov	r3, r0
 80198dc:	460a      	mov	r2, r1
 80198de:	80fb      	strh	r3, [r7, #6]
 80198e0:	4613      	mov	r3, r2
 80198e2:	717b      	strb	r3, [r7, #5]
    HAL_SUBGHZ_WriteRegisters( &hsubghz, addr, (uint8_t*)&data, 1 );
 80198e4:	1d7a      	adds	r2, r7, #5
 80198e6:	88f9      	ldrh	r1, [r7, #6]
 80198e8:	2301      	movs	r3, #1
 80198ea:	4803      	ldr	r0, [pc, #12]	@ (80198f8 <SUBGRF_WriteRegister+0x24>)
 80198ec:	f7ed fafa 	bl	8006ee4 <HAL_SUBGHZ_WriteRegisters>
}
 80198f0:	bf00      	nop
 80198f2:	3708      	adds	r7, #8
 80198f4:	46bd      	mov	sp, r7
 80198f6:	bd80      	pop	{r7, pc}
 80198f8:	20000210 	.word	0x20000210

080198fc <SUBGRF_ReadRegister>:

uint8_t SUBGRF_ReadRegister( uint16_t addr )
{
 80198fc:	b580      	push	{r7, lr}
 80198fe:	b084      	sub	sp, #16
 8019900:	af00      	add	r7, sp, #0
 8019902:	4603      	mov	r3, r0
 8019904:	80fb      	strh	r3, [r7, #6]
    uint8_t data;
    HAL_SUBGHZ_ReadRegisters( &hsubghz, addr, &data, 1 );
 8019906:	f107 020f 	add.w	r2, r7, #15
 801990a:	88f9      	ldrh	r1, [r7, #6]
 801990c:	2301      	movs	r3, #1
 801990e:	4804      	ldr	r0, [pc, #16]	@ (8019920 <SUBGRF_ReadRegister+0x24>)
 8019910:	f7ed fb47 	bl	8006fa2 <HAL_SUBGHZ_ReadRegisters>
    return data;
 8019914:	7bfb      	ldrb	r3, [r7, #15]
}
 8019916:	4618      	mov	r0, r3
 8019918:	3710      	adds	r7, #16
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	20000210 	.word	0x20000210

08019924 <SUBGRF_WriteRegisters>:

void SUBGRF_WriteRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019924:	b580      	push	{r7, lr}
 8019926:	b086      	sub	sp, #24
 8019928:	af00      	add	r7, sp, #0
 801992a:	4603      	mov	r3, r0
 801992c:	6039      	str	r1, [r7, #0]
 801992e:	80fb      	strh	r3, [r7, #6]
 8019930:	4613      	mov	r3, r2
 8019932:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019934:	f3ef 8310 	mrs	r3, PRIMASK
 8019938:	60fb      	str	r3, [r7, #12]
  return(result);
 801993a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 801993c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801993e:	b672      	cpsid	i
}
 8019940:	bf00      	nop
    HAL_SUBGHZ_WriteRegisters( &hsubghz, address, buffer, size );
 8019942:	88bb      	ldrh	r3, [r7, #4]
 8019944:	88f9      	ldrh	r1, [r7, #6]
 8019946:	683a      	ldr	r2, [r7, #0]
 8019948:	4806      	ldr	r0, [pc, #24]	@ (8019964 <SUBGRF_WriteRegisters+0x40>)
 801994a:	f7ed facb 	bl	8006ee4 <HAL_SUBGHZ_WriteRegisters>
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019952:	693b      	ldr	r3, [r7, #16]
 8019954:	f383 8810 	msr	PRIMASK, r3
}
 8019958:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801995a:	bf00      	nop
 801995c:	3718      	adds	r7, #24
 801995e:	46bd      	mov	sp, r7
 8019960:	bd80      	pop	{r7, pc}
 8019962:	bf00      	nop
 8019964:	20000210 	.word	0x20000210

08019968 <SUBGRF_ReadRegisters>:

void SUBGRF_ReadRegisters( uint16_t address, uint8_t *buffer, uint16_t size )
{
 8019968:	b580      	push	{r7, lr}
 801996a:	b086      	sub	sp, #24
 801996c:	af00      	add	r7, sp, #0
 801996e:	4603      	mov	r3, r0
 8019970:	6039      	str	r1, [r7, #0]
 8019972:	80fb      	strh	r3, [r7, #6]
 8019974:	4613      	mov	r3, r2
 8019976:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019978:	f3ef 8310 	mrs	r3, PRIMASK
 801997c:	60fb      	str	r3, [r7, #12]
  return(result);
 801997e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019980:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019982:	b672      	cpsid	i
}
 8019984:	bf00      	nop
    HAL_SUBGHZ_ReadRegisters( &hsubghz, address, buffer, size );
 8019986:	88bb      	ldrh	r3, [r7, #4]
 8019988:	88f9      	ldrh	r1, [r7, #6]
 801998a:	683a      	ldr	r2, [r7, #0]
 801998c:	4806      	ldr	r0, [pc, #24]	@ (80199a8 <SUBGRF_ReadRegisters+0x40>)
 801998e:	f7ed fb08 	bl	8006fa2 <HAL_SUBGHZ_ReadRegisters>
 8019992:	697b      	ldr	r3, [r7, #20]
 8019994:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019996:	693b      	ldr	r3, [r7, #16]
 8019998:	f383 8810 	msr	PRIMASK, r3
}
 801999c:	bf00      	nop
    CRITICAL_SECTION_END();
}
 801999e:	bf00      	nop
 80199a0:	3718      	adds	r7, #24
 80199a2:	46bd      	mov	sp, r7
 80199a4:	bd80      	pop	{r7, pc}
 80199a6:	bf00      	nop
 80199a8:	20000210 	.word	0x20000210

080199ac <SUBGRF_WriteBuffer>:

void SUBGRF_WriteBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80199ac:	b580      	push	{r7, lr}
 80199ae:	b086      	sub	sp, #24
 80199b0:	af00      	add	r7, sp, #0
 80199b2:	4603      	mov	r3, r0
 80199b4:	6039      	str	r1, [r7, #0]
 80199b6:	71fb      	strb	r3, [r7, #7]
 80199b8:	4613      	mov	r3, r2
 80199ba:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80199bc:	f3ef 8310 	mrs	r3, PRIMASK
 80199c0:	60fb      	str	r3, [r7, #12]
  return(result);
 80199c2:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 80199c4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 80199c6:	b672      	cpsid	i
}
 80199c8:	bf00      	nop
    HAL_SUBGHZ_WriteBuffer( &hsubghz, offset, buffer, size );
 80199ca:	79bb      	ldrb	r3, [r7, #6]
 80199cc:	b29b      	uxth	r3, r3
 80199ce:	79f9      	ldrb	r1, [r7, #7]
 80199d0:	683a      	ldr	r2, [r7, #0]
 80199d2:	4806      	ldr	r0, [pc, #24]	@ (80199ec <SUBGRF_WriteBuffer+0x40>)
 80199d4:	f7ed fbf9 	bl	80071ca <HAL_SUBGHZ_WriteBuffer>
 80199d8:	697b      	ldr	r3, [r7, #20]
 80199da:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80199dc:	693b      	ldr	r3, [r7, #16]
 80199de:	f383 8810 	msr	PRIMASK, r3
}
 80199e2:	bf00      	nop
    CRITICAL_SECTION_END();
}
 80199e4:	bf00      	nop
 80199e6:	3718      	adds	r7, #24
 80199e8:	46bd      	mov	sp, r7
 80199ea:	bd80      	pop	{r7, pc}
 80199ec:	20000210 	.word	0x20000210

080199f0 <SUBGRF_ReadBuffer>:

void SUBGRF_ReadBuffer( uint8_t offset, uint8_t *buffer, uint8_t size )
{
 80199f0:	b580      	push	{r7, lr}
 80199f2:	b086      	sub	sp, #24
 80199f4:	af00      	add	r7, sp, #0
 80199f6:	4603      	mov	r3, r0
 80199f8:	6039      	str	r1, [r7, #0]
 80199fa:	71fb      	strb	r3, [r7, #7]
 80199fc:	4613      	mov	r3, r2
 80199fe:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a00:	f3ef 8310 	mrs	r3, PRIMASK
 8019a04:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a06:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a08:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a0a:	b672      	cpsid	i
}
 8019a0c:	bf00      	nop
    HAL_SUBGHZ_ReadBuffer( &hsubghz, offset, buffer, size );
 8019a0e:	79bb      	ldrb	r3, [r7, #6]
 8019a10:	b29b      	uxth	r3, r3
 8019a12:	79f9      	ldrb	r1, [r7, #7]
 8019a14:	683a      	ldr	r2, [r7, #0]
 8019a16:	4806      	ldr	r0, [pc, #24]	@ (8019a30 <SUBGRF_ReadBuffer+0x40>)
 8019a18:	f7ed fc2a 	bl	8007270 <HAL_SUBGHZ_ReadBuffer>
 8019a1c:	697b      	ldr	r3, [r7, #20]
 8019a1e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a20:	693b      	ldr	r3, [r7, #16]
 8019a22:	f383 8810 	msr	PRIMASK, r3
}
 8019a26:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a28:	bf00      	nop
 8019a2a:	3718      	adds	r7, #24
 8019a2c:	46bd      	mov	sp, r7
 8019a2e:	bd80      	pop	{r7, pc}
 8019a30:	20000210 	.word	0x20000210

08019a34 <SUBGRF_WriteCommand>:

void SUBGRF_WriteCommand( SUBGHZ_RadioSetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019a34:	b580      	push	{r7, lr}
 8019a36:	b086      	sub	sp, #24
 8019a38:	af00      	add	r7, sp, #0
 8019a3a:	4603      	mov	r3, r0
 8019a3c:	6039      	str	r1, [r7, #0]
 8019a3e:	71fb      	strb	r3, [r7, #7]
 8019a40:	4613      	mov	r3, r2
 8019a42:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a44:	f3ef 8310 	mrs	r3, PRIMASK
 8019a48:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a4a:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a4c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a4e:	b672      	cpsid	i
}
 8019a50:	bf00      	nop
    HAL_SUBGHZ_ExecSetCmd( &hsubghz, Command, pBuffer, Size );
 8019a52:	88bb      	ldrh	r3, [r7, #4]
 8019a54:	79f9      	ldrb	r1, [r7, #7]
 8019a56:	683a      	ldr	r2, [r7, #0]
 8019a58:	4806      	ldr	r0, [pc, #24]	@ (8019a74 <SUBGRF_WriteCommand+0x40>)
 8019a5a:	f7ed fb03 	bl	8007064 <HAL_SUBGHZ_ExecSetCmd>
 8019a5e:	697b      	ldr	r3, [r7, #20]
 8019a60:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019a62:	693b      	ldr	r3, [r7, #16]
 8019a64:	f383 8810 	msr	PRIMASK, r3
}
 8019a68:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019a6a:	bf00      	nop
 8019a6c:	3718      	adds	r7, #24
 8019a6e:	46bd      	mov	sp, r7
 8019a70:	bd80      	pop	{r7, pc}
 8019a72:	bf00      	nop
 8019a74:	20000210 	.word	0x20000210

08019a78 <SUBGRF_ReadCommand>:

void SUBGRF_ReadCommand( SUBGHZ_RadioGetCmd_t Command, uint8_t *pBuffer,
                                        uint16_t Size )
{
 8019a78:	b580      	push	{r7, lr}
 8019a7a:	b086      	sub	sp, #24
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	4603      	mov	r3, r0
 8019a80:	6039      	str	r1, [r7, #0]
 8019a82:	71fb      	strb	r3, [r7, #7]
 8019a84:	4613      	mov	r3, r2
 8019a86:	80bb      	strh	r3, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019a88:	f3ef 8310 	mrs	r3, PRIMASK
 8019a8c:	60fb      	str	r3, [r7, #12]
  return(result);
 8019a8e:	68fb      	ldr	r3, [r7, #12]
    CRITICAL_SECTION_BEGIN();
 8019a90:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019a92:	b672      	cpsid	i
}
 8019a94:	bf00      	nop
    HAL_SUBGHZ_ExecGetCmd( &hsubghz, Command, pBuffer, Size );
 8019a96:	88bb      	ldrh	r3, [r7, #4]
 8019a98:	79f9      	ldrb	r1, [r7, #7]
 8019a9a:	683a      	ldr	r2, [r7, #0]
 8019a9c:	4806      	ldr	r0, [pc, #24]	@ (8019ab8 <SUBGRF_ReadCommand+0x40>)
 8019a9e:	f7ed fb40 	bl	8007122 <HAL_SUBGHZ_ExecGetCmd>
 8019aa2:	697b      	ldr	r3, [r7, #20]
 8019aa4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019aa6:	693b      	ldr	r3, [r7, #16]
 8019aa8:	f383 8810 	msr	PRIMASK, r3
}
 8019aac:	bf00      	nop
    CRITICAL_SECTION_END();
}
 8019aae:	bf00      	nop
 8019ab0:	3718      	adds	r7, #24
 8019ab2:	46bd      	mov	sp, r7
 8019ab4:	bd80      	pop	{r7, pc}
 8019ab6:	bf00      	nop
 8019ab8:	20000210 	.word	0x20000210

08019abc <SUBGRF_SetSwitch>:

void SUBGRF_SetSwitch( uint8_t paSelect, RFState_t rxtx )
{
 8019abc:	b580      	push	{r7, lr}
 8019abe:	b084      	sub	sp, #16
 8019ac0:	af00      	add	r7, sp, #0
 8019ac2:	4603      	mov	r3, r0
 8019ac4:	460a      	mov	r2, r1
 8019ac6:	71fb      	strb	r3, [r7, #7]
 8019ac8:	4613      	mov	r3, r2
 8019aca:	71bb      	strb	r3, [r7, #6]
    RBI_Switch_TypeDef state = RBI_SWITCH_RX;
 8019acc:	2301      	movs	r3, #1
 8019ace:	73fb      	strb	r3, [r7, #15]

    if (rxtx == RFSWITCH_TX)
 8019ad0:	79bb      	ldrb	r3, [r7, #6]
 8019ad2:	2b01      	cmp	r3, #1
 8019ad4:	d10d      	bne.n	8019af2 <SUBGRF_SetSwitch+0x36>
    {
        if (paSelect == RFO_LP)
 8019ad6:	79fb      	ldrb	r3, [r7, #7]
 8019ad8:	2b01      	cmp	r3, #1
 8019ada:	d104      	bne.n	8019ae6 <SUBGRF_SetSwitch+0x2a>
        {
            state = RBI_SWITCH_RFO_LP;
 8019adc:	2302      	movs	r3, #2
 8019ade:	73fb      	strb	r3, [r7, #15]
            Radio_SMPS_Set(SMPS_DRIVE_SETTING_MAX);
 8019ae0:	2004      	movs	r0, #4
 8019ae2:	f000 f8df 	bl	8019ca4 <Radio_SMPS_Set>
        }
        if (paSelect == RFO_HP)
 8019ae6:	79fb      	ldrb	r3, [r7, #7]
 8019ae8:	2b02      	cmp	r3, #2
 8019aea:	d107      	bne.n	8019afc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RFO_HP;
 8019aec:	2303      	movs	r3, #3
 8019aee:	73fb      	strb	r3, [r7, #15]
 8019af0:	e004      	b.n	8019afc <SUBGRF_SetSwitch+0x40>
        }
    }
    else
    {
        if (rxtx == RFSWITCH_RX)
 8019af2:	79bb      	ldrb	r3, [r7, #6]
 8019af4:	2b00      	cmp	r3, #0
 8019af6:	d101      	bne.n	8019afc <SUBGRF_SetSwitch+0x40>
        {
            state = RBI_SWITCH_RX;
 8019af8:	2301      	movs	r3, #1
 8019afa:	73fb      	strb	r3, [r7, #15]
        }
    }
    RBI_ConfigRFSwitch(state);
 8019afc:	7bfb      	ldrb	r3, [r7, #15]
 8019afe:	4618      	mov	r0, r3
 8019b00:	f7f0 fd69 	bl	800a5d6 <RBI_ConfigRFSwitch>
}
 8019b04:	bf00      	nop
 8019b06:	3710      	adds	r7, #16
 8019b08:	46bd      	mov	sp, r7
 8019b0a:	bd80      	pop	{r7, pc}

08019b0c <SUBGRF_SetRfTxPower>:

uint8_t SUBGRF_SetRfTxPower( int8_t power )
{
 8019b0c:	b580      	push	{r7, lr}
 8019b0e:	b084      	sub	sp, #16
 8019b10:	af00      	add	r7, sp, #0
 8019b12:	4603      	mov	r3, r0
 8019b14:	71fb      	strb	r3, [r7, #7]
    uint8_t paSelect= RFO_LP;
 8019b16:	2301      	movs	r3, #1
 8019b18:	73fb      	strb	r3, [r7, #15]

    int32_t TxConfig = RBI_GetTxConfig();
 8019b1a:	f7f0 fd6a 	bl	800a5f2 <RBI_GetTxConfig>
 8019b1e:	60b8      	str	r0, [r7, #8]

    switch (TxConfig)
 8019b20:	68bb      	ldr	r3, [r7, #8]
 8019b22:	2b02      	cmp	r3, #2
 8019b24:	d016      	beq.n	8019b54 <SUBGRF_SetRfTxPower+0x48>
 8019b26:	68bb      	ldr	r3, [r7, #8]
 8019b28:	2b02      	cmp	r3, #2
 8019b2a:	dc16      	bgt.n	8019b5a <SUBGRF_SetRfTxPower+0x4e>
 8019b2c:	68bb      	ldr	r3, [r7, #8]
 8019b2e:	2b00      	cmp	r3, #0
 8019b30:	d003      	beq.n	8019b3a <SUBGRF_SetRfTxPower+0x2e>
 8019b32:	68bb      	ldr	r3, [r7, #8]
 8019b34:	2b01      	cmp	r3, #1
 8019b36:	d00a      	beq.n	8019b4e <SUBGRF_SetRfTxPower+0x42>
        {
            paSelect = RFO_HP;
            break;
        }
        default:
            break;
 8019b38:	e00f      	b.n	8019b5a <SUBGRF_SetRfTxPower+0x4e>
            if (power > 15)
 8019b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019b3e:	2b0f      	cmp	r3, #15
 8019b40:	dd02      	ble.n	8019b48 <SUBGRF_SetRfTxPower+0x3c>
                paSelect = RFO_HP;
 8019b42:	2302      	movs	r3, #2
 8019b44:	73fb      	strb	r3, [r7, #15]
            break;
 8019b46:	e009      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
                paSelect = RFO_LP;
 8019b48:	2301      	movs	r3, #1
 8019b4a:	73fb      	strb	r3, [r7, #15]
            break;
 8019b4c:	e006      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_LP;
 8019b4e:	2301      	movs	r3, #1
 8019b50:	73fb      	strb	r3, [r7, #15]
            break;
 8019b52:	e003      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
            paSelect = RFO_HP;
 8019b54:	2302      	movs	r3, #2
 8019b56:	73fb      	strb	r3, [r7, #15]
            break;
 8019b58:	e000      	b.n	8019b5c <SUBGRF_SetRfTxPower+0x50>
            break;
 8019b5a:	bf00      	nop
    }

    SUBGRF_SetTxParams( paSelect, power, RADIO_RAMP_40_US );
 8019b5c:	f997 1007 	ldrsb.w	r1, [r7, #7]
 8019b60:	7bfb      	ldrb	r3, [r7, #15]
 8019b62:	2202      	movs	r2, #2
 8019b64:	4618      	mov	r0, r3
 8019b66:	f7ff fbcd 	bl	8019304 <SUBGRF_SetTxParams>

    return paSelect;
 8019b6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8019b6c:	4618      	mov	r0, r3
 8019b6e:	3710      	adds	r7, #16
 8019b70:	46bd      	mov	sp, r7
 8019b72:	bd80      	pop	{r7, pc}

08019b74 <SUBGRF_GetRadioWakeUpTime>:

uint32_t SUBGRF_GetRadioWakeUpTime( void )
{
 8019b74:	b480      	push	{r7}
 8019b76:	af00      	add	r7, sp, #0
    return RF_WAKEUP_TIME;
 8019b78:	2301      	movs	r3, #1
}
 8019b7a:	4618      	mov	r0, r3
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	bc80      	pop	{r7}
 8019b80:	4770      	bx	lr
	...

08019b84 <HAL_SUBGHZ_TxCpltCallback>:

/* HAL_SUBGHz Callbacks definitions */
void HAL_SUBGHZ_TxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019b84:	b580      	push	{r7, lr}
 8019b86:	b082      	sub	sp, #8
 8019b88:	af00      	add	r7, sp, #0
 8019b8a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_TX_DONE );
 8019b8c:	4b03      	ldr	r3, [pc, #12]	@ (8019b9c <HAL_SUBGHZ_TxCpltCallback+0x18>)
 8019b8e:	681b      	ldr	r3, [r3, #0]
 8019b90:	2001      	movs	r0, #1
 8019b92:	4798      	blx	r3
}
 8019b94:	bf00      	nop
 8019b96:	3708      	adds	r7, #8
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	20001b08 	.word	0x20001b08

08019ba0 <HAL_SUBGHZ_RxCpltCallback>:

void HAL_SUBGHZ_RxCpltCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019ba0:	b580      	push	{r7, lr}
 8019ba2:	b082      	sub	sp, #8
 8019ba4:	af00      	add	r7, sp, #0
 8019ba6:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_DONE );
 8019ba8:	4b03      	ldr	r3, [pc, #12]	@ (8019bb8 <HAL_SUBGHZ_RxCpltCallback+0x18>)
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	2002      	movs	r0, #2
 8019bae:	4798      	blx	r3
}
 8019bb0:	bf00      	nop
 8019bb2:	3708      	adds	r7, #8
 8019bb4:	46bd      	mov	sp, r7
 8019bb6:	bd80      	pop	{r7, pc}
 8019bb8:	20001b08 	.word	0x20001b08

08019bbc <HAL_SUBGHZ_CRCErrorCallback>:

void HAL_SUBGHZ_CRCErrorCallback (SUBGHZ_HandleTypeDef *hsubghz)
{
 8019bbc:	b580      	push	{r7, lr}
 8019bbe:	b082      	sub	sp, #8
 8019bc0:	af00      	add	r7, sp, #0
 8019bc2:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_CRC_ERROR);
 8019bc4:	4b03      	ldr	r3, [pc, #12]	@ (8019bd4 <HAL_SUBGHZ_CRCErrorCallback+0x18>)
 8019bc6:	681b      	ldr	r3, [r3, #0]
 8019bc8:	2040      	movs	r0, #64	@ 0x40
 8019bca:	4798      	blx	r3
}
 8019bcc:	bf00      	nop
 8019bce:	3708      	adds	r7, #8
 8019bd0:	46bd      	mov	sp, r7
 8019bd2:	bd80      	pop	{r7, pc}
 8019bd4:	20001b08 	.word	0x20001b08

08019bd8 <HAL_SUBGHZ_CADStatusCallback>:

void HAL_SUBGHZ_CADStatusCallback(SUBGHZ_HandleTypeDef *hsubghz, HAL_SUBGHZ_CadStatusTypeDef cadstatus)
{
 8019bd8:	b580      	push	{r7, lr}
 8019bda:	b082      	sub	sp, #8
 8019bdc:	af00      	add	r7, sp, #0
 8019bde:	6078      	str	r0, [r7, #4]
 8019be0:	460b      	mov	r3, r1
 8019be2:	70fb      	strb	r3, [r7, #3]
    switch (cadstatus)
 8019be4:	78fb      	ldrb	r3, [r7, #3]
 8019be6:	2b00      	cmp	r3, #0
 8019be8:	d002      	beq.n	8019bf0 <HAL_SUBGHZ_CADStatusCallback+0x18>
 8019bea:	2b01      	cmp	r3, #1
 8019bec:	d005      	beq.n	8019bfa <HAL_SUBGHZ_CADStatusCallback+0x22>
            break;
        case HAL_SUBGHZ_CAD_DETECTED:
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
            break;
        default:
            break;
 8019bee:	e00a      	b.n	8019c06 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_CLEAR);
 8019bf0:	4b07      	ldr	r3, [pc, #28]	@ (8019c10 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019bf2:	681b      	ldr	r3, [r3, #0]
 8019bf4:	2080      	movs	r0, #128	@ 0x80
 8019bf6:	4798      	blx	r3
            break;
 8019bf8:	e005      	b.n	8019c06 <HAL_SUBGHZ_CADStatusCallback+0x2e>
            RadioOnDioIrqCb( IRQ_CAD_DETECTED);
 8019bfa:	4b05      	ldr	r3, [pc, #20]	@ (8019c10 <HAL_SUBGHZ_CADStatusCallback+0x38>)
 8019bfc:	681b      	ldr	r3, [r3, #0]
 8019bfe:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8019c02:	4798      	blx	r3
            break;
 8019c04:	bf00      	nop
    }
}
 8019c06:	bf00      	nop
 8019c08:	3708      	adds	r7, #8
 8019c0a:	46bd      	mov	sp, r7
 8019c0c:	bd80      	pop	{r7, pc}
 8019c0e:	bf00      	nop
 8019c10:	20001b08 	.word	0x20001b08

08019c14 <HAL_SUBGHZ_RxTxTimeoutCallback>:

void HAL_SUBGHZ_RxTxTimeoutCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b082      	sub	sp, #8
 8019c18:	af00      	add	r7, sp, #0
 8019c1a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_RX_TX_TIMEOUT );
 8019c1c:	4b04      	ldr	r3, [pc, #16]	@ (8019c30 <HAL_SUBGHZ_RxTxTimeoutCallback+0x1c>)
 8019c1e:	681b      	ldr	r3, [r3, #0]
 8019c20:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8019c24:	4798      	blx	r3
}
 8019c26:	bf00      	nop
 8019c28:	3708      	adds	r7, #8
 8019c2a:	46bd      	mov	sp, r7
 8019c2c:	bd80      	pop	{r7, pc}
 8019c2e:	bf00      	nop
 8019c30:	20001b08 	.word	0x20001b08

08019c34 <HAL_SUBGHZ_HeaderErrorCallback>:

void HAL_SUBGHZ_HeaderErrorCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c34:	b580      	push	{r7, lr}
 8019c36:	b082      	sub	sp, #8
 8019c38:	af00      	add	r7, sp, #0
 8019c3a:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_ERROR );
 8019c3c:	4b03      	ldr	r3, [pc, #12]	@ (8019c4c <HAL_SUBGHZ_HeaderErrorCallback+0x18>)
 8019c3e:	681b      	ldr	r3, [r3, #0]
 8019c40:	2020      	movs	r0, #32
 8019c42:	4798      	blx	r3
}
 8019c44:	bf00      	nop
 8019c46:	3708      	adds	r7, #8
 8019c48:	46bd      	mov	sp, r7
 8019c4a:	bd80      	pop	{r7, pc}
 8019c4c:	20001b08 	.word	0x20001b08

08019c50 <HAL_SUBGHZ_PreambleDetectedCallback>:

void HAL_SUBGHZ_PreambleDetectedCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c50:	b580      	push	{r7, lr}
 8019c52:	b082      	sub	sp, #8
 8019c54:	af00      	add	r7, sp, #0
 8019c56:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_PREAMBLE_DETECTED );
 8019c58:	4b03      	ldr	r3, [pc, #12]	@ (8019c68 <HAL_SUBGHZ_PreambleDetectedCallback+0x18>)
 8019c5a:	681b      	ldr	r3, [r3, #0]
 8019c5c:	2004      	movs	r0, #4
 8019c5e:	4798      	blx	r3
}
 8019c60:	bf00      	nop
 8019c62:	3708      	adds	r7, #8
 8019c64:	46bd      	mov	sp, r7
 8019c66:	bd80      	pop	{r7, pc}
 8019c68:	20001b08 	.word	0x20001b08

08019c6c <HAL_SUBGHZ_SyncWordValidCallback>:

void HAL_SUBGHZ_SyncWordValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_SYNCWORD_VALID );
 8019c74:	4b03      	ldr	r3, [pc, #12]	@ (8019c84 <HAL_SUBGHZ_SyncWordValidCallback+0x18>)
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	2008      	movs	r0, #8
 8019c7a:	4798      	blx	r3
}
 8019c7c:	bf00      	nop
 8019c7e:	3708      	adds	r7, #8
 8019c80:	46bd      	mov	sp, r7
 8019c82:	bd80      	pop	{r7, pc}
 8019c84:	20001b08 	.word	0x20001b08

08019c88 <HAL_SUBGHZ_HeaderValidCallback>:

void HAL_SUBGHZ_HeaderValidCallback(SUBGHZ_HandleTypeDef *hsubghz)
{
 8019c88:	b580      	push	{r7, lr}
 8019c8a:	b082      	sub	sp, #8
 8019c8c:	af00      	add	r7, sp, #0
 8019c8e:	6078      	str	r0, [r7, #4]
    RadioOnDioIrqCb( IRQ_HEADER_VALID );
 8019c90:	4b03      	ldr	r3, [pc, #12]	@ (8019ca0 <HAL_SUBGHZ_HeaderValidCallback+0x18>)
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	2010      	movs	r0, #16
 8019c96:	4798      	blx	r3
}
 8019c98:	bf00      	nop
 8019c9a:	3708      	adds	r7, #8
 8019c9c:	46bd      	mov	sp, r7
 8019c9e:	bd80      	pop	{r7, pc}
 8019ca0:	20001b08 	.word	0x20001b08

08019ca4 <Radio_SMPS_Set>:

static void Radio_SMPS_Set(uint8_t level)
{
 8019ca4:	b580      	push	{r7, lr}
 8019ca6:	b084      	sub	sp, #16
 8019ca8:	af00      	add	r7, sp, #0
 8019caa:	4603      	mov	r3, r0
 8019cac:	71fb      	strb	r3, [r7, #7]
  if ( 1U == RBI_IsDCDC() )
 8019cae:	f7f0 fcae 	bl	800a60e <RBI_IsDCDC>
 8019cb2:	4603      	mov	r3, r0
 8019cb4:	2b01      	cmp	r3, #1
 8019cb6:	d112      	bne.n	8019cde <Radio_SMPS_Set+0x3a>
  {
    uint8_t modReg;
    modReg= SUBGRF_ReadRegister(SUBGHZ_SMPSC2R);
 8019cb8:	f640 1023 	movw	r0, #2339	@ 0x923
 8019cbc:	f7ff fe1e 	bl	80198fc <SUBGRF_ReadRegister>
 8019cc0:	4603      	mov	r3, r0
 8019cc2:	73fb      	strb	r3, [r7, #15]
    modReg&= (~SMPS_DRV_MASK);
 8019cc4:	7bfb      	ldrb	r3, [r7, #15]
 8019cc6:	f023 0306 	bic.w	r3, r3, #6
 8019cca:	73fb      	strb	r3, [r7, #15]
    SUBGRF_WriteRegister(SUBGHZ_SMPSC2R, modReg | level);
 8019ccc:	7bfa      	ldrb	r2, [r7, #15]
 8019cce:	79fb      	ldrb	r3, [r7, #7]
 8019cd0:	4313      	orrs	r3, r2
 8019cd2:	b2db      	uxtb	r3, r3
 8019cd4:	4619      	mov	r1, r3
 8019cd6:	f640 1023 	movw	r0, #2339	@ 0x923
 8019cda:	f7ff fdfb 	bl	80198d4 <SUBGRF_WriteRegister>
  }
}
 8019cde:	bf00      	nop
 8019ce0:	3710      	adds	r7, #16
 8019ce2:	46bd      	mov	sp, r7
 8019ce4:	bd80      	pop	{r7, pc}
	...

08019ce8 <SUBGRF_GetFskBandwidthRegValue>:

uint8_t SUBGRF_GetFskBandwidthRegValue( uint32_t bandwidth )
{
 8019ce8:	b480      	push	{r7}
 8019cea:	b085      	sub	sp, #20
 8019cec:	af00      	add	r7, sp, #0
 8019cee:	6078      	str	r0, [r7, #4]
    uint8_t i;

    if( bandwidth == 0 )
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	2b00      	cmp	r3, #0
 8019cf4:	d101      	bne.n	8019cfa <SUBGRF_GetFskBandwidthRegValue+0x12>
    {
        return( 0x1F );
 8019cf6:	231f      	movs	r3, #31
 8019cf8:	e017      	b.n	8019d2a <SUBGRF_GetFskBandwidthRegValue+0x42>
    }

    /* ST_WORKAROUND_BEGIN: Simplified loop */
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	73fb      	strb	r3, [r7, #15]
 8019cfe:	e00f      	b.n	8019d20 <SUBGRF_GetFskBandwidthRegValue+0x38>
    {
        if ( bandwidth < FskBandwidths[i].bandwidth )
 8019d00:	7bfb      	ldrb	r3, [r7, #15]
 8019d02:	4a0c      	ldr	r2, [pc, #48]	@ (8019d34 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019d04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8019d08:	687a      	ldr	r2, [r7, #4]
 8019d0a:	429a      	cmp	r2, r3
 8019d0c:	d205      	bcs.n	8019d1a <SUBGRF_GetFskBandwidthRegValue+0x32>
        {
            return FskBandwidths[i].RegValue;
 8019d0e:	7bfb      	ldrb	r3, [r7, #15]
 8019d10:	4a08      	ldr	r2, [pc, #32]	@ (8019d34 <SUBGRF_GetFskBandwidthRegValue+0x4c>)
 8019d12:	00db      	lsls	r3, r3, #3
 8019d14:	4413      	add	r3, r2
 8019d16:	791b      	ldrb	r3, [r3, #4]
 8019d18:	e007      	b.n	8019d2a <SUBGRF_GetFskBandwidthRegValue+0x42>
    for( i = 0; i < ( sizeof( FskBandwidths ) / sizeof( FskBandwidth_t ) ); i++ )
 8019d1a:	7bfb      	ldrb	r3, [r7, #15]
 8019d1c:	3301      	adds	r3, #1
 8019d1e:	73fb      	strb	r3, [r7, #15]
 8019d20:	7bfb      	ldrb	r3, [r7, #15]
 8019d22:	2b15      	cmp	r3, #21
 8019d24:	d9ec      	bls.n	8019d00 <SUBGRF_GetFskBandwidthRegValue+0x18>
        }
    }
    /* ST_WORKAROUND_END */
    // ERROR: Value not found
    while( 1 );
 8019d26:	bf00      	nop
 8019d28:	e7fd      	b.n	8019d26 <SUBGRF_GetFskBandwidthRegValue+0x3e>
}
 8019d2a:	4618      	mov	r0, r3
 8019d2c:	3714      	adds	r7, #20
 8019d2e:	46bd      	mov	sp, r7
 8019d30:	bc80      	pop	{r7}
 8019d32:	4770      	bx	lr
 8019d34:	0801c588 	.word	0x0801c588

08019d38 <SUBGRF_GetCFO>:
void SUBGRF_GetCFO( uint32_t bitRate, int32_t *cfo)
{
 8019d38:	b580      	push	{r7, lr}
 8019d3a:	b08a      	sub	sp, #40	@ 0x28
 8019d3c:	af00      	add	r7, sp, #0
 8019d3e:	6078      	str	r0, [r7, #4]
 8019d40:	6039      	str	r1, [r7, #0]
  uint8_t BwMant[] = {4, 8, 10, 12};
 8019d42:	4b35      	ldr	r3, [pc, #212]	@ (8019e18 <SUBGRF_GetCFO+0xe0>)
 8019d44:	60fb      	str	r3, [r7, #12]
  /* read demod bandwidth: mant bit4:3, exp bits 2:0 */
  uint8_t reg = (SUBGRF_ReadRegister( SUBGHZ_BWSELR ));
 8019d46:	f640 0007 	movw	r0, #2055	@ 0x807
 8019d4a:	f7ff fdd7 	bl	80198fc <SUBGRF_ReadRegister>
 8019d4e:	4603      	mov	r3, r0
 8019d50:	77fb      	strb	r3, [r7, #31]
  uint8_t bandwidth_mant = BwMant[( reg >> 3 ) & 0x3];
 8019d52:	7ffb      	ldrb	r3, [r7, #31]
 8019d54:	08db      	lsrs	r3, r3, #3
 8019d56:	b2db      	uxtb	r3, r3
 8019d58:	f003 0303 	and.w	r3, r3, #3
 8019d5c:	3328      	adds	r3, #40	@ 0x28
 8019d5e:	443b      	add	r3, r7
 8019d60:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8019d64:	77bb      	strb	r3, [r7, #30]
  uint8_t bandwidth_exp = reg & 0x7;
 8019d66:	7ffb      	ldrb	r3, [r7, #31]
 8019d68:	f003 0307 	and.w	r3, r3, #7
 8019d6c:	777b      	strb	r3, [r7, #29]
  uint32_t cf_fs = XTAL_FREQ / ( bandwidth_mant * ( 1 << ( bandwidth_exp - 1 )));
 8019d6e:	7fba      	ldrb	r2, [r7, #30]
 8019d70:	7f7b      	ldrb	r3, [r7, #29]
 8019d72:	3b01      	subs	r3, #1
 8019d74:	fa02 f303 	lsl.w	r3, r2, r3
 8019d78:	461a      	mov	r2, r3
 8019d7a:	4b28      	ldr	r3, [pc, #160]	@ (8019e1c <SUBGRF_GetCFO+0xe4>)
 8019d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8019d80:	61bb      	str	r3, [r7, #24]
  uint32_t cf_osr = cf_fs / bitRate;
 8019d82:	69ba      	ldr	r2, [r7, #24]
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	fbb2 f3f3 	udiv	r3, r2, r3
 8019d8a:	617b      	str	r3, [r7, #20]
  uint8_t interp = 1;
 8019d8c:	2301      	movs	r3, #1
 8019d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  /* calculate demod interpolation factor */
  if (cf_osr * interp < 8)
 8019d92:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019d96:	697a      	ldr	r2, [r7, #20]
 8019d98:	fb02 f303 	mul.w	r3, r2, r3
 8019d9c:	2b07      	cmp	r3, #7
 8019d9e:	d802      	bhi.n	8019da6 <SUBGRF_GetCFO+0x6e>
  {
    interp = 2;
 8019da0:	2302      	movs	r3, #2
 8019da2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  if (cf_osr * interp < 4)
 8019da6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8019daa:	697a      	ldr	r2, [r7, #20]
 8019dac:	fb02 f303 	mul.w	r3, r2, r3
 8019db0:	2b03      	cmp	r3, #3
 8019db2:	d802      	bhi.n	8019dba <SUBGRF_GetCFO+0x82>
  {
    interp = 4;
 8019db4:	2304      	movs	r3, #4
 8019db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  /* calculate demod sampling frequency */
  uint32_t fs = cf_fs* interp;
 8019dba:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8019dbe:	69bb      	ldr	r3, [r7, #24]
 8019dc0:	fb02 f303 	mul.w	r3, r2, r3
 8019dc4:	613b      	str	r3, [r7, #16]
  /* get the cfo registers */
  int32_t cfo_bin = ( SUBGRF_ReadRegister( SUBGHZ_GCFORH ) & 0xF ) << 8;
 8019dc6:	f44f 60d6 	mov.w	r0, #1712	@ 0x6b0
 8019dca:	f7ff fd97 	bl	80198fc <SUBGRF_ReadRegister>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	021b      	lsls	r3, r3, #8
 8019dd2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8019dd6:	623b      	str	r3, [r7, #32]
  cfo_bin |= SUBGRF_ReadRegister( SUBGHZ_GCFORL );
 8019dd8:	f240 60b1 	movw	r0, #1713	@ 0x6b1
 8019ddc:	f7ff fd8e 	bl	80198fc <SUBGRF_ReadRegister>
 8019de0:	4603      	mov	r3, r0
 8019de2:	461a      	mov	r2, r3
 8019de4:	6a3b      	ldr	r3, [r7, #32]
 8019de6:	4313      	orrs	r3, r2
 8019de8:	623b      	str	r3, [r7, #32]
  /* negate if 12 bits sign bit is 1 */
  if (( cfo_bin & 0x800 ) == 0x800 )
 8019dea:	6a3b      	ldr	r3, [r7, #32]
 8019dec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d005      	beq.n	8019e00 <SUBGRF_GetCFO+0xc8>
  {
    cfo_bin |= 0xFFFFF000;
 8019df4:	6a3b      	ldr	r3, [r7, #32]
 8019df6:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8019dfa:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8019dfe:	623b      	str	r3, [r7, #32]
  }
  /* calculate cfo in Hz */
  /* shift by 5 first to not saturate, cfo_bin on 12bits */
  *cfo = ((int32_t)( cfo_bin * ( fs >> 5 ))) >> ( 12 - 5 );
 8019e00:	693b      	ldr	r3, [r7, #16]
 8019e02:	095b      	lsrs	r3, r3, #5
 8019e04:	6a3a      	ldr	r2, [r7, #32]
 8019e06:	fb02 f303 	mul.w	r3, r2, r3
 8019e0a:	11da      	asrs	r2, r3, #7
 8019e0c:	683b      	ldr	r3, [r7, #0]
 8019e0e:	601a      	str	r2, [r3, #0]
}
 8019e10:	bf00      	nop
 8019e12:	3728      	adds	r7, #40	@ 0x28
 8019e14:	46bd      	mov	sp, r7
 8019e16:	bd80      	pop	{r7, pc}
 8019e18:	0c0a0804 	.word	0x0c0a0804
 8019e1c:	01e84800 	.word	0x01e84800

08019e20 <RFW_TransmitLongPacket>:
static void RFW_GetPayload( uint8_t Offset, uint8_t Length );
#endif

/* Exported functions --------------------------------------------------------*/
int32_t RFW_TransmitLongPacket( uint16_t payload_size, uint32_t timeout, void (*TxLongPacketGetNextChunkCb) (uint8_t** buffer, uint8_t buffer_size) )
{
 8019e20:	b480      	push	{r7}
 8019e22:	b087      	sub	sp, #28
 8019e24:	af00      	add	r7, sp, #0
 8019e26:	4603      	mov	r3, r0
 8019e28:	60b9      	str	r1, [r7, #8]
 8019e2a:	607a      	str	r2, [r7, #4]
 8019e2c:	81fb      	strh	r3, [r7, #14]
  int32_t status=0;
 8019e2e:	2300      	movs	r3, #0
 8019e30:	617b      	str	r3, [r7, #20]
        default:
            break;
    }
  }
#else
  status= -1;
 8019e32:	f04f 33ff 	mov.w	r3, #4294967295
 8019e36:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019e38:	697b      	ldr	r3, [r7, #20]
}
 8019e3a:	4618      	mov	r0, r3
 8019e3c:	371c      	adds	r7, #28
 8019e3e:	46bd      	mov	sp, r7
 8019e40:	bc80      	pop	{r7}
 8019e42:	4770      	bx	lr

08019e44 <RFW_ReceiveLongPacket>:

int32_t RFW_ReceiveLongPacket( uint8_t boosted_mode, uint32_t timeout, void (*RxLongPacketStoreChunkCb) (uint8_t* buffer, uint8_t chunk_size) )
{
 8019e44:	b480      	push	{r7}
 8019e46:	b087      	sub	sp, #28
 8019e48:	af00      	add	r7, sp, #0
 8019e4a:	4603      	mov	r3, r0
 8019e4c:	60b9      	str	r1, [r7, #8]
 8019e4e:	607a      	str	r2, [r7, #4]
 8019e50:	73fb      	strb	r3, [r7, #15]
  int32_t status=0;
 8019e52:	2300      	movs	r3, #0
 8019e54:	617b      	str	r3, [r7, #20]
    {
      SUBGRF_SetRx( 0xFFFFFF ); // Rx Continuous
    }
  }
#else
  status= -1;
 8019e56:	f04f 33ff 	mov.w	r3, #4294967295
 8019e5a:	617b      	str	r3, [r7, #20]
#endif
  return status;
 8019e5c:	697b      	ldr	r3, [r7, #20]
}
 8019e5e:	4618      	mov	r0, r3
 8019e60:	371c      	adds	r7, #28
 8019e62:	46bd      	mov	sp, r7
 8019e64:	bc80      	pop	{r7}
 8019e66:	4770      	bx	lr

08019e68 <RFW_Init>:

int32_t RFW_Init( ConfigGeneric_t* config, RadioEvents_t* RadioEvents, TimerEvent_t* TimeoutTimerEvent)
{
 8019e68:	b480      	push	{r7}
 8019e6a:	b085      	sub	sp, #20
 8019e6c:	af00      	add	r7, sp, #0
 8019e6e:	60f8      	str	r0, [r7, #12]
 8019e70:	60b9      	str	r1, [r7, #8]
 8019e72:	607a      	str	r2, [r7, #4]
  RFWPacket.Init.Enable=1;
  /* Initialize Timer for end of fixed packet, started at sync*/
  TimerInit( &RFWPacket.Timer, RFW_GetPayloadTimerEvent );
  return 0;
#else
  return -1;
 8019e74:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019e78:	4618      	mov	r0, r3
 8019e7a:	3714      	adds	r7, #20
 8019e7c:	46bd      	mov	sp, r7
 8019e7e:	bc80      	pop	{r7}
 8019e80:	4770      	bx	lr

08019e82 <RFW_DeInit>:

void RFW_DeInit( void)
{
 8019e82:	b480      	push	{r7}
 8019e84:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Enable=0; /*Disable the RFWPacket decoding*/
#endif
}
 8019e86:	bf00      	nop
 8019e88:	46bd      	mov	sp, r7
 8019e8a:	bc80      	pop	{r7}
 8019e8c:	4770      	bx	lr

08019e8e <RFW_Is_Init>:

uint8_t RFW_Is_Init( void)
{
 8019e8e:	b480      	push	{r7}
 8019e90:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.Init.Enable;
#else
  return 0;
 8019e92:	2300      	movs	r3, #0
#endif
}
 8019e94:	4618      	mov	r0, r3
 8019e96:	46bd      	mov	sp, r7
 8019e98:	bc80      	pop	{r7}
 8019e9a:	4770      	bx	lr

08019e9c <RFW_Is_LongPacketModeEnabled>:

uint8_t RFW_Is_LongPacketModeEnabled( void)
{
 8019e9c:	b480      	push	{r7}
 8019e9e:	af00      	add	r7, sp, #0
#if (RFW_ENABLE ==1 )
  return RFWPacket.LongPacketModeEnable;
#else
  return 0;
 8019ea0:	2300      	movs	r3, #0
#endif
}
 8019ea2:	4618      	mov	r0, r3
 8019ea4:	46bd      	mov	sp, r7
 8019ea6:	bc80      	pop	{r7}
 8019ea8:	4770      	bx	lr

08019eaa <RFW_SetAntSwitch>:

void RFW_SetAntSwitch( uint8_t AntSwitch)
{
 8019eaa:	b480      	push	{r7}
 8019eac:	b083      	sub	sp, #12
 8019eae:	af00      	add	r7, sp, #0
 8019eb0:	4603      	mov	r3, r0
 8019eb2:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.AntSwitchPaSelect=AntSwitch;
#endif
}
 8019eb4:	bf00      	nop
 8019eb6:	370c      	adds	r7, #12
 8019eb8:	46bd      	mov	sp, r7
 8019eba:	bc80      	pop	{r7}
 8019ebc:	4770      	bx	lr

08019ebe <RFW_TransmitInit>:

int32_t RFW_TransmitInit(uint8_t* inOutBuffer, uint8_t size, uint8_t* outSize)
{
 8019ebe:	b480      	push	{r7}
 8019ec0:	b087      	sub	sp, #28
 8019ec2:	af00      	add	r7, sp, #0
 8019ec4:	60f8      	str	r0, [r7, #12]
 8019ec6:	460b      	mov	r3, r1
 8019ec8:	607a      	str	r2, [r7, #4]
 8019eca:	72fb      	strb	r3, [r7, #11]
  int32_t status=-1;
 8019ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8019ed0:	617b      	str	r3, [r7, #20]
    RFWPacket.LongPacketModeEnable=0;

    status= 0;
  }
#endif
  return status;
 8019ed2:	697b      	ldr	r3, [r7, #20]
}
 8019ed4:	4618      	mov	r0, r3
 8019ed6:	371c      	adds	r7, #28
 8019ed8:	46bd      	mov	sp, r7
 8019eda:	bc80      	pop	{r7}
 8019edc:	4770      	bx	lr

08019ede <RFW_ReceiveInit>:

int32_t RFW_ReceiveInit( void )
{
 8019ede:	b480      	push	{r7}
 8019ee0:	af00      	add	r7, sp, #0
  RFWPacket.RxPayloadOffset=0;

  RFWPacket.LongPacketModeEnable=0;
  return 0;
#else
  return -1;
 8019ee2:	f04f 33ff 	mov.w	r3, #4294967295
#endif
}
 8019ee6:	4618      	mov	r0, r3
 8019ee8:	46bd      	mov	sp, r7
 8019eea:	bc80      	pop	{r7}
 8019eec:	4770      	bx	lr

08019eee <RFW_DeInit_TxLongPacket>:

void RFW_DeInit_TxLongPacket(void)
{
 8019eee:	b480      	push	{r7}
 8019ef0:	af00      	add	r7, sp, #0
  /*long packet WA*/
  uint8_t reg = SUBGRF_ReadRegister(SUBGHZ_GPKTCTL1AR);
  SUBGRF_WriteRegister(SUBGHZ_GPKTCTL1AR, reg & ~0x02);//clear infinite_sequence bit
  SUBGRF_WriteRegister(SUBGHZ_GRTXPLDLEN, 0xFF); //RxTxPldLen: reset to 0xFF
#endif
}
 8019ef2:	bf00      	nop
 8019ef4:	46bd      	mov	sp, r7
 8019ef6:	bc80      	pop	{r7}
 8019ef8:	4770      	bx	lr

08019efa <RFW_ReceivePayload>:

void RFW_ReceivePayload( void )
{
 8019efa:	b480      	push	{r7}
 8019efc:	af00      	add	r7, sp, #0
    /*timeout*/
    SUBGRF_SetStandby( STDBY_RC );
    RFWPacket.Init.RadioEvents->RxTimeout( );
  }
#endif
}
 8019efe:	bf00      	nop
 8019f00:	46bd      	mov	sp, r7
 8019f02:	bc80      	pop	{r7}
 8019f04:	4770      	bx	lr

08019f06 <RFW_SetRadioModem>:

void RFW_SetRadioModem(RadioModems_t Modem)
{
 8019f06:	b480      	push	{r7}
 8019f08:	b083      	sub	sp, #12
 8019f0a:	af00      	add	r7, sp, #0
 8019f0c:	4603      	mov	r3, r0
 8019f0e:	71fb      	strb	r3, [r7, #7]
#if (RFW_ENABLE ==1 )
  RFWPacket.Init.Modem= Modem;
#endif
}
 8019f10:	bf00      	nop
 8019f12:	370c      	adds	r7, #12
 8019f14:	46bd      	mov	sp, r7
 8019f16:	bc80      	pop	{r7}
 8019f18:	4770      	bx	lr
	...

08019f1c <UTIL_LPM_Init>:

/** @addtogroup TINY_LPM_Exported_function
  * @{
  */
void UTIL_LPM_Init( void )
{
 8019f1c:	b480      	push	{r7}
 8019f1e:	af00      	add	r7, sp, #0
  StopModeDisable = UTIL_LPM_NO_BIT_SET;
 8019f20:	4b04      	ldr	r3, [pc, #16]	@ (8019f34 <UTIL_LPM_Init+0x18>)
 8019f22:	2200      	movs	r2, #0
 8019f24:	601a      	str	r2, [r3, #0]
  OffModeDisable = UTIL_LPM_NO_BIT_SET;
 8019f26:	4b04      	ldr	r3, [pc, #16]	@ (8019f38 <UTIL_LPM_Init+0x1c>)
 8019f28:	2200      	movs	r2, #0
 8019f2a:	601a      	str	r2, [r3, #0]
  UTIL_LPM_INIT_CRITICAL_SECTION( );
}
 8019f2c:	bf00      	nop
 8019f2e:	46bd      	mov	sp, r7
 8019f30:	bc80      	pop	{r7}
 8019f32:	4770      	bx	lr
 8019f34:	20001b0c 	.word	0x20001b0c
 8019f38:	20001b10 	.word	0x20001b10

08019f3c <UTIL_LPM_SetStopMode>:
void UTIL_LPM_DeInit( void )
{
}

void UTIL_LPM_SetStopMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019f3c:	b480      	push	{r7}
 8019f3e:	b087      	sub	sp, #28
 8019f40:	af00      	add	r7, sp, #0
 8019f42:	6078      	str	r0, [r7, #4]
 8019f44:	460b      	mov	r3, r1
 8019f46:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019f48:	f3ef 8310 	mrs	r3, PRIMASK
 8019f4c:	613b      	str	r3, [r7, #16]
  return(result);
 8019f4e:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019f50:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019f52:	b672      	cpsid	i
}
 8019f54:	bf00      	nop
  
  switch( state )
 8019f56:	78fb      	ldrb	r3, [r7, #3]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d008      	beq.n	8019f6e <UTIL_LPM_SetStopMode+0x32>
 8019f5c:	2b01      	cmp	r3, #1
 8019f5e:	d10e      	bne.n	8019f7e <UTIL_LPM_SetStopMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      StopModeDisable |= lpm_id_bm;
 8019f60:	4b0d      	ldr	r3, [pc, #52]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f62:	681a      	ldr	r2, [r3, #0]
 8019f64:	687b      	ldr	r3, [r7, #4]
 8019f66:	4313      	orrs	r3, r2
 8019f68:	4a0b      	ldr	r2, [pc, #44]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f6a:	6013      	str	r3, [r2, #0]
      break;
 8019f6c:	e008      	b.n	8019f80 <UTIL_LPM_SetStopMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      StopModeDisable &= ( ~lpm_id_bm );
 8019f6e:	687b      	ldr	r3, [r7, #4]
 8019f70:	43da      	mvns	r2, r3
 8019f72:	4b09      	ldr	r3, [pc, #36]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f74:	681b      	ldr	r3, [r3, #0]
 8019f76:	4013      	ands	r3, r2
 8019f78:	4a07      	ldr	r2, [pc, #28]	@ (8019f98 <UTIL_LPM_SetStopMode+0x5c>)
 8019f7a:	6013      	str	r3, [r2, #0]
      break;
 8019f7c:	e000      	b.n	8019f80 <UTIL_LPM_SetStopMode+0x44>
    }
  default :
    {
      break;
 8019f7e:	bf00      	nop
 8019f80:	697b      	ldr	r3, [r7, #20]
 8019f82:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	f383 8810 	msr	PRIMASK, r3
}
 8019f8a:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019f8c:	bf00      	nop
 8019f8e:	371c      	adds	r7, #28
 8019f90:	46bd      	mov	sp, r7
 8019f92:	bc80      	pop	{r7}
 8019f94:	4770      	bx	lr
 8019f96:	bf00      	nop
 8019f98:	20001b0c 	.word	0x20001b0c

08019f9c <UTIL_LPM_SetOffMode>:

void UTIL_LPM_SetOffMode( UTIL_LPM_bm_t lpm_id_bm, UTIL_LPM_State_t state )
{
 8019f9c:	b480      	push	{r7}
 8019f9e:	b087      	sub	sp, #28
 8019fa0:	af00      	add	r7, sp, #0
 8019fa2:	6078      	str	r0, [r7, #4]
 8019fa4:	460b      	mov	r3, r1
 8019fa6:	70fb      	strb	r3, [r7, #3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019fa8:	f3ef 8310 	mrs	r3, PRIMASK
 8019fac:	613b      	str	r3, [r7, #16]
  return(result);
 8019fae:	693b      	ldr	r3, [r7, #16]
  UTIL_LPM_ENTER_CRITICAL_SECTION( );
 8019fb0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019fb2:	b672      	cpsid	i
}
 8019fb4:	bf00      	nop
  
  switch(state)
 8019fb6:	78fb      	ldrb	r3, [r7, #3]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d008      	beq.n	8019fce <UTIL_LPM_SetOffMode+0x32>
 8019fbc:	2b01      	cmp	r3, #1
 8019fbe:	d10e      	bne.n	8019fde <UTIL_LPM_SetOffMode+0x42>
  {
  case UTIL_LPM_DISABLE:
    {
      OffModeDisable |= lpm_id_bm;
 8019fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fc2:	681a      	ldr	r2, [r3, #0]
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	4313      	orrs	r3, r2
 8019fc8:	4a0b      	ldr	r2, [pc, #44]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fca:	6013      	str	r3, [r2, #0]
      break;
 8019fcc:	e008      	b.n	8019fe0 <UTIL_LPM_SetOffMode+0x44>
    }
  case UTIL_LPM_ENABLE:
    {
      OffModeDisable &= ( ~lpm_id_bm );
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	43da      	mvns	r2, r3
 8019fd2:	4b09      	ldr	r3, [pc, #36]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	4013      	ands	r3, r2
 8019fd8:	4a07      	ldr	r2, [pc, #28]	@ (8019ff8 <UTIL_LPM_SetOffMode+0x5c>)
 8019fda:	6013      	str	r3, [r2, #0]
      break;
 8019fdc:	e000      	b.n	8019fe0 <UTIL_LPM_SetOffMode+0x44>
    }
  default :
    {
      break;
 8019fde:	bf00      	nop
 8019fe0:	697b      	ldr	r3, [r7, #20]
 8019fe2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	f383 8810 	msr	PRIMASK, r3
}
 8019fea:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION( );
}
 8019fec:	bf00      	nop
 8019fee:	371c      	adds	r7, #28
 8019ff0:	46bd      	mov	sp, r7
 8019ff2:	bc80      	pop	{r7}
 8019ff4:	4770      	bx	lr
 8019ff6:	bf00      	nop
 8019ff8:	20001b10 	.word	0x20001b10

08019ffc <UTIL_LPM_EnterLowPower>:

  return mode_selected;
}

void UTIL_LPM_EnterLowPower( void )
{
 8019ffc:	b580      	push	{r7, lr}
 8019ffe:	b084      	sub	sp, #16
 801a000:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a002:	f3ef 8310 	mrs	r3, PRIMASK
 801a006:	60bb      	str	r3, [r7, #8]
  return(result);
 801a008:	68bb      	ldr	r3, [r7, #8]
  UTIL_LPM_ENTER_CRITICAL_SECTION_ELP( );
 801a00a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801a00c:	b672      	cpsid	i
}
 801a00e:	bf00      	nop

  if( StopModeDisable != UTIL_LPM_NO_BIT_SET )
 801a010:	4b12      	ldr	r3, [pc, #72]	@ (801a05c <UTIL_LPM_EnterLowPower+0x60>)
 801a012:	681b      	ldr	r3, [r3, #0]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d006      	beq.n	801a026 <UTIL_LPM_EnterLowPower+0x2a>
  {
    /**
     * At least one user disallows Stop Mode
     * SLEEP mode is required
     */
      UTIL_PowerDriver.EnterSleepMode( );
 801a018:	4b11      	ldr	r3, [pc, #68]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a01a:	681b      	ldr	r3, [r3, #0]
 801a01c:	4798      	blx	r3
      UTIL_PowerDriver.ExitSleepMode( );
 801a01e:	4b10      	ldr	r3, [pc, #64]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a020:	685b      	ldr	r3, [r3, #4]
 801a022:	4798      	blx	r3
 801a024:	e010      	b.n	801a048 <UTIL_LPM_EnterLowPower+0x4c>
  }
  else
  { 
    if( OffModeDisable != UTIL_LPM_NO_BIT_SET )
 801a026:	4b0f      	ldr	r3, [pc, #60]	@ (801a064 <UTIL_LPM_EnterLowPower+0x68>)
 801a028:	681b      	ldr	r3, [r3, #0]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d006      	beq.n	801a03c <UTIL_LPM_EnterLowPower+0x40>
    {
      /**
       * At least one user disallows Off Mode
       * STOP mode is required
       */
        UTIL_PowerDriver.EnterStopMode( );
 801a02e:	4b0c      	ldr	r3, [pc, #48]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a030:	689b      	ldr	r3, [r3, #8]
 801a032:	4798      	blx	r3
        UTIL_PowerDriver.ExitStopMode( );
 801a034:	4b0a      	ldr	r3, [pc, #40]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a036:	68db      	ldr	r3, [r3, #12]
 801a038:	4798      	blx	r3
 801a03a:	e005      	b.n	801a048 <UTIL_LPM_EnterLowPower+0x4c>
    else
    {
      /**
       * OFF mode is required
       */
      UTIL_PowerDriver.EnterOffMode( );
 801a03c:	4b08      	ldr	r3, [pc, #32]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a03e:	691b      	ldr	r3, [r3, #16]
 801a040:	4798      	blx	r3
      UTIL_PowerDriver.ExitOffMode( );
 801a042:	4b07      	ldr	r3, [pc, #28]	@ (801a060 <UTIL_LPM_EnterLowPower+0x64>)
 801a044:	695b      	ldr	r3, [r3, #20]
 801a046:	4798      	blx	r3
 801a048:	68fb      	ldr	r3, [r7, #12]
 801a04a:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a04c:	687b      	ldr	r3, [r7, #4]
 801a04e:	f383 8810 	msr	PRIMASK, r3
}
 801a052:	bf00      	nop
    }
  }
  
  UTIL_LPM_EXIT_CRITICAL_SECTION_ELP( );
}
 801a054:	bf00      	nop
 801a056:	3710      	adds	r7, #16
 801a058:	46bd      	mov	sp, r7
 801a05a:	bd80      	pop	{r7, pc}
 801a05c:	20001b0c 	.word	0x20001b0c
 801a060:	0801c088 	.word	0x0801c088
 801a064:	20001b10 	.word	0x20001b10

0801a068 <UTIL_MEM_cpy_8>:
/* Global variables ----------------------------------------------------------*/
/* Private function prototypes -----------------------------------------------*/
/* Functions Definition ------------------------------------------------------*/

void UTIL_MEM_cpy_8( void *dst, const void *src, uint16_t size )
{
 801a068:	b480      	push	{r7}
 801a06a:	b087      	sub	sp, #28
 801a06c:	af00      	add	r7, sp, #0
 801a06e:	60f8      	str	r0, [r7, #12]
 801a070:	60b9      	str	r1, [r7, #8]
 801a072:	4613      	mov	r3, r2
 801a074:	80fb      	strh	r3, [r7, #6]
  uint8_t* dst8= (uint8_t *) dst;
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	617b      	str	r3, [r7, #20]
  uint8_t* src8= (uint8_t *) src;
 801a07a:	68bb      	ldr	r3, [r7, #8]
 801a07c:	613b      	str	r3, [r7, #16]

  while( size-- )
 801a07e:	e007      	b.n	801a090 <UTIL_MEM_cpy_8+0x28>
    {
        *dst8++ = *src8++;
 801a080:	693a      	ldr	r2, [r7, #16]
 801a082:	1c53      	adds	r3, r2, #1
 801a084:	613b      	str	r3, [r7, #16]
 801a086:	697b      	ldr	r3, [r7, #20]
 801a088:	1c59      	adds	r1, r3, #1
 801a08a:	6179      	str	r1, [r7, #20]
 801a08c:	7812      	ldrb	r2, [r2, #0]
 801a08e:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a090:	88fb      	ldrh	r3, [r7, #6]
 801a092:	1e5a      	subs	r2, r3, #1
 801a094:	80fa      	strh	r2, [r7, #6]
 801a096:	2b00      	cmp	r3, #0
 801a098:	d1f2      	bne.n	801a080 <UTIL_MEM_cpy_8+0x18>
    }
}
 801a09a:	bf00      	nop
 801a09c:	bf00      	nop
 801a09e:	371c      	adds	r7, #28
 801a0a0:	46bd      	mov	sp, r7
 801a0a2:	bc80      	pop	{r7}
 801a0a4:	4770      	bx	lr

0801a0a6 <UTIL_MEM_set_8>:
        *dst8-- = *src8++;
    }
}

void UTIL_MEM_set_8( void *dst, uint8_t value, uint16_t size )
{
 801a0a6:	b480      	push	{r7}
 801a0a8:	b085      	sub	sp, #20
 801a0aa:	af00      	add	r7, sp, #0
 801a0ac:	6078      	str	r0, [r7, #4]
 801a0ae:	460b      	mov	r3, r1
 801a0b0:	70fb      	strb	r3, [r7, #3]
 801a0b2:	4613      	mov	r3, r2
 801a0b4:	803b      	strh	r3, [r7, #0]
  uint8_t* dst8= (uint8_t *) dst;
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	60fb      	str	r3, [r7, #12]
  while( size-- )
 801a0ba:	e004      	b.n	801a0c6 <UTIL_MEM_set_8+0x20>
  {
    *dst8++ = value;
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	1c5a      	adds	r2, r3, #1
 801a0c0:	60fa      	str	r2, [r7, #12]
 801a0c2:	78fa      	ldrb	r2, [r7, #3]
 801a0c4:	701a      	strb	r2, [r3, #0]
  while( size-- )
 801a0c6:	883b      	ldrh	r3, [r7, #0]
 801a0c8:	1e5a      	subs	r2, r3, #1
 801a0ca:	803a      	strh	r2, [r7, #0]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d1f5      	bne.n	801a0bc <UTIL_MEM_set_8+0x16>
  }
}
 801a0d0:	bf00      	nop
 801a0d2:	bf00      	nop
 801a0d4:	3714      	adds	r7, #20
 801a0d6:	46bd      	mov	sp, r7
 801a0d8:	bc80      	pop	{r7}
 801a0da:	4770      	bx	lr

0801a0dc <SysTimeAdd>:
  * @addtogroup SYSTIME_exported_function
  *  @{
  */

SysTime_t SysTimeAdd( SysTime_t a, SysTime_t b )
{
 801a0dc:	b082      	sub	sp, #8
 801a0de:	b480      	push	{r7}
 801a0e0:	b087      	sub	sp, #28
 801a0e2:	af00      	add	r7, sp, #0
 801a0e4:	60f8      	str	r0, [r7, #12]
 801a0e6:	1d38      	adds	r0, r7, #4
 801a0e8:	e880 0006 	stmia.w	r0, {r1, r2}
 801a0ec:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c =  { .Seconds = 0, .SubSeconds = 0 };
 801a0ee:	2300      	movs	r3, #0
 801a0f0:	613b      	str	r3, [r7, #16]
 801a0f2:	2300      	movs	r3, #0
 801a0f4:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds + b.Seconds;
 801a0f6:	687a      	ldr	r2, [r7, #4]
 801a0f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a0fa:	4413      	add	r3, r2
 801a0fc:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds + b.SubSeconds;
 801a0fe:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a102:	b29a      	uxth	r2, r3
 801a104:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a108:	b29b      	uxth	r3, r3
 801a10a:	4413      	add	r3, r2
 801a10c:	b29b      	uxth	r3, r3
 801a10e:	b21b      	sxth	r3, r3
 801a110:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds >= 1000 )
 801a112:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a116:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801a11a:	db0a      	blt.n	801a132 <SysTimeAdd+0x56>
  {
    c.Seconds++;
 801a11c:	693b      	ldr	r3, [r7, #16]
 801a11e:	3301      	adds	r3, #1
 801a120:	613b      	str	r3, [r7, #16]
    c.SubSeconds -= 1000;
 801a122:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a126:	b29b      	uxth	r3, r3
 801a128:	f5a3 737a 	sub.w	r3, r3, #1000	@ 0x3e8
 801a12c:	b29b      	uxth	r3, r3
 801a12e:	b21b      	sxth	r3, r3
 801a130:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	461a      	mov	r2, r3
 801a136:	f107 0310 	add.w	r3, r7, #16
 801a13a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a13e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a142:	68f8      	ldr	r0, [r7, #12]
 801a144:	371c      	adds	r7, #28
 801a146:	46bd      	mov	sp, r7
 801a148:	bc80      	pop	{r7}
 801a14a:	b002      	add	sp, #8
 801a14c:	4770      	bx	lr

0801a14e <SysTimeSub>:

SysTime_t SysTimeSub( SysTime_t a, SysTime_t b )
{
 801a14e:	b082      	sub	sp, #8
 801a150:	b480      	push	{r7}
 801a152:	b087      	sub	sp, #28
 801a154:	af00      	add	r7, sp, #0
 801a156:	60f8      	str	r0, [r7, #12]
 801a158:	1d38      	adds	r0, r7, #4
 801a15a:	e880 0006 	stmia.w	r0, {r1, r2}
 801a15e:	627b      	str	r3, [r7, #36]	@ 0x24
  SysTime_t c = { .Seconds = 0, .SubSeconds = 0 };
 801a160:	2300      	movs	r3, #0
 801a162:	613b      	str	r3, [r7, #16]
 801a164:	2300      	movs	r3, #0
 801a166:	82bb      	strh	r3, [r7, #20]

  c.Seconds = a.Seconds - b.Seconds;
 801a168:	687a      	ldr	r2, [r7, #4]
 801a16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a16c:	1ad3      	subs	r3, r2, r3
 801a16e:	613b      	str	r3, [r7, #16]
  c.SubSeconds = a.SubSeconds - b.SubSeconds;
 801a170:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 801a174:	b29a      	uxth	r2, r3
 801a176:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 801a17a:	b29b      	uxth	r3, r3
 801a17c:	1ad3      	subs	r3, r2, r3
 801a17e:	b29b      	uxth	r3, r3
 801a180:	b21b      	sxth	r3, r3
 801a182:	82bb      	strh	r3, [r7, #20]
  if( c.SubSeconds < 0 )
 801a184:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a188:	2b00      	cmp	r3, #0
 801a18a:	da0a      	bge.n	801a1a2 <SysTimeSub+0x54>
  {
    c.Seconds--;
 801a18c:	693b      	ldr	r3, [r7, #16]
 801a18e:	3b01      	subs	r3, #1
 801a190:	613b      	str	r3, [r7, #16]
    c.SubSeconds += 1000;
 801a192:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 801a196:	b29b      	uxth	r3, r3
 801a198:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 801a19c:	b29b      	uxth	r3, r3
 801a19e:	b21b      	sxth	r3, r3
 801a1a0:	82bb      	strh	r3, [r7, #20]
  }
  return c;
 801a1a2:	68fb      	ldr	r3, [r7, #12]
 801a1a4:	461a      	mov	r2, r3
 801a1a6:	f107 0310 	add.w	r3, r7, #16
 801a1aa:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a1ae:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a1b2:	68f8      	ldr	r0, [r7, #12]
 801a1b4:	371c      	adds	r7, #28
 801a1b6:	46bd      	mov	sp, r7
 801a1b8:	bc80      	pop	{r7}
 801a1ba:	b002      	add	sp, #8
 801a1bc:	4770      	bx	lr
	...

0801a1c0 <SysTimeSet>:

void SysTimeSet( SysTime_t sysTime )
{
 801a1c0:	b580      	push	{r7, lr}
 801a1c2:	b088      	sub	sp, #32
 801a1c4:	af02      	add	r7, sp, #8
 801a1c6:	463b      	mov	r3, r7
 801a1c8:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;

  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a1cc:	2300      	movs	r3, #0
 801a1ce:	60bb      	str	r3, [r7, #8]
 801a1d0:	2300      	movs	r3, #0
 801a1d2:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a1d4:	4b10      	ldr	r3, [pc, #64]	@ (801a218 <SysTimeSet+0x58>)
 801a1d6:	691b      	ldr	r3, [r3, #16]
 801a1d8:	f107 0208 	add.w	r2, r7, #8
 801a1dc:	3204      	adds	r2, #4
 801a1de:	4610      	mov	r0, r2
 801a1e0:	4798      	blx	r3
 801a1e2:	4603      	mov	r3, r0
 801a1e4:	60bb      	str	r3, [r7, #8]

  // sysTime is UNIX epoch
  DeltaTime = SysTimeSub( sysTime, calendarTime );
 801a1e6:	f107 0010 	add.w	r0, r7, #16
 801a1ea:	68fb      	ldr	r3, [r7, #12]
 801a1ec:	9300      	str	r3, [sp, #0]
 801a1ee:	68bb      	ldr	r3, [r7, #8]
 801a1f0:	463a      	mov	r2, r7
 801a1f2:	ca06      	ldmia	r2, {r1, r2}
 801a1f4:	f7ff ffab 	bl	801a14e <SysTimeSub>

  UTIL_SYSTIMDriver.BKUPWrite_Seconds( DeltaTime.Seconds );
 801a1f8:	4b07      	ldr	r3, [pc, #28]	@ (801a218 <SysTimeSet+0x58>)
 801a1fa:	681b      	ldr	r3, [r3, #0]
 801a1fc:	693a      	ldr	r2, [r7, #16]
 801a1fe:	4610      	mov	r0, r2
 801a200:	4798      	blx	r3
  UTIL_SYSTIMDriver.BKUPWrite_SubSeconds( ( uint32_t ) DeltaTime.SubSeconds );
 801a202:	4b05      	ldr	r3, [pc, #20]	@ (801a218 <SysTimeSet+0x58>)
 801a204:	689b      	ldr	r3, [r3, #8]
 801a206:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 801a20a:	4610      	mov	r0, r2
 801a20c:	4798      	blx	r3
}
 801a20e:	bf00      	nop
 801a210:	3718      	adds	r7, #24
 801a212:	46bd      	mov	sp, r7
 801a214:	bd80      	pop	{r7, pc}
 801a216:	bf00      	nop
 801a218:	0801c16c 	.word	0x0801c16c

0801a21c <SysTimeGet>:

SysTime_t SysTimeGet( void )
{
 801a21c:	b580      	push	{r7, lr}
 801a21e:	b08a      	sub	sp, #40	@ 0x28
 801a220:	af02      	add	r7, sp, #8
 801a222:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a224:	2300      	movs	r3, #0
 801a226:	61bb      	str	r3, [r7, #24]
 801a228:	2300      	movs	r3, #0
 801a22a:	83bb      	strh	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = 0, .SubSeconds = 0 };
 801a22c:	2300      	movs	r3, #0
 801a22e:	613b      	str	r3, [r7, #16]
 801a230:	2300      	movs	r3, #0
 801a232:	82bb      	strh	r3, [r7, #20]
  SysTime_t DeltaTime;

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a234:	4b14      	ldr	r3, [pc, #80]	@ (801a288 <SysTimeGet+0x6c>)
 801a236:	691b      	ldr	r3, [r3, #16]
 801a238:	f107 0218 	add.w	r2, r7, #24
 801a23c:	3204      	adds	r2, #4
 801a23e:	4610      	mov	r0, r2
 801a240:	4798      	blx	r3
 801a242:	4603      	mov	r3, r0
 801a244:	61bb      	str	r3, [r7, #24]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a246:	4b10      	ldr	r3, [pc, #64]	@ (801a288 <SysTimeGet+0x6c>)
 801a248:	68db      	ldr	r3, [r3, #12]
 801a24a:	4798      	blx	r3
 801a24c:	4603      	mov	r3, r0
 801a24e:	b21b      	sxth	r3, r3
 801a250:	81bb      	strh	r3, [r7, #12]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a252:	4b0d      	ldr	r3, [pc, #52]	@ (801a288 <SysTimeGet+0x6c>)
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	4798      	blx	r3
 801a258:	4603      	mov	r3, r0
 801a25a:	60bb      	str	r3, [r7, #8]

  sysTime = SysTimeAdd( DeltaTime, calendarTime );
 801a25c:	f107 0010 	add.w	r0, r7, #16
 801a260:	69fb      	ldr	r3, [r7, #28]
 801a262:	9300      	str	r3, [sp, #0]
 801a264:	69bb      	ldr	r3, [r7, #24]
 801a266:	f107 0208 	add.w	r2, r7, #8
 801a26a:	ca06      	ldmia	r2, {r1, r2}
 801a26c:	f7ff ff36 	bl	801a0dc <SysTimeAdd>

  return sysTime;
 801a270:	687b      	ldr	r3, [r7, #4]
 801a272:	461a      	mov	r2, r3
 801a274:	f107 0310 	add.w	r3, r7, #16
 801a278:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a27c:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a280:	6878      	ldr	r0, [r7, #4]
 801a282:	3720      	adds	r7, #32
 801a284:	46bd      	mov	sp, r7
 801a286:	bd80      	pop	{r7, pc}
 801a288:	0801c16c 	.word	0x0801c16c

0801a28c <SysTimeGetMcuTime>:


SysTime_t SysTimeGetMcuTime( void )
{
 801a28c:	b580      	push	{r7, lr}
 801a28e:	b084      	sub	sp, #16
 801a290:	af00      	add	r7, sp, #0
 801a292:	6078      	str	r0, [r7, #4]
  SysTime_t calendarTime = { .Seconds = 0, .SubSeconds = 0 };
 801a294:	2300      	movs	r3, #0
 801a296:	60bb      	str	r3, [r7, #8]
 801a298:	2300      	movs	r3, #0
 801a29a:	81bb      	strh	r3, [r7, #12]

  calendarTime.Seconds = UTIL_SYSTIMDriver.GetCalendarTime( ( uint16_t* )&calendarTime.SubSeconds );
 801a29c:	4b0a      	ldr	r3, [pc, #40]	@ (801a2c8 <SysTimeGetMcuTime+0x3c>)
 801a29e:	691b      	ldr	r3, [r3, #16]
 801a2a0:	f107 0208 	add.w	r2, r7, #8
 801a2a4:	3204      	adds	r2, #4
 801a2a6:	4610      	mov	r0, r2
 801a2a8:	4798      	blx	r3
 801a2aa:	4603      	mov	r3, r0
 801a2ac:	60bb      	str	r3, [r7, #8]

  return calendarTime;
 801a2ae:	687b      	ldr	r3, [r7, #4]
 801a2b0:	461a      	mov	r2, r3
 801a2b2:	f107 0308 	add.w	r3, r7, #8
 801a2b6:	e893 0003 	ldmia.w	r3, {r0, r1}
 801a2ba:	e882 0003 	stmia.w	r2, {r0, r1}
}
 801a2be:	6878      	ldr	r0, [r7, #4]
 801a2c0:	3710      	adds	r7, #16
 801a2c2:	46bd      	mov	sp, r7
 801a2c4:	bd80      	pop	{r7, pc}
 801a2c6:	bf00      	nop
 801a2c8:	0801c16c 	.word	0x0801c16c

0801a2cc <SysTimeToMs>:

uint32_t SysTimeToMs( SysTime_t sysTime )
{
 801a2cc:	b580      	push	{r7, lr}
 801a2ce:	b088      	sub	sp, #32
 801a2d0:	af02      	add	r7, sp, #8
 801a2d2:	463b      	mov	r3, r7
 801a2d4:	e883 0003 	stmia.w	r3, {r0, r1}
  SysTime_t DeltaTime;
  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a2d8:	4b0f      	ldr	r3, [pc, #60]	@ (801a318 <SysTimeToMs+0x4c>)
 801a2da:	68db      	ldr	r3, [r3, #12]
 801a2dc:	4798      	blx	r3
 801a2de:	4603      	mov	r3, r0
 801a2e0:	b21b      	sxth	r3, r3
 801a2e2:	82bb      	strh	r3, [r7, #20]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a2e4:	4b0c      	ldr	r3, [pc, #48]	@ (801a318 <SysTimeToMs+0x4c>)
 801a2e6:	685b      	ldr	r3, [r3, #4]
 801a2e8:	4798      	blx	r3
 801a2ea:	4603      	mov	r3, r0
 801a2ec:	613b      	str	r3, [r7, #16]

  SysTime_t calendarTime = SysTimeSub( sysTime, DeltaTime );
 801a2ee:	f107 0008 	add.w	r0, r7, #8
 801a2f2:	697b      	ldr	r3, [r7, #20]
 801a2f4:	9300      	str	r3, [sp, #0]
 801a2f6:	693b      	ldr	r3, [r7, #16]
 801a2f8:	463a      	mov	r2, r7
 801a2fa:	ca06      	ldmia	r2, {r1, r2}
 801a2fc:	f7ff ff27 	bl	801a14e <SysTimeSub>
  return calendarTime.Seconds * 1000 + calendarTime.SubSeconds;
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801a306:	fb02 f303 	mul.w	r3, r2, r3
 801a30a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 801a30e:	4413      	add	r3, r2
}
 801a310:	4618      	mov	r0, r3
 801a312:	3718      	adds	r7, #24
 801a314:	46bd      	mov	sp, r7
 801a316:	bd80      	pop	{r7, pc}
 801a318:	0801c16c 	.word	0x0801c16c

0801a31c <SysTimeFromMs>:

SysTime_t SysTimeFromMs( uint32_t timeMs )
{
 801a31c:	b580      	push	{r7, lr}
 801a31e:	b08a      	sub	sp, #40	@ 0x28
 801a320:	af02      	add	r7, sp, #8
 801a322:	6078      	str	r0, [r7, #4]
 801a324:	6039      	str	r1, [r7, #0]
  uint32_t seconds = timeMs / 1000;
 801a326:	683b      	ldr	r3, [r7, #0]
 801a328:	4a19      	ldr	r2, [pc, #100]	@ (801a390 <SysTimeFromMs+0x74>)
 801a32a:	fba2 2303 	umull	r2, r3, r2, r3
 801a32e:	099b      	lsrs	r3, r3, #6
 801a330:	61fb      	str	r3, [r7, #28]
  SysTime_t sysTime = { .Seconds = seconds, .SubSeconds =  timeMs - seconds * 1000 };
 801a332:	69fb      	ldr	r3, [r7, #28]
 801a334:	617b      	str	r3, [r7, #20]
 801a336:	683b      	ldr	r3, [r7, #0]
 801a338:	b29a      	uxth	r2, r3
 801a33a:	69fb      	ldr	r3, [r7, #28]
 801a33c:	b29b      	uxth	r3, r3
 801a33e:	4619      	mov	r1, r3
 801a340:	0149      	lsls	r1, r1, #5
 801a342:	1ac9      	subs	r1, r1, r3
 801a344:	0089      	lsls	r1, r1, #2
 801a346:	440b      	add	r3, r1
 801a348:	00db      	lsls	r3, r3, #3
 801a34a:	b29b      	uxth	r3, r3
 801a34c:	1ad3      	subs	r3, r2, r3
 801a34e:	b29b      	uxth	r3, r3
 801a350:	b21b      	sxth	r3, r3
 801a352:	833b      	strh	r3, [r7, #24]
  SysTime_t DeltaTime = { 0 };
 801a354:	f107 030c 	add.w	r3, r7, #12
 801a358:	2200      	movs	r2, #0
 801a35a:	601a      	str	r2, [r3, #0]
 801a35c:	605a      	str	r2, [r3, #4]

  DeltaTime.SubSeconds = (int16_t)UTIL_SYSTIMDriver.BKUPRead_SubSeconds();
 801a35e:	4b0d      	ldr	r3, [pc, #52]	@ (801a394 <SysTimeFromMs+0x78>)
 801a360:	68db      	ldr	r3, [r3, #12]
 801a362:	4798      	blx	r3
 801a364:	4603      	mov	r3, r0
 801a366:	b21b      	sxth	r3, r3
 801a368:	823b      	strh	r3, [r7, #16]
  DeltaTime.Seconds = UTIL_SYSTIMDriver.BKUPRead_Seconds();
 801a36a:	4b0a      	ldr	r3, [pc, #40]	@ (801a394 <SysTimeFromMs+0x78>)
 801a36c:	685b      	ldr	r3, [r3, #4]
 801a36e:	4798      	blx	r3
 801a370:	4603      	mov	r3, r0
 801a372:	60fb      	str	r3, [r7, #12]
  return SysTimeAdd( sysTime, DeltaTime );
 801a374:	6878      	ldr	r0, [r7, #4]
 801a376:	693b      	ldr	r3, [r7, #16]
 801a378:	9300      	str	r3, [sp, #0]
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	f107 0214 	add.w	r2, r7, #20
 801a380:	ca06      	ldmia	r2, {r1, r2}
 801a382:	f7ff feab 	bl	801a0dc <SysTimeAdd>
}
 801a386:	6878      	ldr	r0, [r7, #4]
 801a388:	3720      	adds	r7, #32
 801a38a:	46bd      	mov	sp, r7
 801a38c:	bd80      	pop	{r7, pc}
 801a38e:	bf00      	nop
 801a390:	10624dd3 	.word	0x10624dd3
 801a394:	0801c16c 	.word	0x0801c16c

0801a398 <ee_skip_atoi>:
  return sc - s;
}
#endif

static int ee_skip_atoi(const char **s)
{
 801a398:	b480      	push	{r7}
 801a39a:	b085      	sub	sp, #20
 801a39c:	af00      	add	r7, sp, #0
 801a39e:	6078      	str	r0, [r7, #4]
  int i = 0;
 801a3a0:	2300      	movs	r3, #0
 801a3a2:	60fb      	str	r3, [r7, #12]
  while (is_digit(**s)) i = i*10 + *((*s)++) - '0';
 801a3a4:	e00e      	b.n	801a3c4 <ee_skip_atoi+0x2c>
 801a3a6:	68fa      	ldr	r2, [r7, #12]
 801a3a8:	4613      	mov	r3, r2
 801a3aa:	009b      	lsls	r3, r3, #2
 801a3ac:	4413      	add	r3, r2
 801a3ae:	005b      	lsls	r3, r3, #1
 801a3b0:	4618      	mov	r0, r3
 801a3b2:	687b      	ldr	r3, [r7, #4]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	1c59      	adds	r1, r3, #1
 801a3b8:	687a      	ldr	r2, [r7, #4]
 801a3ba:	6011      	str	r1, [r2, #0]
 801a3bc:	781b      	ldrb	r3, [r3, #0]
 801a3be:	4403      	add	r3, r0
 801a3c0:	3b30      	subs	r3, #48	@ 0x30
 801a3c2:	60fb      	str	r3, [r7, #12]
 801a3c4:	687b      	ldr	r3, [r7, #4]
 801a3c6:	681b      	ldr	r3, [r3, #0]
 801a3c8:	781b      	ldrb	r3, [r3, #0]
 801a3ca:	2b2f      	cmp	r3, #47	@ 0x2f
 801a3cc:	d904      	bls.n	801a3d8 <ee_skip_atoi+0x40>
 801a3ce:	687b      	ldr	r3, [r7, #4]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	781b      	ldrb	r3, [r3, #0]
 801a3d4:	2b39      	cmp	r3, #57	@ 0x39
 801a3d6:	d9e6      	bls.n	801a3a6 <ee_skip_atoi+0xe>
  return i;
 801a3d8:	68fb      	ldr	r3, [r7, #12]
}
 801a3da:	4618      	mov	r0, r3
 801a3dc:	3714      	adds	r7, #20
 801a3de:	46bd      	mov	sp, r7
 801a3e0:	bc80      	pop	{r7}
 801a3e2:	4770      	bx	lr

0801a3e4 <ee_number>:

#define ASSIGN_STR(_c)  do { *str++ = (_c); max_size--; if (max_size == 0) return str; } while (0)

static char *ee_number(char *str, int max_size, long num, int base, int size, int precision, int type)
{
 801a3e4:	b480      	push	{r7}
 801a3e6:	b099      	sub	sp, #100	@ 0x64
 801a3e8:	af00      	add	r7, sp, #0
 801a3ea:	60f8      	str	r0, [r7, #12]
 801a3ec:	60b9      	str	r1, [r7, #8]
 801a3ee:	607a      	str	r2, [r7, #4]
 801a3f0:	603b      	str	r3, [r7, #0]
  char c;
  char sign, tmp[66];
  char *dig = lower_digits;
 801a3f2:	4b71      	ldr	r3, [pc, #452]	@ (801a5b8 <ee_number+0x1d4>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	65bb      	str	r3, [r7, #88]	@ 0x58
  int i;

  if (type & UPPERCASE)  dig = upper_digits;
 801a3f8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a3fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d002      	beq.n	801a408 <ee_number+0x24>
 801a402:	4b6e      	ldr	r3, [pc, #440]	@ (801a5bc <ee_number+0x1d8>)
 801a404:	681b      	ldr	r3, [r3, #0]
 801a406:	65bb      	str	r3, [r7, #88]	@ 0x58
#ifdef TINY_PRINTF
#else
  if (type & LEFT) type &= ~ZEROPAD;
#endif
  if (base < 2 || base > 36) return 0;
 801a408:	683b      	ldr	r3, [r7, #0]
 801a40a:	2b01      	cmp	r3, #1
 801a40c:	dd02      	ble.n	801a414 <ee_number+0x30>
 801a40e:	683b      	ldr	r3, [r7, #0]
 801a410:	2b24      	cmp	r3, #36	@ 0x24
 801a412:	dd01      	ble.n	801a418 <ee_number+0x34>
 801a414:	2300      	movs	r3, #0
 801a416:	e0ca      	b.n	801a5ae <ee_number+0x1ca>

  c = (type & ZEROPAD) ? '0' : ' ';
 801a418:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a41a:	f003 0301 	and.w	r3, r3, #1
 801a41e:	2b00      	cmp	r3, #0
 801a420:	d001      	beq.n	801a426 <ee_number+0x42>
 801a422:	2330      	movs	r3, #48	@ 0x30
 801a424:	e000      	b.n	801a428 <ee_number+0x44>
 801a426:	2320      	movs	r3, #32
 801a428:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
  sign = 0;
 801a42c:	2300      	movs	r3, #0
 801a42e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
  if (type & SIGN)
 801a432:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a434:	f003 0302 	and.w	r3, r3, #2
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d00b      	beq.n	801a454 <ee_number+0x70>
  {
    if (num < 0)
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2b00      	cmp	r3, #0
 801a440:	da08      	bge.n	801a454 <ee_number+0x70>
    {
      sign = '-';
 801a442:	232d      	movs	r3, #45	@ 0x2d
 801a444:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
      num = -num;
 801a448:	687b      	ldr	r3, [r7, #4]
 801a44a:	425b      	negs	r3, r3
 801a44c:	607b      	str	r3, [r7, #4]
      size--;
 801a44e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a450:	3b01      	subs	r3, #1
 801a452:	66bb      	str	r3, [r7, #104]	@ 0x68
    else if (base == 8)
      size--;
  }
#endif

  i = 0;
 801a454:	2300      	movs	r3, #0
 801a456:	657b      	str	r3, [r7, #84]	@ 0x54

  if (num == 0)
 801a458:	687b      	ldr	r3, [r7, #4]
 801a45a:	2b00      	cmp	r3, #0
 801a45c:	d11e      	bne.n	801a49c <ee_number+0xb8>
    tmp[i++] = '0';
 801a45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a460:	1c5a      	adds	r2, r3, #1
 801a462:	657a      	str	r2, [r7, #84]	@ 0x54
 801a464:	3360      	adds	r3, #96	@ 0x60
 801a466:	443b      	add	r3, r7
 801a468:	2230      	movs	r2, #48	@ 0x30
 801a46a:	f803 2c50 	strb.w	r2, [r3, #-80]
 801a46e:	e018      	b.n	801a4a2 <ee_number+0xbe>
  else
  {
    while (num != 0)
    {
      tmp[i++] = dig[((unsigned long) num) % (unsigned) base];
 801a470:	687b      	ldr	r3, [r7, #4]
 801a472:	683a      	ldr	r2, [r7, #0]
 801a474:	fbb3 f1f2 	udiv	r1, r3, r2
 801a478:	fb01 f202 	mul.w	r2, r1, r2
 801a47c:	1a9b      	subs	r3, r3, r2
 801a47e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a480:	441a      	add	r2, r3
 801a482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a484:	1c59      	adds	r1, r3, #1
 801a486:	6579      	str	r1, [r7, #84]	@ 0x54
 801a488:	7812      	ldrb	r2, [r2, #0]
 801a48a:	3360      	adds	r3, #96	@ 0x60
 801a48c:	443b      	add	r3, r7
 801a48e:	f803 2c50 	strb.w	r2, [r3, #-80]
      num = ((unsigned long) num) / (unsigned) base;
 801a492:	687a      	ldr	r2, [r7, #4]
 801a494:	683b      	ldr	r3, [r7, #0]
 801a496:	fbb2 f3f3 	udiv	r3, r2, r3
 801a49a:	607b      	str	r3, [r7, #4]
    while (num != 0)
 801a49c:	687b      	ldr	r3, [r7, #4]
 801a49e:	2b00      	cmp	r3, #0
 801a4a0:	d1e6      	bne.n	801a470 <ee_number+0x8c>
    }
  }

  if (i > precision) precision = i;
 801a4a2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a4a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a4a6:	429a      	cmp	r2, r3
 801a4a8:	dd01      	ble.n	801a4ae <ee_number+0xca>
 801a4aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a4ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
  size -= precision;
 801a4ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801a4b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a4b2:	1ad3      	subs	r3, r2, r3
 801a4b4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (!(type & (ZEROPAD /* TINY option   | LEFT */))) while (size-- > 0) ASSIGN_STR(' ');
 801a4b6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a4b8:	f003 0301 	and.w	r3, r3, #1
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	d112      	bne.n	801a4e6 <ee_number+0x102>
 801a4c0:	e00c      	b.n	801a4dc <ee_number+0xf8>
 801a4c2:	68fb      	ldr	r3, [r7, #12]
 801a4c4:	1c5a      	adds	r2, r3, #1
 801a4c6:	60fa      	str	r2, [r7, #12]
 801a4c8:	2220      	movs	r2, #32
 801a4ca:	701a      	strb	r2, [r3, #0]
 801a4cc:	68bb      	ldr	r3, [r7, #8]
 801a4ce:	3b01      	subs	r3, #1
 801a4d0:	60bb      	str	r3, [r7, #8]
 801a4d2:	68bb      	ldr	r3, [r7, #8]
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d101      	bne.n	801a4dc <ee_number+0xf8>
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	e068      	b.n	801a5ae <ee_number+0x1ca>
 801a4dc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a4de:	1e5a      	subs	r2, r3, #1
 801a4e0:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a4e2:	2b00      	cmp	r3, #0
 801a4e4:	dced      	bgt.n	801a4c2 <ee_number+0xde>
  if (sign) ASSIGN_STR(sign);
 801a4e6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 801a4ea:	2b00      	cmp	r3, #0
 801a4ec:	d01b      	beq.n	801a526 <ee_number+0x142>
 801a4ee:	68fb      	ldr	r3, [r7, #12]
 801a4f0:	1c5a      	adds	r2, r3, #1
 801a4f2:	60fa      	str	r2, [r7, #12]
 801a4f4:	f897 205f 	ldrb.w	r2, [r7, #95]	@ 0x5f
 801a4f8:	701a      	strb	r2, [r3, #0]
 801a4fa:	68bb      	ldr	r3, [r7, #8]
 801a4fc:	3b01      	subs	r3, #1
 801a4fe:	60bb      	str	r3, [r7, #8]
 801a500:	68bb      	ldr	r3, [r7, #8]
 801a502:	2b00      	cmp	r3, #0
 801a504:	d10f      	bne.n	801a526 <ee_number+0x142>
 801a506:	68fb      	ldr	r3, [r7, #12]
 801a508:	e051      	b.n	801a5ae <ee_number+0x1ca>
    }
  }
#endif

#ifdef TINY_PRINTF
  while (size-- > 0) ASSIGN_STR(c);
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	1c5a      	adds	r2, r3, #1
 801a50e:	60fa      	str	r2, [r7, #12]
 801a510:	f897 2053 	ldrb.w	r2, [r7, #83]	@ 0x53
 801a514:	701a      	strb	r2, [r3, #0]
 801a516:	68bb      	ldr	r3, [r7, #8]
 801a518:	3b01      	subs	r3, #1
 801a51a:	60bb      	str	r3, [r7, #8]
 801a51c:	68bb      	ldr	r3, [r7, #8]
 801a51e:	2b00      	cmp	r3, #0
 801a520:	d101      	bne.n	801a526 <ee_number+0x142>
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	e043      	b.n	801a5ae <ee_number+0x1ca>
 801a526:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a528:	1e5a      	subs	r2, r3, #1
 801a52a:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a52c:	2b00      	cmp	r3, #0
 801a52e:	dcec      	bgt.n	801a50a <ee_number+0x126>
#else
  if (!(type & LEFT)) while (size-- > 0) ASSIGN_STR(c);
#endif
  while (i < precision--) ASSIGN_STR('0');
 801a530:	e00c      	b.n	801a54c <ee_number+0x168>
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	1c5a      	adds	r2, r3, #1
 801a536:	60fa      	str	r2, [r7, #12]
 801a538:	2230      	movs	r2, #48	@ 0x30
 801a53a:	701a      	strb	r2, [r3, #0]
 801a53c:	68bb      	ldr	r3, [r7, #8]
 801a53e:	3b01      	subs	r3, #1
 801a540:	60bb      	str	r3, [r7, #8]
 801a542:	68bb      	ldr	r3, [r7, #8]
 801a544:	2b00      	cmp	r3, #0
 801a546:	d101      	bne.n	801a54c <ee_number+0x168>
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	e030      	b.n	801a5ae <ee_number+0x1ca>
 801a54c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a54e:	1e5a      	subs	r2, r3, #1
 801a550:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801a552:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a554:	429a      	cmp	r2, r3
 801a556:	dbec      	blt.n	801a532 <ee_number+0x14e>
  while (i-- > 0) ASSIGN_STR(tmp[i]);
 801a558:	e010      	b.n	801a57c <ee_number+0x198>
 801a55a:	68fb      	ldr	r3, [r7, #12]
 801a55c:	1c5a      	adds	r2, r3, #1
 801a55e:	60fa      	str	r2, [r7, #12]
 801a560:	f107 0110 	add.w	r1, r7, #16
 801a564:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a566:	440a      	add	r2, r1
 801a568:	7812      	ldrb	r2, [r2, #0]
 801a56a:	701a      	strb	r2, [r3, #0]
 801a56c:	68bb      	ldr	r3, [r7, #8]
 801a56e:	3b01      	subs	r3, #1
 801a570:	60bb      	str	r3, [r7, #8]
 801a572:	68bb      	ldr	r3, [r7, #8]
 801a574:	2b00      	cmp	r3, #0
 801a576:	d101      	bne.n	801a57c <ee_number+0x198>
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	e018      	b.n	801a5ae <ee_number+0x1ca>
 801a57c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a57e:	1e5a      	subs	r2, r3, #1
 801a580:	657a      	str	r2, [r7, #84]	@ 0x54
 801a582:	2b00      	cmp	r3, #0
 801a584:	dce9      	bgt.n	801a55a <ee_number+0x176>
  while (size-- > 0) ASSIGN_STR(' ');
 801a586:	e00c      	b.n	801a5a2 <ee_number+0x1be>
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	1c5a      	adds	r2, r3, #1
 801a58c:	60fa      	str	r2, [r7, #12]
 801a58e:	2220      	movs	r2, #32
 801a590:	701a      	strb	r2, [r3, #0]
 801a592:	68bb      	ldr	r3, [r7, #8]
 801a594:	3b01      	subs	r3, #1
 801a596:	60bb      	str	r3, [r7, #8]
 801a598:	68bb      	ldr	r3, [r7, #8]
 801a59a:	2b00      	cmp	r3, #0
 801a59c:	d101      	bne.n	801a5a2 <ee_number+0x1be>
 801a59e:	68fb      	ldr	r3, [r7, #12]
 801a5a0:	e005      	b.n	801a5ae <ee_number+0x1ca>
 801a5a2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a5a4:	1e5a      	subs	r2, r3, #1
 801a5a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 801a5a8:	2b00      	cmp	r3, #0
 801a5aa:	dced      	bgt.n	801a588 <ee_number+0x1a4>

  return str;
 801a5ac:	68fb      	ldr	r3, [r7, #12]
}
 801a5ae:	4618      	mov	r0, r3
 801a5b0:	3764      	adds	r7, #100	@ 0x64
 801a5b2:	46bd      	mov	sp, r7
 801a5b4:	bc80      	pop	{r7}
 801a5b6:	4770      	bx	lr
 801a5b8:	20000148 	.word	0x20000148
 801a5bc:	2000014c 	.word	0x2000014c

0801a5c0 <tiny_vsnprintf_like>:

#define CHECK_STR_SIZE(_buf, _str, _size) \
  if ((((_str) - (_buf)) >= ((_size)-1))) { break; }

int tiny_vsnprintf_like(char *buf, const int size, const char *fmt, va_list args)
{
 801a5c0:	b580      	push	{r7, lr}
 801a5c2:	b092      	sub	sp, #72	@ 0x48
 801a5c4:	af04      	add	r7, sp, #16
 801a5c6:	60f8      	str	r0, [r7, #12]
 801a5c8:	60b9      	str	r1, [r7, #8]
 801a5ca:	607a      	str	r2, [r7, #4]
 801a5cc:	603b      	str	r3, [r7, #0]

  int field_width;      // Width of output field
  int precision;        // Min. # of digits for integers; max number of chars for from string
  int qualifier;        // 'h', 'l', or 'L' for integer fields

  if (size <= 0)
 801a5ce:	68bb      	ldr	r3, [r7, #8]
 801a5d0:	2b00      	cmp	r3, #0
 801a5d2:	dc01      	bgt.n	801a5d8 <tiny_vsnprintf_like+0x18>
  {
    return 0;
 801a5d4:	2300      	movs	r3, #0
 801a5d6:	e13e      	b.n	801a856 <tiny_vsnprintf_like+0x296>
  }

  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a5d8:	68fb      	ldr	r3, [r7, #12]
 801a5da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a5dc:	e128      	b.n	801a830 <tiny_vsnprintf_like+0x270>
  {
    CHECK_STR_SIZE(buf, str, size);
 801a5de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a5e0:	68fb      	ldr	r3, [r7, #12]
 801a5e2:	1ad2      	subs	r2, r2, r3
 801a5e4:	68bb      	ldr	r3, [r7, #8]
 801a5e6:	3b01      	subs	r3, #1
 801a5e8:	429a      	cmp	r2, r3
 801a5ea:	f280 812e 	bge.w	801a84a <tiny_vsnprintf_like+0x28a>

    if (*fmt != '%')
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	781b      	ldrb	r3, [r3, #0]
 801a5f2:	2b25      	cmp	r3, #37	@ 0x25
 801a5f4:	d006      	beq.n	801a604 <tiny_vsnprintf_like+0x44>
    {
      *str++ = *fmt;
 801a5f6:	687a      	ldr	r2, [r7, #4]
 801a5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a5fa:	1c59      	adds	r1, r3, #1
 801a5fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a5fe:	7812      	ldrb	r2, [r2, #0]
 801a600:	701a      	strb	r2, [r3, #0]
      continue;
 801a602:	e112      	b.n	801a82a <tiny_vsnprintf_like+0x26a>
    }

    // Process flags
    flags = 0;
 801a604:	2300      	movs	r3, #0
 801a606:	623b      	str	r3, [r7, #32]
#ifdef TINY_PRINTF
    /* Support %0, but not %-, %+, %space and %# */
    fmt++;
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	3301      	adds	r3, #1
 801a60c:	607b      	str	r3, [r7, #4]
    if (*fmt == '0')
 801a60e:	687b      	ldr	r3, [r7, #4]
 801a610:	781b      	ldrb	r3, [r3, #0]
 801a612:	2b30      	cmp	r3, #48	@ 0x30
 801a614:	d103      	bne.n	801a61e <tiny_vsnprintf_like+0x5e>
    {
      flags |= ZEROPAD;
 801a616:	6a3b      	ldr	r3, [r7, #32]
 801a618:	f043 0301 	orr.w	r3, r3, #1
 801a61c:	623b      	str	r3, [r7, #32]
      case '0': flags |= ZEROPAD; goto repeat;
    }
#endif

    // Get field width
    field_width = -1;
 801a61e:	f04f 33ff 	mov.w	r3, #4294967295
 801a622:	61fb      	str	r3, [r7, #28]
    if (is_digit(*fmt))
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	781b      	ldrb	r3, [r3, #0]
 801a628:	2b2f      	cmp	r3, #47	@ 0x2f
 801a62a:	d908      	bls.n	801a63e <tiny_vsnprintf_like+0x7e>
 801a62c:	687b      	ldr	r3, [r7, #4]
 801a62e:	781b      	ldrb	r3, [r3, #0]
 801a630:	2b39      	cmp	r3, #57	@ 0x39
 801a632:	d804      	bhi.n	801a63e <tiny_vsnprintf_like+0x7e>
      field_width = ee_skip_atoi(&fmt);
 801a634:	1d3b      	adds	r3, r7, #4
 801a636:	4618      	mov	r0, r3
 801a638:	f7ff feae 	bl	801a398 <ee_skip_atoi>
 801a63c:	61f8      	str	r0, [r7, #28]
      }
    }
#endif

    // Get the precision
    precision = -1;
 801a63e:	f04f 33ff 	mov.w	r3, #4294967295
 801a642:	61bb      	str	r3, [r7, #24]
      if (precision < 0) precision = 0;
    }
#endif

    // Get the conversion qualifier
    qualifier = -1;
 801a644:	f04f 33ff 	mov.w	r3, #4294967295
 801a648:	617b      	str	r3, [r7, #20]
      fmt++;
    }
#endif

    // Default base
    base = 10;
 801a64a:	230a      	movs	r3, #10
 801a64c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (*fmt)
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	781b      	ldrb	r3, [r3, #0]
 801a652:	3b58      	subs	r3, #88	@ 0x58
 801a654:	2b20      	cmp	r3, #32
 801a656:	f200 8094 	bhi.w	801a782 <tiny_vsnprintf_like+0x1c2>
 801a65a:	a201      	add	r2, pc, #4	@ (adr r2, 801a660 <tiny_vsnprintf_like+0xa0>)
 801a65c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801a660:	0801a76b 	.word	0x0801a76b
 801a664:	0801a783 	.word	0x0801a783
 801a668:	0801a783 	.word	0x0801a783
 801a66c:	0801a783 	.word	0x0801a783
 801a670:	0801a783 	.word	0x0801a783
 801a674:	0801a783 	.word	0x0801a783
 801a678:	0801a783 	.word	0x0801a783
 801a67c:	0801a783 	.word	0x0801a783
 801a680:	0801a783 	.word	0x0801a783
 801a684:	0801a783 	.word	0x0801a783
 801a688:	0801a783 	.word	0x0801a783
 801a68c:	0801a6ef 	.word	0x0801a6ef
 801a690:	0801a779 	.word	0x0801a779
 801a694:	0801a783 	.word	0x0801a783
 801a698:	0801a783 	.word	0x0801a783
 801a69c:	0801a783 	.word	0x0801a783
 801a6a0:	0801a783 	.word	0x0801a783
 801a6a4:	0801a779 	.word	0x0801a779
 801a6a8:	0801a783 	.word	0x0801a783
 801a6ac:	0801a783 	.word	0x0801a783
 801a6b0:	0801a783 	.word	0x0801a783
 801a6b4:	0801a783 	.word	0x0801a783
 801a6b8:	0801a783 	.word	0x0801a783
 801a6bc:	0801a783 	.word	0x0801a783
 801a6c0:	0801a783 	.word	0x0801a783
 801a6c4:	0801a783 	.word	0x0801a783
 801a6c8:	0801a783 	.word	0x0801a783
 801a6cc:	0801a70f 	.word	0x0801a70f
 801a6d0:	0801a783 	.word	0x0801a783
 801a6d4:	0801a7cf 	.word	0x0801a7cf
 801a6d8:	0801a783 	.word	0x0801a783
 801a6dc:	0801a783 	.word	0x0801a783
 801a6e0:	0801a773 	.word	0x0801a773
      case 'c':
#ifdef TINY_PRINTF
#else
        if (!(flags & LEFT))
#endif
          while (--field_width > 0) *str++ = ' ';
 801a6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a6e6:	1c5a      	adds	r2, r3, #1
 801a6e8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a6ea:	2220      	movs	r2, #32
 801a6ec:	701a      	strb	r2, [r3, #0]
 801a6ee:	69fb      	ldr	r3, [r7, #28]
 801a6f0:	3b01      	subs	r3, #1
 801a6f2:	61fb      	str	r3, [r7, #28]
 801a6f4:	69fb      	ldr	r3, [r7, #28]
 801a6f6:	2b00      	cmp	r3, #0
 801a6f8:	dcf4      	bgt.n	801a6e4 <tiny_vsnprintf_like+0x124>
        *str++ = (unsigned char) va_arg(args, int);
 801a6fa:	683b      	ldr	r3, [r7, #0]
 801a6fc:	1d1a      	adds	r2, r3, #4
 801a6fe:	603a      	str	r2, [r7, #0]
 801a700:	6819      	ldr	r1, [r3, #0]
 801a702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a704:	1c5a      	adds	r2, r3, #1
 801a706:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a708:	b2ca      	uxtb	r2, r1
 801a70a:	701a      	strb	r2, [r3, #0]
#ifdef TINY_PRINTF
#else
        while (--field_width > 0) *str++ = ' ';
#endif
        continue;
 801a70c:	e08d      	b.n	801a82a <tiny_vsnprintf_like+0x26a>

      case 's':
        s = va_arg(args, char *);
 801a70e:	683b      	ldr	r3, [r7, #0]
 801a710:	1d1a      	adds	r2, r3, #4
 801a712:	603a      	str	r2, [r7, #0]
 801a714:	681b      	ldr	r3, [r3, #0]
 801a716:	627b      	str	r3, [r7, #36]	@ 0x24
        if (!s) s = "<NULL>";
 801a718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a71a:	2b00      	cmp	r3, #0
 801a71c:	d101      	bne.n	801a722 <tiny_vsnprintf_like+0x162>
 801a71e:	4b50      	ldr	r3, [pc, #320]	@ (801a860 <tiny_vsnprintf_like+0x2a0>)
 801a720:	627b      	str	r3, [r7, #36]	@ 0x24
#ifdef TINY_PRINTF
        len = strlen(s);
 801a722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801a724:	f7e5 fd28 	bl	8000178 <strlen>
 801a728:	4603      	mov	r3, r0
 801a72a:	613b      	str	r3, [r7, #16]
#else
        len = strnlen(s, precision);
        if (!(flags & LEFT))
#endif
          while (len < field_width--) *str++ = ' ';
 801a72c:	e004      	b.n	801a738 <tiny_vsnprintf_like+0x178>
 801a72e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a730:	1c5a      	adds	r2, r3, #1
 801a732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a734:	2220      	movs	r2, #32
 801a736:	701a      	strb	r2, [r3, #0]
 801a738:	69fb      	ldr	r3, [r7, #28]
 801a73a:	1e5a      	subs	r2, r3, #1
 801a73c:	61fa      	str	r2, [r7, #28]
 801a73e:	693a      	ldr	r2, [r7, #16]
 801a740:	429a      	cmp	r2, r3
 801a742:	dbf4      	blt.n	801a72e <tiny_vsnprintf_like+0x16e>
        for (i = 0; i < len; ++i) *str++ = *s++;
 801a744:	2300      	movs	r3, #0
 801a746:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a748:	e00a      	b.n	801a760 <tiny_vsnprintf_like+0x1a0>
 801a74a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a74c:	1c53      	adds	r3, r2, #1
 801a74e:	627b      	str	r3, [r7, #36]	@ 0x24
 801a750:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a752:	1c59      	adds	r1, r3, #1
 801a754:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a756:	7812      	ldrb	r2, [r2, #0]
 801a758:	701a      	strb	r2, [r3, #0]
 801a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a75c:	3301      	adds	r3, #1
 801a75e:	62bb      	str	r3, [r7, #40]	@ 0x28
 801a760:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801a762:	693b      	ldr	r3, [r7, #16]
 801a764:	429a      	cmp	r2, r3
 801a766:	dbf0      	blt.n	801a74a <tiny_vsnprintf_like+0x18a>
#ifdef TINY_PRINTF
#else
        while (len < field_width--) *str++ = ' ';
#endif
        continue;
 801a768:	e05f      	b.n	801a82a <tiny_vsnprintf_like+0x26a>
        base = 8;
        break;
#endif

      case 'X':
        flags |= UPPERCASE;
 801a76a:	6a3b      	ldr	r3, [r7, #32]
 801a76c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a770:	623b      	str	r3, [r7, #32]

      case 'x':
        base = 16;
 801a772:	2310      	movs	r3, #16
 801a774:	633b      	str	r3, [r7, #48]	@ 0x30
        break;
 801a776:	e02b      	b.n	801a7d0 <tiny_vsnprintf_like+0x210>

      case 'd':
      case 'i':
        flags |= SIGN;
 801a778:	6a3b      	ldr	r3, [r7, #32]
 801a77a:	f043 0302 	orr.w	r3, r3, #2
 801a77e:	623b      	str	r3, [r7, #32]

      case 'u':
        break;
 801a780:	e025      	b.n	801a7ce <tiny_vsnprintf_like+0x20e>
        continue;

#endif

      default:
        if (*fmt != '%') *str++ = '%';
 801a782:	687b      	ldr	r3, [r7, #4]
 801a784:	781b      	ldrb	r3, [r3, #0]
 801a786:	2b25      	cmp	r3, #37	@ 0x25
 801a788:	d004      	beq.n	801a794 <tiny_vsnprintf_like+0x1d4>
 801a78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a78c:	1c5a      	adds	r2, r3, #1
 801a78e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a790:	2225      	movs	r2, #37	@ 0x25
 801a792:	701a      	strb	r2, [r3, #0]
        CHECK_STR_SIZE(buf, str, size);
 801a794:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a796:	68fb      	ldr	r3, [r7, #12]
 801a798:	1ad2      	subs	r2, r2, r3
 801a79a:	68bb      	ldr	r3, [r7, #8]
 801a79c:	3b01      	subs	r3, #1
 801a79e:	429a      	cmp	r2, r3
 801a7a0:	da16      	bge.n	801a7d0 <tiny_vsnprintf_like+0x210>
        if (*fmt)
 801a7a2:	687b      	ldr	r3, [r7, #4]
 801a7a4:	781b      	ldrb	r3, [r3, #0]
 801a7a6:	2b00      	cmp	r3, #0
 801a7a8:	d006      	beq.n	801a7b8 <tiny_vsnprintf_like+0x1f8>
          *str++ = *fmt;
 801a7aa:	687a      	ldr	r2, [r7, #4]
 801a7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a7ae:	1c59      	adds	r1, r3, #1
 801a7b0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 801a7b2:	7812      	ldrb	r2, [r2, #0]
 801a7b4:	701a      	strb	r2, [r3, #0]
 801a7b6:	e002      	b.n	801a7be <tiny_vsnprintf_like+0x1fe>
        else
          --fmt;
 801a7b8:	687b      	ldr	r3, [r7, #4]
 801a7ba:	3b01      	subs	r3, #1
 801a7bc:	607b      	str	r3, [r7, #4]
        CHECK_STR_SIZE(buf, str, size);
 801a7be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	1ad2      	subs	r2, r2, r3
 801a7c4:	68bb      	ldr	r3, [r7, #8]
 801a7c6:	3b01      	subs	r3, #1
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	db2d      	blt.n	801a828 <tiny_vsnprintf_like+0x268>
 801a7cc:	e000      	b.n	801a7d0 <tiny_vsnprintf_like+0x210>
        break;
 801a7ce:	bf00      	nop
        continue;
    }

    if (qualifier == 'l')
 801a7d0:	697b      	ldr	r3, [r7, #20]
 801a7d2:	2b6c      	cmp	r3, #108	@ 0x6c
 801a7d4:	d105      	bne.n	801a7e2 <tiny_vsnprintf_like+0x222>
      num = va_arg(args, unsigned long);
 801a7d6:	683b      	ldr	r3, [r7, #0]
 801a7d8:	1d1a      	adds	r2, r3, #4
 801a7da:	603a      	str	r2, [r7, #0]
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	637b      	str	r3, [r7, #52]	@ 0x34
 801a7e0:	e00f      	b.n	801a802 <tiny_vsnprintf_like+0x242>
    else if (flags & SIGN)
 801a7e2:	6a3b      	ldr	r3, [r7, #32]
 801a7e4:	f003 0302 	and.w	r3, r3, #2
 801a7e8:	2b00      	cmp	r3, #0
 801a7ea:	d005      	beq.n	801a7f8 <tiny_vsnprintf_like+0x238>
      num = va_arg(args, int);
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	1d1a      	adds	r2, r3, #4
 801a7f0:	603a      	str	r2, [r7, #0]
 801a7f2:	681b      	ldr	r3, [r3, #0]
 801a7f4:	637b      	str	r3, [r7, #52]	@ 0x34
 801a7f6:	e004      	b.n	801a802 <tiny_vsnprintf_like+0x242>
    else
      num = va_arg(args, unsigned int);
 801a7f8:	683b      	ldr	r3, [r7, #0]
 801a7fa:	1d1a      	adds	r2, r3, #4
 801a7fc:	603a      	str	r2, [r7, #0]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	637b      	str	r3, [r7, #52]	@ 0x34

    str = ee_number(str, ((size - 1) - (str - buf)), num, base, field_width, precision, flags);
 801a802:	68bb      	ldr	r3, [r7, #8]
 801a804:	1e5a      	subs	r2, r3, #1
 801a806:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a808:	68fb      	ldr	r3, [r7, #12]
 801a80a:	1acb      	subs	r3, r1, r3
 801a80c:	1ad1      	subs	r1, r2, r3
 801a80e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a810:	6a3b      	ldr	r3, [r7, #32]
 801a812:	9302      	str	r3, [sp, #8]
 801a814:	69bb      	ldr	r3, [r7, #24]
 801a816:	9301      	str	r3, [sp, #4]
 801a818:	69fb      	ldr	r3, [r7, #28]
 801a81a:	9300      	str	r3, [sp, #0]
 801a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a81e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801a820:	f7ff fde0 	bl	801a3e4 <ee_number>
 801a824:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801a826:	e000      	b.n	801a82a <tiny_vsnprintf_like+0x26a>
        continue;
 801a828:	bf00      	nop
  for (str = buf; *fmt || ((str - buf) >= size-1); fmt++)
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	3301      	adds	r3, #1
 801a82e:	607b      	str	r3, [r7, #4]
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	781b      	ldrb	r3, [r3, #0]
 801a834:	2b00      	cmp	r3, #0
 801a836:	f47f aed2 	bne.w	801a5de <tiny_vsnprintf_like+0x1e>
 801a83a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a83c:	68fb      	ldr	r3, [r7, #12]
 801a83e:	1ad2      	subs	r2, r2, r3
 801a840:	68bb      	ldr	r3, [r7, #8]
 801a842:	3b01      	subs	r3, #1
 801a844:	429a      	cmp	r2, r3
 801a846:	f6bf aeca 	bge.w	801a5de <tiny_vsnprintf_like+0x1e>
  }

  *str = '\0';
 801a84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a84c:	2200      	movs	r2, #0
 801a84e:	701a      	strb	r2, [r3, #0]
  return str - buf;
 801a850:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a852:	68fb      	ldr	r3, [r7, #12]
 801a854:	1ad3      	subs	r3, r2, r3
}
 801a856:	4618      	mov	r0, r3
 801a858:	3738      	adds	r7, #56	@ 0x38
 801a85a:	46bd      	mov	sp, r7
 801a85c:	bd80      	pop	{r7, pc}
 801a85e:	bf00      	nop
 801a860:	0801c080 	.word	0x0801c080

0801a864 <UTIL_SEQ_Run>:
 * That is the reason why many variables that are used only in that function are declared static.
 * Note: These variables could have been declared static in the function.
 *
 */
void UTIL_SEQ_Run( UTIL_SEQ_bm_t Mask_bm )
{
 801a864:	b580      	push	{r7, lr}
 801a866:	b090      	sub	sp, #64	@ 0x40
 801a868:	af00      	add	r7, sp, #0
 801a86a:	6078      	str	r0, [r7, #4]
  /*
   * When this function is nested, the mask to be applied cannot be larger than the first call
   * The mask is always getting smaller and smaller
   * A copy is made of the mask set by UTIL_SEQ_Run() in case it is called again in the task
   */
  super_mask_backup = SuperMask;
 801a86c:	4b73      	ldr	r3, [pc, #460]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	62bb      	str	r3, [r7, #40]	@ 0x28
  SuperMask &= Mask_bm;
 801a872:	4b72      	ldr	r3, [pc, #456]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a874:	681a      	ldr	r2, [r3, #0]
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	4013      	ands	r3, r2
 801a87a:	4a70      	ldr	r2, [pc, #448]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a87c:	6013      	str	r3, [r2, #0]
   * TaskMask that comes from UTIL_SEQ_PauseTask() / UTIL_SEQ_ResumeTask
   * SuperMask that comes from UTIL_SEQ_Run
   * If the waited event is there, exit from  UTIL_SEQ_Run() to return to the
   * waiting task
   */
  local_taskset = TaskSet;
 801a87e:	4b70      	ldr	r3, [pc, #448]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a880:	681b      	ldr	r3, [r3, #0]
 801a882:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a884:	4b6f      	ldr	r3, [pc, #444]	@ (801aa44 <UTIL_SEQ_Run+0x1e0>)
 801a886:	681b      	ldr	r3, [r3, #0]
 801a888:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a88a:	4b6f      	ldr	r3, [pc, #444]	@ (801aa48 <UTIL_SEQ_Run+0x1e4>)
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	633b      	str	r3, [r7, #48]	@ 0x30
  local_evtwaited =  EvtWaited;
 801a890:	4b6e      	ldr	r3, [pc, #440]	@ (801aa4c <UTIL_SEQ_Run+0x1e8>)
 801a892:	681b      	ldr	r3, [r3, #0]
 801a894:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a896:	e08d      	b.n	801a9b4 <UTIL_SEQ_Run+0x150>
  {
    counter = 0U;
 801a898:	2300      	movs	r3, #0
 801a89a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    /*
     * When a flag is set, the associated bit is set in TaskPrio[counter].priority mask depending
     * on the priority parameter given from UTIL_SEQ_SetTask()
     * The while loop is looking for a flag set from the highest priority maskr to the lower
     */
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a89c:	e002      	b.n	801a8a4 <UTIL_SEQ_Run+0x40>
    {
      counter++;
 801a89e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8a0:	3301      	adds	r3, #1
 801a8a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while((TaskPrio[counter].priority & local_taskmask & SuperMask)== 0U)
 801a8a4:	4a6a      	ldr	r2, [pc, #424]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8a8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8ae:	401a      	ands	r2, r3
 801a8b0:	4b62      	ldr	r3, [pc, #392]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a8b2:	681b      	ldr	r3, [r3, #0]
 801a8b4:	4013      	ands	r3, r2
 801a8b6:	2b00      	cmp	r3, #0
 801a8b8:	d0f1      	beq.n	801a89e <UTIL_SEQ_Run+0x3a>
    }

    current_task_set = TaskPrio[counter].priority & local_taskmask & SuperMask;
 801a8ba:	4a65      	ldr	r2, [pc, #404]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8be:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801a8c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a8c4:	401a      	ands	r2, r3
 801a8c6:	4b5d      	ldr	r3, [pc, #372]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	4013      	ands	r3, r2
 801a8cc:	627b      	str	r3, [r7, #36]	@ 0x24
     * so that the second one can be executed.
     * Note that the first flag is not removed from the list of pending task but just masked by the round_robin mask
     *
     * In the check below, the round_robin mask is reinitialize in case all pending tasks haven been executed at least once
     */
    if ((TaskPrio[counter].round_robin & current_task_set) == 0U)
 801a8ce:	4a60      	ldr	r2, [pc, #384]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8d2:	00db      	lsls	r3, r3, #3
 801a8d4:	4413      	add	r3, r2
 801a8d6:	685a      	ldr	r2, [r3, #4]
 801a8d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8da:	4013      	ands	r3, r2
 801a8dc:	2b00      	cmp	r3, #0
 801a8de:	d106      	bne.n	801a8ee <UTIL_SEQ_Run+0x8a>
    {
      TaskPrio[counter].round_robin = UTIL_SEQ_ALL_BIT_SET;
 801a8e0:	4a5b      	ldr	r2, [pc, #364]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8e4:	00db      	lsls	r3, r3, #3
 801a8e6:	4413      	add	r3, r2
 801a8e8:	f04f 32ff 	mov.w	r2, #4294967295
 801a8ec:	605a      	str	r2, [r3, #4]
  /*
   * Read the flag index of the task to be executed
	 * Once the index is read, the associated task will be executed even though a higher priority stack is requested
	 * before task execution.
	 */
    CurrentTaskIdx = (SEQ_BitPosition(current_task_set & TaskPrio[counter].round_robin));
 801a8ee:	4a58      	ldr	r2, [pc, #352]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a8f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a8f2:	00db      	lsls	r3, r3, #3
 801a8f4:	4413      	add	r3, r2
 801a8f6:	685a      	ldr	r2, [r3, #4]
 801a8f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8fa:	4013      	ands	r3, r2
 801a8fc:	4618      	mov	r0, r3
 801a8fe:	f000 f907 	bl	801ab10 <SEQ_BitPosition>
 801a902:	4603      	mov	r3, r0
 801a904:	461a      	mov	r2, r3
 801a906:	4b53      	ldr	r3, [pc, #332]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a908:	601a      	str	r2, [r3, #0]

    /*
     * remove from the roun_robin mask the task that has been selected to be executed
     */
    TaskPrio[counter].round_robin &= ~(1U << CurrentTaskIdx);
 801a90a:	4a51      	ldr	r2, [pc, #324]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a90c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a90e:	00db      	lsls	r3, r3, #3
 801a910:	4413      	add	r3, r2
 801a912:	685a      	ldr	r2, [r3, #4]
 801a914:	4b4f      	ldr	r3, [pc, #316]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a916:	681b      	ldr	r3, [r3, #0]
 801a918:	2101      	movs	r1, #1
 801a91a:	fa01 f303 	lsl.w	r3, r1, r3
 801a91e:	43db      	mvns	r3, r3
 801a920:	401a      	ands	r2, r3
 801a922:	494b      	ldr	r1, [pc, #300]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a926:	00db      	lsls	r3, r3, #3
 801a928:	440b      	add	r3, r1
 801a92a:	605a      	str	r2, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a92c:	f3ef 8310 	mrs	r3, PRIMASK
 801a930:	61bb      	str	r3, [r7, #24]
  return(result);
 801a932:	69bb      	ldr	r3, [r7, #24]

    UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801a934:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 801a936:	b672      	cpsid	i
}
 801a938:	bf00      	nop
    /* remove from the list or pending task the one that has been selected to be executed */
    TaskSet &= ~(1U << CurrentTaskIdx);
 801a93a:	4b46      	ldr	r3, [pc, #280]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a93c:	681b      	ldr	r3, [r3, #0]
 801a93e:	2201      	movs	r2, #1
 801a940:	fa02 f303 	lsl.w	r3, r2, r3
 801a944:	43da      	mvns	r2, r3
 801a946:	4b3e      	ldr	r3, [pc, #248]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	4013      	ands	r3, r2
 801a94c:	4a3c      	ldr	r2, [pc, #240]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a94e:	6013      	str	r3, [r2, #0]
    /* remove from all priority mask the task that has been selected to be executed */
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a950:	2301      	movs	r3, #1
 801a952:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a954:	e013      	b.n	801a97e <UTIL_SEQ_Run+0x11a>
    {
      TaskPrio[counter - 1U].priority &= ~(1U << CurrentTaskIdx);
 801a956:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a958:	3b01      	subs	r3, #1
 801a95a:	4a3d      	ldr	r2, [pc, #244]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a95c:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 801a960:	4b3c      	ldr	r3, [pc, #240]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	2201      	movs	r2, #1
 801a966:	fa02 f303 	lsl.w	r3, r2, r3
 801a96a:	43da      	mvns	r2, r3
 801a96c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a96e:	3b01      	subs	r3, #1
 801a970:	400a      	ands	r2, r1
 801a972:	4937      	ldr	r1, [pc, #220]	@ (801aa50 <UTIL_SEQ_Run+0x1ec>)
 801a974:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
    for (counter = UTIL_SEQ_CONF_PRIO_NBR; counter != 0U; counter--)
 801a978:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a97a:	3b01      	subs	r3, #1
 801a97c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801a97e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a980:	2b00      	cmp	r3, #0
 801a982:	d1e8      	bne.n	801a956 <UTIL_SEQ_Run+0xf2>
 801a984:	6a3b      	ldr	r3, [r7, #32]
 801a986:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801a988:	697b      	ldr	r3, [r7, #20]
 801a98a:	f383 8810 	msr	PRIMASK, r3
}
 801a98e:	bf00      	nop
    }
    UTIL_SEQ_EXIT_CRITICAL_SECTION( );

    /* Execute the task */
    TaskCb[CurrentTaskIdx]( );
 801a990:	4b30      	ldr	r3, [pc, #192]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a992:	681b      	ldr	r3, [r3, #0]
 801a994:	4a30      	ldr	r2, [pc, #192]	@ (801aa58 <UTIL_SEQ_Run+0x1f4>)
 801a996:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801a99a:	4798      	blx	r3

    local_taskset = TaskSet;
 801a99c:	4b28      	ldr	r3, [pc, #160]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a99e:	681b      	ldr	r3, [r3, #0]
 801a9a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    local_evtset = EvtSet;
 801a9a2:	4b28      	ldr	r3, [pc, #160]	@ (801aa44 <UTIL_SEQ_Run+0x1e0>)
 801a9a4:	681b      	ldr	r3, [r3, #0]
 801a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
    local_taskmask = TaskMask;
 801a9a8:	4b27      	ldr	r3, [pc, #156]	@ (801aa48 <UTIL_SEQ_Run+0x1e4>)
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	633b      	str	r3, [r7, #48]	@ 0x30
    local_evtwaited = EvtWaited;
 801a9ae:	4b27      	ldr	r3, [pc, #156]	@ (801aa4c <UTIL_SEQ_Run+0x1e8>)
 801a9b0:	681b      	ldr	r3, [r3, #0]
 801a9b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while(((local_taskset & local_taskmask & SuperMask) != 0U) && ((local_evtset & local_evtwaited)==0U))
 801a9b4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a9b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a9b8:	401a      	ands	r2, r3
 801a9ba:	4b20      	ldr	r3, [pc, #128]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801a9bc:	681b      	ldr	r3, [r3, #0]
 801a9be:	4013      	ands	r3, r2
 801a9c0:	2b00      	cmp	r3, #0
 801a9c2:	d005      	beq.n	801a9d0 <UTIL_SEQ_Run+0x16c>
 801a9c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a9c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a9c8:	4013      	ands	r3, r2
 801a9ca:	2b00      	cmp	r3, #0
 801a9cc:	f43f af64 	beq.w	801a898 <UTIL_SEQ_Run+0x34>
  }

  /* the set of CurrentTaskIdx to no task running allows to call WaitEvt in the Pre/Post ilde context */
  CurrentTaskIdx = UTIL_SEQ_NOTASKRUNNING;
 801a9d0:	4b20      	ldr	r3, [pc, #128]	@ (801aa54 <UTIL_SEQ_Run+0x1f0>)
 801a9d2:	f04f 32ff 	mov.w	r2, #4294967295
 801a9d6:	601a      	str	r2, [r3, #0]
  UTIL_SEQ_PreIdle( );
 801a9d8:	f000 f88e 	bl	801aaf8 <UTIL_SEQ_PreIdle>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801a9dc:	f3ef 8310 	mrs	r3, PRIMASK
 801a9e0:	613b      	str	r3, [r7, #16]
  return(result);
 801a9e2:	693b      	ldr	r3, [r7, #16]

  UTIL_SEQ_ENTER_CRITICAL_SECTION_IDLE( );
 801a9e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801a9e6:	b672      	cpsid	i
}
 801a9e8:	bf00      	nop
  local_taskset = TaskSet;
 801a9ea:	4b15      	ldr	r3, [pc, #84]	@ (801aa40 <UTIL_SEQ_Run+0x1dc>)
 801a9ec:	681b      	ldr	r3, [r3, #0]
 801a9ee:	63bb      	str	r3, [r7, #56]	@ 0x38
  local_evtset = EvtSet;
 801a9f0:	4b14      	ldr	r3, [pc, #80]	@ (801aa44 <UTIL_SEQ_Run+0x1e0>)
 801a9f2:	681b      	ldr	r3, [r3, #0]
 801a9f4:	637b      	str	r3, [r7, #52]	@ 0x34
  local_taskmask = TaskMask;
 801a9f6:	4b14      	ldr	r3, [pc, #80]	@ (801aa48 <UTIL_SEQ_Run+0x1e4>)
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	633b      	str	r3, [r7, #48]	@ 0x30
  if ((local_taskset & local_taskmask & SuperMask) == 0U)
 801a9fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801a9fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa00:	401a      	ands	r2, r3
 801aa02:	4b0e      	ldr	r3, [pc, #56]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801aa04:	681b      	ldr	r3, [r3, #0]
 801aa06:	4013      	ands	r3, r2
 801aa08:	2b00      	cmp	r3, #0
 801aa0a:	d107      	bne.n	801aa1c <UTIL_SEQ_Run+0x1b8>
  {
    if ((local_evtset & EvtWaited)== 0U)
 801aa0c:	4b0f      	ldr	r3, [pc, #60]	@ (801aa4c <UTIL_SEQ_Run+0x1e8>)
 801aa0e:	681a      	ldr	r2, [r3, #0]
 801aa10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa12:	4013      	ands	r3, r2
 801aa14:	2b00      	cmp	r3, #0
 801aa16:	d101      	bne.n	801aa1c <UTIL_SEQ_Run+0x1b8>
    {
      UTIL_SEQ_Idle( );
 801aa18:	f7e7 f830 	bl	8001a7c <UTIL_SEQ_Idle>
 801aa1c:	69fb      	ldr	r3, [r7, #28]
 801aa1e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	f383 8810 	msr	PRIMASK, r3
}
 801aa26:	bf00      	nop
    }
  }
  UTIL_SEQ_EXIT_CRITICAL_SECTION_IDLE( );

  UTIL_SEQ_PostIdle( );
 801aa28:	f000 f86c 	bl	801ab04 <UTIL_SEQ_PostIdle>

  /* restore the mask from UTIL_SEQ_Run() */
  SuperMask = super_mask_backup;
 801aa2c:	4a03      	ldr	r2, [pc, #12]	@ (801aa3c <UTIL_SEQ_Run+0x1d8>)
 801aa2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aa30:	6013      	str	r3, [r2, #0]

  return;
 801aa32:	bf00      	nop
}
 801aa34:	3740      	adds	r7, #64	@ 0x40
 801aa36:	46bd      	mov	sp, r7
 801aa38:	bd80      	pop	{r7, pc}
 801aa3a:	bf00      	nop
 801aa3c:	20000154 	.word	0x20000154
 801aa40:	20001b14 	.word	0x20001b14
 801aa44:	20001b18 	.word	0x20001b18
 801aa48:	20000150 	.word	0x20000150
 801aa4c:	20001b1c 	.word	0x20001b1c
 801aa50:	20001b34 	.word	0x20001b34
 801aa54:	20001b20 	.word	0x20001b20
 801aa58:	20001b24 	.word	0x20001b24

0801aa5c <UTIL_SEQ_RegTask>:

void UTIL_SEQ_RegTask(UTIL_SEQ_bm_t TaskId_bm, uint32_t Flags, void (*Task)( void ))
{
 801aa5c:	b580      	push	{r7, lr}
 801aa5e:	b088      	sub	sp, #32
 801aa60:	af00      	add	r7, sp, #0
 801aa62:	60f8      	str	r0, [r7, #12]
 801aa64:	60b9      	str	r1, [r7, #8]
 801aa66:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aa68:	f3ef 8310 	mrs	r3, PRIMASK
 801aa6c:	617b      	str	r3, [r7, #20]
  return(result);
 801aa6e:	697b      	ldr	r3, [r7, #20]
  (void)Flags;
  UTIL_SEQ_ENTER_CRITICAL_SECTION();
 801aa70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801aa72:	b672      	cpsid	i
}
 801aa74:	bf00      	nop

  TaskCb[SEQ_BitPosition(TaskId_bm)] = Task;
 801aa76:	68f8      	ldr	r0, [r7, #12]
 801aa78:	f000 f84a 	bl	801ab10 <SEQ_BitPosition>
 801aa7c:	4603      	mov	r3, r0
 801aa7e:	4619      	mov	r1, r3
 801aa80:	4a06      	ldr	r2, [pc, #24]	@ (801aa9c <UTIL_SEQ_RegTask+0x40>)
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801aa88:	69fb      	ldr	r3, [r7, #28]
 801aa8a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aa8c:	69bb      	ldr	r3, [r7, #24]
 801aa8e:	f383 8810 	msr	PRIMASK, r3
}
 801aa92:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION();

  return;
 801aa94:	bf00      	nop
}
 801aa96:	3720      	adds	r7, #32
 801aa98:	46bd      	mov	sp, r7
 801aa9a:	bd80      	pop	{r7, pc}
 801aa9c:	20001b24 	.word	0x20001b24

0801aaa0 <UTIL_SEQ_SetTask>:

void UTIL_SEQ_SetTask( UTIL_SEQ_bm_t TaskId_bm , uint32_t Task_Prio )
{
 801aaa0:	b480      	push	{r7}
 801aaa2:	b087      	sub	sp, #28
 801aaa4:	af00      	add	r7, sp, #0
 801aaa6:	6078      	str	r0, [r7, #4]
 801aaa8:	6039      	str	r1, [r7, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801aaaa:	f3ef 8310 	mrs	r3, PRIMASK
 801aaae:	60fb      	str	r3, [r7, #12]
  return(result);
 801aab0:	68fb      	ldr	r3, [r7, #12]
  UTIL_SEQ_ENTER_CRITICAL_SECTION( );
 801aab2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801aab4:	b672      	cpsid	i
}
 801aab6:	bf00      	nop

  TaskSet |= TaskId_bm;
 801aab8:	4b0d      	ldr	r3, [pc, #52]	@ (801aaf0 <UTIL_SEQ_SetTask+0x50>)
 801aaba:	681a      	ldr	r2, [r3, #0]
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	4313      	orrs	r3, r2
 801aac0:	4a0b      	ldr	r2, [pc, #44]	@ (801aaf0 <UTIL_SEQ_SetTask+0x50>)
 801aac2:	6013      	str	r3, [r2, #0]
  TaskPrio[Task_Prio].priority |= TaskId_bm;
 801aac4:	4a0b      	ldr	r2, [pc, #44]	@ (801aaf4 <UTIL_SEQ_SetTask+0x54>)
 801aac6:	683b      	ldr	r3, [r7, #0]
 801aac8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 801aacc:	687b      	ldr	r3, [r7, #4]
 801aace:	431a      	orrs	r2, r3
 801aad0:	4908      	ldr	r1, [pc, #32]	@ (801aaf4 <UTIL_SEQ_SetTask+0x54>)
 801aad2:	683b      	ldr	r3, [r7, #0]
 801aad4:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
 801aad8:	697b      	ldr	r3, [r7, #20]
 801aada:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801aadc:	693b      	ldr	r3, [r7, #16]
 801aade:	f383 8810 	msr	PRIMASK, r3
}
 801aae2:	bf00      	nop

  UTIL_SEQ_EXIT_CRITICAL_SECTION( );

  return;
 801aae4:	bf00      	nop
}
 801aae6:	371c      	adds	r7, #28
 801aae8:	46bd      	mov	sp, r7
 801aaea:	bc80      	pop	{r7}
 801aaec:	4770      	bx	lr
 801aaee:	bf00      	nop
 801aaf0:	20001b14 	.word	0x20001b14
 801aaf4:	20001b34 	.word	0x20001b34

0801aaf8 <UTIL_SEQ_PreIdle>:
{
  return;
}

__WEAK void UTIL_SEQ_PreIdle( void )
{
 801aaf8:	b480      	push	{r7}
 801aafa:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801aafc:	bf00      	nop
}
 801aafe:	46bd      	mov	sp, r7
 801ab00:	bc80      	pop	{r7}
 801ab02:	4770      	bx	lr

0801ab04 <UTIL_SEQ_PostIdle>:

__WEAK void UTIL_SEQ_PostIdle( void )
{
 801ab04:	b480      	push	{r7}
 801ab06:	af00      	add	r7, sp, #0
  /*
   * Unless specified by the application, there is nothing to be done
   */
  return;
 801ab08:	bf00      	nop
}
 801ab0a:	46bd      	mov	sp, r7
 801ab0c:	bc80      	pop	{r7}
 801ab0e:	4770      	bx	lr

0801ab10 <SEQ_BitPosition>:
 * @brief return the position of the first bit set to 1
 * @param Value 32 bit value
 * @retval bit position
 */
uint8_t SEQ_BitPosition(uint32_t Value)
{
 801ab10:	b480      	push	{r7}
 801ab12:	b085      	sub	sp, #20
 801ab14:	af00      	add	r7, sp, #0
 801ab16:	6078      	str	r0, [r7, #4]
uint8_t n = 0U;
 801ab18:	2300      	movs	r3, #0
 801ab1a:	73fb      	strb	r3, [r7, #15]
uint32_t lvalue = Value;
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	60bb      	str	r3, [r7, #8]

  if ((lvalue & 0xFFFF0000U) == 0U)  { n  = 16U; lvalue <<= 16U;  }
 801ab20:	68bb      	ldr	r3, [r7, #8]
 801ab22:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801ab26:	d204      	bcs.n	801ab32 <SEQ_BitPosition+0x22>
 801ab28:	2310      	movs	r3, #16
 801ab2a:	73fb      	strb	r3, [r7, #15]
 801ab2c:	68bb      	ldr	r3, [r7, #8]
 801ab2e:	041b      	lsls	r3, r3, #16
 801ab30:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xFF000000U) == 0U)  { n +=  8U; lvalue <<=  8U;  }
 801ab32:	68bb      	ldr	r3, [r7, #8]
 801ab34:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801ab38:	d205      	bcs.n	801ab46 <SEQ_BitPosition+0x36>
 801ab3a:	7bfb      	ldrb	r3, [r7, #15]
 801ab3c:	3308      	adds	r3, #8
 801ab3e:	73fb      	strb	r3, [r7, #15]
 801ab40:	68bb      	ldr	r3, [r7, #8]
 801ab42:	021b      	lsls	r3, r3, #8
 801ab44:	60bb      	str	r3, [r7, #8]
  if ((lvalue & 0xF0000000U) == 0U)  { n +=  4U; lvalue <<=  4U;  }
 801ab46:	68bb      	ldr	r3, [r7, #8]
 801ab48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ab4c:	d205      	bcs.n	801ab5a <SEQ_BitPosition+0x4a>
 801ab4e:	7bfb      	ldrb	r3, [r7, #15]
 801ab50:	3304      	adds	r3, #4
 801ab52:	73fb      	strb	r3, [r7, #15]
 801ab54:	68bb      	ldr	r3, [r7, #8]
 801ab56:	011b      	lsls	r3, r3, #4
 801ab58:	60bb      	str	r3, [r7, #8]

  n += SEQ_clz_table_4bit[lvalue >> (32-4)];
 801ab5a:	68bb      	ldr	r3, [r7, #8]
 801ab5c:	0f1b      	lsrs	r3, r3, #28
 801ab5e:	4a07      	ldr	r2, [pc, #28]	@ (801ab7c <SEQ_BitPosition+0x6c>)
 801ab60:	5cd2      	ldrb	r2, [r2, r3]
 801ab62:	7bfb      	ldrb	r3, [r7, #15]
 801ab64:	4413      	add	r3, r2
 801ab66:	73fb      	strb	r3, [r7, #15]

  return (uint8_t)(31U-n);
 801ab68:	7bfb      	ldrb	r3, [r7, #15]
 801ab6a:	f1c3 031f 	rsb	r3, r3, #31
 801ab6e:	b2db      	uxtb	r3, r3
}
 801ab70:	4618      	mov	r0, r3
 801ab72:	3714      	adds	r7, #20
 801ab74:	46bd      	mov	sp, r7
 801ab76:	bc80      	pop	{r7}
 801ab78:	4770      	bx	lr
 801ab7a:	bf00      	nop
 801ab7c:	0801c638 	.word	0x0801c638

0801ab80 <UTIL_TIMER_Init>:
  * @addtogroup TIMER_SERVER_exported_function
  *  @{
  */

UTIL_TIMER_Status_t UTIL_TIMER_Init(void)
{
 801ab80:	b580      	push	{r7, lr}
 801ab82:	af00      	add	r7, sp, #0
  UTIL_TIMER_INIT_CRITICAL_SECTION();
  TimerListHead = NULL;
 801ab84:	4b04      	ldr	r3, [pc, #16]	@ (801ab98 <UTIL_TIMER_Init+0x18>)
 801ab86:	2200      	movs	r2, #0
 801ab88:	601a      	str	r2, [r3, #0]
  return UTIL_TimerDriver.InitTimer();
 801ab8a:	4b04      	ldr	r3, [pc, #16]	@ (801ab9c <UTIL_TIMER_Init+0x1c>)
 801ab8c:	681b      	ldr	r3, [r3, #0]
 801ab8e:	4798      	blx	r3
 801ab90:	4603      	mov	r3, r0
}
 801ab92:	4618      	mov	r0, r3
 801ab94:	bd80      	pop	{r7, pc}
 801ab96:	bf00      	nop
 801ab98:	20001b3c 	.word	0x20001b3c
 801ab9c:	0801c140 	.word	0x0801c140

0801aba0 <UTIL_TIMER_Create>:
{
  return UTIL_TimerDriver.DeInitTimer();
}

UTIL_TIMER_Status_t UTIL_TIMER_Create( UTIL_TIMER_Object_t *TimerObject, uint32_t PeriodValue, UTIL_TIMER_Mode_t Mode, void ( *Callback )( void *), void *Argument)
{
 801aba0:	b580      	push	{r7, lr}
 801aba2:	b084      	sub	sp, #16
 801aba4:	af00      	add	r7, sp, #0
 801aba6:	60f8      	str	r0, [r7, #12]
 801aba8:	60b9      	str	r1, [r7, #8]
 801abaa:	603b      	str	r3, [r7, #0]
 801abac:	4613      	mov	r3, r2
 801abae:	71fb      	strb	r3, [r7, #7]
  if((TimerObject != NULL) && (Callback != NULL))
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	2b00      	cmp	r3, #0
 801abb4:	d023      	beq.n	801abfe <UTIL_TIMER_Create+0x5e>
 801abb6:	683b      	ldr	r3, [r7, #0]
 801abb8:	2b00      	cmp	r3, #0
 801abba:	d020      	beq.n	801abfe <UTIL_TIMER_Create+0x5e>
  {
    TimerObject->Timestamp = 0U;
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	2200      	movs	r2, #0
 801abc0:	601a      	str	r2, [r3, #0]
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(PeriodValue);
 801abc2:	4b11      	ldr	r3, [pc, #68]	@ (801ac08 <UTIL_TIMER_Create+0x68>)
 801abc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abc6:	68b8      	ldr	r0, [r7, #8]
 801abc8:	4798      	blx	r3
 801abca:	4602      	mov	r2, r0
 801abcc:	68fb      	ldr	r3, [r7, #12]
 801abce:	605a      	str	r2, [r3, #4]
    TimerObject->IsPending = 0U;
 801abd0:	68fb      	ldr	r3, [r7, #12]
 801abd2:	2200      	movs	r2, #0
 801abd4:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 0U;
 801abd6:	68fb      	ldr	r3, [r7, #12]
 801abd8:	2200      	movs	r2, #0
 801abda:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801abdc:	68fb      	ldr	r3, [r7, #12]
 801abde:	2200      	movs	r2, #0
 801abe0:	729a      	strb	r2, [r3, #10]
    TimerObject->Callback = Callback;
 801abe2:	68fb      	ldr	r3, [r7, #12]
 801abe4:	683a      	ldr	r2, [r7, #0]
 801abe6:	60da      	str	r2, [r3, #12]
    TimerObject->argument = Argument;
 801abe8:	68fb      	ldr	r3, [r7, #12]
 801abea:	69ba      	ldr	r2, [r7, #24]
 801abec:	611a      	str	r2, [r3, #16]
    TimerObject->Mode = Mode;
 801abee:	68fb      	ldr	r3, [r7, #12]
 801abf0:	79fa      	ldrb	r2, [r7, #7]
 801abf2:	72da      	strb	r2, [r3, #11]
    TimerObject->Next = NULL;
 801abf4:	68fb      	ldr	r3, [r7, #12]
 801abf6:	2200      	movs	r2, #0
 801abf8:	615a      	str	r2, [r3, #20]
    return UTIL_TIMER_OK;
 801abfa:	2300      	movs	r3, #0
 801abfc:	e000      	b.n	801ac00 <UTIL_TIMER_Create+0x60>
  }
  else
  {
    return UTIL_TIMER_INVALID_PARAM;
 801abfe:	2301      	movs	r3, #1
  }
}
 801ac00:	4618      	mov	r0, r3
 801ac02:	3710      	adds	r7, #16
 801ac04:	46bd      	mov	sp, r7
 801ac06:	bd80      	pop	{r7, pc}
 801ac08:	0801c140 	.word	0x0801c140

0801ac0c <UTIL_TIMER_Start>:

UTIL_TIMER_Status_t UTIL_TIMER_Start( UTIL_TIMER_Object_t *TimerObject)
{
 801ac0c:	b580      	push	{r7, lr}
 801ac0e:	b08a      	sub	sp, #40	@ 0x28
 801ac10:	af00      	add	r7, sp, #0
 801ac12:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801ac14:	2300      	movs	r3, #0
 801ac16:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t elapsedTime;
  uint32_t minValue;
  uint32_t ticks;
    
  if(( TimerObject != NULL ) && ( TimerExists( TimerObject ) == false ) && (TimerObject->IsRunning == 0U))
 801ac1a:	687b      	ldr	r3, [r7, #4]
 801ac1c:	2b00      	cmp	r3, #0
 801ac1e:	d056      	beq.n	801acce <UTIL_TIMER_Start+0xc2>
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f000 f9a9 	bl	801af78 <TimerExists>
 801ac26:	4603      	mov	r3, r0
 801ac28:	f083 0301 	eor.w	r3, r3, #1
 801ac2c:	b2db      	uxtb	r3, r3
 801ac2e:	2b00      	cmp	r3, #0
 801ac30:	d04d      	beq.n	801acce <UTIL_TIMER_Start+0xc2>
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	7a5b      	ldrb	r3, [r3, #9]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d149      	bne.n	801acce <UTIL_TIMER_Start+0xc2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ac3a:	f3ef 8310 	mrs	r3, PRIMASK
 801ac3e:	613b      	str	r3, [r7, #16]
  return(result);
 801ac40:	693b      	ldr	r3, [r7, #16]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ac42:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 801ac44:	b672      	cpsid	i
}
 801ac46:	bf00      	nop
    ticks = TimerObject->ReloadValue;
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	685b      	ldr	r3, [r3, #4]
 801ac4c:	623b      	str	r3, [r7, #32]
    minValue = UTIL_TimerDriver.GetMinimumTimeout( );
 801ac4e:	4b24      	ldr	r3, [pc, #144]	@ (801ace0 <UTIL_TIMER_Start+0xd4>)
 801ac50:	6a1b      	ldr	r3, [r3, #32]
 801ac52:	4798      	blx	r3
 801ac54:	61b8      	str	r0, [r7, #24]
    
    if( ticks < minValue )
 801ac56:	6a3a      	ldr	r2, [r7, #32]
 801ac58:	69bb      	ldr	r3, [r7, #24]
 801ac5a:	429a      	cmp	r2, r3
 801ac5c:	d201      	bcs.n	801ac62 <UTIL_TIMER_Start+0x56>
    {
      ticks = minValue;
 801ac5e:	69bb      	ldr	r3, [r7, #24]
 801ac60:	623b      	str	r3, [r7, #32]
    }
    
    TimerObject->Timestamp = ticks;
 801ac62:	687b      	ldr	r3, [r7, #4]
 801ac64:	6a3a      	ldr	r2, [r7, #32]
 801ac66:	601a      	str	r2, [r3, #0]
    TimerObject->IsPending = 0U;
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	2200      	movs	r2, #0
 801ac6c:	721a      	strb	r2, [r3, #8]
    TimerObject->IsRunning = 1U;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	2201      	movs	r2, #1
 801ac72:	725a      	strb	r2, [r3, #9]
    TimerObject->IsReloadStopped = 0U;
 801ac74:	687b      	ldr	r3, [r7, #4]
 801ac76:	2200      	movs	r2, #0
 801ac78:	729a      	strb	r2, [r3, #10]
    if( TimerListHead == NULL )
 801ac7a:	4b1a      	ldr	r3, [pc, #104]	@ (801ace4 <UTIL_TIMER_Start+0xd8>)
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	2b00      	cmp	r3, #0
 801ac80:	d106      	bne.n	801ac90 <UTIL_TIMER_Start+0x84>
    {
      UTIL_TimerDriver.SetTimerContext();
 801ac82:	4b17      	ldr	r3, [pc, #92]	@ (801ace0 <UTIL_TIMER_Start+0xd4>)
 801ac84:	691b      	ldr	r3, [r3, #16]
 801ac86:	4798      	blx	r3
      TimerInsertNewHeadTimer( TimerObject ); /* insert a timeout at now+obj->Timestamp */
 801ac88:	6878      	ldr	r0, [r7, #4]
 801ac8a:	f000 f9eb 	bl	801b064 <TimerInsertNewHeadTimer>
 801ac8e:	e017      	b.n	801acc0 <UTIL_TIMER_Start+0xb4>
    }
    else 
    {
      elapsedTime = UTIL_TimerDriver.GetTimerElapsedTime( );
 801ac90:	4b13      	ldr	r3, [pc, #76]	@ (801ace0 <UTIL_TIMER_Start+0xd4>)
 801ac92:	699b      	ldr	r3, [r3, #24]
 801ac94:	4798      	blx	r3
 801ac96:	6178      	str	r0, [r7, #20]
      TimerObject->Timestamp += elapsedTime;
 801ac98:	687b      	ldr	r3, [r7, #4]
 801ac9a:	681a      	ldr	r2, [r3, #0]
 801ac9c:	697b      	ldr	r3, [r7, #20]
 801ac9e:	441a      	add	r2, r3
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	601a      	str	r2, [r3, #0]
      
      if( TimerObject->Timestamp < TimerListHead->Timestamp )
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681a      	ldr	r2, [r3, #0]
 801aca8:	4b0e      	ldr	r3, [pc, #56]	@ (801ace4 <UTIL_TIMER_Start+0xd8>)
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	429a      	cmp	r2, r3
 801acb0:	d203      	bcs.n	801acba <UTIL_TIMER_Start+0xae>
      {
        TimerInsertNewHeadTimer( TimerObject);
 801acb2:	6878      	ldr	r0, [r7, #4]
 801acb4:	f000 f9d6 	bl	801b064 <TimerInsertNewHeadTimer>
 801acb8:	e002      	b.n	801acc0 <UTIL_TIMER_Start+0xb4>
      }
      else
      {
        TimerInsertTimer( TimerObject);
 801acba:	6878      	ldr	r0, [r7, #4]
 801acbc:	f000 f9a2 	bl	801b004 <TimerInsertTimer>
 801acc0:	69fb      	ldr	r3, [r7, #28]
 801acc2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f383 8810 	msr	PRIMASK, r3
}
 801acca:	bf00      	nop
  {
 801accc:	e002      	b.n	801acd4 <UTIL_TIMER_Start+0xc8>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret =  UTIL_TIMER_INVALID_PARAM;
 801acce:	2301      	movs	r3, #1
 801acd0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  return ret;
 801acd4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 801acd8:	4618      	mov	r0, r3
 801acda:	3728      	adds	r7, #40	@ 0x28
 801acdc:	46bd      	mov	sp, r7
 801acde:	bd80      	pop	{r7, pc}
 801ace0:	0801c140 	.word	0x0801c140
 801ace4:	20001b3c 	.word	0x20001b3c

0801ace8 <UTIL_TIMER_Stop>:
  }
  return ret;
}

UTIL_TIMER_Status_t UTIL_TIMER_Stop( UTIL_TIMER_Object_t *TimerObject )
{
 801ace8:	b580      	push	{r7, lr}
 801acea:	b088      	sub	sp, #32
 801acec:	af00      	add	r7, sp, #0
 801acee:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801acf0:	2300      	movs	r3, #0
 801acf2:	77fb      	strb	r3, [r7, #31]

  if (NULL != TimerObject)
 801acf4:	687b      	ldr	r3, [r7, #4]
 801acf6:	2b00      	cmp	r3, #0
 801acf8:	d05b      	beq.n	801adb2 <UTIL_TIMER_Stop+0xca>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801acfa:	f3ef 8310 	mrs	r3, PRIMASK
 801acfe:	60fb      	str	r3, [r7, #12]
  return(result);
 801ad00:	68fb      	ldr	r3, [r7, #12]
  {
    UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ad02:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801ad04:	b672      	cpsid	i
}
 801ad06:	bf00      	nop
    UTIL_TIMER_Object_t* prev = TimerListHead;
 801ad08:	4b2d      	ldr	r3, [pc, #180]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad0a:	681b      	ldr	r3, [r3, #0]
 801ad0c:	61bb      	str	r3, [r7, #24]
    UTIL_TIMER_Object_t* cur = TimerListHead;
 801ad0e:	4b2c      	ldr	r3, [pc, #176]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad10:	681b      	ldr	r3, [r3, #0]
 801ad12:	617b      	str	r3, [r7, #20]
    TimerObject->IsReloadStopped = 1U;
 801ad14:	687b      	ldr	r3, [r7, #4]
 801ad16:	2201      	movs	r2, #1
 801ad18:	729a      	strb	r2, [r3, #10]
    
    /* List is empty or the Obj to stop does not exist  */
    if(NULL != TimerListHead)
 801ad1a:	4b29      	ldr	r3, [pc, #164]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	2b00      	cmp	r3, #0
 801ad20:	d041      	beq.n	801ada6 <UTIL_TIMER_Stop+0xbe>
    {
      TimerObject->IsRunning = 0U;
 801ad22:	687b      	ldr	r3, [r7, #4]
 801ad24:	2200      	movs	r2, #0
 801ad26:	725a      	strb	r2, [r3, #9]
      
      if( TimerListHead == TimerObject ) /* Stop the Head */
 801ad28:	4b25      	ldr	r3, [pc, #148]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad2a:	681b      	ldr	r3, [r3, #0]
 801ad2c:	687a      	ldr	r2, [r7, #4]
 801ad2e:	429a      	cmp	r2, r3
 801ad30:	d134      	bne.n	801ad9c <UTIL_TIMER_Stop+0xb4>
      {
          TimerListHead->IsPending = 0;
 801ad32:	4b23      	ldr	r3, [pc, #140]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	2200      	movs	r2, #0
 801ad38:	721a      	strb	r2, [r3, #8]
          if( TimerListHead->Next != NULL )
 801ad3a:	4b21      	ldr	r3, [pc, #132]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad3c:	681b      	ldr	r3, [r3, #0]
 801ad3e:	695b      	ldr	r3, [r3, #20]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d00a      	beq.n	801ad5a <UTIL_TIMER_Stop+0x72>
          {
            TimerListHead = TimerListHead->Next;
 801ad44:	4b1e      	ldr	r3, [pc, #120]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	695b      	ldr	r3, [r3, #20]
 801ad4a:	4a1d      	ldr	r2, [pc, #116]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad4c:	6013      	str	r3, [r2, #0]
            TimerSetTimeout( TimerListHead );
 801ad4e:	4b1c      	ldr	r3, [pc, #112]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	4618      	mov	r0, r3
 801ad54:	f000 f92c 	bl	801afb0 <TimerSetTimeout>
 801ad58:	e023      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            UTIL_TimerDriver.StopTimerEvt( );
 801ad5a:	4b1a      	ldr	r3, [pc, #104]	@ (801adc4 <UTIL_TIMER_Stop+0xdc>)
 801ad5c:	68db      	ldr	r3, [r3, #12]
 801ad5e:	4798      	blx	r3
            TimerListHead = NULL;
 801ad60:	4b17      	ldr	r3, [pc, #92]	@ (801adc0 <UTIL_TIMER_Stop+0xd8>)
 801ad62:	2200      	movs	r2, #0
 801ad64:	601a      	str	r2, [r3, #0]
 801ad66:	e01c      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
      }
      else /* Stop an object within the list */
      {      
        while( cur != NULL )
        {
          if( cur == TimerObject )
 801ad68:	697a      	ldr	r2, [r7, #20]
 801ad6a:	687b      	ldr	r3, [r7, #4]
 801ad6c:	429a      	cmp	r2, r3
 801ad6e:	d110      	bne.n	801ad92 <UTIL_TIMER_Stop+0xaa>
          {
            if( cur->Next != NULL )
 801ad70:	697b      	ldr	r3, [r7, #20]
 801ad72:	695b      	ldr	r3, [r3, #20]
 801ad74:	2b00      	cmp	r3, #0
 801ad76:	d006      	beq.n	801ad86 <UTIL_TIMER_Stop+0x9e>
            {
              cur = cur->Next;
 801ad78:	697b      	ldr	r3, [r7, #20]
 801ad7a:	695b      	ldr	r3, [r3, #20]
 801ad7c:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ad7e:	69bb      	ldr	r3, [r7, #24]
 801ad80:	697a      	ldr	r2, [r7, #20]
 801ad82:	615a      	str	r2, [r3, #20]
            else
            {
              cur = NULL;
              prev->Next = cur;
            }
            break;
 801ad84:	e00d      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
              cur = NULL;
 801ad86:	2300      	movs	r3, #0
 801ad88:	617b      	str	r3, [r7, #20]
              prev->Next = cur;
 801ad8a:	69bb      	ldr	r3, [r7, #24]
 801ad8c:	697a      	ldr	r2, [r7, #20]
 801ad8e:	615a      	str	r2, [r3, #20]
            break;
 801ad90:	e007      	b.n	801ada2 <UTIL_TIMER_Stop+0xba>
          }
          else
          {
            prev = cur;
 801ad92:	697b      	ldr	r3, [r7, #20]
 801ad94:	61bb      	str	r3, [r7, #24]
            cur = cur->Next;
 801ad96:	697b      	ldr	r3, [r7, #20]
 801ad98:	695b      	ldr	r3, [r3, #20]
 801ad9a:	617b      	str	r3, [r7, #20]
        while( cur != NULL )
 801ad9c:	697b      	ldr	r3, [r7, #20]
 801ad9e:	2b00      	cmp	r3, #0
 801ada0:	d1e2      	bne.n	801ad68 <UTIL_TIMER_Stop+0x80>
          }
        }   
      }
      ret = UTIL_TIMER_OK;
 801ada2:	2300      	movs	r3, #0
 801ada4:	77fb      	strb	r3, [r7, #31]
 801ada6:	693b      	ldr	r3, [r7, #16]
 801ada8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801adaa:	68bb      	ldr	r3, [r7, #8]
 801adac:	f383 8810 	msr	PRIMASK, r3
}
 801adb0:	e001      	b.n	801adb6 <UTIL_TIMER_Stop+0xce>
    }
    UTIL_TIMER_EXIT_CRITICAL_SECTION();
  }
  else
  {
    ret = UTIL_TIMER_INVALID_PARAM;
 801adb2:	2301      	movs	r3, #1
 801adb4:	77fb      	strb	r3, [r7, #31]
  }
  return ret;
 801adb6:	7ffb      	ldrb	r3, [r7, #31]
}
 801adb8:	4618      	mov	r0, r3
 801adba:	3720      	adds	r7, #32
 801adbc:	46bd      	mov	sp, r7
 801adbe:	bd80      	pop	{r7, pc}
 801adc0:	20001b3c 	.word	0x20001b3c
 801adc4:	0801c140 	.word	0x0801c140

0801adc8 <UTIL_TIMER_SetPeriod>:

UTIL_TIMER_Status_t UTIL_TIMER_SetPeriod(UTIL_TIMER_Object_t *TimerObject, uint32_t NewPeriodValue)
{
 801adc8:	b580      	push	{r7, lr}
 801adca:	b084      	sub	sp, #16
 801adcc:	af00      	add	r7, sp, #0
 801adce:	6078      	str	r0, [r7, #4]
 801add0:	6039      	str	r1, [r7, #0]
  UTIL_TIMER_Status_t  ret = UTIL_TIMER_OK;
 801add2:	2300      	movs	r3, #0
 801add4:	73fb      	strb	r3, [r7, #15]
  
  if(NULL == TimerObject)
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	2b00      	cmp	r3, #0
 801adda:	d102      	bne.n	801ade2 <UTIL_TIMER_SetPeriod+0x1a>
  {
	  ret = UTIL_TIMER_INVALID_PARAM;
 801addc:	2301      	movs	r3, #1
 801adde:	73fb      	strb	r3, [r7, #15]
 801ade0:	e014      	b.n	801ae0c <UTIL_TIMER_SetPeriod+0x44>
  }
  else
  {
    TimerObject->ReloadValue = UTIL_TimerDriver.ms2Tick(NewPeriodValue);
 801ade2:	4b0d      	ldr	r3, [pc, #52]	@ (801ae18 <UTIL_TIMER_SetPeriod+0x50>)
 801ade4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ade6:	6838      	ldr	r0, [r7, #0]
 801ade8:	4798      	blx	r3
 801adea:	4602      	mov	r2, r0
 801adec:	687b      	ldr	r3, [r7, #4]
 801adee:	605a      	str	r2, [r3, #4]
    if(TimerExists(TimerObject))
 801adf0:	6878      	ldr	r0, [r7, #4]
 801adf2:	f000 f8c1 	bl	801af78 <TimerExists>
 801adf6:	4603      	mov	r3, r0
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d007      	beq.n	801ae0c <UTIL_TIMER_SetPeriod+0x44>
    {
      (void)UTIL_TIMER_Stop(TimerObject);
 801adfc:	6878      	ldr	r0, [r7, #4]
 801adfe:	f7ff ff73 	bl	801ace8 <UTIL_TIMER_Stop>
      ret = UTIL_TIMER_Start(TimerObject);
 801ae02:	6878      	ldr	r0, [r7, #4]
 801ae04:	f7ff ff02 	bl	801ac0c <UTIL_TIMER_Start>
 801ae08:	4603      	mov	r3, r0
 801ae0a:	73fb      	strb	r3, [r7, #15]
    }
  }
  return ret;
 801ae0c:	7bfb      	ldrb	r3, [r7, #15]
}
 801ae0e:	4618      	mov	r0, r3
 801ae10:	3710      	adds	r7, #16
 801ae12:	46bd      	mov	sp, r7
 801ae14:	bd80      	pop	{r7, pc}
 801ae16:	bf00      	nop
 801ae18:	0801c140 	.word	0x0801c140

0801ae1c <UTIL_TIMER_IRQ_Handler>:
	}
	return NextTimer;
}

void UTIL_TIMER_IRQ_Handler( void )
{
 801ae1c:	b590      	push	{r4, r7, lr}
 801ae1e:	b089      	sub	sp, #36	@ 0x24
 801ae20:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801ae22:	f3ef 8310 	mrs	r3, PRIMASK
 801ae26:	60bb      	str	r3, [r7, #8]
  return(result);
 801ae28:	68bb      	ldr	r3, [r7, #8]
  UTIL_TIMER_Object_t* cur;
  uint32_t old, now, DeltaContext;

  UTIL_TIMER_ENTER_CRITICAL_SECTION();
 801ae2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801ae2c:	b672      	cpsid	i
}
 801ae2e:	bf00      	nop

  old  =  UTIL_TimerDriver.GetTimerContext( );
 801ae30:	4b38      	ldr	r3, [pc, #224]	@ (801af14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ae32:	695b      	ldr	r3, [r3, #20]
 801ae34:	4798      	blx	r3
 801ae36:	6178      	str	r0, [r7, #20]
  now  =  UTIL_TimerDriver.SetTimerContext( );
 801ae38:	4b36      	ldr	r3, [pc, #216]	@ (801af14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801ae3a:	691b      	ldr	r3, [r3, #16]
 801ae3c:	4798      	blx	r3
 801ae3e:	6138      	str	r0, [r7, #16]

  DeltaContext = now  - old; /*intentional wrap around */
 801ae40:	693a      	ldr	r2, [r7, #16]
 801ae42:	697b      	ldr	r3, [r7, #20]
 801ae44:	1ad3      	subs	r3, r2, r3
 801ae46:	60fb      	str	r3, [r7, #12]
  
  /* update timeStamp based upon new Time Reference*/
  /* because delta context should never exceed 2^32*/
  if ( TimerListHead != NULL )
 801ae48:	4b33      	ldr	r3, [pc, #204]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae4a:	681b      	ldr	r3, [r3, #0]
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	d037      	beq.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
    cur = TimerListHead;
 801ae50:	4b31      	ldr	r3, [pc, #196]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae52:	681b      	ldr	r3, [r3, #0]
 801ae54:	61fb      	str	r3, [r7, #28]
	do {
      if (cur->Timestamp > DeltaContext)
 801ae56:	69fb      	ldr	r3, [r7, #28]
 801ae58:	681b      	ldr	r3, [r3, #0]
 801ae5a:	68fa      	ldr	r2, [r7, #12]
 801ae5c:	429a      	cmp	r2, r3
 801ae5e:	d206      	bcs.n	801ae6e <UTIL_TIMER_IRQ_Handler+0x52>
      {
        cur->Timestamp -= DeltaContext;
 801ae60:	69fb      	ldr	r3, [r7, #28]
 801ae62:	681a      	ldr	r2, [r3, #0]
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	1ad2      	subs	r2, r2, r3
 801ae68:	69fb      	ldr	r3, [r7, #28]
 801ae6a:	601a      	str	r2, [r3, #0]
 801ae6c:	e002      	b.n	801ae74 <UTIL_TIMER_IRQ_Handler+0x58>
      }
      else
      {
        cur->Timestamp = 0;
 801ae6e:	69fb      	ldr	r3, [r7, #28]
 801ae70:	2200      	movs	r2, #0
 801ae72:	601a      	str	r2, [r3, #0]
      }
      cur = cur->Next;
 801ae74:	69fb      	ldr	r3, [r7, #28]
 801ae76:	695b      	ldr	r3, [r3, #20]
 801ae78:	61fb      	str	r3, [r7, #28]
    } while(cur != NULL);
 801ae7a:	69fb      	ldr	r3, [r7, #28]
 801ae7c:	2b00      	cmp	r3, #0
 801ae7e:	d1ea      	bne.n	801ae56 <UTIL_TIMER_IRQ_Handler+0x3a>
  }

  /* Execute expired timer and update the list */
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801ae80:	e01e      	b.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
  {
      cur = TimerListHead;
 801ae82:	4b25      	ldr	r3, [pc, #148]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	61fb      	str	r3, [r7, #28]
      TimerListHead = TimerListHead->Next;
 801ae88:	4b23      	ldr	r3, [pc, #140]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	695b      	ldr	r3, [r3, #20]
 801ae8e:	4a22      	ldr	r2, [pc, #136]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801ae90:	6013      	str	r3, [r2, #0]
      cur->IsPending = 0;
 801ae92:	69fb      	ldr	r3, [r7, #28]
 801ae94:	2200      	movs	r2, #0
 801ae96:	721a      	strb	r2, [r3, #8]
      cur->IsRunning = 0;
 801ae98:	69fb      	ldr	r3, [r7, #28]
 801ae9a:	2200      	movs	r2, #0
 801ae9c:	725a      	strb	r2, [r3, #9]
      cur->Callback(cur->argument);
 801ae9e:	69fb      	ldr	r3, [r7, #28]
 801aea0:	68db      	ldr	r3, [r3, #12]
 801aea2:	69fa      	ldr	r2, [r7, #28]
 801aea4:	6912      	ldr	r2, [r2, #16]
 801aea6:	4610      	mov	r0, r2
 801aea8:	4798      	blx	r3
      if(( cur->Mode == UTIL_TIMER_PERIODIC) && (cur->IsReloadStopped == 0U))
 801aeaa:	69fb      	ldr	r3, [r7, #28]
 801aeac:	7adb      	ldrb	r3, [r3, #11]
 801aeae:	2b01      	cmp	r3, #1
 801aeb0:	d106      	bne.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
 801aeb2:	69fb      	ldr	r3, [r7, #28]
 801aeb4:	7a9b      	ldrb	r3, [r3, #10]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d102      	bne.n	801aec0 <UTIL_TIMER_IRQ_Handler+0xa4>
      {
        (void)UTIL_TIMER_Start(cur);
 801aeba:	69f8      	ldr	r0, [r7, #28]
 801aebc:	f7ff fea6 	bl	801ac0c <UTIL_TIMER_Start>
  while ((TimerListHead != NULL) && ((TimerListHead->Timestamp == 0U) || (TimerListHead->Timestamp < UTIL_TimerDriver.GetTimerElapsedTime(  ))))
 801aec0:	4b15      	ldr	r3, [pc, #84]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	2b00      	cmp	r3, #0
 801aec6:	d00d      	beq.n	801aee4 <UTIL_TIMER_IRQ_Handler+0xc8>
 801aec8:	4b13      	ldr	r3, [pc, #76]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aeca:	681b      	ldr	r3, [r3, #0]
 801aecc:	681b      	ldr	r3, [r3, #0]
 801aece:	2b00      	cmp	r3, #0
 801aed0:	d0d7      	beq.n	801ae82 <UTIL_TIMER_IRQ_Handler+0x66>
 801aed2:	4b11      	ldr	r3, [pc, #68]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	681c      	ldr	r4, [r3, #0]
 801aed8:	4b0e      	ldr	r3, [pc, #56]	@ (801af14 <UTIL_TIMER_IRQ_Handler+0xf8>)
 801aeda:	699b      	ldr	r3, [r3, #24]
 801aedc:	4798      	blx	r3
 801aede:	4603      	mov	r3, r0
 801aee0:	429c      	cmp	r4, r3
 801aee2:	d3ce      	bcc.n	801ae82 <UTIL_TIMER_IRQ_Handler+0x66>
      }
  }

  /* start the next TimerListHead if it exists and it is not pending*/
  if(( TimerListHead != NULL ) && (TimerListHead->IsPending == 0U))
 801aee4:	4b0c      	ldr	r3, [pc, #48]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	2b00      	cmp	r3, #0
 801aeea:	d009      	beq.n	801af00 <UTIL_TIMER_IRQ_Handler+0xe4>
 801aeec:	4b0a      	ldr	r3, [pc, #40]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aeee:	681b      	ldr	r3, [r3, #0]
 801aef0:	7a1b      	ldrb	r3, [r3, #8]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d104      	bne.n	801af00 <UTIL_TIMER_IRQ_Handler+0xe4>
  {
    TimerSetTimeout( TimerListHead );
 801aef6:	4b08      	ldr	r3, [pc, #32]	@ (801af18 <UTIL_TIMER_IRQ_Handler+0xfc>)
 801aef8:	681b      	ldr	r3, [r3, #0]
 801aefa:	4618      	mov	r0, r3
 801aefc:	f000 f858 	bl	801afb0 <TimerSetTimeout>
 801af00:	69bb      	ldr	r3, [r7, #24]
 801af02:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	f383 8810 	msr	PRIMASK, r3
}
 801af0a:	bf00      	nop
  }
  UTIL_TIMER_EXIT_CRITICAL_SECTION();
}
 801af0c:	bf00      	nop
 801af0e:	3724      	adds	r7, #36	@ 0x24
 801af10:	46bd      	mov	sp, r7
 801af12:	bd90      	pop	{r4, r7, pc}
 801af14:	0801c140 	.word	0x0801c140
 801af18:	20001b3c 	.word	0x20001b3c

0801af1c <UTIL_TIMER_GetCurrentTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetCurrentTime(void)
{
 801af1c:	b580      	push	{r7, lr}
 801af1e:	b082      	sub	sp, #8
 801af20:	af00      	add	r7, sp, #0
  uint32_t now = UTIL_TimerDriver.GetTimerValue( );
 801af22:	4b06      	ldr	r3, [pc, #24]	@ (801af3c <UTIL_TIMER_GetCurrentTime+0x20>)
 801af24:	69db      	ldr	r3, [r3, #28]
 801af26:	4798      	blx	r3
 801af28:	6078      	str	r0, [r7, #4]
  return  UTIL_TimerDriver.Tick2ms(now);
 801af2a:	4b04      	ldr	r3, [pc, #16]	@ (801af3c <UTIL_TIMER_GetCurrentTime+0x20>)
 801af2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	4798      	blx	r3
 801af32:	4603      	mov	r3, r0
}
 801af34:	4618      	mov	r0, r3
 801af36:	3708      	adds	r7, #8
 801af38:	46bd      	mov	sp, r7
 801af3a:	bd80      	pop	{r7, pc}
 801af3c:	0801c140 	.word	0x0801c140

0801af40 <UTIL_TIMER_GetElapsedTime>:

UTIL_TIMER_Time_t UTIL_TIMER_GetElapsedTime(UTIL_TIMER_Time_t past )
{
 801af40:	b580      	push	{r7, lr}
 801af42:	b084      	sub	sp, #16
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
  uint32_t nowInTicks = UTIL_TimerDriver.GetTimerValue( );
 801af48:	4b0a      	ldr	r3, [pc, #40]	@ (801af74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af4a:	69db      	ldr	r3, [r3, #28]
 801af4c:	4798      	blx	r3
 801af4e:	60f8      	str	r0, [r7, #12]
  uint32_t pastInTicks = UTIL_TimerDriver.ms2Tick( past );
 801af50:	4b08      	ldr	r3, [pc, #32]	@ (801af74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801af54:	6878      	ldr	r0, [r7, #4]
 801af56:	4798      	blx	r3
 801af58:	60b8      	str	r0, [r7, #8]
  /* intentional wrap around. Works Ok if tick duation below 1ms */
  return UTIL_TimerDriver.Tick2ms( nowInTicks- pastInTicks );
 801af5a:	4b06      	ldr	r3, [pc, #24]	@ (801af74 <UTIL_TIMER_GetElapsedTime+0x34>)
 801af5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af5e:	68f9      	ldr	r1, [r7, #12]
 801af60:	68ba      	ldr	r2, [r7, #8]
 801af62:	1a8a      	subs	r2, r1, r2
 801af64:	4610      	mov	r0, r2
 801af66:	4798      	blx	r3
 801af68:	4603      	mov	r3, r0
}
 801af6a:	4618      	mov	r0, r3
 801af6c:	3710      	adds	r7, #16
 801af6e:	46bd      	mov	sp, r7
 801af70:	bd80      	pop	{r7, pc}
 801af72:	bf00      	nop
 801af74:	0801c140 	.word	0x0801c140

0801af78 <TimerExists>:
 *
 * @param TimerObject Structure containing the timer object parameters
 * @retval 1 (the object is already in the list) or 0
 */
bool TimerExists( UTIL_TIMER_Object_t *TimerObject )
{
 801af78:	b480      	push	{r7}
 801af7a:	b085      	sub	sp, #20
 801af7c:	af00      	add	r7, sp, #0
 801af7e:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801af80:	4b0a      	ldr	r3, [pc, #40]	@ (801afac <TimerExists+0x34>)
 801af82:	681b      	ldr	r3, [r3, #0]
 801af84:	60fb      	str	r3, [r7, #12]

  while( cur != NULL )
 801af86:	e008      	b.n	801af9a <TimerExists+0x22>
  {
    if( cur == TimerObject )
 801af88:	68fa      	ldr	r2, [r7, #12]
 801af8a:	687b      	ldr	r3, [r7, #4]
 801af8c:	429a      	cmp	r2, r3
 801af8e:	d101      	bne.n	801af94 <TimerExists+0x1c>
    {
      return true;
 801af90:	2301      	movs	r3, #1
 801af92:	e006      	b.n	801afa2 <TimerExists+0x2a>
    }
    cur = cur->Next;
 801af94:	68fb      	ldr	r3, [r7, #12]
 801af96:	695b      	ldr	r3, [r3, #20]
 801af98:	60fb      	str	r3, [r7, #12]
  while( cur != NULL )
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	d1f3      	bne.n	801af88 <TimerExists+0x10>
  }
  return false;
 801afa0:	2300      	movs	r3, #0
}
 801afa2:	4618      	mov	r0, r3
 801afa4:	3714      	adds	r7, #20
 801afa6:	46bd      	mov	sp, r7
 801afa8:	bc80      	pop	{r7}
 801afaa:	4770      	bx	lr
 801afac:	20001b3c 	.word	0x20001b3c

0801afb0 <TimerSetTimeout>:
 * @brief Sets a timeout with the duration "timestamp"
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerSetTimeout( UTIL_TIMER_Object_t *TimerObject )
{
 801afb0:	b590      	push	{r4, r7, lr}
 801afb2:	b085      	sub	sp, #20
 801afb4:	af00      	add	r7, sp, #0
 801afb6:	6078      	str	r0, [r7, #4]
  uint32_t minTicks= UTIL_TimerDriver.GetMinimumTimeout( );
 801afb8:	4b11      	ldr	r3, [pc, #68]	@ (801b000 <TimerSetTimeout+0x50>)
 801afba:	6a1b      	ldr	r3, [r3, #32]
 801afbc:	4798      	blx	r3
 801afbe:	60f8      	str	r0, [r7, #12]
  TimerObject->IsPending = 1;
 801afc0:	687b      	ldr	r3, [r7, #4]
 801afc2:	2201      	movs	r2, #1
 801afc4:	721a      	strb	r2, [r3, #8]

  /* In case deadline too soon */
  if(TimerObject->Timestamp  < (UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks) )
 801afc6:	687b      	ldr	r3, [r7, #4]
 801afc8:	681c      	ldr	r4, [r3, #0]
 801afca:	4b0d      	ldr	r3, [pc, #52]	@ (801b000 <TimerSetTimeout+0x50>)
 801afcc:	699b      	ldr	r3, [r3, #24]
 801afce:	4798      	blx	r3
 801afd0:	4602      	mov	r2, r0
 801afd2:	68fb      	ldr	r3, [r7, #12]
 801afd4:	4413      	add	r3, r2
 801afd6:	429c      	cmp	r4, r3
 801afd8:	d207      	bcs.n	801afea <TimerSetTimeout+0x3a>
  {
	  TimerObject->Timestamp = UTIL_TimerDriver.GetTimerElapsedTime(  ) + minTicks;
 801afda:	4b09      	ldr	r3, [pc, #36]	@ (801b000 <TimerSetTimeout+0x50>)
 801afdc:	699b      	ldr	r3, [r3, #24]
 801afde:	4798      	blx	r3
 801afe0:	4602      	mov	r2, r0
 801afe2:	68fb      	ldr	r3, [r7, #12]
 801afe4:	441a      	add	r2, r3
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	601a      	str	r2, [r3, #0]
  }
  UTIL_TimerDriver.StartTimerEvt( TimerObject->Timestamp );
 801afea:	4b05      	ldr	r3, [pc, #20]	@ (801b000 <TimerSetTimeout+0x50>)
 801afec:	689b      	ldr	r3, [r3, #8]
 801afee:	687a      	ldr	r2, [r7, #4]
 801aff0:	6812      	ldr	r2, [r2, #0]
 801aff2:	4610      	mov	r0, r2
 801aff4:	4798      	blx	r3
}
 801aff6:	bf00      	nop
 801aff8:	3714      	adds	r7, #20
 801affa:	46bd      	mov	sp, r7
 801affc:	bd90      	pop	{r4, r7, pc}
 801affe:	bf00      	nop
 801b000:	0801c140 	.word	0x0801c140

0801b004 <TimerInsertTimer>:
 *     next timer to expire.
 *
 * @param TimerObject Structure containing the timer object parameters
 */
void TimerInsertTimer( UTIL_TIMER_Object_t *TimerObject)
{
 801b004:	b480      	push	{r7}
 801b006:	b085      	sub	sp, #20
 801b008:	af00      	add	r7, sp, #0
 801b00a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b00c:	4b14      	ldr	r3, [pc, #80]	@ (801b060 <TimerInsertTimer+0x5c>)
 801b00e:	681b      	ldr	r3, [r3, #0]
 801b010:	60fb      	str	r3, [r7, #12]
  UTIL_TIMER_Object_t* next = TimerListHead->Next;
 801b012:	4b13      	ldr	r3, [pc, #76]	@ (801b060 <TimerInsertTimer+0x5c>)
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	695b      	ldr	r3, [r3, #20]
 801b018:	60bb      	str	r3, [r7, #8]

  while (cur->Next != NULL )
 801b01a:	e012      	b.n	801b042 <TimerInsertTimer+0x3e>
  {  
    if( TimerObject->Timestamp  > next->Timestamp )
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	681a      	ldr	r2, [r3, #0]
 801b020:	68bb      	ldr	r3, [r7, #8]
 801b022:	681b      	ldr	r3, [r3, #0]
 801b024:	429a      	cmp	r2, r3
 801b026:	d905      	bls.n	801b034 <TimerInsertTimer+0x30>
    {
        cur = next;
 801b028:	68bb      	ldr	r3, [r7, #8]
 801b02a:	60fb      	str	r3, [r7, #12]
        next = next->Next;
 801b02c:	68bb      	ldr	r3, [r7, #8]
 801b02e:	695b      	ldr	r3, [r3, #20]
 801b030:	60bb      	str	r3, [r7, #8]
 801b032:	e006      	b.n	801b042 <TimerInsertTimer+0x3e>
    }
    else
    {
        cur->Next = TimerObject;
 801b034:	68fb      	ldr	r3, [r7, #12]
 801b036:	687a      	ldr	r2, [r7, #4]
 801b038:	615a      	str	r2, [r3, #20]
        TimerObject->Next = next;
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	68ba      	ldr	r2, [r7, #8]
 801b03e:	615a      	str	r2, [r3, #20]
        return;
 801b040:	e009      	b.n	801b056 <TimerInsertTimer+0x52>
  while (cur->Next != NULL )
 801b042:	68fb      	ldr	r3, [r7, #12]
 801b044:	695b      	ldr	r3, [r3, #20]
 801b046:	2b00      	cmp	r3, #0
 801b048:	d1e8      	bne.n	801b01c <TimerInsertTimer+0x18>

    }
  }
  cur->Next = TimerObject;
 801b04a:	68fb      	ldr	r3, [r7, #12]
 801b04c:	687a      	ldr	r2, [r7, #4]
 801b04e:	615a      	str	r2, [r3, #20]
  TimerObject->Next = NULL;
 801b050:	687b      	ldr	r3, [r7, #4]
 801b052:	2200      	movs	r2, #0
 801b054:	615a      	str	r2, [r3, #20]
}
 801b056:	3714      	adds	r7, #20
 801b058:	46bd      	mov	sp, r7
 801b05a:	bc80      	pop	{r7}
 801b05c:	4770      	bx	lr
 801b05e:	bf00      	nop
 801b060:	20001b3c 	.word	0x20001b3c

0801b064 <TimerInsertNewHeadTimer>:
 *
 * @remark The list is automatically sorted. The list head always contains the
 *         next timer to expire.
 */
void TimerInsertNewHeadTimer( UTIL_TIMER_Object_t *TimerObject )
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b084      	sub	sp, #16
 801b068:	af00      	add	r7, sp, #0
 801b06a:	6078      	str	r0, [r7, #4]
  UTIL_TIMER_Object_t* cur = TimerListHead;
 801b06c:	4b0b      	ldr	r3, [pc, #44]	@ (801b09c <TimerInsertNewHeadTimer+0x38>)
 801b06e:	681b      	ldr	r3, [r3, #0]
 801b070:	60fb      	str	r3, [r7, #12]

  if( cur != NULL )
 801b072:	68fb      	ldr	r3, [r7, #12]
 801b074:	2b00      	cmp	r3, #0
 801b076:	d002      	beq.n	801b07e <TimerInsertNewHeadTimer+0x1a>
  {
    cur->IsPending = 0;
 801b078:	68fb      	ldr	r3, [r7, #12]
 801b07a:	2200      	movs	r2, #0
 801b07c:	721a      	strb	r2, [r3, #8]
  }

  TimerObject->Next = cur;
 801b07e:	687b      	ldr	r3, [r7, #4]
 801b080:	68fa      	ldr	r2, [r7, #12]
 801b082:	615a      	str	r2, [r3, #20]
  TimerListHead = TimerObject;
 801b084:	4a05      	ldr	r2, [pc, #20]	@ (801b09c <TimerInsertNewHeadTimer+0x38>)
 801b086:	687b      	ldr	r3, [r7, #4]
 801b088:	6013      	str	r3, [r2, #0]
  TimerSetTimeout( TimerListHead );
 801b08a:	4b04      	ldr	r3, [pc, #16]	@ (801b09c <TimerInsertNewHeadTimer+0x38>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	4618      	mov	r0, r3
 801b090:	f7ff ff8e 	bl	801afb0 <TimerSetTimeout>
}
 801b094:	bf00      	nop
 801b096:	3710      	adds	r7, #16
 801b098:	46bd      	mov	sp, r7
 801b09a:	bd80      	pop	{r7, pc}
 801b09c:	20001b3c 	.word	0x20001b3c

0801b0a0 <UTIL_ADV_TRACE_Init>:

/** @addtogroup ADV_TRACE_exported_function
 *  @{
 */
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_Init(void)
{
 801b0a0:	b580      	push	{r7, lr}
 801b0a2:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Ctx, 0x0, sizeof(ADV_TRACE_Context));
 801b0a4:	2218      	movs	r2, #24
 801b0a6:	2100      	movs	r1, #0
 801b0a8:	4807      	ldr	r0, [pc, #28]	@ (801b0c8 <UTIL_ADV_TRACE_Init+0x28>)
 801b0aa:	f7fe fffc 	bl	801a0a6 <UTIL_MEM_set_8>
  (void)UTIL_ADV_TRACE_MEMSET8(&ADV_TRACE_Buffer, 0x0, sizeof(ADV_TRACE_Buffer));
 801b0ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801b0b2:	2100      	movs	r1, #0
 801b0b4:	4805      	ldr	r0, [pc, #20]	@ (801b0cc <UTIL_ADV_TRACE_Init+0x2c>)
 801b0b6:	f7fe fff6 	bl	801a0a6 <UTIL_MEM_set_8>
#endif
  /* Allocate Lock resource */
  UTIL_ADV_TRACE_INIT_CRITICAL_SECTION();

  /* Initialize the Low Level interface */
  return UTIL_TraceDriver.Init(TRACE_TxCpltCallback);
 801b0ba:	4b05      	ldr	r3, [pc, #20]	@ (801b0d0 <UTIL_ADV_TRACE_Init+0x30>)
 801b0bc:	681b      	ldr	r3, [r3, #0]
 801b0be:	4805      	ldr	r0, [pc, #20]	@ (801b0d4 <UTIL_ADV_TRACE_Init+0x34>)
 801b0c0:	4798      	blx	r3
 801b0c2:	4603      	mov	r3, r0
}
 801b0c4:	4618      	mov	r0, r3
 801b0c6:	bd80      	pop	{r7, pc}
 801b0c8:	20001b40 	.word	0x20001b40
 801b0cc:	20001b58 	.word	0x20001b58
 801b0d0:	0801c180 	.word	0x0801c180
 801b0d4:	0801b341 	.word	0x0801b341

0801b0d8 <UTIL_ADV_TRACE_IsBufferEmpty>:
  /* Un-initialize the Low Level interface */
  return UTIL_TraceDriver.DeInit();
}

uint8_t UTIL_ADV_TRACE_IsBufferEmpty(void)
{
 801b0d8:	b480      	push	{r7}
 801b0da:	af00      	add	r7, sp, #0
  /* check of the buffer is empty */
  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b0dc:	4b06      	ldr	r3, [pc, #24]	@ (801b0f8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b0de:	8a5a      	ldrh	r2, [r3, #18]
 801b0e0:	4b05      	ldr	r3, [pc, #20]	@ (801b0f8 <UTIL_ADV_TRACE_IsBufferEmpty+0x20>)
 801b0e2:	8a1b      	ldrh	r3, [r3, #16]
 801b0e4:	429a      	cmp	r2, r3
 801b0e6:	d101      	bne.n	801b0ec <UTIL_ADV_TRACE_IsBufferEmpty+0x14>
    return 1;
 801b0e8:	2301      	movs	r3, #1
 801b0ea:	e000      	b.n	801b0ee <UTIL_ADV_TRACE_IsBufferEmpty+0x16>
  return 0;
 801b0ec:	2300      	movs	r3, #0
}
 801b0ee:	4618      	mov	r0, r3
 801b0f0:	46bd      	mov	sp, r7
 801b0f2:	bc80      	pop	{r7}
 801b0f4:	4770      	bx	lr
 801b0f6:	bf00      	nop
 801b0f8:	20001b40 	.word	0x20001b40

0801b0fc <UTIL_ADV_TRACE_COND_FSend>:
  return UTIL_TraceDriver.StartRx(UserCallback);
}

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
UTIL_ADV_TRACE_Status_t UTIL_ADV_TRACE_COND_FSend(uint32_t VerboseLevel, uint32_t Region, uint32_t TimeStampState, const char *strFormat, ...)
{
 801b0fc:	b408      	push	{r3}
 801b0fe:	b580      	push	{r7, lr}
 801b100:	b08d      	sub	sp, #52	@ 0x34
 801b102:	af00      	add	r7, sp, #0
 801b104:	60f8      	str	r0, [r7, #12]
 801b106:	60b9      	str	r1, [r7, #8]
 801b108:	607a      	str	r2, [r7, #4]
  va_list vaArgs;
#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  uint8_t buf[UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
  uint16_t timestamp_size = 0u;
 801b10a:	2300      	movs	r3, #0
 801b10c:	82fb      	strh	r3, [r7, #22]
  uint16_t writepos;
  uint16_t idx;
#else
  uint8_t buf[UTIL_ADV_TRACE_TMP_BUF_SIZE+UTIL_ADV_TRACE_TMP_MAX_TIMESTMAP_SIZE];
#endif
  uint16_t buff_size = 0u;
 801b10e:	2300      	movs	r3, #0
 801b110:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  /* check verbose level */
  if(!(ADV_TRACE_Ctx.CurrentVerboseLevel >= VerboseLevel))
 801b112:	4b37      	ldr	r3, [pc, #220]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b114:	7a1b      	ldrb	r3, [r3, #8]
 801b116:	461a      	mov	r2, r3
 801b118:	68fb      	ldr	r3, [r7, #12]
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d902      	bls.n	801b124 <UTIL_ADV_TRACE_COND_FSend+0x28>
  {
    return UTIL_ADV_TRACE_GIVEUP;
 801b11e:	f06f 0304 	mvn.w	r3, #4
 801b122:	e05e      	b.n	801b1e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  if((Region & ADV_TRACE_Ctx.RegionMask) != Region)
 801b124:	4b32      	ldr	r3, [pc, #200]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b126:	68da      	ldr	r2, [r3, #12]
 801b128:	68bb      	ldr	r3, [r7, #8]
 801b12a:	4013      	ands	r3, r2
 801b12c:	68ba      	ldr	r2, [r7, #8]
 801b12e:	429a      	cmp	r2, r3
 801b130:	d002      	beq.n	801b138 <UTIL_ADV_TRACE_COND_FSend+0x3c>
  {
    return UTIL_ADV_TRACE_REGIONMASKED;
 801b132:	f06f 0305 	mvn.w	r3, #5
 801b136:	e054      	b.n	801b1e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if((ADV_TRACE_Ctx.timestamp_func != NULL) && (TimeStampState != 0u))
 801b138:	4b2d      	ldr	r3, [pc, #180]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b13a:	685b      	ldr	r3, [r3, #4]
 801b13c:	2b00      	cmp	r3, #0
 801b13e:	d00a      	beq.n	801b156 <UTIL_ADV_TRACE_COND_FSend+0x5a>
 801b140:	687b      	ldr	r3, [r7, #4]
 801b142:	2b00      	cmp	r3, #0
 801b144:	d007      	beq.n	801b156 <UTIL_ADV_TRACE_COND_FSend+0x5a>
  {
    ADV_TRACE_Ctx.timestamp_func(buf,&timestamp_size);
 801b146:	4b2a      	ldr	r3, [pc, #168]	@ (801b1f0 <UTIL_ADV_TRACE_COND_FSend+0xf4>)
 801b148:	685b      	ldr	r3, [r3, #4]
 801b14a:	f107 0116 	add.w	r1, r7, #22
 801b14e:	f107 0218 	add.w	r2, r7, #24
 801b152:	4610      	mov	r0, r2
 801b154:	4798      	blx	r3
  }

  va_start( vaArgs, strFormat);
 801b156:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 801b15a:	62bb      	str	r3, [r7, #40]	@ 0x28
  buff_size =(uint16_t)UTIL_ADV_TRACE_VSNPRINTF((char *)sztmp,UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b15c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b15e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b164:	4823      	ldr	r0, [pc, #140]	@ (801b1f4 <UTIL_ADV_TRACE_COND_FSend+0xf8>)
 801b166:	f7ff fa2b 	bl	801a5c0 <tiny_vsnprintf_like>
 801b16a:	4603      	mov	r3, r0
 801b16c:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  TRACE_Lock();
 801b16e:	f000 f9f1 	bl	801b554 <TRACE_Lock>

  /* if allocation is ok, write data into the buffer */
  if (TRACE_AllocateBufer((buff_size+timestamp_size),&writepos) != -1)
 801b172:	8afa      	ldrh	r2, [r7, #22]
 801b174:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 801b176:	4413      	add	r3, r2
 801b178:	b29b      	uxth	r3, r3
 801b17a:	f107 0214 	add.w	r2, r7, #20
 801b17e:	4611      	mov	r1, r2
 801b180:	4618      	mov	r0, r3
 801b182:	f000 f969 	bl	801b458 <TRACE_AllocateBufer>
 801b186:	4603      	mov	r3, r0
 801b188:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b18c:	d025      	beq.n	801b1da <UTIL_ADV_TRACE_COND_FSend+0xde>
    }
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

    /* copy the timestamp */
    for (idx = 0u; idx < timestamp_size; idx++)
 801b18e:	2300      	movs	r3, #0
 801b190:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b192:	e00e      	b.n	801b1b2 <UTIL_ADV_TRACE_COND_FSend+0xb6>
    {
      ADV_TRACE_Buffer[writepos] = buf[idx];
 801b194:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b196:	8aba      	ldrh	r2, [r7, #20]
 801b198:	3330      	adds	r3, #48	@ 0x30
 801b19a:	443b      	add	r3, r7
 801b19c:	f813 1c18 	ldrb.w	r1, [r3, #-24]
 801b1a0:	4b15      	ldr	r3, [pc, #84]	@ (801b1f8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b1a2:	5499      	strb	r1, [r3, r2]
      writepos = writepos + 1u;
 801b1a4:	8abb      	ldrh	r3, [r7, #20]
 801b1a6:	3301      	adds	r3, #1
 801b1a8:	b29b      	uxth	r3, r3
 801b1aa:	82bb      	strh	r3, [r7, #20]
    for (idx = 0u; idx < timestamp_size; idx++)
 801b1ac:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 801b1ae:	3301      	adds	r3, #1
 801b1b0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 801b1b2:	8afb      	ldrh	r3, [r7, #22]
 801b1b4:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 801b1b6:	429a      	cmp	r2, r3
 801b1b8:	d3ec      	bcc.n	801b194 <UTIL_ADV_TRACE_COND_FSend+0x98>
    }

    /* copy the data */
    (void)UTIL_ADV_TRACE_VSNPRINTF((char *)(&ADV_TRACE_Buffer[writepos]), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
 801b1ba:	8abb      	ldrh	r3, [r7, #20]
 801b1bc:	461a      	mov	r2, r3
 801b1be:	4b0e      	ldr	r3, [pc, #56]	@ (801b1f8 <UTIL_ADV_TRACE_COND_FSend+0xfc>)
 801b1c0:	18d0      	adds	r0, r2, r3
 801b1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b1c4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 801b1c6:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801b1ca:	f7ff f9f9 	bl	801a5c0 <tiny_vsnprintf_like>
    va_end(vaArgs);

    TRACE_UnLock();
 801b1ce:	f000 f9df 	bl	801b590 <TRACE_UnLock>

    return TRACE_Send();
 801b1d2:	f000 f831 	bl	801b238 <TRACE_Send>
 801b1d6:	4603      	mov	r3, r0
 801b1d8:	e003      	b.n	801b1e2 <UTIL_ADV_TRACE_COND_FSend+0xe6>
  }

  va_end(vaArgs);
  TRACE_UnLock();
 801b1da:	f000 f9d9 	bl	801b590 <TRACE_UnLock>
    ADV_TRACE_Ctx.OverRunStatus = TRACE_OVERRUN_INDICATION;
  }
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
#endif

  return UTIL_ADV_TRACE_MEM_FULL;
 801b1de:	f06f 0302 	mvn.w	r3, #2
  buff_size += (uint16_t) UTIL_ADV_TRACE_VSNPRINTF((char* )(buf + buff_size), UTIL_ADV_TRACE_TMP_BUF_SIZE, strFormat, vaArgs);
  va_end(vaArgs);

  return UTIL_ADV_TRACE_Send(buf, buff_size);
#endif
}
 801b1e2:	4618      	mov	r0, r3
 801b1e4:	3734      	adds	r7, #52	@ 0x34
 801b1e6:	46bd      	mov	sp, r7
 801b1e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801b1ec:	b001      	add	sp, #4
 801b1ee:	4770      	bx	lr
 801b1f0:	20001b40 	.word	0x20001b40
 801b1f4:	20001f58 	.word	0x20001f58
 801b1f8:	20001b58 	.word	0x20001b58

0801b1fc <UTIL_ADV_TRACE_RegisterTimeStampFunction>:
}
#endif

#if defined(UTIL_ADV_TRACE_CONDITIONNAL)
void UTIL_ADV_TRACE_RegisterTimeStampFunction(cb_timestamp *cb)
{
 801b1fc:	b480      	push	{r7}
 801b1fe:	b083      	sub	sp, #12
 801b200:	af00      	add	r7, sp, #0
 801b202:	6078      	str	r0, [r7, #4]
  ADV_TRACE_Ctx.timestamp_func = *cb;
 801b204:	4a03      	ldr	r2, [pc, #12]	@ (801b214 <UTIL_ADV_TRACE_RegisterTimeStampFunction+0x18>)
 801b206:	687b      	ldr	r3, [r7, #4]
 801b208:	6053      	str	r3, [r2, #4]
}
 801b20a:	bf00      	nop
 801b20c:	370c      	adds	r7, #12
 801b20e:	46bd      	mov	sp, r7
 801b210:	bc80      	pop	{r7}
 801b212:	4770      	bx	lr
 801b214:	20001b40 	.word	0x20001b40

0801b218 <UTIL_ADV_TRACE_SetVerboseLevel>:

void UTIL_ADV_TRACE_SetVerboseLevel(uint8_t Level)
{
 801b218:	b480      	push	{r7}
 801b21a:	b083      	sub	sp, #12
 801b21c:	af00      	add	r7, sp, #0
 801b21e:	4603      	mov	r3, r0
 801b220:	71fb      	strb	r3, [r7, #7]
  ADV_TRACE_Ctx.CurrentVerboseLevel = Level;
 801b222:	4a04      	ldr	r2, [pc, #16]	@ (801b234 <UTIL_ADV_TRACE_SetVerboseLevel+0x1c>)
 801b224:	79fb      	ldrb	r3, [r7, #7]
 801b226:	7213      	strb	r3, [r2, #8]
}
 801b228:	bf00      	nop
 801b22a:	370c      	adds	r7, #12
 801b22c:	46bd      	mov	sp, r7
 801b22e:	bc80      	pop	{r7}
 801b230:	4770      	bx	lr
 801b232:	bf00      	nop
 801b234:	20001b40 	.word	0x20001b40

0801b238 <TRACE_Send>:
/**
 * @brief send the data of the trace to low layer
 * @retval Status based on @ref UTIL_ADV_TRACE_Status_t
 */
static UTIL_ADV_TRACE_Status_t TRACE_Send(void)
{
 801b238:	b580      	push	{r7, lr}
 801b23a:	b088      	sub	sp, #32
 801b23c:	af00      	add	r7, sp, #0
  UTIL_ADV_TRACE_Status_t ret = UTIL_ADV_TRACE_OK;
 801b23e:	2300      	movs	r3, #0
 801b240:	77fb      	strb	r3, [r7, #31]
  uint8_t *ptr = NULL;
 801b242:	2300      	movs	r3, #0
 801b244:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b246:	f3ef 8310 	mrs	r3, PRIMASK
 801b24a:	613b      	str	r3, [r7, #16]
  return(result);
 801b24c:	693b      	ldr	r3, [r7, #16]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b24e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 801b250:	b672      	cpsid	i
}
 801b252:	bf00      	nop

  if(TRACE_IsLocked() == 0u)
 801b254:	f000 f9ba 	bl	801b5cc <TRACE_IsLocked>
 801b258:	4603      	mov	r3, r0
 801b25a:	2b00      	cmp	r3, #0
 801b25c:	d15d      	bne.n	801b31a <TRACE_Send+0xe2>
  {
    TRACE_Lock();
 801b25e:	f000 f979 	bl	801b554 <TRACE_Lock>

    if(ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr)
 801b262:	4b34      	ldr	r3, [pc, #208]	@ (801b334 <TRACE_Send+0xfc>)
 801b264:	8a1a      	ldrh	r2, [r3, #16]
 801b266:	4b33      	ldr	r3, [pc, #204]	@ (801b334 <TRACE_Send+0xfc>)
 801b268:	8a5b      	ldrh	r3, [r3, #18]
 801b26a:	429a      	cmp	r2, r3
 801b26c:	d04d      	beq.n	801b30a <TRACE_Send+0xd2>
    {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b26e:	4b31      	ldr	r3, [pc, #196]	@ (801b334 <TRACE_Send+0xfc>)
 801b270:	789b      	ldrb	r3, [r3, #2]
 801b272:	2b01      	cmp	r3, #1
 801b274:	d117      	bne.n	801b2a6 <TRACE_Send+0x6e>
      {
        ADV_TRACE_Ctx.TraceSentSize = (uint16_t) (ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr);
 801b276:	4b2f      	ldr	r3, [pc, #188]	@ (801b334 <TRACE_Send+0xfc>)
 801b278:	881a      	ldrh	r2, [r3, #0]
 801b27a:	4b2e      	ldr	r3, [pc, #184]	@ (801b334 <TRACE_Send+0xfc>)
 801b27c:	8a1b      	ldrh	r3, [r3, #16]
 801b27e:	1ad3      	subs	r3, r2, r3
 801b280:	b29a      	uxth	r2, r3
 801b282:	4b2c      	ldr	r3, [pc, #176]	@ (801b334 <TRACE_Send+0xfc>)
 801b284:	829a      	strh	r2, [r3, #20]
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b286:	4b2b      	ldr	r3, [pc, #172]	@ (801b334 <TRACE_Send+0xfc>)
 801b288:	2202      	movs	r2, #2
 801b28a:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b28c:	4b29      	ldr	r3, [pc, #164]	@ (801b334 <TRACE_Send+0xfc>)
 801b28e:	2200      	movs	r2, #0
 801b290:	801a      	strh	r2, [r3, #0]

        UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

        if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b292:	4b28      	ldr	r3, [pc, #160]	@ (801b334 <TRACE_Send+0xfc>)
 801b294:	8a9b      	ldrh	r3, [r3, #20]
 801b296:	2b00      	cmp	r3, #0
 801b298:	d105      	bne.n	801b2a6 <TRACE_Send+0x6e>
        {
          ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b29a:	4b26      	ldr	r3, [pc, #152]	@ (801b334 <TRACE_Send+0xfc>)
 801b29c:	2200      	movs	r2, #0
 801b29e:	709a      	strb	r2, [r3, #2]
          ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b2a0:	4b24      	ldr	r3, [pc, #144]	@ (801b334 <TRACE_Send+0xfc>)
 801b2a2:	2200      	movs	r2, #0
 801b2a4:	821a      	strh	r2, [r3, #16]
        }
      }

      if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b2a6:	4b23      	ldr	r3, [pc, #140]	@ (801b334 <TRACE_Send+0xfc>)
 801b2a8:	789b      	ldrb	r3, [r3, #2]
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d115      	bne.n	801b2da <TRACE_Send+0xa2>
      {
#endif
        if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b2ae:	4b21      	ldr	r3, [pc, #132]	@ (801b334 <TRACE_Send+0xfc>)
 801b2b0:	8a5a      	ldrh	r2, [r3, #18]
 801b2b2:	4b20      	ldr	r3, [pc, #128]	@ (801b334 <TRACE_Send+0xfc>)
 801b2b4:	8a1b      	ldrh	r3, [r3, #16]
 801b2b6:	429a      	cmp	r2, r3
 801b2b8:	d908      	bls.n	801b2cc <TRACE_Send+0x94>
        {
          ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b2ba:	4b1e      	ldr	r3, [pc, #120]	@ (801b334 <TRACE_Send+0xfc>)
 801b2bc:	8a5a      	ldrh	r2, [r3, #18]
 801b2be:	4b1d      	ldr	r3, [pc, #116]	@ (801b334 <TRACE_Send+0xfc>)
 801b2c0:	8a1b      	ldrh	r3, [r3, #16]
 801b2c2:	1ad3      	subs	r3, r2, r3
 801b2c4:	b29a      	uxth	r2, r3
 801b2c6:	4b1b      	ldr	r3, [pc, #108]	@ (801b334 <TRACE_Send+0xfc>)
 801b2c8:	829a      	strh	r2, [r3, #20]
 801b2ca:	e006      	b.n	801b2da <TRACE_Send+0xa2>
        }
        else /* TraceRdPtr > TraceWrPtr */
        {
          ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b2cc:	4b19      	ldr	r3, [pc, #100]	@ (801b334 <TRACE_Send+0xfc>)
 801b2ce:	8a1b      	ldrh	r3, [r3, #16]
 801b2d0:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b2d4:	b29a      	uxth	r2, r3
 801b2d6:	4b17      	ldr	r3, [pc, #92]	@ (801b334 <TRACE_Send+0xfc>)
 801b2d8:	829a      	strh	r2, [r3, #20]

        }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
      }
#endif
      ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b2da:	4b16      	ldr	r3, [pc, #88]	@ (801b334 <TRACE_Send+0xfc>)
 801b2dc:	8a1b      	ldrh	r3, [r3, #16]
 801b2de:	461a      	mov	r2, r3
 801b2e0:	4b15      	ldr	r3, [pc, #84]	@ (801b338 <TRACE_Send+0x100>)
 801b2e2:	4413      	add	r3, r2
 801b2e4:	61bb      	str	r3, [r7, #24]
 801b2e6:	697b      	ldr	r3, [r7, #20]
 801b2e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b2ea:	68fb      	ldr	r3, [r7, #12]
 801b2ec:	f383 8810 	msr	PRIMASK, r3
}
 801b2f0:	bf00      	nop

      UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
      UTIL_ADV_TRACE_PreSendHook();
 801b2f2:	f7e6 fcc5 	bl	8001c80 <UTIL_ADV_TRACE_PreSendHook>

      UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
      ret = UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b2f6:	4b11      	ldr	r3, [pc, #68]	@ (801b33c <TRACE_Send+0x104>)
 801b2f8:	68db      	ldr	r3, [r3, #12]
 801b2fa:	4a0e      	ldr	r2, [pc, #56]	@ (801b334 <TRACE_Send+0xfc>)
 801b2fc:	8a92      	ldrh	r2, [r2, #20]
 801b2fe:	4611      	mov	r1, r2
 801b300:	69b8      	ldr	r0, [r7, #24]
 801b302:	4798      	blx	r3
 801b304:	4603      	mov	r3, r0
 801b306:	77fb      	strb	r3, [r7, #31]
 801b308:	e00d      	b.n	801b326 <TRACE_Send+0xee>
    }
    else
    {
      TRACE_UnLock();
 801b30a:	f000 f941 	bl	801b590 <TRACE_UnLock>
 801b30e:	697b      	ldr	r3, [r7, #20]
 801b310:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b312:	68bb      	ldr	r3, [r7, #8]
 801b314:	f383 8810 	msr	PRIMASK, r3
}
 801b318:	e005      	b.n	801b326 <TRACE_Send+0xee>
 801b31a:	697b      	ldr	r3, [r7, #20]
 801b31c:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	f383 8810 	msr	PRIMASK, r3
}
 801b324:	bf00      	nop
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  }

  return ret;
 801b326:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801b32a:	4618      	mov	r0, r3
 801b32c:	3720      	adds	r7, #32
 801b32e:	46bd      	mov	sp, r7
 801b330:	bd80      	pop	{r7, pc}
 801b332:	bf00      	nop
 801b334:	20001b40 	.word	0x20001b40
 801b338:	20001b58 	.word	0x20001b58
 801b33c:	0801c180 	.word	0x0801c180

0801b340 <TRACE_TxCpltCallback>:
 * @brief Tx callback called by the low layer level to inform a transfer complete
 * @param Ptr pointer not used only for HAL compatibility
 * @retval none
 */
static void TRACE_TxCpltCallback(void *Ptr)
{
 801b340:	b580      	push	{r7, lr}
 801b342:	b088      	sub	sp, #32
 801b344:	af00      	add	r7, sp, #0
 801b346:	6078      	str	r0, [r7, #4]
  uint8_t *ptr = NULL;
 801b348:	2300      	movs	r3, #0
 801b34a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b34c:	f3ef 8310 	mrs	r3, PRIMASK
 801b350:	617b      	str	r3, [r7, #20]
  return(result);
 801b352:	697b      	ldr	r3, [r7, #20]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b354:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("cpsid i" : : : "memory");
 801b356:	b672      	cpsid	i
}
 801b358:	bf00      	nop
    ADV_TRACE_Ctx.TraceSentSize = 0u;
  }
#endif

#if defined(UTIL_ADV_TRACE_UNCHUNK_MODE)
  if(TRACE_UNCHUNK_TRANSFER == ADV_TRACE_Ctx.unchunk_status)
 801b35a:	4b3c      	ldr	r3, [pc, #240]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b35c:	789b      	ldrb	r3, [r3, #2]
 801b35e:	2b02      	cmp	r3, #2
 801b360:	d106      	bne.n	801b370 <TRACE_TxCpltCallback+0x30>
  {
    ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b362:	4b3a      	ldr	r3, [pc, #232]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b364:	2200      	movs	r2, #0
 801b366:	709a      	strb	r2, [r3, #2]
    ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b368:	4b38      	ldr	r3, [pc, #224]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b36a:	2200      	movs	r2, #0
 801b36c:	821a      	strh	r2, [r3, #16]
 801b36e:	e00a      	b.n	801b386 <TRACE_TxCpltCallback+0x46>
    UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk complete\n");
  }
  else
  {
    ADV_TRACE_Ctx.TraceRdPtr = (ADV_TRACE_Ctx.TraceRdPtr + ADV_TRACE_Ctx.TraceSentSize) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b370:	4b36      	ldr	r3, [pc, #216]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b372:	8a1a      	ldrh	r2, [r3, #16]
 801b374:	4b35      	ldr	r3, [pc, #212]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b376:	8a9b      	ldrh	r3, [r3, #20]
 801b378:	4413      	add	r3, r2
 801b37a:	b29b      	uxth	r3, r3
 801b37c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b380:	b29a      	uxth	r2, r3
 801b382:	4b32      	ldr	r3, [pc, #200]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b384:	821a      	strh	r2, [r3, #16]
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
    return;
  }
#endif

  if((ADV_TRACE_Ctx.TraceRdPtr != ADV_TRACE_Ctx.TraceWrPtr) && (1u == ADV_TRACE_Ctx.TraceLock))
 801b386:	4b31      	ldr	r3, [pc, #196]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b388:	8a1a      	ldrh	r2, [r3, #16]
 801b38a:	4b30      	ldr	r3, [pc, #192]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b38c:	8a5b      	ldrh	r3, [r3, #18]
 801b38e:	429a      	cmp	r2, r3
 801b390:	d04d      	beq.n	801b42e <TRACE_TxCpltCallback+0xee>
 801b392:	4b2e      	ldr	r3, [pc, #184]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b394:	8adb      	ldrh	r3, [r3, #22]
 801b396:	2b01      	cmp	r3, #1
 801b398:	d149      	bne.n	801b42e <TRACE_TxCpltCallback+0xee>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if(TRACE_UNCHUNK_DETECTED == ADV_TRACE_Ctx.unchunk_status)
 801b39a:	4b2c      	ldr	r3, [pc, #176]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b39c:	789b      	ldrb	r3, [r3, #2]
 801b39e:	2b01      	cmp	r3, #1
 801b3a0:	d117      	bne.n	801b3d2 <TRACE_TxCpltCallback+0x92>
    {
      ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.unchunk_enabled - ADV_TRACE_Ctx.TraceRdPtr;
 801b3a2:	4b2a      	ldr	r3, [pc, #168]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3a4:	881a      	ldrh	r2, [r3, #0]
 801b3a6:	4b29      	ldr	r3, [pc, #164]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3a8:	8a1b      	ldrh	r3, [r3, #16]
 801b3aa:	1ad3      	subs	r3, r2, r3
 801b3ac:	b29a      	uxth	r2, r3
 801b3ae:	4b27      	ldr	r3, [pc, #156]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3b0:	829a      	strh	r2, [r3, #20]
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_TRANSFER;
 801b3b2:	4b26      	ldr	r3, [pc, #152]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3b4:	2202      	movs	r2, #2
 801b3b6:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = 0;
 801b3b8:	4b24      	ldr	r3, [pc, #144]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3ba:	2200      	movs	r2, #0
 801b3bc:	801a      	strh	r2, [r3, #0]

      UTIL_ADV_TRACE_DEBUG("\nTRACE_TxCpltCallback::unchunk start(%d,%d)\n", ADV_TRACE_Ctx.unchunk_enabled, ADV_TRACE_Ctx.TraceRdPtr);

      if(0u == ADV_TRACE_Ctx.TraceSentSize)
 801b3be:	4b23      	ldr	r3, [pc, #140]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3c0:	8a9b      	ldrh	r3, [r3, #20]
 801b3c2:	2b00      	cmp	r3, #0
 801b3c4:	d105      	bne.n	801b3d2 <TRACE_TxCpltCallback+0x92>
      {
        /* this case occurs when an ongoing write aligned the Rd position with chunk position */
        /* in that case the unchunk is forgot */
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_NONE;
 801b3c6:	4b21      	ldr	r3, [pc, #132]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3c8:	2200      	movs	r2, #0
 801b3ca:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.TraceRdPtr = 0;
 801b3cc:	4b1f      	ldr	r3, [pc, #124]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3ce:	2200      	movs	r2, #0
 801b3d0:	821a      	strh	r2, [r3, #16]
      }
    }

    if(TRACE_UNCHUNK_NONE == ADV_TRACE_Ctx.unchunk_status)
 801b3d2:	4b1e      	ldr	r3, [pc, #120]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3d4:	789b      	ldrb	r3, [r3, #2]
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d115      	bne.n	801b406 <TRACE_TxCpltCallback+0xc6>
    {
#endif
      if(ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b3da:	4b1c      	ldr	r3, [pc, #112]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3dc:	8a5a      	ldrh	r2, [r3, #18]
 801b3de:	4b1b      	ldr	r3, [pc, #108]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3e0:	8a1b      	ldrh	r3, [r3, #16]
 801b3e2:	429a      	cmp	r2, r3
 801b3e4:	d908      	bls.n	801b3f8 <TRACE_TxCpltCallback+0xb8>
      {
        ADV_TRACE_Ctx.TraceSentSize = ADV_TRACE_Ctx.TraceWrPtr - ADV_TRACE_Ctx.TraceRdPtr;
 801b3e6:	4b19      	ldr	r3, [pc, #100]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3e8:	8a5a      	ldrh	r2, [r3, #18]
 801b3ea:	4b18      	ldr	r3, [pc, #96]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3ec:	8a1b      	ldrh	r3, [r3, #16]
 801b3ee:	1ad3      	subs	r3, r2, r3
 801b3f0:	b29a      	uxth	r2, r3
 801b3f2:	4b16      	ldr	r3, [pc, #88]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3f4:	829a      	strh	r2, [r3, #20]
 801b3f6:	e006      	b.n	801b406 <TRACE_TxCpltCallback+0xc6>
      }
      else /* TraceRdPtr > TraceWrPtr */
      {
        ADV_TRACE_Ctx.TraceSentSize = UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceRdPtr;
 801b3f8:	4b14      	ldr	r3, [pc, #80]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b3fa:	8a1b      	ldrh	r3, [r3, #16]
 801b3fc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b400:	b29a      	uxth	r2, r3
 801b402:	4b12      	ldr	r3, [pc, #72]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b404:	829a      	strh	r2, [r3, #20]
      }
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    }
#endif
    ptr = &ADV_TRACE_Buffer[ADV_TRACE_Ctx.TraceRdPtr];
 801b406:	4b11      	ldr	r3, [pc, #68]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b408:	8a1b      	ldrh	r3, [r3, #16]
 801b40a:	461a      	mov	r2, r3
 801b40c:	4b10      	ldr	r3, [pc, #64]	@ (801b450 <TRACE_TxCpltCallback+0x110>)
 801b40e:	4413      	add	r3, r2
 801b410:	61fb      	str	r3, [r7, #28]
 801b412:	69bb      	ldr	r3, [r7, #24]
 801b414:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b416:	693b      	ldr	r3, [r7, #16]
 801b418:	f383 8810 	msr	PRIMASK, r3
}
 801b41c:	bf00      	nop
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_DEBUG("\n--TRACE_Send(%d-%d)--\n", ADV_TRACE_Ctx.TraceRdPtr, ADV_TRACE_Ctx.TraceSentSize);
    UTIL_TraceDriver.Send(ptr, ADV_TRACE_Ctx.TraceSentSize);
 801b41e:	4b0d      	ldr	r3, [pc, #52]	@ (801b454 <TRACE_TxCpltCallback+0x114>)
 801b420:	68db      	ldr	r3, [r3, #12]
 801b422:	4a0a      	ldr	r2, [pc, #40]	@ (801b44c <TRACE_TxCpltCallback+0x10c>)
 801b424:	8a92      	ldrh	r2, [r2, #20]
 801b426:	4611      	mov	r1, r2
 801b428:	69f8      	ldr	r0, [r7, #28]
 801b42a:	4798      	blx	r3
 801b42c:	e00a      	b.n	801b444 <TRACE_TxCpltCallback+0x104>
 801b42e:	69bb      	ldr	r3, [r7, #24]
 801b430:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b432:	68fb      	ldr	r3, [r7, #12]
 801b434:	f383 8810 	msr	PRIMASK, r3
}
 801b438:	bf00      	nop
  }
  else
  {
    UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
    UTIL_ADV_TRACE_PostSendHook();
 801b43a:	f7e6 fc29 	bl	8001c90 <UTIL_ADV_TRACE_PostSendHook>
    TRACE_UnLock();
 801b43e:	f000 f8a7 	bl	801b590 <TRACE_UnLock>
  }
}
 801b442:	bf00      	nop
 801b444:	bf00      	nop
 801b446:	3720      	adds	r7, #32
 801b448:	46bd      	mov	sp, r7
 801b44a:	bd80      	pop	{r7, pc}
 801b44c:	20001b40 	.word	0x20001b40
 801b450:	20001b58 	.word	0x20001b58
 801b454:	0801c180 	.word	0x0801c180

0801b458 <TRACE_AllocateBufer>:
 * @param  Size to allocate within fifo
 * @param  Pos position within the fifo
 * @retval write position inside the buffer is -1 no space available.
 */
static int16_t TRACE_AllocateBufer(uint16_t Size, uint16_t *Pos)
{
 801b458:	b480      	push	{r7}
 801b45a:	b087      	sub	sp, #28
 801b45c:	af00      	add	r7, sp, #0
 801b45e:	4603      	mov	r3, r0
 801b460:	6039      	str	r1, [r7, #0]
 801b462:	80fb      	strh	r3, [r7, #6]
  uint16_t freesize;
  int16_t ret = -1;
 801b464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801b468:	82bb      	strh	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b46a:	f3ef 8310 	mrs	r3, PRIMASK
 801b46e:	60fb      	str	r3, [r7, #12]
  return(result);
 801b470:	68fb      	ldr	r3, [r7, #12]

  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b472:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 801b474:	b672      	cpsid	i
}
 801b476:	bf00      	nop

  if(ADV_TRACE_Ctx.TraceWrPtr == ADV_TRACE_Ctx.TraceRdPtr)
 801b478:	4b35      	ldr	r3, [pc, #212]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b47a:	8a5a      	ldrh	r2, [r3, #18]
 801b47c:	4b34      	ldr	r3, [pc, #208]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b47e:	8a1b      	ldrh	r3, [r3, #16]
 801b480:	429a      	cmp	r2, r3
 801b482:	d11b      	bne.n	801b4bc <TRACE_AllocateBufer+0x64>
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b484:	4b32      	ldr	r3, [pc, #200]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b486:	8a5b      	ldrh	r3, [r3, #18]
 801b488:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b48c:	82fb      	strh	r3, [r7, #22]
    if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size))
 801b48e:	88fa      	ldrh	r2, [r7, #6]
 801b490:	8afb      	ldrh	r3, [r7, #22]
 801b492:	429a      	cmp	r2, r3
 801b494:	d33a      	bcc.n	801b50c <TRACE_AllocateBufer+0xb4>
 801b496:	4b2e      	ldr	r3, [pc, #184]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b498:	8a1b      	ldrh	r3, [r3, #16]
 801b49a:	88fa      	ldrh	r2, [r7, #6]
 801b49c:	429a      	cmp	r2, r3
 801b49e:	d235      	bcs.n	801b50c <TRACE_AllocateBufer+0xb4>
    {
      ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b4a0:	4b2b      	ldr	r3, [pc, #172]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4a2:	2201      	movs	r2, #1
 801b4a4:	709a      	strb	r2, [r3, #2]
      ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b4a6:	4b2a      	ldr	r3, [pc, #168]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4a8:	8a5a      	ldrh	r2, [r3, #18]
 801b4aa:	4b29      	ldr	r3, [pc, #164]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4ac:	801a      	strh	r2, [r3, #0]
      freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b4ae:	4b28      	ldr	r3, [pc, #160]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4b0:	8a1b      	ldrh	r3, [r3, #16]
 801b4b2:	82fb      	strh	r3, [r7, #22]
      ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b4b4:	4b26      	ldr	r3, [pc, #152]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4b6:	2200      	movs	r2, #0
 801b4b8:	825a      	strh	r2, [r3, #18]
 801b4ba:	e027      	b.n	801b50c <TRACE_AllocateBufer+0xb4>
#endif
  }
  else
  {
#ifdef UTIL_ADV_TRACE_UNCHUNK_MODE
    if (ADV_TRACE_Ctx.TraceWrPtr > ADV_TRACE_Ctx.TraceRdPtr)
 801b4bc:	4b24      	ldr	r3, [pc, #144]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4be:	8a5a      	ldrh	r2, [r3, #18]
 801b4c0:	4b23      	ldr	r3, [pc, #140]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4c2:	8a1b      	ldrh	r3, [r3, #16]
 801b4c4:	429a      	cmp	r2, r3
 801b4c6:	d91b      	bls.n	801b500 <TRACE_AllocateBufer+0xa8>
    {
      freesize = (uint16_t)(UTIL_ADV_TRACE_FIFO_SIZE - ADV_TRACE_Ctx.TraceWrPtr);
 801b4c8:	4b21      	ldr	r3, [pc, #132]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4ca:	8a5b      	ldrh	r3, [r3, #18]
 801b4cc:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 801b4d0:	82fb      	strh	r3, [r7, #22]
      if((Size >= freesize) && (ADV_TRACE_Ctx.TraceRdPtr > Size)) 
 801b4d2:	88fa      	ldrh	r2, [r7, #6]
 801b4d4:	8afb      	ldrh	r3, [r7, #22]
 801b4d6:	429a      	cmp	r2, r3
 801b4d8:	d318      	bcc.n	801b50c <TRACE_AllocateBufer+0xb4>
 801b4da:	4b1d      	ldr	r3, [pc, #116]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4dc:	8a1b      	ldrh	r3, [r3, #16]
 801b4de:	88fa      	ldrh	r2, [r7, #6]
 801b4e0:	429a      	cmp	r2, r3
 801b4e2:	d213      	bcs.n	801b50c <TRACE_AllocateBufer+0xb4>
      {
        ADV_TRACE_Ctx.unchunk_status = TRACE_UNCHUNK_DETECTED;
 801b4e4:	4b1a      	ldr	r3, [pc, #104]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4e6:	2201      	movs	r2, #1
 801b4e8:	709a      	strb	r2, [r3, #2]
        ADV_TRACE_Ctx.unchunk_enabled = ADV_TRACE_Ctx.TraceWrPtr;
 801b4ea:	4b19      	ldr	r3, [pc, #100]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4ec:	8a5a      	ldrh	r2, [r3, #18]
 801b4ee:	4b18      	ldr	r3, [pc, #96]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4f0:	801a      	strh	r2, [r3, #0]
        freesize = ADV_TRACE_Ctx.TraceRdPtr;
 801b4f2:	4b17      	ldr	r3, [pc, #92]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4f4:	8a1b      	ldrh	r3, [r3, #16]
 801b4f6:	82fb      	strh	r3, [r7, #22]
        ADV_TRACE_Ctx.TraceWrPtr = 0;
 801b4f8:	4b15      	ldr	r3, [pc, #84]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b4fa:	2200      	movs	r2, #0
 801b4fc:	825a      	strh	r2, [r3, #18]
 801b4fe:	e005      	b.n	801b50c <TRACE_AllocateBufer+0xb4>
      }
    }
    else
    {
      freesize = (uint16_t)(ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr);
 801b500:	4b13      	ldr	r3, [pc, #76]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b502:	8a1a      	ldrh	r2, [r3, #16]
 801b504:	4b12      	ldr	r3, [pc, #72]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b506:	8a5b      	ldrh	r3, [r3, #18]
 801b508:	1ad3      	subs	r3, r2, r3
 801b50a:	82fb      	strh	r3, [r7, #22]
      freesize = ADV_TRACE_Ctx.TraceRdPtr - ADV_TRACE_Ctx.TraceWrPtr;
    }
#endif
  }

  if(freesize > Size)
 801b50c:	8afa      	ldrh	r2, [r7, #22]
 801b50e:	88fb      	ldrh	r3, [r7, #6]
 801b510:	429a      	cmp	r2, r3
 801b512:	d90f      	bls.n	801b534 <TRACE_AllocateBufer+0xdc>
  {
    *Pos = ADV_TRACE_Ctx.TraceWrPtr;
 801b514:	4b0e      	ldr	r3, [pc, #56]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b516:	8a5a      	ldrh	r2, [r3, #18]
 801b518:	683b      	ldr	r3, [r7, #0]
 801b51a:	801a      	strh	r2, [r3, #0]
    ADV_TRACE_Ctx.TraceWrPtr = (ADV_TRACE_Ctx.TraceWrPtr + Size) % UTIL_ADV_TRACE_FIFO_SIZE;
 801b51c:	4b0c      	ldr	r3, [pc, #48]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b51e:	8a5a      	ldrh	r2, [r3, #18]
 801b520:	88fb      	ldrh	r3, [r7, #6]
 801b522:	4413      	add	r3, r2
 801b524:	b29b      	uxth	r3, r3
 801b526:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b52a:	b29a      	uxth	r2, r3
 801b52c:	4b08      	ldr	r3, [pc, #32]	@ (801b550 <TRACE_AllocateBufer+0xf8>)
 801b52e:	825a      	strh	r2, [r3, #18]
    ret = 0;
 801b530:	2300      	movs	r3, #0
 801b532:	82bb      	strh	r3, [r7, #20]
 801b534:	693b      	ldr	r3, [r7, #16]
 801b536:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b538:	68bb      	ldr	r3, [r7, #8]
 801b53a:	f383 8810 	msr	PRIMASK, r3
}
 801b53e:	bf00      	nop
    }
  }
#endif

  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
  return ret;
 801b540:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
}
 801b544:	4618      	mov	r0, r3
 801b546:	371c      	adds	r7, #28
 801b548:	46bd      	mov	sp, r7
 801b54a:	bc80      	pop	{r7}
 801b54c:	4770      	bx	lr
 801b54e:	bf00      	nop
 801b550:	20001b40 	.word	0x20001b40

0801b554 <TRACE_Lock>:
/**
 * @brief  Lock the trace buffer.
 * @retval None.
 */
static void TRACE_Lock(void)
{
 801b554:	b480      	push	{r7}
 801b556:	b085      	sub	sp, #20
 801b558:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b55a:	f3ef 8310 	mrs	r3, PRIMASK
 801b55e:	607b      	str	r3, [r7, #4]
  return(result);
 801b560:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b564:	b672      	cpsid	i
}
 801b566:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock++;
 801b568:	4b08      	ldr	r3, [pc, #32]	@ (801b58c <TRACE_Lock+0x38>)
 801b56a:	8adb      	ldrh	r3, [r3, #22]
 801b56c:	3301      	adds	r3, #1
 801b56e:	b29a      	uxth	r2, r3
 801b570:	4b06      	ldr	r3, [pc, #24]	@ (801b58c <TRACE_Lock+0x38>)
 801b572:	82da      	strh	r2, [r3, #22]
 801b574:	68fb      	ldr	r3, [r7, #12]
 801b576:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b578:	68bb      	ldr	r3, [r7, #8]
 801b57a:	f383 8810 	msr	PRIMASK, r3
}
 801b57e:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b580:	bf00      	nop
 801b582:	3714      	adds	r7, #20
 801b584:	46bd      	mov	sp, r7
 801b586:	bc80      	pop	{r7}
 801b588:	4770      	bx	lr
 801b58a:	bf00      	nop
 801b58c:	20001b40 	.word	0x20001b40

0801b590 <TRACE_UnLock>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static void TRACE_UnLock(void)
{
 801b590:	b480      	push	{r7}
 801b592:	b085      	sub	sp, #20
 801b594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801b596:	f3ef 8310 	mrs	r3, PRIMASK
 801b59a:	607b      	str	r3, [r7, #4]
  return(result);
 801b59c:	687b      	ldr	r3, [r7, #4]
  UTIL_ADV_TRACE_ENTER_CRITICAL_SECTION();
 801b59e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 801b5a0:	b672      	cpsid	i
}
 801b5a2:	bf00      	nop
  ADV_TRACE_Ctx.TraceLock--;
 801b5a4:	4b08      	ldr	r3, [pc, #32]	@ (801b5c8 <TRACE_UnLock+0x38>)
 801b5a6:	8adb      	ldrh	r3, [r3, #22]
 801b5a8:	3b01      	subs	r3, #1
 801b5aa:	b29a      	uxth	r2, r3
 801b5ac:	4b06      	ldr	r3, [pc, #24]	@ (801b5c8 <TRACE_UnLock+0x38>)
 801b5ae:	82da      	strh	r2, [r3, #22]
 801b5b0:	68fb      	ldr	r3, [r7, #12]
 801b5b2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801b5b4:	68bb      	ldr	r3, [r7, #8]
 801b5b6:	f383 8810 	msr	PRIMASK, r3
}
 801b5ba:	bf00      	nop
  UTIL_ADV_TRACE_EXIT_CRITICAL_SECTION();
}
 801b5bc:	bf00      	nop
 801b5be:	3714      	adds	r7, #20
 801b5c0:	46bd      	mov	sp, r7
 801b5c2:	bc80      	pop	{r7}
 801b5c4:	4770      	bx	lr
 801b5c6:	bf00      	nop
 801b5c8:	20001b40 	.word	0x20001b40

0801b5cc <TRACE_IsLocked>:
/**
 * @brief  UnLock the trace buffer.
 * @retval None.
 */
static uint32_t TRACE_IsLocked(void)
{
 801b5cc:	b480      	push	{r7}
 801b5ce:	af00      	add	r7, sp, #0
  return (ADV_TRACE_Ctx.TraceLock == 0u? 0u: 1u);
 801b5d0:	4b05      	ldr	r3, [pc, #20]	@ (801b5e8 <TRACE_IsLocked+0x1c>)
 801b5d2:	8adb      	ldrh	r3, [r3, #22]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	bf14      	ite	ne
 801b5d8:	2301      	movne	r3, #1
 801b5da:	2300      	moveq	r3, #0
 801b5dc:	b2db      	uxtb	r3, r3
}
 801b5de:	4618      	mov	r0, r3
 801b5e0:	46bd      	mov	sp, r7
 801b5e2:	bc80      	pop	{r7}
 801b5e4:	4770      	bx	lr
 801b5e6:	bf00      	nop
 801b5e8:	20001b40 	.word	0x20001b40

0801b5ec <memset>:
 801b5ec:	4402      	add	r2, r0
 801b5ee:	4603      	mov	r3, r0
 801b5f0:	4293      	cmp	r3, r2
 801b5f2:	d100      	bne.n	801b5f6 <memset+0xa>
 801b5f4:	4770      	bx	lr
 801b5f6:	f803 1b01 	strb.w	r1, [r3], #1
 801b5fa:	e7f9      	b.n	801b5f0 <memset+0x4>

0801b5fc <__libc_init_array>:
 801b5fc:	b570      	push	{r4, r5, r6, lr}
 801b5fe:	4d0d      	ldr	r5, [pc, #52]	@ (801b634 <__libc_init_array+0x38>)
 801b600:	4c0d      	ldr	r4, [pc, #52]	@ (801b638 <__libc_init_array+0x3c>)
 801b602:	1b64      	subs	r4, r4, r5
 801b604:	10a4      	asrs	r4, r4, #2
 801b606:	2600      	movs	r6, #0
 801b608:	42a6      	cmp	r6, r4
 801b60a:	d109      	bne.n	801b620 <__libc_init_array+0x24>
 801b60c:	4d0b      	ldr	r5, [pc, #44]	@ (801b63c <__libc_init_array+0x40>)
 801b60e:	4c0c      	ldr	r4, [pc, #48]	@ (801b640 <__libc_init_array+0x44>)
 801b610:	f000 f89a 	bl	801b748 <_init>
 801b614:	1b64      	subs	r4, r4, r5
 801b616:	10a4      	asrs	r4, r4, #2
 801b618:	2600      	movs	r6, #0
 801b61a:	42a6      	cmp	r6, r4
 801b61c:	d105      	bne.n	801b62a <__libc_init_array+0x2e>
 801b61e:	bd70      	pop	{r4, r5, r6, pc}
 801b620:	f855 3b04 	ldr.w	r3, [r5], #4
 801b624:	4798      	blx	r3
 801b626:	3601      	adds	r6, #1
 801b628:	e7ee      	b.n	801b608 <__libc_init_array+0xc>
 801b62a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b62e:	4798      	blx	r3
 801b630:	3601      	adds	r6, #1
 801b632:	e7f2      	b.n	801b61a <__libc_init_array+0x1e>
 801b634:	0801c710 	.word	0x0801c710
 801b638:	0801c710 	.word	0x0801c710
 801b63c:	0801c710 	.word	0x0801c710
 801b640:	0801c714 	.word	0x0801c714
 801b644:	00000000 	.word	0x00000000

0801b648 <floor>:
 801b648:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b64c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801b650:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 801b654:	2e13      	cmp	r6, #19
 801b656:	4602      	mov	r2, r0
 801b658:	460b      	mov	r3, r1
 801b65a:	460c      	mov	r4, r1
 801b65c:	4605      	mov	r5, r0
 801b65e:	4680      	mov	r8, r0
 801b660:	dc35      	bgt.n	801b6ce <floor+0x86>
 801b662:	2e00      	cmp	r6, #0
 801b664:	da17      	bge.n	801b696 <floor+0x4e>
 801b666:	a334      	add	r3, pc, #208	@ (adr r3, 801b738 <floor+0xf0>)
 801b668:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b66c:	f7e4 fd92 	bl	8000194 <__adddf3>
 801b670:	2200      	movs	r2, #0
 801b672:	2300      	movs	r3, #0
 801b674:	f7e4 ffc2 	bl	80005fc <__aeabi_dcmpgt>
 801b678:	b150      	cbz	r0, 801b690 <floor+0x48>
 801b67a:	2c00      	cmp	r4, #0
 801b67c:	da57      	bge.n	801b72e <floor+0xe6>
 801b67e:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 801b682:	432c      	orrs	r4, r5
 801b684:	2500      	movs	r5, #0
 801b686:	42ac      	cmp	r4, r5
 801b688:	4c2d      	ldr	r4, [pc, #180]	@ (801b740 <floor+0xf8>)
 801b68a:	bf08      	it	eq
 801b68c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 801b690:	4623      	mov	r3, r4
 801b692:	462a      	mov	r2, r5
 801b694:	e024      	b.n	801b6e0 <floor+0x98>
 801b696:	4f2b      	ldr	r7, [pc, #172]	@ (801b744 <floor+0xfc>)
 801b698:	4137      	asrs	r7, r6
 801b69a:	ea01 0c07 	and.w	ip, r1, r7
 801b69e:	ea5c 0c00 	orrs.w	ip, ip, r0
 801b6a2:	d01d      	beq.n	801b6e0 <floor+0x98>
 801b6a4:	a324      	add	r3, pc, #144	@ (adr r3, 801b738 <floor+0xf0>)
 801b6a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6aa:	f7e4 fd73 	bl	8000194 <__adddf3>
 801b6ae:	2200      	movs	r2, #0
 801b6b0:	2300      	movs	r3, #0
 801b6b2:	f7e4 ffa3 	bl	80005fc <__aeabi_dcmpgt>
 801b6b6:	2800      	cmp	r0, #0
 801b6b8:	d0ea      	beq.n	801b690 <floor+0x48>
 801b6ba:	2c00      	cmp	r4, #0
 801b6bc:	bfbe      	ittt	lt
 801b6be:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 801b6c2:	4133      	asrlt	r3, r6
 801b6c4:	18e4      	addlt	r4, r4, r3
 801b6c6:	ea24 0407 	bic.w	r4, r4, r7
 801b6ca:	2500      	movs	r5, #0
 801b6cc:	e7e0      	b.n	801b690 <floor+0x48>
 801b6ce:	2e33      	cmp	r6, #51	@ 0x33
 801b6d0:	dd0a      	ble.n	801b6e8 <floor+0xa0>
 801b6d2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801b6d6:	d103      	bne.n	801b6e0 <floor+0x98>
 801b6d8:	f7e4 fd5c 	bl	8000194 <__adddf3>
 801b6dc:	4602      	mov	r2, r0
 801b6de:	460b      	mov	r3, r1
 801b6e0:	4610      	mov	r0, r2
 801b6e2:	4619      	mov	r1, r3
 801b6e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b6e8:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 801b6ec:	f04f 3cff 	mov.w	ip, #4294967295
 801b6f0:	fa2c f707 	lsr.w	r7, ip, r7
 801b6f4:	4207      	tst	r7, r0
 801b6f6:	d0f3      	beq.n	801b6e0 <floor+0x98>
 801b6f8:	a30f      	add	r3, pc, #60	@ (adr r3, 801b738 <floor+0xf0>)
 801b6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6fe:	f7e4 fd49 	bl	8000194 <__adddf3>
 801b702:	2200      	movs	r2, #0
 801b704:	2300      	movs	r3, #0
 801b706:	f7e4 ff79 	bl	80005fc <__aeabi_dcmpgt>
 801b70a:	2800      	cmp	r0, #0
 801b70c:	d0c0      	beq.n	801b690 <floor+0x48>
 801b70e:	2c00      	cmp	r4, #0
 801b710:	da0a      	bge.n	801b728 <floor+0xe0>
 801b712:	2e14      	cmp	r6, #20
 801b714:	d101      	bne.n	801b71a <floor+0xd2>
 801b716:	3401      	adds	r4, #1
 801b718:	e006      	b.n	801b728 <floor+0xe0>
 801b71a:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 801b71e:	2301      	movs	r3, #1
 801b720:	40b3      	lsls	r3, r6
 801b722:	441d      	add	r5, r3
 801b724:	4545      	cmp	r5, r8
 801b726:	d3f6      	bcc.n	801b716 <floor+0xce>
 801b728:	ea25 0507 	bic.w	r5, r5, r7
 801b72c:	e7b0      	b.n	801b690 <floor+0x48>
 801b72e:	2500      	movs	r5, #0
 801b730:	462c      	mov	r4, r5
 801b732:	e7ad      	b.n	801b690 <floor+0x48>
 801b734:	f3af 8000 	nop.w
 801b738:	8800759c 	.word	0x8800759c
 801b73c:	7e37e43c 	.word	0x7e37e43c
 801b740:	bff00000 	.word	0xbff00000
 801b744:	000fffff 	.word	0x000fffff

0801b748 <_init>:
 801b748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b74a:	bf00      	nop
 801b74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b74e:	bc08      	pop	{r3}
 801b750:	469e      	mov	lr, r3
 801b752:	4770      	bx	lr

0801b754 <_fini>:
 801b754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b756:	bf00      	nop
 801b758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801b75a:	bc08      	pop	{r3}
 801b75c:	469e      	mov	lr, r3
 801b75e:	4770      	bx	lr
